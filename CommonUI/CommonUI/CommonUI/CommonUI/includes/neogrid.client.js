// RADXLGridScripts.js
//


Type.registerNamespace('com.ivp.rad.controls.neogrid.scripts');

////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.FormatterDataType

com.ivp.rad.controls.neogrid.scripts.FormatterDataType = function () {
    /// <field name="none" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="string" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="number" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="currency" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="percentage" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.FormatterDataType.prototype = {
    none: 0,
    string: 1,
    number: 2,
    currency: 3,
    percentage: 4
}
com.ivp.rad.controls.neogrid.scripts.FormatterDataType.registerEnum('com.ivp.rad.controls.neogrid.scripts.FormatterDataType', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.Unit

com.ivp.rad.controls.neogrid.scripts.Unit = function () {
    /// <field name="none" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="thousands" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="millions" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="billions" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.Unit.prototype = {
    none: 0,
    thousands: 1,
    millions: 2,
    billions: 3
}
com.ivp.rad.controls.neogrid.scripts.Unit.registerEnum('com.ivp.rad.controls.neogrid.scripts.Unit', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.NegativeValue

com.ivp.rad.controls.neogrid.scripts.NegativeValue = function () {
    /// <field name="DEFAULT" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="DEFAULTBRAC" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="COLORED" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="COLOREDBRAC" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.NegativeValue.prototype = {
    DEFAULT: 0,
    DEFAULTBRAC: 1,
    COLORED: 2,
    COLOREDBRAC: 3
}
com.ivp.rad.controls.neogrid.scripts.NegativeValue.registerEnum('com.ivp.rad.controls.neogrid.scripts.NegativeValue', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ScrollDirection

com.ivp.rad.controls.neogrid.scripts.ScrollDirection = function () {
    /// <field name="NONE" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="UP" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="DOWN" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.ScrollDirection.prototype = {
    NONE: 0,
    UP: 1,
    DOWN: 2
}
com.ivp.rad.controls.neogrid.scripts.ScrollDirection.registerEnum('com.ivp.rad.controls.neogrid.scripts.ScrollDirection', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.MathematicalOperationType

com.ivp.rad.controls.neogrid.scripts.MathematicalOperationType = function () {
    /// <field name="NONE" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ALWAYS" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ONROWCHECK" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.MathematicalOperationType.prototype = {
    NONE: 0,
    ALWAYS: 1,
    ONROWCHECK: 2
}
com.ivp.rad.controls.neogrid.scripts.MathematicalOperationType.registerEnum('com.ivp.rad.controls.neogrid.scripts.MathematicalOperationType', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.BindChildGrid

com.ivp.rad.controls.neogrid.scripts.BindChildGrid = function com_ivp_rad_controls_neogrid_scripts_BindChildGrid(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="idcolumnValue" type="String">
    /// </field>
    /// <field name="rowid" type="String">
    /// </field>
    this._grid = grid;
    var serviceCompletedEventHandler = Function.createDelegate(this, this.serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.BindChildGrid.prototype = {
    _grid: null,
    idcolumnValue: null,
    rowid: null,

    serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_BindChildGrid$serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_CHILD_GRID) {
            var idcolumnnamesforchildgrid = [];
            for (var i = 1; i < this._grid.get_GridInfo().IdColumnNames.length; i++) {
                Array.add(idcolumnnamesforchildgrid, this._grid.get_GridInfo().IdColumnNames[i].toString());
            }
            var MasterGridId = this._grid.get_GridInfo().MasterGridId;
            var chilGridMappedWidth = serviceInfo.serializedInfo.ChildGridMappedWidth;
            var ClientSideData = serviceInfo.serializedInfo.ChildGridData;
            var lastChildMappingList = [];
            lastChildMappingList = serviceInfo.serializedInfo.LastChildMappingList;
            if (ClientSideData !== '') {
                var div = document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv');
                serviceInfo.serializedInfo.RowID = serviceInfo.serializedInfo.RowID.replace(new RegExp('[.|-]', 'gi'), '_');
                serviceInfo.serializedInfo.RowID = serviceInfo.serializedInfo.RowID.replace(new RegExp('[ ]', 'gi'), '_');
                var currentRow = document.getElementById(serviceInfo.serializedInfo.RowID + 'fa-plus').parentNode;
                var className = window.jQuery(currentRow).find('DIV[class*=' + 'fa-plus' + ']')[0].className;
                window.jQuery(currentRow).find('DIV[class*=' + 'fa-plus' + ']')[0].className = className.replace('fa fa-plus', 'fa fa-minus');
                var childGridParent = this._grid.elementHelper.get_divElement();
                var childGrid = this._grid.elementHelper.get_divElement();
                var id = serviceInfo.serializedInfo.IdColumnValue.replace(new RegExp('[.|-]', 'gi'), '_');
                id = id.replace(new RegExp('[ ]', 'gi'), '_');
                childGrid.id = this._grid.get_GridInfo().GridId + '_' + id + '_ChildRow';
                childGridParent.style.width = (currentRow.offsetWidth - 19) + 'px';
                if (eval('$find(\'' + this._grid.get_GridInfo().MasterGridId + '\').get_GridInfo().GridTheme') === com.ivp.rad.controls.neogrid.scripts.info.Theme.masterChildGridTheme) {
                    childGridParent.className = 'xlneochildgridParentMasterChildTheme';
                }
                else {
                    childGridParent.className = 'xlneochildgridParent';
                }
                childGrid.style.position = 'relative';
                childGridParent.appendChild(childGrid);
                childGridParent.style.backgroundColor = '#ffffff ! important';
                currentRow.appendChild(childGridParent);
                childGridParent.style.border = '1px solid #EBE7E7';
                childGridParent.style.marginLeft = '19px';
                childGridParent.style.position = 'relative';
                childGridParent.style.top = '22px';
                var temporaryArrayListOfCustomInfo = [];
                var temporaryRaiseGridRenderInfo = [];
                var temporaryColumnsToHideList = [];
                var temporaryColumnNameMappingList = [];
                var temporaryColumnWidthList = [];
                var temporaryCustomFormatMappingList = [];
                var temporaryColumnsWithoutClientSideFunctionalityList = [];
                var tempRequirePagingMasterChildGrid = [];
                var tempPageSizeMasterChildGrid = [];
                var tempMasterChildEditableColumns = [];
                var tempMasterChildEditableColumnsInfo = [];
                var tempCustomFormatInfoClientSideList = [];
                if (this._grid.get_GridInfo().CustomInfoList != null) {
                    temporaryArrayListOfCustomInfo = Array.clone(this._grid.get_GridInfo().CustomInfoList);
                    Array.removeAt(temporaryArrayListOfCustomInfo, 0);
                }
                if (this._grid.get_GridInfo().RaiseGridRenderList != null) {
                    temporaryRaiseGridRenderInfo = Array.clone(this._grid.get_GridInfo().RaiseGridRenderList);
                    Array.removeAt(temporaryRaiseGridRenderInfo, 0);
                }
                if (this._grid.get_GridInfo().ColumnsToHideList != null) {
                    temporaryColumnsToHideList = Array.clone(this._grid.get_GridInfo().ColumnsToHideList);
                    Array.removeAt(temporaryColumnsToHideList, 0);
                }
                if (this._grid.get_GridInfo().ColumnsWithoutClientSideFunctionalityList != null) {
                    temporaryColumnsWithoutClientSideFunctionalityList = Array.clone(this._grid.get_GridInfo().ColumnsWithoutClientSideFunctionalityList);
                    Array.removeAt(temporaryColumnsWithoutClientSideFunctionalityList, 0);
                }
                if (this._grid.get_GridInfo().ColumnNameMappingList != null) {
                    temporaryColumnNameMappingList = Array.clone(this._grid.get_GridInfo().ColumnNameMappingList);
                    Array.removeAt(temporaryColumnNameMappingList, 0);
                }
                if (this._grid.get_GridInfo().CustomFormatInfoClientSideList != null) {
                    tempCustomFormatInfoClientSideList = Array.clone(this._grid.get_GridInfo().CustomFormatInfoClientSideList);
                    Array.removeAt(tempCustomFormatInfoClientSideList, 0);
                }
                if (this._grid.get_GridInfo().ColumnWidthList != null) {
                    temporaryColumnWidthList = Array.clone(this._grid.get_GridInfo().ColumnWidthList);
                    Array.removeAt(temporaryColumnWidthList, 0);
                }
                if (this._grid.get_GridInfo().RequirePagingMasterChildGrid != null) {
                    tempRequirePagingMasterChildGrid = Array.clone(this._grid.get_GridInfo().RequirePagingMasterChildGrid);
                    Array.removeAt(tempRequirePagingMasterChildGrid, 0);
                }
                else {
                    Array.add(tempRequirePagingMasterChildGrid, false);
                }
                if (this._grid.get_GridInfo().PageSizeMasterChildGrid != null) {
                    tempPageSizeMasterChildGrid = Array.clone(this._grid.get_GridInfo().PageSizeMasterChildGrid);
                    Array.removeAt(tempPageSizeMasterChildGrid, 0);
                }
                else {
                    Array.add(tempPageSizeMasterChildGrid, 500);
                }
                if (this._grid.get_GridInfo().MasterChildEditableColumns != null) {
                    tempMasterChildEditableColumns = Array.clone(this._grid.get_GridInfo().MasterChildEditableColumns);
                    Array.removeAt(tempMasterChildEditableColumns, 0);
                }
                if (this._grid.get_GridInfo().MasterChildEditableColumnInfo != null) {
                    tempMasterChildEditableColumnsInfo = Array.clone(this._grid.get_GridInfo().MasterChildEditableColumnInfo);
                    Array.removeAt(tempMasterChildEditableColumnsInfo, 0);
                }
                var gridchildlevel = this._grid.get_GridInfo().GridChildLevel + 1;
                var masterChildMap = (currentRow.getAttribute('masterChildColumnMap') != null) ? currentRow.getAttribute('masterChildColumnMap').toString() : '';
                var childGridIds = eval('$find(this._grid.get_GridInfo().MasterGridId).get_GridInfo().AllChildGridIds');
                if (childGridIds == null) {
                    childGridIds = [];
                }
                if (!Array.contains(childGridIds, this._grid.get_GridInfo().MasterGridId)) {
                    Array.add(childGridIds, this._grid.get_GridInfo().MasterGridId);
                }
                Array.add(childGridIds, childGrid.id);
                eval('$find(this._grid.get_GridInfo().MasterGridId).get_GridInfo().AllChildGridIds = childGridIds');
                eval('ChildGrid(\'' + childGrid.id + '\',\'' + ClientSideData + '\',\'' + this._grid.get_GridInfo().GridId + '\',\'' + this._grid.get_GridInfo().MasterGridId + '\',\'' + serviceInfo.serializedInfo.RowID + '\',' + Sys.Serialization.JavaScriptSerializer.serialize(serviceInfo.serializedInfo.MasterChildMapping) + ',' + false + ',\'' + idcolumnnamesforchildgrid[0].toString() + '\',' + Sys.Serialization.JavaScriptSerializer.serialize(idcolumnnamesforchildgrid) + ',\'' + this._grid.get_GridInfo().IdColumnName + '\',' + Sys.Serialization.JavaScriptSerializer.serialize(temporaryArrayListOfCustomInfo) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(temporaryRaiseGridRenderInfo) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(temporaryColumnsToHideList) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(temporaryColumnNameMappingList) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(tempCustomFormatInfoClientSideList) + ',' + gridchildlevel + ',' + Sys.Serialization.JavaScriptSerializer.serialize(chilGridMappedWidth) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ColumnAlignmentMapping) + ',' + this._grid.get_GridInfo().RequireColumnAlign + ',\'' + masterChildMap + '\',' + Sys.Serialization.JavaScriptSerializer.serialize(lastChildMappingList) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(tempRequirePagingMasterChildGrid) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(tempPageSizeMasterChildGrid) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(tempMasterChildEditableColumns) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(tempMasterChildEditableColumnsInfo) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(temporaryColumnWidthList) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(temporaryColumnsWithoutClientSideFunctionalityList) + ');');
                com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._grid.elementInfo.get_element());
                var currentparentid = this._grid.get_GridInfo().ParentGridId;
                while (currentparentid !== '' && currentparentid != null) {
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + currentparentid + '\').elementInfo.get_element()'));
                    eval('$find(\'' + currentparentid + '\').manageEvents.addEventHandler(\'' + currentparentid + '\');');
                    currentparentid = eval('$find(\'' + currentparentid + '\').get_GridInfo().ParentGridId');
                }
                com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + MasterGridId + '\').elementInfo.get_element()'));
                eval('$find(\'' + MasterGridId + '\').manageEvents.addEventHandler(\'' + MasterGridId + '\');');
            }
        }
    },

    _getChildGridData: function com_ivp_rad_controls_neogrid_scripts_BindChildGrid$_getChildGridData(currentRowIndex, currentrowid, idcolumnvalue) {
        /// <param name="currentRowIndex" type="Number" integer="true">
        /// </param>
        /// <param name="currentrowid" type="String">
        /// </param>
        /// <param name="idcolumnvalue" type="String">
        /// </param>
        this.idcolumnValue = idcolumnvalue;
        this.rowid = currentrowid;
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_CHILD_GRID, idcolumnvalue + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_CHILD_GRID);
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.Body

com.ivp.rad.controls.neogrid.scripts.Body = function com_ivp_rad_controls_neogrid_scripts_Body(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    this._grid = grid;
    this._prepareGridBody();
}
com.ivp.rad.controls.neogrid.scripts.Body.prototype = {
    _grid: null,

    _prepareGridBody: function com_ivp_rad_controls_neogrid_scripts_Body$_prepareGridBody() {
        var eventtype = '';
        if (!this._grid.get_GridInfo().ClientSideGrid) {
            eventtype = com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_DEFAULT_VIEW;
        }
        else {
            eventtype = com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING;
        }
        this._grid.elementInfo.get_bodyDiv().innerHTML = '&nbsp;';
        this._grid.gridEngine.executeWCFProcess(eventtype, '', eventtype);
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ClientDataController

com.ivp.rad.controls.neogrid.scripts.ClientDataController = function com_ivp_rad_controls_neogrid_scripts_ClientDataController(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="isReadyToHighlight" type="Boolean">
    /// </field>
    /// <field name="_selectedCells" type="Array">
    /// </field>
    /// <field name="_selectedCellsClickedOnce" type="Array">
    /// </field>
    /// <field name="_selectedRow" type="Array">
    /// </field>
    /// <field name="_selectedGroupRowIds" type="Array">
    /// </field>
    /// <field name="_selectedHiddenGroupRowIds" type="Array">
    /// </field>
    /// <field name="_SEPARATOR" type="String" static="true">
    /// </field>
    /// <field name="_removedCell" type="String">
    /// </field>
    /// <field name="_isCellSelected" type="Boolean">
    /// </field>
    /// <field name="_isCellUnSelectedCalled" type="Boolean">
    /// </field>
    /// <field name="_previouslySelectedCheckBox" type="Object" domElement="true">
    /// </field>
    /// <field name="_previouslyUnSelectedCheckBox" type="Object" domElement="true">
    /// </field>
    this._selectedGroupRowIds = [];
    this._selectedHiddenGroupRowIds = [];
    this._grid = grid;
    this._selectedCells = [];
    this._selectedCellsClickedOnce = [];
    this._selectedRow = [];
}
com.ivp.rad.controls.neogrid.scripts.ClientDataController.prototype = {
    _grid: null,
    isReadyToHighlight: false,
    _selectedCells: null,
    _selectedCellsClickedOnce: null,
    _selectedRow: null,
    _removedCell: '',
    _isCellSelected: false,
    _isCellUnSelectedCalled: false,
    _previouslySelectedCheckBox: null,
    _previouslyUnSelectedCheckBox: null,

    checkRow: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$checkRow(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var checkbox;
		if (this._grid.get_GridInfo().RequireMathematicalOperations && !this._grid.get_GridInfo().ShowTotalRecordCount) {
           $(".xlMathematialFooterBody").scrollLeft($("#" + this._grid.get_GridInfo().GridId + "_bodyDiv").scrollLeft()) 
		}
        if (e.target.getAttribute('isCheckBox') != null && Boolean.parse(e.target.getAttribute('isCheckBox').toString())) {
            if (Boolean.parse(e.target.getAttribute('isheader').toString())) {
                if ((e.target).checked) {
                    this._selectedGroupRowIds = this._checkUncheckAllRows(true);
                    if (this._grid.get_GridInfo().RequireInfiniteScroll) {
                        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL, Sys.Serialization.JavaScriptSerializer.serialize(this._selectedGroupRowIds) + 'Ю' + 'true', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL);
                    }
                    else {
                        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL, Sys.Serialization.JavaScriptSerializer.serialize(this._selectedGroupRowIds) + 'Ю' + 'false', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL);
                    }
                    if (this._grid.footer._totalPages > 1) {
                        if (!this._grid.get_GridInfo().RequireInfiniteScroll) {
                            this._showHideSelectAllDiv(true);
                        }
                    }
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv' + '\").find(\".dataColumn_0\").find(\"input\").attr({\'ischecked\' : true})');
                }
                else {
                    this._showHideSelectAllDiv(false);
                    this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED_ALL, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED_ALL);
                    this._checkUncheckAllRows(false);
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv' + '\").find(\".dataColumn_0\").find(\"input\").attr({\'ischecked\' : false})');
                }
            }
            else if (e.target.getAttribute('isGroupHeader') != null) {
                if (Boolean.parse(e.target.getAttribute('isGroupHeader').toString())) {
                    var event_type = '';
                    var groupRowChecBoxIds = [];
                    if ((e.target).checked) {
                        event_type = com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_GROUP_HEADER_CHECKBOX_SELECTED;
                    }
                    else {
                        event_type = com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_GROUP_HEADER_CHECKBOX_UNSELECTED;
                    }
                    groupRowChecBoxIds = [];
                    Array.add(groupRowChecBoxIds, e.target.parentNode.parentNode.parentNode.getAttribute('groupRowId').toString());
                    this._grid.gridEngine.executeWCFProcess(event_type, Sys.Serialization.JavaScriptSerializer.serialize(groupRowChecBoxIds), event_type);
                }
            }
            else {
                var row = null;
                var idColumns = [];
                if ((e.target).checked) {
                    if (this._previouslySelectedCheckBox != null && this._grid.get_CheckBoxSelectionMode() === com.ivp.rad.controls.neogrid.scripts.info.CheckBoxSelectionMode.single) {
                        if (this._previouslySelectedCheckBox.parentNode == null) {
                            var findElementLastChecked = window.jQuery(this._grid.get_element()).find('input[idColumnValue=' + this._previouslySelectedCheckBox.getAttribute('idColumnValue').toString().replace('|', '\\|') + ']').first();
                            if (findElementLastChecked != null && findElementLastChecked.length > 0) {
                                this._previouslySelectedCheckBox = findElementLastChecked[0];
                            }
                        }
                        this._previouslySelectedCheckBox.checked = false;
                        row = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(this._previouslySelectedCheckBox, 'DIV').parentNode;
                        if (row != null) {
                            row.className = this._findClassName(row);
                            this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[com.ivp.rad.controls.neogrid.scripts.GridUIHelper.rowIndex(row)].className = row.className;
                        }
                        Array.add(idColumns, this._previouslySelectedCheckBox.getAttribute('idColumn').toString());
                        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED, Sys.Serialization.JavaScriptSerializer.serialize(idColumns), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED);
                        Array.clear(idColumns);
                    }
                    if (e.shiftKey && this._previouslySelectedCheckBox != null && this._previouslySelectedCheckBox.parentNode != null) {
                        var rowIndex = Number.parseInvariant(com.ivp.rad.rscriptutils.RSCommonScripts.findControl(this._previouslySelectedCheckBox, 'DIV').parentNode.getAttribute('rowIndex').toString());
                        var lastRowIndex = Number.parseInvariant(com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV').parentNode.getAttribute('rowIndex').toString());
                        if (rowIndex > lastRowIndex) {
                            rowIndex = rowIndex + lastRowIndex;
                            lastRowIndex = rowIndex - lastRowIndex;
                            rowIndex = rowIndex - lastRowIndex;
                        }
                        for (var i = rowIndex; i <= lastRowIndex; i++) {
                            //var rowC = (com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV')).parentNode.parentNode.children[i];
							var rowC = $("#" + this._grid.get_GridInfo().GridId).find('div[rowindex=' + i + ']')[0];
                            if (rowC != null && rowC.getAttribute('isGroupHeader') == null && rowC.getAttribute('isGroupFooter') == null) {
                                var elems = rowC.getElementsByTagName('INPUT');
                                rowC.className = this._grid.get_GridInfo().CssCheckedRow;
                                rowC.children[0].children[0].setAttribute('ischecked', true);
                                for (var k = 0; k < $("#" + this._grid.get_GridInfo().GridId).find('div[rowindex=' + i + ']').length; k++) {
                                    $("#" + this._grid.get_GridInfo().GridId).find('div[rowindex=' + i + ']')[k].className = this._grid.get_GridInfo().CssCheckedRow;
                                }
                                for (var j = 0; j < elems.length; j++) {
                                    var eleme = elems[j];
                                    if (eleme.type.toUpperCase() === 'CHECKBOX') {
                                        (eleme).checked = true;
                                        Array.add(idColumns, eleme.getAttribute('idColumn').toString());
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        Array.add(idColumns, e.target.getAttribute('idColumn').toString());
                        row = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV').parentNode;
                        var index = eval('$(row).index()');
                        if (row != null) {
                            row.className = this._grid.get_GridInfo().CssCheckedRow;
                            row.children[0].children[0].setAttribute('ischecked', true);
                            document.getElementById(this._grid.get_id() + '_repeatedBodyDiv').children[index].className = this._grid.get_GridInfo().CssCheckedRow;
                            if (this._grid.editGrid.frozenColumns.length > 0) {
                                this._grid.elementInfo.get_frozenInnerTable().children[index].className = this._grid.get_GridInfo().CssCheckedRow;
                            }
                        }
                    }
                    checkbox = false;
                    var $dict1 = this._grid.get_GridInfo().GroupHeaderInfo;
                    for (var $key2 in $dict1) {
                        var entry = { key: $key2, value: $dict1[$key2] };
                        entry.key.toString();
                        var idColumnValues = entry.value;
                        for (var i = 0; i < idColumnValues.length; i++) {
                            if (idColumnValues[i].toString() === (e.target).getAttribute('idColumnValue').toString() && !this._grid.get_GridInfo().groupRowIdFlag) {
                                this._grid.get_GridInfo().groupRowId = entry.key.toString();
                                break;
                            }
                        }
                        if (this._grid.get_GridInfo().groupRowId !== '') {
                            checkbox = this.checkGroupHeaderCheckBox(this._grid.get_GridInfo().groupRowId, idColumnValues.length);
                            break;
                        }
                    }
                    if (checkbox) {
                        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED, Sys.Serialization.JavaScriptSerializer.serialize(idColumns) + 'Ю' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().groupHeaderToCheck), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED);
                    }
                    else {
                        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED, Sys.Serialization.JavaScriptSerializer.serialize(idColumns), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED);
                    }
                    this._previouslySelectedCheckBox = e.target;
                }
                else {
                    this._previouslySelectedCheckBox = null;
                    if (this._previouslyUnSelectedCheckBox != null && e.shiftKey) {
                        var rowIndex = Number.parseInvariant(com.ivp.rad.rscriptutils.RSCommonScripts.findControl(this._previouslyUnSelectedCheckBox, 'DIV').parentNode.getAttribute('rowIndex').toString());
                        var lastRowIndex = Number.parseInvariant(com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV').parentNode.getAttribute('rowIndex').toString());
                        if (rowIndex > lastRowIndex) {
                            rowIndex = rowIndex + lastRowIndex;
                            lastRowIndex = rowIndex - lastRowIndex;
                            rowIndex = rowIndex - lastRowIndex;
                        }
                        for (var i = rowIndex; i <= lastRowIndex; i++) {
                            //var rowC = (com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV')).parentNode.parentNode.children[i];
							var rowC = $("#" + this._grid.get_GridInfo().GridId).find('div[rowindex=' + i + ']')[0];
                            if (rowC != null && rowC.getAttribute('isGroupHeader') == null && rowC.getAttribute('isGroupFooter') == null) {
                                var elems = rowC.getElementsByTagName('INPUT');
                                rowC.className = this._findClassName(rowC);
                                rowC.children[0].children[0].setAttribute('ischecked', false);
								for (var k = 0; k < $("#" + this._grid.get_GridInfo().GridId).find('div[rowindex=' + i + ']').length; k++) {
                                    $("#" + this._grid.get_GridInfo().GridId).find('div[rowindex=' + i + ']')[k].className = this._findClassName($("#" + this._grid.get_GridInfo().GridId).find('div[rowindex=' + i + ']')[k]);
                                }
                                for (var j = 0; j < elems.length; j++) {
                                    var eleme = elems[j];
                                    if (eleme.type.toUpperCase() === 'CHECKBOX') {
                                        (eleme).checked = false;
                                        Array.add(idColumns, eleme.getAttribute('idColumn').toString());
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        Array.add(idColumns, e.target.getAttribute('idColumn').toString());
                        row = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV').parentNode;
                        var index = eval('$(row).index()');
                        if (row != null) {
                            row.className = this._findClassName(row);
                            row.children[0].children[0].setAttribute('ischecked', false);
                            document.getElementById(this._grid.get_id() + '_repeatedBodyDiv').children[index].className = row.className;
                            if (this._grid.editGrid.frozenColumns.length > 0) {
                                this._grid.elementInfo.get_frozenInnerTable().children[index].className = row.className;
                            }
                        }
                    }
                    checkbox = false;
                    var $dict3 = this._grid.get_GridInfo().GroupHeaderInfo;
                    for (var $key4 in $dict3) {
                        var entry = { key: $key4, value: $dict3[$key4] };
                        entry.key.toString();
                        var idColumnValues = entry.value;
                        for (var i = 0; i < idColumnValues.length; i++) {
                            if (idColumnValues[i].toString() === (e.target).getAttribute('idColumnValue').toString()) {
                                this._grid.get_GridInfo().groupRowId = entry.key.toString();
                                this._grid.get_GridInfo().groupRowIdFlag = false;
                                break;
                            }
                        }
                        if (this._grid.get_GridInfo().groupRowId !== '') {
                            checkbox = this.unCheckGroupHeaderCheckBox(this._grid.get_GridInfo().groupRowId);
                            break;
                        }
                    }
                    if (checkbox) {
                        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED, Sys.Serialization.JavaScriptSerializer.serialize(idColumns) + 'Ю' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().groupHeaderToUnCheck), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED);
                    }
                    else {
                        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED, Sys.Serialization.JavaScriptSerializer.serialize(idColumns), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED);
                    }
                    this._previouslyUnSelectedCheckBox = e.target;
                }
            }
        }
        else {
            if (e.target.getAttribute('value') != null) {
                if (Boolean.parse(e.target.getAttribute('value').toString())) {
                    this._selectedHiddenGroupRowIds = this._checkAcrossPages(true);
                    this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL, Sys.Serialization.JavaScriptSerializer.serialize(this._selectedGroupRowIds) + 'Ю' + 'true', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL);
                }
                this._showHideSelectAllDiv(false);
            }
        }
        if (this._grid.get_GridInfo().RequireMathematicalOperations || this._grid.get_GridInfo().ShowTotalRecordCount) {
            if (this._grid.elementInfo.get_bodyInnerDiv().offsetHeight < this._grid.elementInfo.get_bodyInnerTable().offsetHeight) {
                if (this._grid.elementInfo.get_bodyInnerDiv().firstChild.offsetWidth < this._grid.elementInfo.get_bodyInnerDiv().offsetWidth) {
                    if (this._grid.elementInfo.get_frozenMathOpFooter() != null) {
                        this._grid.elementInfo.get_frozenMathOpFooter().parentNode.style.bottom = '11px';
                    }
                    if (document.getElementById(this._grid.get_GridInfo().GridId + '_FrozenNewMathOpFooter') != null) {
                        document.getElementById(this._grid.get_GridInfo().GridId + '_FrozenNewMathOpFooter').parentNode.style.bottom = '11px';
                    }
                    if (this._grid.elementInfo.get_mathOpFooter() != null) {
                        this._grid.elementInfo.get_mathOpFooter().parentNode.style.bottom = '11px';
                    }
                    if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow') != null) {
                        if(this._grid.get_GridInfo().checkedRowIndices.length == 0)
						{
							document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow').style.display = 'none';
						}
                    }
                }
                else {
                    if (this._grid.elementInfo.get_frozenMathOpFooter() != null) {
                        this._grid.elementInfo.get_frozenMathOpFooter().parentNode.style.bottom = '13px';
                    }
                    if (document.getElementById(this._grid.get_GridInfo().GridId + '_FrozenNewMathOpFooter') != null) {
                        document.getElementById(this._grid.get_GridInfo().GridId + '_FrozenNewMathOpFooter').parentNode.style.bottom = '13px';
                    }
                    if (this._grid.elementInfo.get_mathOpFooter() != null) {
                        this._grid.elementInfo.get_mathOpFooter().parentNode.style.bottom = '13px';
                    }
                }
            }
        }
    },

    checkGroupHeaderCheckBox: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$checkGroupHeaderCheckBox(grouprowid, groupCheckboxCount) {
        /// <param name="grouprowid" type="String">
        /// </param>
        /// <param name="groupCheckboxCount" type="Number" integer="true">
        /// </param>
        /// <returns type="Boolean"></returns>
        var count = 0;
        var checkboxidcount = 0;
        var groupfoundflag = false;
        var checkflag = false;
        var checkbox = null;
        var groupHeaderids = [];
        var rows = this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children;
        for (var i = 0; i < rows.length; i++) {
            if (((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i]) != null) {
                checkbox = (((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i]).children[0].getElementsByTagName('INPUT')[0]);
            }
            if (checkbox != null) {
                if (checkbox.getAttribute('isGroupHeader') != null) {
                    if (Boolean.parse(checkbox.getAttribute('isGroupHeader').toString())) {
                        if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].getAttribute('groupRowId').toString() === grouprowid.split('^')[grouprowid.split('^').length - 1]) {
                            checkflag = true;
                            continue;
                        }
                        else {
                            checkflag = false;
                            continue;
                        }
                    }
                }
                if (checkflag && checkbox.getAttribute('isGroupHeader') == null) {
                    if (checkbox.checked) {
                        count++;
                    }
                }
            }
        }
        if (count === groupCheckboxCount) {
            this._grid.get_GridInfo().groupRowIdFlag = true;
        }
        else {
            this._grid.get_GridInfo().groupRowIdFlag = false;
        }
        if (this._grid.get_GridInfo().groupRowIdFlag) {
            var values = [];
            var groupcheckbox = new Sys.StringBuilder();
            Array.addRange(values, grouprowid.split('^'));
            for (var i = 0; i < values.length; i++) {
                groupfoundflag = true;
                if (groupcheckbox.toString().length === 0) {
                    groupcheckbox.append(values[i].toString());
                }
                else {
                    groupcheckbox.append('^');
                    groupcheckbox.append(values[i].toString());
                }
                var $dict1 = this._grid.get_GridInfo().GroupHeaderInfo;
                for (var $key2 in $dict1) {
                    var entry = { key: $key2, value: $dict1[$key2] };
                    if (entry.key.toString() !== grouprowid) {
                        if (entry.key == groupcheckbox.toString()) {
                            groupfoundflag = this.checkAllGroupHeaders(entry.value);
                            if (!groupfoundflag) {
                                break;
                            }
                        }
                        else {
                            groupfoundflag = true;
                            checkboxidcount = i;
                        }
                    }
                }
                if (groupfoundflag) {
                    break;
                }
            }
            if (groupfoundflag) {
                this._grid.get_GridInfo().groupHeaderToCheck = [];
                for (var i = checkboxidcount; i < values.length; i++) {
                    Array.add(this._grid.get_GridInfo().groupHeaderToCheck, values[i]);
                }
            }
        }
        return groupfoundflag;
    },

    checkAllGroupHeaders: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$checkAllGroupHeaders(Values) {
        /// <param name="Values" type="Array">
        /// </param>
        /// <returns type="Boolean"></returns>
        var count = 0;
        for (var i = 0; i < Values.length; i++) {
            if (this._grid.get_GridInfo().checkedRowIndices != null) {
                for (var j = 0; j < this._grid.get_GridInfo().checkedRowIndices.length; j++) {
                    if (Values[i] === this._grid.get_GridInfo().checkedRowIndices[j]) {
                        count++;
                    }
                }
            }
        }
        if (count === Values.length) {
            return true;
        }
        else {
            return false;
        }
    },

    unCheckGroupHeaderCheckBox: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$unCheckGroupHeaderCheckBox(grouprowid) {
        /// <param name="grouprowid" type="String">
        /// </param>
        /// <returns type="Boolean"></returns>
        var checkboxidcount = 0;
        var groupfoundflag = false;
        var values = [];
        var groupcheckbox = new Sys.StringBuilder();
        Array.addRange(values, grouprowid.split('^'));
        for (var i = 0; i < values.length; i++) {
            if (groupcheckbox.toString().length === 0) {
                groupcheckbox.append(values[i].toString());
            }
            else {
                groupcheckbox.append('^');
                groupcheckbox.append(values[i].toString());
            }
            var $dict1 = this._grid.get_GridInfo().GroupHeaderInfo;
            for (var $key2 in $dict1) {
                var entry = { key: $key2, value: $dict1[$key2] };
                if (entry.key.toString() !== grouprowid) {
                    if (entry.key.startsWith(values[i].toString())) {
                        continue;
                    }
                    else {
                        checkboxidcount = i;
                        groupfoundflag = true;
                        break;
                    }
                }
            }
            if (groupfoundflag) {
                break;
            }
        }
        if (groupfoundflag) {
            for (var i = checkboxidcount; i < values.length; i++) {
                Array.add(this._grid.get_GridInfo().groupHeaderToUnCheck, values[i]);
            }
        }
        return groupfoundflag;
    },

    findGroupHeaderId: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$findGroupHeaderId(grouprowid) {
        /// <param name="grouprowid" type="String">
        /// </param>
        /// <returns type="Array"></returns>
        var checkboxidcount = 0;
        var groupfoundflag = false;
        var groupHeaderIds = [];
        var values = [];
        var groupcheckbox = new Sys.StringBuilder();
        Array.addRange(values, grouprowid.split('^'));
        for (var i = 0; i < values.length; i++) {
            groupfoundflag = true;
            if (groupcheckbox.toString().length === 0) {
                groupcheckbox.append(values[i].toString());
            }
            else {
                groupcheckbox.append('^');
                groupcheckbox.append(values[i].toString());
            }
            var $dict1 = this._grid.get_GridInfo().GroupHeaderInfo;
            for (var $key2 in $dict1) {
                var entry = { key: $key2, value: $dict1[$key2] };
                if (entry.key.toString() !== grouprowid) {
                    if (entry.key.startsWith(groupcheckbox.toString())) {
                        groupfoundflag = this.checkAllGroupHeaders(entry.value);
                        if (!groupfoundflag) {
                            break;
                        }
                    }
                    else {
                        groupfoundflag = true;
                        checkboxidcount = i;
                    }
                }
            }
            if (groupfoundflag) {
                break;
            }
        }
        if (groupfoundflag) {
            this._grid.get_GridInfo().groupHeaderToCheck = [];
            for (var i = checkboxidcount; i < values.length; i++) {
                Array.add(groupHeaderIds, values[i]);
            }
        }
        return groupHeaderIds;
    },

    selectRow: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$selectRow(clickedRow) {
        /// <param name="clickedRow" type="Object" domElement="true">
        /// </param>
        var idColumnValue = clickedRow.getAttribute('idcolumnvalue').toString();
        var currentSelectedState = Boolean.parse(clickedRow.getAttribute('isselected').toString());
        var rowindex = eval('$(clickedRow).index()');
        if (!currentSelectedState) {
            clickedRow.className = 'xlneoselectedRow';
            clickedRow.setAttribute('isselected', 'true');
            var tableForozen = this._grid.elementInfo.get_frozenBodyDiv().children[0].children[1].children[0];
            var actualTableFrozen = document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_newbodyDiv').children[0].children[0].children[0];
            if (tableForozen.children.length > rowindex) {
                tableForozen.children[rowindex].className = 'xlneoselectedRow';
            }
            if (actualTableFrozen.children.length > rowindex) {
                actualTableFrozen.children[rowindex].className = clickedRow.className;
            }
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_SELECTED_ONE, idColumnValue, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_SELECTED_ONE);
            Array.add(this._selectedRow, idColumnValue);
        }
        else {
            clickedRow.className = this._findClassName(clickedRow);
            clickedRow.setAttribute('isselected', 'false');
            var tableForozen = this._grid.elementInfo.get_frozenBodyDiv().children[0].children[1].children[0];
            var actualTableFrozen = document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_newbodyDiv').children[0].children[0].children[0];
            if (tableForozen.children.length > rowindex) {
                tableForozen.children[rowindex].className = clickedRow.className;
            }
            if (actualTableFrozen.children.length > rowindex) {
                actualTableFrozen.children[rowindex].className = clickedRow.className;
            }
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_UNSELECTED, idColumnValue, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_UNSELECTED);
            Array.remove(this._selectedRow, idColumnValue);
        }
    },

    _cellSelectClick: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$_cellSelectClick(cell, row) {
        /// <param name="cell" type="Object" domElement="true">
        /// </param>
        /// <param name="row" type="Object" domElement="true">
        /// </param>
        var isSelected = Boolean.parse(cell.getAttribute('iscellselected').toString());
        var idColumnValue = row.getAttribute('idcolumnvalue').toString();
        if (!isSelected) {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_SELECTED, cell.getAttribute('columnName').toString() + com.ivp.rad.controls.neogrid.scripts.ClientDataController._SEPARATOR + idColumnValue, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_SELECTED);
            cell.setAttribute('iscellselected', 'true');
            if (cell.style.backgroundColor !== '') {
                cell.setAttribute('OldBackGroundColor', cell.style.backgroundColor);
            }
            cell.style.backgroundColor = '#A3E8F7';
            Array.add(this._selectedCellsClickedOnce, cell.getAttribute('columnName').toString() + com.ivp.rad.controls.neogrid.scripts.ClientDataController._SEPARATOR + idColumnValue);
        }
        else {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_UNSELECTED, cell.getAttribute('columnName').toString() + com.ivp.rad.controls.neogrid.scripts.ClientDataController._SEPARATOR + idColumnValue, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_UNSELECTED);
            cell.setAttribute('iscellselected', 'false');
            if (cell.getAttribute('OldBackGroundColor') !== '') {
                cell.style.backgroundColor = cell.getAttribute('OldBackGroundColor');
            }
            else {
                cell.style.backgroundColor = row.style.backgroundColor;
            }
            Array.remove(this._selectedCellsClickedOnce, cell.getAttribute('columnName').toString() + com.ivp.rad.controls.neogrid.scripts.ClientDataController._SEPARATOR + idColumnValue);
        }
    },

    _unselectAllRowsCells: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$_unselectAllRowsCells() {
        if (this._isCellSelected || this._selectedCellsClickedOnce.length > 0 || this._selectedRow.length > 0) {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_ROW_UNSELECTED_ALL, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_ROW_UNSELECTED_ALL);
            Array.clear(this._selectedCells);
            Array.clear(this._selectedCellsClickedOnce);
            Array.clear(this._selectedRow);
            this._isCellSelected = false;
            this._isCellUnSelectedCalled = true;
        }
    },

    _cellSelectStart: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$_cellSelectStart(scell, srow, e) {
        /// <param name="scell" type="Object" domElement="true">
        /// </param>
        /// <param name="srow" type="Object" domElement="true">
        /// </param>
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.button === Sys.UI.MouseButton.leftButton && e.ctrlKey) {
            this.isReadyToHighlight = true;
        }
        if (e.ctrlKey) {
            e.preventDefault();
        }
    },

    _cellSelectEnd: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$_cellSelectEnd(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this.isReadyToHighlight) {
            this.isReadyToHighlight = false;
            if (this._selectedCells.length > 0) {
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_DRAG_SELECT_UNSELECT, Sys.Serialization.JavaScriptSerializer.serialize(this._selectedCells), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_DRAG_SELECT_UNSELECT);
                if (this._selectedCells.length > 0) {
                    this._isCellSelected = true;
                }
                Array.clear(this._selectedCells);
            }
        }
        if (e.ctrlKey) {
            e.preventDefault();
        }
    },

    _cellMultipleSelectUnSelect: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$_cellMultipleSelectUnSelect(cellTD, tr) {
        /// <param name="cellTD" type="Object" domElement="true">
        /// </param>
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        if (tr != null && tr.getAttribute('idcolumnvalue') != null) {
            var rowId = tr.getAttribute('idcolumnvalue').toString();
            var columnName = cellTD.getAttribute('columnName').toString();
            var value = rowId + com.ivp.rad.controls.neogrid.scripts.ClientDataController._SEPARATOR + columnName + com.ivp.rad.controls.neogrid.scripts.ClientDataController._SEPARATOR;
            if (this.isReadyToHighlight) {
                if ((this._selectedCells.length === 0 || (this._selectedCells[this._selectedCells.length - 1].toString() !== value + 'T' && this._selectedCells[this._selectedCells.length - 1].toString() !== value + 'F')) && (this._removedCell !== value + 'T')) {
                    if (!Boolean.parse(cellTD.getAttribute('iscellselected').toString())) {
                        Array.add(this._selectedCells, value + 'T');
                        cellTD.style.backgroundColor = '#A3E8F7';
                        cellTD.setAttribute('iscellselected', 'true');
                        this._removedCell = '';
                    }
                    else {
                        if (this._selectedCells.length === 1 && Array.contains(this._selectedCells, value + 'T')) {
                            return;
                        }
                        cellTD.style.backgroundColor = '';
                        cellTD.setAttribute('iscellselected', 'false');
                        if (Array.contains(this._selectedCells, value + 'T')) {
                            Array.remove(this._selectedCells, value + 'T');
                            this._removedCell = value + 'T';
                        }
                        Array.add(this._selectedCells, value + 'F');
                    }
                }
            }
        }
    },

    _updateRADBalancePopup: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$_updateRADBalancePopup(xml) {
        /// <param name="xml" type="String">
        /// </param>
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_RADBALANCEPOPUP_DATASOURCE, xml, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_RADBALANCEPOPUP_DATASOURCE);
    },

    _showHideSelectAllDiv: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$_showHideSelectAllDiv(show) {
        /// <param name="show" type="Boolean">
        /// </param>
        if (show) {
            this._grid.elementInfo.get_selectAllOptionDiv().style.display = '';
        }
        else {
            this._grid.elementInfo.get_selectAllOptionDiv().style.display = 'none';
        }
    },

    _checkUncheckAllRows: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$_checkUncheckAllRows(checkAll) {
        /// <param name="checkAll" type="Boolean">
        /// </param>
        /// <returns type="Array"></returns>
        var rows = this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children;
        var checkBox = null;
        var ids = [];
        for (var i = 0; i < rows.length; i++) {
            checkBox = (((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i]).children[0].getElementsByTagName('INPUT')[0]);
            if (checkBox != null && !checkBox.disabled) {
                if (checkBox.getAttribute('isGroupHeader') == null) {
                    checkBox.checked = checkAll;
                    if (checkAll) {
                        rows[i].className = this._grid.get_GridInfo().CssCheckedRow;
                        (this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].className = this._grid.get_GridInfo().CssCheckedRow;
                        if (this._grid.editGrid.frozenColumns.length > 0) {
                            this._grid.elementInfo.get_frozenInnerTable().children[i].className = this._grid.get_GridInfo().CssCheckedRow;
                        }
                    }
                    else {
                        rows[i].className = this._findClassName(rows[i]);//this._grid.get_GridInfo().CssNormalRow;
                        (this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].className = this._grid.get_GridInfo().CssNormalRow;
                        if (this._grid.editGrid.frozenColumns.length > 0) {
                            this._grid.elementInfo.get_frozenInnerTable().children[i].className = this._grid.get_GridInfo().CssNormalRow;
                        }
                    }
                }
                else {
                    checkBox.checked = checkAll;
                    Array.add(ids, ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i]).getAttribute('grouprowid').toString());
                }
            }
        }
        if (this._grid.get_GridInfo().RequireInfiniteScroll) {
            var id = this._checkAcrossPages(checkAll);
            for (var i = 0; i < id.length; i++) {
                Array.add(ids, id[i]);
            }
        }
        return ids;
    },

    _checkAcrossPages: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$_checkAcrossPages(checkAll) {
        /// <param name="checkAll" type="Boolean">
        /// </param>
        /// <returns type="Array"></returns>
        var ids = [];
        var id = this._checkUncheckHiddenData(document.getElementById(this._grid.get_GridInfo().GridId + '_repeat'), checkAll);
        for (var i = 0; i < id.length; i++) {
            Array.add(ids, id[i]);
        }
        id = this._checkUncheckHiddenData(document.getElementById(this._grid.get_GridInfo().GridId + '_repeatUp'), checkAll);
        for (var i = 0; i < id.length; i++) {
            Array.add(ids, id[i]);
        }
        return ids;
    },

    _checkUncheckHiddenData: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$_checkUncheckHiddenData(element, checkAll) {
        /// <param name="element" type="Object" domElement="true">
        /// </param>
        /// <param name="checkAll" type="Boolean">
        /// </param>
        /// <returns type="Array"></returns>
        var rows = element.children;
        var checkBox = null;
        var ids = [];
        for (var i = 0; i < rows.length; i++) {
            if (element.previousSibling.children[i] != null) {
                checkBox = (element.previousSibling.children[i].getElementsByTagName('INPUT')[0]);
                if (checkBox != null && !checkBox.disabled) {
                    if (checkBox.getAttribute('isGroupHeader') == null) {
                        checkBox.checked = checkAll;
                        if (checkAll) {
                            Array.add(ids, checkBox.getAttribute('idColumnValue').toString());
                            rows[i].className = this._grid.get_GridInfo().CssCheckedRow;
                            (element.previousSibling).children[i].className = this._grid.get_GridInfo().CssCheckedRow;
                        }
                        else {
                            rows[i].className = this._grid.get_GridInfo().CssNormalRow;
                            (element.previousSibling).children[i].className = this._grid.get_GridInfo().CssNormalRow;
                        }
                    }
                    else {
                        checkBox.checked = checkAll;
                        Array.add(ids, (element.previousSibling.children[i]).getAttribute('grouprowid').toString());
                    }
                }
            }
        }
        return ids;
    },

    _findClassName: function com_ivp_rad_controls_neogrid_scripts_ClientDataController$_findClassName(row) {
        /// <param name="row" type="Object" domElement="true">
        /// </param>
        /// <returns type="String"></returns>
        var i = 0;
        var found = true;
        var currentRow = row.previousSibling;
        while (currentRow != null) {
            i++;
            if (currentRow.className === this._grid.get_GridInfo().CssNormalRow) {
                found = true;
                break;
            }
	    else if (currentRow.className === this._grid.get_GridInfo().CssAlternatingRow) {
 		found = false;
               	break;
	    }
            currentRow = currentRow.previousSibling;
        }
        if (found) {
            return this._grid.get_GridInfo().CssAlternatingRow;
        }
        else {
            currentRow = row.nextSibling;
            i = 0;
            while (currentRow != null) {
                i++;
                if (currentRow.className === this._grid.get_GridInfo().CssNormalRow) {
                    found = true;
                    break;
                }
                currentRow = currentRow.previousSibling;
            }
            if (found) {
                return currentRow.className;
            }
            else {
                return this._grid.get_GridInfo().CssNormalRow;
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.CustomFormatter

com.ivp.rad.controls.neogrid.scripts.CustomFormatter = function com_ivp_rad_controls_neogrid_scripts_CustomFormatter() {
    /// <field name="DataType" type="com.ivp.rad.controls.neogrid.scripts.FormatterDataType">
    /// </field>
    /// <field name="DecimalPlaces" type="Number" integer="true">
    /// </field>
    /// <field name="Unit" type="com.ivp.rad.controls.neogrid.scripts.Unit">
    /// </field>
    /// <field name="Prefix" type="String">
    /// </field>
    /// <field name="NegativeValue" type="com.ivp.rad.controls.neogrid.scripts.NegativeValue">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.CustomFormatter.prototype = {
    DataType: 0,
    DecimalPlaces: 0,
    Unit: 0,
    Prefix: null,
    NegativeValue: 0
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.PushData

com.ivp.rad.controls.neogrid.scripts.PushData = function com_ivp_rad_controls_neogrid_scripts_PushData(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_colorList" type="Array">
    /// </field>
    /// <field name="_dataInfo" type="com.ivp.rad.controls.neogrid.scripts.info.PushDataInfo">
    /// </field>
    /// <field name="_row" type="Object" domElement="true">
    /// </field>
    /// <field name="_cell" type="Object" domElement="true">
    /// </field>
    /// <field name="_columnNameValue" type="com.ivp.rad.controls.neogrid.scripts.info.PushDataCellInfo">
    /// </field>
    this._colorList = [];
    this._grid = grid;
    Array.add(this._colorList, '');
    Array.add(this._colorList, '#CD5C5C');
    Array.add(this._colorList, '#008000');
}
com.ivp.rad.controls.neogrid.scripts.PushData.prototype = {
    _grid: null,
    _dataInfo: null,
    _row: null,
    _cell: null,
    _columnNameValue: null,

    _updateData: function com_ivp_rad_controls_neogrid_scripts_PushData$_updateData(pushDataInfo) {
        /// <param name="pushDataInfo" type="Array">
        /// </param>
        var timer = 0;
        var pushDataInfoCopy = pushDataInfo;
        var setTimer = window.setTimeout(Function.createDelegate(this, function () {
            timer++;
        }), 1000);
        if (this._grid.get_GridInfo().ThrottlingTime === timer || this._grid.get_GridInfo().ThrottlingTime === 0) {
            window.clearTimeout(setTimer);
            timer = 0;
            for (var i = 0; i < pushDataInfoCopy.length; i++) {
                this._dataInfo = pushDataInfoCopy[i];
                if (!this._dataInfo.isGrouped) {
                    this._row = eval('$(\'#\' + this._grid.get_GridInfo().GridId + \'_bodyDiv\').find(\"[idColumnValue=\'' + this._dataInfo.RowID + '\']\")');
                }
                else {
                    this._row = eval('$(\'#\' + this._grid.get_GridInfo().GridId + \'_bodyDiv\').find(\"[grouprowid=\'' + this._dataInfo.RowID + '\']\")');
                }
                if (this._row != null) {
                    for (var j = 0; j < this._dataInfo.ColumnNameValue.length; j++) {
                        this._columnNameValue = this._dataInfo.ColumnNameValue[j];
                        this._cell = eval('this._row.find(\"[columnName=\'' + this._columnNameValue.ColumnName + '\']\")');
                        if (this._cell != null) {
                            if (eval('this._cell.attr(\'old-color\')') == null) {
                                eval('this._cell.attr({\'old-color\':1})');
                            }
                            else {
                                eval('this._cell.attr({\'old-color\':(parseInt(this._cell.attr(\'old-color\'))+1)%3})');
                            }
                            eval('this._cell.css({\'background-color\':this._colorList[this._cell.attr(\'old-color\')]})');
                            eval('this._cell.html(this._columnNameValue.ColumnValue)');
                        }
                        this._columnNameValue = null;
                        this._cell = null;
                    }
                }
                this._row = null;
                this._dataInfo = null;
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.EditGrid

com.ivp.rad.controls.neogrid.scripts.EditGrid = function com_ivp_rad_controls_neogrid_scripts_EditGrid(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_formula" type="String">
    /// </field>
    /// <field name="_isEditing" type="Boolean">
    /// </field>
    /// <field name="changedRowsInfo" type="Array">
    /// </field>
    /// <field name="revertChange" type="Boolean">
    /// </field>
    /// <field name="previousRowID" type="String">
    /// </field>
    /// <field name="rowid" type="String">
    /// </field>
    /// <field name="lastSelectedCell" type="Object" domElement="true">
    /// </field>
    /// <field name="selectCellOnRowEdit" type="Object" domElement="true">
    /// </field>
    /// <field name="headerCellTextCollection" type="Array">
    /// </field>
    /// <field name="_editStartCell" type="Object" domElement="true">
    /// </field>
    /// <field name="_editStartRow" type="Object" domElement="true">
    /// </field>
    /// <field name="_formulaEditor" type="Object" domElement="true">
    /// </field>
    /// <field name="_pasteStarted" type="Boolean">
    /// </field>
    /// <field name="_pastedIDColumnValues" type="Array">
    /// </field>
    /// <field name="_pastedColumnNames" type="Array">
    /// </field>
    /// <field name="_keyValuePair" type="Object">
    /// </field>
    /// <field name="_pastedData" type="Object">
    /// </field>
    /// <field name="pastedDataList" type="Array">
    /// </field>
    /// <field name="changedCellInfoList" type="Array">
    /// </field>
    /// <field name="keyValuePairList" type="Array">
    /// </field>
    /// <field name="changedRowInfoList" type="Array">
    /// </field>
    /// <field name="pastedRowandCellIndex" type="Array">
    /// </field>
    /// <field name="_currentRowCellIndex" type="Object">
    /// </field>
    /// <field name="_inavlidDataRows" type="Object">
    /// </field>
    /// <field name="_changedCellInfo" type="Object">
    /// </field>
    /// <field name="_ruleEditor" type="Object" domElement="true">
    /// </field>
    /// <field name="_ruleEditorInput" type="Object" domElement="true">
    /// </field>
    /// <field name="_ruleintellisense" type="Object" domElement="true">
    /// </field>
    /// <field name="_xlRuleTextID" type="String">
    /// </field>
    /// <field name="_currentEditingRule" type="Boolean">
    /// </field>
    /// <field name="_currentRuleExecutingColumnName" type="String">
    /// </field>
    /// <field name="_ruleEditorDataInfo" type="Object">
    /// </field>
    /// <field name="_ruleGrammerList" type="Array">
    /// </field>
    /// <field name="previousToken" type="String">
    /// </field>
    /// <field name="_currentGrammar" type="Array">
    /// </field>
    /// <field name="matchedTokenRuleList" type="Array">
    /// </field>
    /// <field name="_remainingTextFromRule" type="String">
    /// </field>
    /// <field name="_numberList" type="Array">
    /// </field>
    /// <field name="_enterNumberFlag" type="Boolean">
    /// </field>
    /// <field name="_numberEnteredFlag" type="Boolean">
    /// </field>
    /// <field name="computedColumns" type="Object">
    /// </field>
    /// <field name="previuosTokenIsNumber" type="Boolean">
    /// </field>
    /// <field name="isInvalidDataFlag" type="Boolean">
    /// </field>
    /// <field name="nextCellToBeSelected" type="Object" domElement="true">
    /// </field>
    /// <field name="frozenColumns" type="Array">
    /// </field>
    /// <field name="_popupExcelHTML" type="String">
    /// </field>
    /// <field name="_invalidDataHTML" type="String">
    /// </field>
    /// <field name="_intellisenseDiv" type="String">
    /// </field>
    this.changedRowsInfo = [];
    this.headerCellTextCollection = [];
    this._pastedColumnNames = [];
    this._pastedIDColumnValues = [];
    this._pastedData = {};
    this._keyValuePair = {};
    this._inavlidDataRows = {};
    this._changedCellInfo = {};
    this.changedCellInfoList = [];
    this.pastedDataList = [];
    this.keyValuePairList = [];
    this.changedRowInfoList = [];
    this.pastedRowandCellIndex = [];
    this._currentRowCellIndex = {};
    this._grid = grid;
    this._createPasteExcelDataPopup();
    this._createInvalidDataPopup();
    this._createRuleIntellisenseDiv();
    this._ruleEditorDataInfo = {};
    this._ruleGrammerList = [];
    this._currentGrammar = [];
    this.matchedTokenRuleList = [];
    this._numberList = [];
    this._setUpNumberList();
    this.computedColumns = {};
    this.revertChange = false;
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.EditGrid.prototype = {
    _grid: null,
    _formula: null,
    _isEditing: false,
    changedRowsInfo: null,
    revertChange: false,
    previousRowID: null,
    rowid: null,
    lastSelectedCell: null,
    selectCellOnRowEdit: null,
    headerCellTextCollection: null,
    _editStartCell: null,
    _editStartRow: null,
    _formulaEditor: null,
    _pasteStarted: false,
    _pastedIDColumnValues: null,
    _pastedColumnNames: null,
    _keyValuePair: null,
    _pastedData: null,
    pastedDataList: null,
    changedCellInfoList: null,
    keyValuePairList: null,
    changedRowInfoList: null,
    pastedRowandCellIndex: null,
    _currentRowCellIndex: null,
    _inavlidDataRows: null,
    _changedCellInfo: null,
    _ruleEditor: null,
    _ruleEditorInput: null,
    _ruleintellisense: null,
    _xlRuleTextID: '',
    _currentEditingRule: false,
    _currentRuleExecutingColumnName: '',
    _ruleEditorDataInfo: null,
    _ruleGrammerList: null,
    previousToken: null,
    _currentGrammar: null,
    matchedTokenRuleList: null,
    _remainingTextFromRule: null,
    _numberList: null,
    _enterNumberFlag: false,
    _numberEnteredFlag: false,
    computedColumns: null,
    previuosTokenIsNumber: false,
    isInvalidDataFlag: false,
    nextCellToBeSelected: null,
    frozenColumns: null,

    get_isEditing: function com_ivp_rad_controls_neogrid_scripts_EditGrid$get_isEditing() {
        /// <value type="Boolean"></value>
        return this._isEditing;
    },

    _setUpNumberList: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_setUpNumberList() {
        Array.add(this._numberList, '0');
        Array.add(this._numberList, '1');
        Array.add(this._numberList, '2');
        Array.add(this._numberList, '3');
        Array.add(this._numberList, '4');
        Array.add(this._numberList, '5');
        Array.add(this._numberList, '6');
        Array.add(this._numberList, '7');
        Array.add(this._numberList, '8');
        Array.add(this._numberList, '9');
    },

    _popupExcelHTML: '<table class=\"panelExcelTable\" style=\"width:100%;\"><thead></thead><tbody><tr><td class=\"excelDataHead\">Click OK to commit changes. Click Cancel to reset.</td></tr><tr><td class=\"excelbtnPanel\"><input type=\"button\" id=\"{0}_SaveExcelData\" class=\"AddColumnExcelSave\" value=\"OK\" /><input type=\"button\" class=\"AddColumnCancelExcelSave\" id=\"{0}_CancelUpdate\" value=\"Cancel\" style=\"position:relative; left:10px;\" /></td></tr></tbody></table>',
    _invalidDataHTML: '<table cellspacing = \"0\" cellpadding=\"0\" class=\"panelExcelTable\" style=\"width:100%;\"><thead></thead><tbody><tr><td colSpan = \"2\" class=\"excelDataHead\">Following Column(s) have Invalid Data.</td></tr><tr><td colSpan=\"2\"> <table cellspacing = \"0\" cellpadding=\"0\" style=\"width:100%;\"><thead><tr  class=\"xlneoHeaderData\"><th style=\"border-right:1px solid;\"> Column Name</th><th>Expected Data Type</th></tr></thead><tbody></tbody></table> </td></tr><tr class=\"xlSaveMessagePopUp\"><td colSpan=\"2\">Please Verify the Data.</td></tr><tr><td class=\"excelbtnPanel\"><input type=\"button\" id=\"{0}_SaveExcelData\" class=\"AddColumnOk\" value=\"OK\" /></td></tr></tbody></table>',

    _createPasteExcelDataPopup: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_createPasteExcelDataPopup() {
        var divLayout = this._grid.elementHelper.get_divElement();
        divLayout.id = this._grid.elementIDManager.get_pasteExcelDataDivID();
        divLayout.innerHTML = String.format(this._popupExcelHTML, divLayout.id);
        this._grid.elementInfo.get_childGridDiv().appendChild(divLayout);
        divLayout.style.position = 'absolute';
        divLayout.style.width = '25%';
        divLayout.style.zIndex = 32767;
        divLayout.style.top = divLayout.offsetHeight + 26 + 'px';
        divLayout.style.left = ((document.documentElement.offsetWidth / 2) - (divLayout.offsetWidth / 2)) + 'px';
        divLayout.style.display = 'none';
    },

    _intellisenseDiv: '<div id=\"{0}\" class=\"xlRuleIntellisense\"></div>',

    _createRuleIntellisenseDiv: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_createRuleIntellisenseDiv() {
        var divLayoutWidth = this._grid.elementHelper.get_divElement();
        divLayoutWidth.id = this._grid.elementIDManager.get_ruleEditorWidth();
        divLayoutWidth.style.display = 'none';
        this._grid.elementInfo.get_childGridDiv().appendChild(divLayoutWidth);
        var divLayout = this._grid.elementHelper.get_divElement();
        divLayout.id = this._grid.get_GridInfo().GridId + '_RuleIntellisense';
        divLayout.innerHTML = String.format(this._intellisenseDiv, this._grid.get_GridInfo().GridId + '_xlRuleIntellisense');
        divLayout.style.position = 'absolute';
        divLayout.style.width = '10%';
        divLayout.style.display = 'none';
    },

    _createInvalidDataPopup: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_createInvalidDataPopup() {
        var divLayout = this._grid.elementHelper.get_divElement();
        divLayout.id = this._grid.elementIDManager.get_invalidDataDivID();
        divLayout.innerHTML = String.format(this._invalidDataHTML, divLayout.id);
        this._grid.elementInfo.get_childGridDiv().appendChild(divLayout);
        divLayout.style.position = 'absolute';
        divLayout.style.width = '25%';
        divLayout.style.zIndex = 32767;
        divLayout.style.top = divLayout.offsetHeight + 26 + 'px';
        divLayout.style.left = ((document.documentElement.offsetWidth / 2) - (divLayout.offsetWidth / 2)) + 'px';
        divLayout.style.display = 'none';
    },

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        this.frozenColumns = [];
        for (var i = 0; i < serviceInfo.serializedInfo.FrozenColumns.length; i++) {
            Array.add(this.frozenColumns, (serviceInfo.serializedInfo.FrozenColumns[i]).ColumnName);
        }
        if (this._isEditing) {
            this.highlightEditableColumns();
        }
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_RULE_INTELLISENSE) {
            if (serviceInfo.input.split('|')[0] === '0') {
                if (this._numberEnteredFlag) {
                    this._numberEnteredFlag = false;
                    (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value = this._formula;
                }
                this._resetAllDivs(serviceInfo.output);
                this._ruleEditorDataInfo = serviceInfo.serializedInfo.RuleDataInfo;
                this._ruleGrammerList = serviceInfo.serializedInfo.RuleEditorIntellisense;
                if (this.previousToken != null) {
                    if (this._remainingTextFromRule != null) {
                        this._currentGrammar = [];
                        for (var i = 0; i < this._ruleGrammerList.length; i++) {
                            if (this._ruleGrammerList[i].toString().toLowerCase().startsWith(this._remainingTextFromRule.toLowerCase())) {
                                Array.add(this._currentGrammar, this._ruleGrammerList[i].toString());
                            }
                        }
                        this._createIntellisenseDiv(this._currentGrammar);
                        this._remainingTextFromRule = null;
                    }
                    else {
                        this._createIntellisenseDiv(this._ruleGrammerList);
                    }
                }
                if (this.previousToken == null && this._remainingTextFromRule != null) {
                    this._currentGrammar = [];
                    for (var i = 0; i < this._ruleGrammerList.length; i++) {
                        if (this._ruleGrammerList[i].toString().toLowerCase().startsWith(this._remainingTextFromRule.toLowerCase())) {
                            Array.add(this._currentGrammar, this._ruleGrammerList[i].toString());
                        }
                    }
                    this._createIntellisenseDiv(this._currentGrammar);
                    this._remainingTextFromRule = null;
                }
            }
            else {
                var formula = serviceInfo.output.split('|')[5];
                formula = 'test';
                if (formula !== '') {
                    var customElement = this.lastSelectedCell.childNodes[0];
                    this._changeTDValue();
                    var rowID = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(this.lastSelectedCell, 'TR').getAttribute('idcolumnvalue').toString();
                    var columnName = this.lastSelectedCell.getAttribute('columnname').toString();
                    var applyToAllColumns = (document.getElementById(this._grid.elementIDManager.get_gridEditorCheckAllCells())).checked;
                    this.lastSelectedCell = null;
                    this._closeRuleEditor();
                    this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXECUTE_RULE, formula + '|' + this._formula + '|' + rowID + '|' + columnName + '|' + applyToAllColumns + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.matchedTokenRuleList), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXECUTE_RULE);
                    this._formula = '';
                }
                else {
                    this._resetAllDivs(serviceInfo.output);
                }
            }
        }
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXECUTE_RULE) {
            this.computedColumns = serviceInfo.serializedInfo.ComputedColumns;
        }
        this._pasteStarted = false;
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_PASTED_DATA_FROM_EXCEL) {
            document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className = 'xlneoCopyDataFromExcel';
            document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).title = 'Enable Copy Data From Excel';
            this._grid.elementInfo.get_pasteExcelDataDiv().style.display = 'none';
            document.getElementById(this._grid.elementIDManager.get_invalidDataDivID()).style.display = 'none';
        }
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PASTE_DATA_FROM_EXCEL) {
            document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className = 'xlneoSavePastedData';
            document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).title = 'Save Pasted Data';
            Array.clear(this._pastedIDColumnValues);
            Array.clear(this._pastedColumnNames);
            this._changedCellInfo = {};
            this._keyValuePair = {};
            this._pastedData = {};
            this._inavlidDataRows = {};
            this._inavlidDataRows = serviceInfo.serializedInfo.ChangedDataRows;
            var changecellInfoList = [];
            var rowInfoList = [];
            var currentRowInfo = new com.ivp.rad.controls.neogrid.scripts.info.ChangedRowInfo();
            var currentCellInfo = new com.ivp.rad.controls.neogrid.scripts.info.ChangedCellInfo();
            var cellColor = '';
            var dataDictionary = Sys.Serialization.JavaScriptSerializer.deserialize(serviceInfo.output);
            if (this._editStartCell != null) {
                var startRowIndex = com.ivp.rad.controls.neogrid.scripts.GridUIHelper.rowIndex(this._editStartRow);
                var startCellIndex = com.ivp.rad.controls.neogrid.scripts.GridUIHelper.cellIndex(this._editStartCell);
                var currentRowCellIndex = {};
                currentRowCellIndex[com.ivp.rad.controls.neogrid.scripts.GridUIHelper.rowIndex(this._editStartRow).toString()] = com.ivp.rad.controls.neogrid.scripts.GridUIHelper.cellIndex(this._editStartCell).toString();
                Array.add(this.pastedRowandCellIndex, currentRowCellIndex);
                var $dict1 = dataDictionary;
                var IsChangedFlag = false;
                for (var $key2 in $dict1) {
                    var entry = { key: $key2, value: $dict1[$key2] };
                    currentRowInfo = new com.ivp.rad.controls.neogrid.scripts.info.ChangedRowInfo();
                    changecellInfoList = [];
                    var cellData = entry.value;
                    var j = 0;
                    var length = Math.min(this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[0].childNodes.length - startCellIndex, cellData.length);
                    for (var i = startCellIndex; i < length + startCellIndex; i++) {
                        cellColor = '';
                        this._changedCellInfo = {};
                        currentCellInfo = new com.ivp.rad.controls.neogrid.scripts.info.ChangedCellInfo();
                        if (!(this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[startRowIndex]).getAttribute('isGroupHeader')) {
                            var cell = (this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[startRowIndex]).children[i];
                            if (!Array.contains(this._pastedColumnNames, ((this._grid.elementInfo.get_headerInnerDiv().children[0].children[0]).children[i]).getAttribute('columnName').toString())) {
                                Array.add(this._pastedColumnNames, ((this._grid.elementInfo.get_headerInnerDiv().children[0].children[0]).children[i]).getAttribute('columnName').toString());
                            }
                            if (!Array.contains(this._pastedIDColumnValues, (this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[startRowIndex]).getAttribute('idCOlumnValue').toString())) {
                                this._pastedData[(this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[startRowIndex]).getAttribute('idCOlumnValue').toString()] = cellData;
                                Array.add(this._pastedIDColumnValues, (this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[startRowIndex]).getAttribute('idCOlumnValue').toString());
                            }
                            cellColor = cell.style.backgroundColor;
                            if (Array.contains(window.Object.keys(this._inavlidDataRows), entry.key)) {
                                if (Array.contains((this._inavlidDataRows[entry.key]), cell.getAttribute('columnName').toString())) {
                                    if (!Array.contains(window.Object.keys(this._changedCellInfo), cell.getAttribute('columnName').toString())) {
                                        this._changedCellInfo[cell.getAttribute('columnName').toString()] = cell.getAttribute('dataType').toString();
                                    }
                                    cell.style.backgroundColor = 'RED';
                                }
                                else {
                                    cell.style.backgroundColor = 'ORANGE';
                                }
                            }
                            else {
                                cell.style.backgroundColor = 'ORANGE';
                            }
                            currentCellInfo.ColumnName = cell.getAttribute('columnName').toString();
                            if (i === startCellIndex) {
                                currentCellInfo.OldValue = this._grid.raddomElement.getInnerContent(cell);
                            }
                            else {
                                currentCellInfo.OldValue = cell.innerHTML;
                            }
                            currentCellInfo.OldColor = cellColor;
                            currentCellInfo.NewColor = cell.style.backgroundColor;
                            currentCellInfo.NewValue = cellData[j].toString();
                            if (currentCellInfo.OldValue != currentCellInfo.NewValue)
                            {
                                if(IsChangedFlag == false)
                                {
                                    IsChangedFlag = true;
                                }
                            }
                            Array.add(changecellInfoList, currentCellInfo);
                            cell.innerHTML = cellData[j].toString();
                            j++;
                        }
                        else {
                            startRowIndex++;
                            i = startCellIndex - 1;
                            continue;
                        }
                    }
                    currentRowInfo.CellInfo = changecellInfoList;
                    currentRowInfo.RowID = (this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[startRowIndex]).getAttribute('idCOlumnValue').toString();
                    currentRowInfo.IsChanged = IsChangedFlag;
                    Array.add(rowInfoList, currentRowInfo);
                    if (!(this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[startRowIndex]).getAttribute('isGroupHeader')) {
                        this._keyValuePair[(this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[startRowIndex]).getAttribute('idCOlumnValue').toString()] = this._pastedColumnNames;
                    }
                    startRowIndex++;
                    if (this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children.length === startRowIndex) {
                        break;
                    }
                }
                Array.add(this.changedRowInfoList, rowInfoList);
                if (window.Object.keys(this._pastedData).length > 0) {
                    Array.add(this.pastedDataList, this._pastedData);
                }
                if (window.Object.keys(this._keyValuePair).length > 0) {
                    Array.add(this.keyValuePairList, this._keyValuePair);
                }
                document.getElementById(this._grid.elementIDManager.get_invalidDataDivID()).innerHTML = String.format(this._invalidDataHTML, this._grid.elementIDManager.get_invalidDataDivID());
                var domElement = ((document.getElementById(this._grid.elementIDManager.get_invalidDataDivID()).firstChild).rows[1]).cells[0].children[0];
                var $dict3 = this._changedCellInfo;
                for (var $key4 in $dict3) {
                    var keyentry = { key: $key4, value: $dict3[$key4] };
                    var tr = domElement.insertRow(domElement.rows.length);
                    tr.className = 'xlneoBodyData';
                    var columnName = tr.insertCell(0);
                    columnName.style.borderRight = '1px solid';
                    columnName.innerText = keyentry.key.toString();
                    var oldValue = tr.insertCell(1);
                    oldValue.innerText = this._getExpectedDataType(keyentry.value.toString());
                }
                if (window.Object.keys(this._changedCellInfo).length > 0) {
                    this._inavlidDataRows = {};
                    document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className = 'xlneoSavePastedData';
                    document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).title = 'Save Pasted Data';
                    document.getElementById(this._grid.elementIDManager.get_invalidDataDivID()).style.display = '';
                    this.isInvalidDataFlag = true;
                    this._stopPasting();
                    document.getElementById(this._grid.elementIDManager.get_invalidDataDivID()).style.left = ((document.getElementById(this._grid.elementIDManager.get_invalidDataDivID()).parentNode.offsetWidth / 2) - ((0.25 * document.getElementById(this._grid.elementIDManager.get_invalidDataDivID()).parentNode.offsetWidth) / 2)) + 'px';
                }
            }
        }
    },

    _getExpectedDataType: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_getExpectedDataType(dataType) {
        /// <param name="dataType" type="String">
        /// </param>
        /// <returns type="String"></returns>
        var expectedDataType = '';
        switch (dataType) {
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int:
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double:
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal:
                expectedDataType = 'Integer';
                break;
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_string:
                expectedDataType = 'String';
                break;
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime:
                expectedDataType = 'DateTime';
                break;
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_boolean:
                expectedDataType = 'Boolean';
                break;
            default:
                expectedDataType = 'String';
                break;
        }
        return expectedDataType;
    },

    startEditing: function com_ivp_rad_controls_neogrid_scripts_EditGrid$startEditing(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._isEditing) {
            this._isEditing = false;
            if (this._grid.get_GridInfo().IsMasterChildGrid) {
                if (this._getChangedRowInfoforMasterChildGrid()) {
                    if (this._grid.get_GridInfo().RequireEditableRow) {
                        if (!this._changeRowLevelTDValue()) {
                            return;
                        }
                    }
                    else {
                        if (!this._changeTDValue()) {
                            return;
                        }
                    }
                    this.lastSelectedCell = null;
                    this.createEditResetPopUp();
                    document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').style.display = 'none';
                }
            }
            else {
                if (this.changedRowsInfo.length > 0) {
                    if (this._grid.get_GridInfo().RequireEditableRow) {
                        if (!this._changeRowLevelTDValue()) {
                            return;
                        }
                    }
                    else {
                        if (!this._changeTDValue()) {
                            return;
                        }
                    }
                    this.lastSelectedCell = null;
                    this.createEditResetPopUp();
                    document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').style.display = 'none';
                }
                else {
                    this.resetChanges();
                    document.getElementById(this._grid.get_GridInfo().GridId + '_btnEditableGrid').className = 'RADEditIcon fa fa-pencil-square-o fa-lg';
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EditCommitPopUP\").remove()');
                    Array.clear(this.changedRowsInfo);
                    this.highlightEditableColumns();
                }
            }
        }
        else {
            this.revertChange = false;
            this._isEditing = true;
            if (e != null) {
                //e.target.className = 'fa fa-floppy-o fa-lg';
                e.target.className = 'RadFloppy fa fa-save';
            }
            Array.clear(this.changedRowsInfo);
            this.highlightEditableColumns();
            if (this._grid.get_GridInfo().IsMasterChildGrid) {
                if (eval('$find(this._grid.get_GridInfo().MasterGridId).get_GridInfo().IsMasterChildGrid')) {
                    if (this._grid.get_GridInfo().MasterGridId === this._grid.get_GridInfo().GridId) {
                        var childGridIds = eval('$find(this._grid.get_GridInfo().MasterGridId).get_GridInfo().AllChildGridIds');
                        if (childGridIds != null) {
                            for (var i = 0; i < childGridIds.length; i++) {
                                if (eval('$find(childGridIds[i]) != null')) {
                                    if (childGridIds[i].toString() !== this._grid.get_GridInfo().MasterGridId) {
                                        eval('$find(childGridIds[i]).editGrid.startEditing()');
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },

    _getChangedRowInfoforMasterChildGrid: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_getChangedRowInfoforMasterChildGrid() {
        /// <returns type="Boolean"></returns>
        var childGridIds = eval('$find(this._grid.get_GridInfo().MasterGridId).get_GridInfo().AllChildGridIds');
        if (childGridIds != null) {
            for (var i = 0; i < childGridIds.length; i++) {
                if (eval('$find(childGridIds[i]) != null')) {
                    if (eval('$find(childGridIds[i]).editGrid.changedRowsInfo') != null) {
                        if ((eval('$find(childGridIds[i]).editGrid.changedRowsInfo')).length > 0) {
                            return true;
                        }
                    }
                }
            }
        }
        else {
            if (this._grid.editGrid.changedRowsInfo != null) {
                if (this._grid.editGrid.changedRowsInfo.length > 0) {
                    return true;
                }
            }
        }
        return false;
    },

    createEditResetPopUp: function com_ivp_rad_controls_neogrid_scripts_EditGrid$createEditResetPopUp() {
        var PopuPHTML = '<div class=\"xlEditComitPopUp\"><div class=\"xlEditComotPopUpText\"><div style=\"height: 31px;  line-height: 31px;  margin-top: 15px;  padding-left: 10px;\"> Click OK to commit changes </div><div style=\"height: 35px; line-height: 35px;  padding-left: 10px;\"> Click Cancel to reset </div><div><div class=\"xlEditComotPopUpFooter\"><input type=\"button\" value=\" Ok \" style=\"  position: relative;  left: -10px;\" id=\"{0}\" class=\"btn btn-default btn-xs\"><input type=\"button\" value=\" Cancel \" style=\"  position: relative;  left: 10px;\" id=\"{1}\" class=\"btn btn-default btn-xs\"><div></div>';
        var popUP = document.createElement('DIV');
        popUP.innerHTML = String.format(PopuPHTML, this._grid.get_GridInfo().GridId + '_Edit_Ok', this._grid.get_GridInfo().GridId + '_CancelEdit_Ok');
        popUP.id = this._grid.get_GridInfo().GridId + '_EditCommitPopUP';
        this._grid.get_element().appendChild(popUP);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(popUP, 'click', Function.createDelegate(this, this._editCommitPopUPHandler));
    },

    _editCommitPopUPHandler: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_editCommitPopUPHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.id === this._grid.get_GridInfo().GridId + '_Edit_Ok') {
            this._commitChanges();
            if (this._grid.get_RaiseOnEditCommitChange() != null) {
                this.removeResetDeleteIcon();
                for (var i = 0; i < this.changedRowsInfo.length; i++) {
                    var count = 0;
                    for (var j = 0; j < this.changedRowsInfo[i].CellInfo.length; j++) {
                        if (this.changedRowsInfo[i].CellInfo[j].OldValue != this.changedRowsInfo[i].CellInfo[j].NewValue) {
                            count++;
                            break;
                        }
                    }
                    if (count == 0) {
                        this.changedRowsInfo.splice(i, 1);
                        --i;
                    }
                }
                if (this.changedRowsInfo.length > 0) {
                    eval(this._grid.get_RaiseOnEditCommitChange() + '(' + Sys.Serialization.JavaScriptSerializer.serialize(this.changedRowsInfo) + ');');
                }
                else {
                    $(".xlResetRowIcon").remove();
                }
            }
        }
        else if (e.target.id === this._grid.get_GridInfo().GridId + '_CancelEdit_Ok') {
            //this.resetChanges();
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CANCEL_WHOLE_EDIT_INFO, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CANCEL_WHOLE_EDIT_INFO);
        }
        document.getElementById(this._grid.get_GridInfo().GridId + '_btnEditableGrid').className = 'RADEditIcon fa fa-pencil-square-o fa-lg';
        eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EditCommitPopUP\").remove()');
        if (!this._grid.get_GridInfo().IsMasterChildGrid) {
            Array.clear(this.changedRowsInfo);
            this.highlightEditableColumns();
        }
    },

    revertChanges: function com_ivp_rad_controls_neogrid_scripts_EditGrid$revertChanges(flag) {
        /// <param name="flag" type="Boolean">
        /// </param>
        if (this._isEditing) {
            this.revertChange = true;
            this._isEditing = false;
            if (this.changedRowsInfo.length > 0) {
                if (this._grid.get_GridInfo().RequireEditableRow) {
                    if (!this._changeRowLevelTDValue()) {
                        return;
                    }
                }
                else {
                    if (!this._changeTDValue()) {
                        return;
                    }
                }
                this.lastSelectedCell = null;
                this.resetChanges();
            }
        }
        else {
            this._isEditing = true;
        }
        Array.clear(this.changedRowsInfo);
        this.highlightEditableColumns();
    },

    highlightEditableColumns: function com_ivp_rad_controls_neogrid_scripts_EditGrid$highlightEditableColumns() {
        var frozenHeaderCollection = null;
        var headercollection = ((this._grid.elementInfo.get_headerInnerDiv()).children[0].children[0]).children;
        var columnName = null;
        if (this._grid.elementInfo.get_frozenNewHeaderDiv() != null && this._grid.elementInfo.get_frozenNewHeaderDiv().hasChildNodes() && this._grid.elementInfo.get_frozenNewHeaderDiv().firstChild.hasChildNodes()) {
            frozenHeaderCollection = ((this._grid.elementInfo.get_frozenNewHeaderDiv().firstChild).children[0].children[0]).children;
            for (var i = 0; i < frozenHeaderCollection.length; i++) {
                columnName = frozenHeaderCollection[i].getAttribute('columnName');
                if (columnName != null) {
                    if (this._isEditing) {
                        if (!Array.contains(this.headerCellTextCollection, columnName)) {
                            Array.add(this.headerCellTextCollection, columnName);
                        }
                    }
                    else {
                        Array.remove(this.headerCellTextCollection, columnName);
                    }
                }
                if (columnName != null) {
                    if (Array.contains(this._grid.get_GridInfo().EditableColumns, columnName.toString())) {
                        if (this._isEditing) {
                            frozenHeaderCollection[i].style.backgroundColor = '#DAE9FD';
                        }
                        else {
                            frozenHeaderCollection[i].style.backgroundColor = '';
                        }
                    }
                    else {
                        frozenHeaderCollection[i].style.backgroundColor = '';
                    }
                }
            }
        }
        for (var i = 0; i < headercollection.length; i++) {
            columnName = headercollection[i].getAttribute('columnName');
            if (columnName != null) {
                if (this._isEditing) {
                    if (!Array.contains(this.headerCellTextCollection, columnName)) {
                        Array.add(this.headerCellTextCollection, columnName);
                    }
                }
                else {
                    Array.remove(this.headerCellTextCollection, columnName);
                }
            }
            if (columnName != null) {
                if (Array.contains(this._grid.get_GridInfo().EditableColumns, columnName.toString())) {
                    if (this._isEditing) {
                        headercollection[i].style.backgroundColor = '#DAE9FD';
                    }
                    else {
                        headercollection[i].style.backgroundColor = '';
                    }
                }
                else {
                    headercollection[i].style.backgroundColor = '';
                }
            }
        }
    },

    highlightMasterChildEditableColumns: function com_ivp_rad_controls_neogrid_scripts_EditGrid$highlightMasterChildEditableColumns(gridid) {
        /// <param name="gridid" type="String">
        /// </param>
        var frozenHeaderCollection = null;
        var headercollection = ((document.getElementById(gridid + '_headerDiv_Table')).children[0].children[0]).children;
        var columnName = null;
        if (document.getElementById(gridid + '_frozen_headerDiv') != null && document.getElementById(gridid + '_frozen_headerDiv').hasChildNodes() && document.getElementById(gridid + '_frozen_headerDiv').firstChild.hasChildNodes()) {
            frozenHeaderCollection = ((document.getElementById(gridid + '_frozen_headerDiv').firstChild).children[0].children[0]).children;
            for (var i = 0; i < frozenHeaderCollection.length; i++) {
                columnName = frozenHeaderCollection[i].getAttribute('columnName');
                if (columnName != null) {
                    if (this._isEditing) {
                        if (!Array.contains(this.headerCellTextCollection, columnName)) {
                            Array.add(this.headerCellTextCollection, columnName);
                        }
                    }
                    else {
                        Array.remove(this.headerCellTextCollection, columnName);
                    }
                }
                if (columnName != null) {
                    if (Array.contains(this._grid.get_GridInfo().EditableColumns, columnName.toString())) {
                        if (this._isEditing) {
                            frozenHeaderCollection[i].style.backgroundColor = '#DAE9FD';
                        }
                        else {
                            frozenHeaderCollection[i].style.backgroundColor = '';
                        }
                    }
                    else {
                        frozenHeaderCollection[i].style.backgroundColor = '';
                    }
                }
            }
        }
        for (var i = 0; i < headercollection.length; i++) {
            columnName = headercollection[i].getAttribute('columnName');
            if (columnName != null) {
                if (this._isEditing) {
                    if (!Array.contains(this.headerCellTextCollection, columnName)) {
                        Array.add(this.headerCellTextCollection, columnName);
                    }
                }
                else {
                    Array.remove(this.headerCellTextCollection, columnName);
                }
            }
            if (columnName != null) {
                if (Array.contains(this._grid.get_GridInfo().EditableColumns, columnName.toString())) {
                    if (this._isEditing) {
                        headercollection[i].style.backgroundColor = '#DAE9FD';
                    }
                    else {
                        headercollection[i].style.backgroundColor = '';
                    }
                }
                else {
                    headercollection[i].style.backgroundColor = '';
                }
            }
        }
    },

    resetChanges: function com_ivp_rad_controls_neogrid_scripts_EditGrid$resetChanges() {
        if (!this._grid.get_GridInfo().IsMasterChildGrid) {
            var frozenColumnCollection = [];
            for (var k = 0; k < this._grid.get_GridInfo().FrozenColumns.length; k++) {
                Array.add(frozenColumnCollection, (this._grid.get_GridInfo().FrozenColumns[k]).ColumnName);
            }
            for (var i = 0; i < this.changedRowsInfo.length; i++) {
                var rowInfo = this.changedRowsInfo[i];
                var row = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\").find(\"div[id=\'' + rowInfo.RowID + '\']\")[0]');
                var frozenrow = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\").find(\"div[id=\'' + rowInfo.RowID + '\']\")[0]');
                for (var j = 0; j < rowInfo.CellInfo.length; j++) {
                    var cellInfo = rowInfo.CellInfo[j];
                    var index = Array.indexOf(this.headerCellTextCollection, cellInfo.ColumnName);
                    var padding = 0;
                    if (this._grid.get_GridInfo().IsMasterChildGrid) {
                        index++;
                        padding++;
                    }
                    var td = null;
                    if (Array.contains(frozenColumnCollection, cellInfo.ColumnName)) {
                        td = frozenrow.children[index + padding];
                    }
                    else {
                        td = row.children[index - this._grid.get_GridInfo().FrozenColumns.length];
                    }
                    this._grid.raddomElement.setInnerContent(td, cellInfo.OldValue);
                    td.title = cellInfo.OldValue;
                    this._applyOldStyle(td);
                }
                if (row.lastChild.className === 'xlResetRowIcon') {
                    row.removeChild(row.lastChild);
                }
                else if (row.lastChild.className === 'xlResetRowButton') {
                    row.removeChild(row.lastChild.previousSibling);
                    row.removeChild(row.lastChild);
                }
            }
        }
        else {
            var childGridIds = eval('$find(this._grid.get_GridInfo().MasterGridId).get_GridInfo().AllChildGridIds');
            if (childGridIds != null) {
                for (var i = 0; i < childGridIds.length; i++) {
                    if (eval('$find(childGridIds[i]) != null')) {
                        this._resetChangesForMasterChildGrid(eval('$find(childGridIds[i]).editGrid.changedRowsInfo'), childGridIds[i].toString());
                    }
                }
            }
            else {
                this._grid.editGrid._isEditing = false;
                this._resetChangesForMasterChildGrid(this._grid.editGrid.changedRowsInfo, this._grid.get_GridInfo().GridId);
            }
        }
    },

    _resetChangesForMasterChildGrid: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_resetChangesForMasterChildGrid(ChangedRowsInfoMasterChild, gridid) {
        /// <param name="ChangedRowsInfoMasterChild" type="Array">
        /// </param>
        /// <param name="gridid" type="String">
        /// </param>
        if (document.getElementById(gridid) != null) {
            var frozenColumnCollection = [];
            var FrozenColumns = eval('$find(gridid).get_GridInfo().FrozenColumns');
            var HeaderCellTextCollections = eval('$find(gridid).editGrid.headerCellTextCollection');
            for (var k = 0; k < FrozenColumns.length; k++) {
                Array.add(frozenColumnCollection, (FrozenColumns[k]).ColumnName);
            }
            for (var i = 0; i < ChangedRowsInfoMasterChild.length; i++) {
                var rowInfo = ChangedRowsInfoMasterChild[i];
                var row = eval('$(\"#' + gridid + '_repeatedBodyDiv\").find(\"#' + rowInfo.RowID + '\")[0]');
                var frozenrow = eval('$(\"#' + gridid + '_repeatedFrozenDiv\").find(\"#' + rowInfo.RowID + '\")[0]');
                for (var j = 0; j < rowInfo.CellInfo.length; j++) {
                    var cellInfo = rowInfo.CellInfo[j];
                    var index = Array.indexOf(HeaderCellTextCollections, cellInfo.ColumnName);
                    var padding = (this._grid.get_GridInfo().CheckBoxInfo == null) ? 0 : 1;
                    if (this._grid.get_GridInfo().IsMasterChildGrid) {
                        index++;
                    }
                    var td = null;
                    if (Array.contains(frozenColumnCollection, cellInfo.ColumnName)) {
                        td = frozenrow.children[index - padding];
                    }
                    else {
                        td = row.children[index - this._grid.get_GridInfo().FrozenColumns.length - padding];
                    }
                    this._grid.raddomElement.setInnerContent(td, cellInfo.OldValue);
                    td.title = cellInfo.OldValue;
                    this._applyOldStyle(td);
                }
                if (row.lastChild.className === 'xlResetRowIcon') {
                    row.removeChild(row.lastChild);
                }
                else if (row.lastChild.className === 'xlResetRowButton') {
                    row.removeChild(row.lastChild.previousSibling);
                    row.removeChild(row.lastChild);
                }
            }
            eval('$find(gridid).editGrid.changedRowsInfo = []');
            this.highlightMasterChildEditableColumns(gridid);
        }
    },

    _applyOldStyle: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_applyOldStyle(td) {
        /// <param name="td" type="Object" domElement="true">
        /// </param>
        if (td.getAttribute('oldstyle') == null) {
            return;
        }
        if (td.getAttribute('oldstyle').toString() === 'empty') {
            td.removeAttribute('style');
        }
        else {
            td.style.cssText = td.getAttribute('oldstyle').toString();
        }
        td.removeAttribute('oldstyle');
    },

    _commitChanges: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_commitChanges() {
        for (var i = 0; i < this.changedRowsInfo.length; i++) {
            var insertIndex = 0;
            var rowInfo = this.changedRowsInfo[i];
            var row = rowInfo._row;
            rowInfo.RowHTML = com.ivp.rad.controls.neogrid.scripts.GridUIHelper.outerHtml(row, false);
            var length = eval('$(row).find(\'.GridColumnClass\').length');
            for (var j = 0; j < length; j++) {
                var td = row.children[j];
                if (td.getAttribute('columnIndex') == null) {
                    continue;
                }
                var index = Number.parseInvariant(td.getAttribute('columnIndex').toString());
                index = (this._grid.get_GridInfo().CheckBoxInfo == null) ? index : index - 1;
                var linq = new LINQ(rowInfo.CellInfo);
                if (linq.Any(Function.createDelegate(this, function (o, ind) {
                    var cell = o;
                    if (cell.ColumnName === this.headerCellTextCollection[index].toString()) {
                        return true;
                    }
                    return false;
                }))) {
                    this._applyOldStyle(td);
                    insertIndex++;
                    continue;
                }
                var cellInfo = new com.ivp.rad.controls.neogrid.scripts.info.ChangedCellInfo();
                cellInfo.ColumnName = this.headerCellTextCollection[index].toString();
                var tdInnerText = this._grid.raddomElement.getInnerContent(td);
                cellInfo.NewValue = tdInnerText;
                cellInfo.OldValue = tdInnerText;
                Array.insert(rowInfo.CellInfo, insertIndex++, cellInfo);
            }
            rowInfo._row = null;
        }
    },

    _changeTDValue: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_changeTDValue() {
        /// <returns type="Boolean"></returns>
        if (this.lastSelectedCell == null) {
            return true;
        }
        var ColumnName = this.lastSelectedCell.getAttribute('columnname').toString();
        var currentValue = '';
        var editColInfo = null;
        for (var i = 0; i < this._grid.get_GridInfo().EditableColumnsInfo.length; i++) {
            var editcolI = this._grid.get_GridInfo().EditableColumnsInfo[i];
            if (editcolI.ColumnName === ColumnName) {
                editColInfo = editcolI;
                break;
            }
        }
        var customElement = null;
        customElement = this.lastSelectedCell.childNodes[0];
        if (editColInfo.EditColumnMode === com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.dropDown) {
            var val = (customElement).selectedIndex;
            var option = ((customElement).options);
            if (val > 0) {
                currentValue = (option[val]).innerText;
            }
            else if (val === 0) {
                currentValue = (customElement).getAttribute('oldValue').toString();
            }
        }
        else {
            if (this.lastSelectedCell.children.length === 0) {
                currentValue = this.lastSelectedCell.innerText;
            }
            else {
                currentValue = (customElement).value;
            }
        }
        if (currentValue == null) {
            return false;
        }
        var cellIndex = Number.parseInvariant(this.lastSelectedCell.getAttribute('columnIndex').toString());
        var isValid = this._validateNewData(currentValue, this.lastSelectedCell.getAttribute('dataType').toString());
        if (isValid !== '') {
            customElement.style.borderColor = 'red';
            customElement.style.borderStyle = 'solid';
            customElement.title = isValid;
            customElement.focus();
            return false;
        }
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(customElement);
        this.lastSelectedCell.removeChild(customElement);
        this._grid.raddomElement.setInnerContent(this.lastSelectedCell, currentValue);
        this.lastSelectedCell.title = currentValue;
        var linq = new LINQ(this.changedRowsInfo);
        var rowInfo = linq.Where(Function.createDelegate(this, function (o, index) {
            var row = o;
            return row.RowID === this.lastSelectedCell.getAttribute('rowid').toString();
        })).First(null);
        linq = new LINQ(rowInfo.CellInfo);
        var cellInfo = linq.Where(Function.createDelegate(this, function (o, index) {
            var cell = o;
            return cell.ColumnName === ((this._grid.get_GridInfo().CheckBoxInfo != null) ? this.headerCellTextCollection[cellIndex].toString() : this.headerCellTextCollection[cellIndex].toString());
        })).First(null);
        cellInfo.NewValue = currentValue;
        var isCellInfoRemoved = false;
        if (rowInfo.CellInfo.length === 0) {
            Array.remove(this.changedRowsInfo, rowInfo);
        }
        if (!isCellInfoRemoved) {
            this.lastSelectedCell.style.fontWeight = 'bold';
        }
        else {
            this._applyOldStyle(this.lastSelectedCell);
        }
        this.lastSelectedCell.parentNode.style.height = '22px';
        this.lastSelectedCell.parentNode.style.lineHeight = '22px';
        this.lastSelectedCell.parentNode.removeAttribute('inEditMode');
        eval('$(this.lastSelectedCell.parentNode).find(\"div[class*=\'datacolumn\']\").css({height:\'22px\'})');
        if (this.lastSelectedCell.parentNode.className === this._grid.get_GridInfo().CssAlternatingRow) {
            eval('$(this.lastSelectedCell.parentNode).removeClass(\'xlEditRowBackground\')');
            this.lastSelectedCell.parentNode.style.color = '#1A1919';
        }
        else {
            eval('$(this.lastSelectedCell.parentNode).removeClass(\'xlEditRowBackground\')');
            this.lastSelectedCell.parentNode.style.color = '#1A1919';
        }
        var rowindex = eval('$(this.lastSelectedCell.parentNode).index()');
        var isFrozenRow = false;
        var checkBoxRow = null;
        if (eval('$(this.lastSelectedCell).closest(\'#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\' ).length') > 0) {
            isFrozenRow = true;
            if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                checkBoxRow = document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv').children[rowindex];
                checkBoxRow.children[0].style.height = '22px';
                checkBoxRow.children[0].children[0].className = '';
                checkBoxRow.style.height = '22px';
                checkBoxRow.style.lineHeight = '22px';
                eval('$(checkBoxRow).removeClass(\'xlEditRowBackground\')');
            }
        }
        var frozenrow = null;
        var actualfrozenrow = null;
        if (!isFrozenRow) {
            frozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            actualfrozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            if (this.frozenColumns.length > 0) {
                isFrozenRow = true;
                actualfrozenrow.style.height = '22px';
                actualfrozenrow.style.lineHeight = '22px';
                actualfrozenrow.style.color = '#1A1919';
                actualfrozenrow.style.backgroundColor = 'white';
                actualfrozenrow.removeAttribute('inEditMode');
                eval('$(actualfrozenrow).removeClass(\'xlEditRowBackground\')');
            }
            if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                frozenrow.children[0].style.height = '22px';
                frozenrow.children[0].children[0].className = '';
                frozenrow.style.height = '22px';
                frozenrow.style.lineHeight = '22px';
                eval('$(frozenrow).removeClass(\'xlEditRowBackground\')');
            }
        }
        else {
            frozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\').children()[' + rowindex + ']');
        }
        if (isFrozenRow) {
            if (frozenrow != null) {
                frozenrow.style.height = '22px';
                frozenrow.style.lineHeight = '22px';
                frozenrow.style.color = '#1A1919';
                frozenrow.style.backgroundColor = 'white';
                frozenrow.removeAttribute('inEditMode');
                eval('$(frozenrow).find(\"div[class*=\'datacolumn\']\").css({height:\'22px\'})');
                eval('$(frozenrow).removeClass(\'xlEditRowBackground\')');
            }
        }
        if (this._grid.get_GridInfo().EditGridFocusOut !== '' && !this.revertChange) {
            var changeinfo = null;
            for (var i = 0; i < this.changedRowsInfo.length; i++) {
                if ((this.changedRowsInfo[i]).RowID === this.lastSelectedCell.getAttribute('rowid').toString()) {
                    changeinfo = this.changedRowsInfo[i];
                    changeinfo._row = null;
                    break;
                }
            }
            if (changeinfo != null) {
                eval(this._grid.get_GridInfo().EditGridFocusOut + '(' + Sys.Serialization.JavaScriptSerializer.serialize(changeinfo) + ');');
            }
        }
        return true;
    },

    _validateNewData: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_validateNewData(newValue, dataType) {
        /// <param name="newValue" type="String">
        /// </param>
        /// <param name="dataType" type="String">
        /// </param>
        /// <returns type="String"></returns>
        var isValid = '';
        switch (dataType) {
            case 'xs_int':
                if (newValue.trim() === '') {
                    isValid = '';
                }
                else {
                    isValid = (isNaN(Number.parseInvariant(newValue))) ? 'Enter valid numeric value' : '';
                }
                break;
            case 'xs_dateTime':
                if (newValue.trim() === '') {
                    isValid = '';
                }
                else {
                }
                break;
            default:
                isValid = '';
                break;
        }
        return isValid;
    },

    _editGridData: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_editGridData(cell) {
        /// <param name="cell" type="Object" domElement="true">
        /// </param>
        var row = null;
        if (!this._isEditing) {
            return;
        }
        if (cell == null) {
            return;
        }
        row = cell.parentNode;
        if (row == null) {
            return;
        }
        if (row.getAttribute('isGroupHeader') != null && Boolean.parse(row.getAttribute('isGroupHeader').toString())) {
            return;
        }
        if (row.getAttribute('isGroupFooter') != null && Boolean.parse(row.getAttribute('isGroupFooter').toString())) {
            return;
        }
        if (this.lastSelectedCell === cell) {
            return;
        }
        if (cell.getAttribute('rowid') == null) {
            return;
        }
        if (this.lastSelectedCell != null && this.lastSelectedCell !== cell) {
            if (!this._changeTDValue()) {
                return;
            }
            this.lastSelectedCell = null;
        }
        if (cell == null || this._skipElement(cell)) {
            return;
        }
        var td = cell;
        var customElement;
        var ColumnName = cell.getAttribute('columnname').toString();
        var existingValue = '';
        var editcolInfo = null;
        for (var i = 0; i < this._grid.get_GridInfo().EditableColumnsInfo.length; i++) {
            var editColI = this._grid.get_GridInfo().EditableColumnsInfo[i];
            if (ColumnName === editColI.ColumnName) {
                editcolInfo = editColI;
                break;
            }
        }
        var index = Number.parseInvariant(td.getAttribute('columnIndex').toString());
        td.focus();
        if (editcolInfo.EditColumnMode === com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.textBox) {
            customElement = document.createElement('INPUT');
            customElement.style.borderColor = 'black';
            (customElement).value = this._grid.raddomElement.getInnerContent(td);
            customElement.setAttribute('dataType', td.getAttribute('dataType'));
            customElement.setAttribute('data-grid_id', this._grid.get_GridInfo().GridId);
            customElement.style.width = '90%';
            customElement.style.border = '1px solid #b8b7b7';
            customElement.className = 'xlEditGridTextBox';
            td.innerHTML = '';
            td.title = '';
            td.appendChild(customElement);
            customElement.focus();
            try {
                var range = (customElement).createTextRange();
                range.moveStart('character', (customElement).value.length);
                range.collapse(true);
                range.select();
            }
            catch ($e1) {
            }
            var editElementKeyDown = Function.createDelegate(this, this._elementKeyDown);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(customElement, 'keydown', editElementKeyDown);
        }
        else {
            customElement = document.createElement('SELECT');
            customElement = this._getSelectElementForEditCell(editcolInfo.DropDownValues);
            customElement.setAttribute('dataType', td.getAttribute('dataType'));
            customElement.className = 'xlEditGridDropDown';
            existingValue = this._grid.raddomElement.getInnerContent(td);
            customElement.setAttribute('oldValue', existingValue);
            customElement.style.width = '90%';
            td.innerHTML = '';
            td.title = '';
            td.appendChild(customElement);
            customElement.focus();
            var editElementKeyDown = Function.createDelegate(this, this._elementKeyDown);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(customElement, 'keydown', editElementKeyDown);
        }
        this.lastSelectedCell = td;
        if (this.lastSelectedCell.getAttribute('oldstyle') == null) {
            if (this.lastSelectedCell.style.cssText === '') {
                this.lastSelectedCell.setAttribute('oldstyle', 'empty');
            }
            else {
                this.lastSelectedCell.setAttribute('oldstyle', this.lastSelectedCell.style.cssText);
            }
        }
        var rowID = td.getAttribute('rowid').toString();
        var rowInfo = null;
        for (var i = 0; i < this.changedRowsInfo.length; i++) {
            var rowI = this.changedRowsInfo[i];
            if (rowI.RowID === rowID) {
                rowInfo = rowI;
                break;
            }
        }
        if (rowInfo == null) {
            rowInfo = new com.ivp.rad.controls.neogrid.scripts.info.ChangedRowInfo();
            rowInfo.RowID = rowID;
            rowInfo._row = row;
            Array.add(this.changedRowsInfo, rowInfo);
        }
        var cellInfo = null;
        for (var i = 0; i < rowInfo.CellInfo.length; i++) {
            var cellI = rowInfo.CellInfo[i];
            if (cellI.ColumnName === ((this._grid.get_GridInfo().CheckBoxInfo != null) ? this.headerCellTextCollection[index - 1].toString() : this.headerCellTextCollection[index].toString())) {
                cellInfo = cellI;
                break;
            }
        }
        if (cellInfo == null) {
            cellInfo = new com.ivp.rad.controls.neogrid.scripts.info.ChangedCellInfo();
            cellInfo.ColumnName = ((this._grid.get_GridInfo().CheckBoxInfo != null) ? this.headerCellTextCollection[index - 1].toString() : this.headerCellTextCollection[index].toString());
            if (editcolInfo.EditColumnMode === com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.textBox) {
                cellInfo.OldValue = (customElement).value;
                cellInfo.NewValue = (customElement).value;
            }
            else {
                cellInfo.OldValue = existingValue;
                cellInfo.NewValue = existingValue;
            }
            Array.add(rowInfo.CellInfo, cellInfo);
        }
        row.style.height = '38px';
        row.style.lineHeight = '38px';
        row.style.backgroundColor = 'white';
        row.setAttribute('inEditMode', 'true');
        eval('$(row).find(\"div[class*=\'datacolumn\']\").css({height:\'38px\'})');
        eval('$(row).addClass(\'xlEditRowBackground\')');
        var rowindex = eval('$(this.lastSelectedCell.parentNode).index()');
        var isFrozenRow = false;
        var frozenrow = null;
        if (eval('$(this.lastSelectedCell).closest(\'#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\' ).length') > 0) {
            frozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            isFrozenRow = true;
            if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                frozenrow.style.height = '38px';
                frozenrow.style.lineHeight = '38px';
                frozenrow.children[0].style.height = '38px';
                frozenrow.children[0].children[0].className = 'xlEditGridCheckBoxMargin';
                frozenrow.style.color = '#1A1919';
                frozenrow.style.backgroundColor = 'white';
                frozenrow.setAttribute('inEditMode', 'true');
                frozenrow.className = frozenrow.className + ' xlEditRowBackground';
            }
        }
        frozenrow = null;
        var actualfrozenrow = null;
        if (!isFrozenRow) {
            actualfrozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            frozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            if (this.frozenColumns.length > 0) {
                isFrozenRow = true;
            }
            if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                actualfrozenrow.children[0].style.height = '38px';
                actualfrozenrow.children[0].children[0].className = 'xlEditGridCheckBoxMargin';
                actualfrozenrow.style.height = '38px';
                actualfrozenrow.style.lineHeight = '38px';
                actualfrozenrow.style.color = '#1A1919';
                actualfrozenrow.style.backgroundColor = 'white';
                actualfrozenrow.className = actualfrozenrow.className + ' xlEditRowBackground';
                actualfrozenrow.setAttribute('inEditMode', 'true');
            }
            if (this.frozenColumns.length > 0) {
                frozenrow.className = actualfrozenrow.className + ' xlEditRowBackground';
                frozenrow.style.height = '38px';
                frozenrow.style.lineHeight = '38px';
                frozenrow.style.color = '#1A1919';
                frozenrow.style.backgroundColor = 'white';
                frozenrow.setAttribute('inEditMode', 'true');
            }
            frozenrow = actualfrozenrow;
        }
        else {
            frozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
        }
        if (isFrozenRow) {
            if (frozenrow != null) {
                frozenrow.style.height = '38px';
                frozenrow.style.lineHeight = '38px';
                frozenrow.style.backgroundColor = 'white';
                frozenrow.setAttribute('inEditMode', 'true');
                eval('$(frozenrow).find(\"div[class*=\'datacolumn\']\").css({height:\'38px\'})');
                eval('$(frozenrow).addClass(\'xlEditRowBackground\')');
            }
        }
        this._createResetDiv();
    },

    _getSelectElementForEditCell: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_getSelectElementForEditCell(OptionValues) {
        /// <param name="OptionValues" type="Array">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var selectElement = document.createElement('SELECT');
        var option = document.createElement('OPTION');
        option.value = 'Select';
        option.text = 'Select';
        option.selected = true;
        this._grid.raddomElement.addOptionElement(selectElement, option);
        for (var i = 0; i < OptionValues.length; i++) {
            option = document.createElement('OPTION');
            option.value = OptionValues[i].toString();
            option.text = OptionValues[i].toString();
            this._grid.raddomElement.addOptionElement(selectElement, option);
        }
        return selectElement;
    },
    _EnterCode: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_EnterCode(e) {
        if (e.target.nodeName === 'INPUT' && (e.target).value.trim() === '') {
            e.preventDefault();
            var gridRuleEditor = document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor');
            document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').style.display = '';
            this._setRuleEditorPosition(gridRuleEditor, e);
            document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.display = 'none';
            var __formula = '';
            if (td.getAttribute('formula') != null) {
                if (Array.contains(window.Object.keys(this.computedColumns), td.getAttribute('columnName').toString())) {
                    this.matchedTokenRuleList = [];
                    this.matchedTokenRuleList = this.computedColumns[td.getAttribute('columnName').toString()];
                    if (this.matchedTokenRuleList.length > 0) {
                        this.previousToken = this.matchedTokenRuleList[this.matchedTokenRuleList.length - 1].toString();
                    }
                }
                __formula = td.getAttribute('formula').toString().replace(new RegExp('<br/>', 'g'), '');
                document.getElementById(this._grid.elementIDManager.get_ruleEditorWidth()).innerText = __formula;
                var width = eval('$(\'#' + this._grid.elementIDManager.get_ruleEditorWidth() + '\').outerWidth()');
                if (width + eval('$(\'#' + this._grid.get_GridInfo().GridId + '_RuleIntellisense' + '\').outerWidth()') > document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth) {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth - (document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth / 4) + 'px';
                }
                else {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = width + 'px';
                }
                (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value = __formula;
                document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').style.display = '';
                document.getElementById(this._grid.get_GridInfo().GridId + '_Arrow').style.display = '';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').parentNode.style.display = 'none';
            }
            else {
                this.matchedTokenRuleList = [];
                this.previousToken = null;
                (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value = 'Create New Rule Here';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').parentNode.style.display = '';
            }
            this._showEditor(__formula);
        }
    },
    _TabCode: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_TabCode(e) {
        if (this.lastSelectedCell == null) {
            return;
        }
        td = this._getNextCellToSelect(e.shiftKey, eval('$(e.target).closest(\'div[columnname]\')[0]'));
        if (this._grid.get_GridInfo().RequireEditableRow) {
            if (td == null) {
                if($(this.nextCellToBeSelected).hasClass("xlResetRowIcon")){
                    if (e.target.type == "textarea") {
                        this.nextCellToBeSelected = e.target.parentNode.parentNode;
                    }
                    else {
                        this.nextCellToBeSelected = e.target.parentNode;
                    }
                }
                if ($(this.nextCellToBeSelected).find(".TextAreaParent").length > 0) {
                    $($(this.nextCellToBeSelected).find(".TextAreaParent"))[0].style.width = '350px';
                    $($(this.nextCellToBeSelected).find(".TextAreaParent"))[0].style.height = '100px';
                    $($(this.nextCellToBeSelected).find(".TextAreaParent").find(".xlEditGridTextBox"))[0].style.width = '330px';
                    $($(this.nextCellToBeSelected).find(".TextAreaParent").find(".xlEditGridTextBox"))[0].style.height = '80px';
                    $(this.nextCellToBeSelected).find(".TextAreaParent").find(".xlEditGridTextBox")[0].focus();
                }
                else {
                    this.nextCellToBeSelected.children[0].focus();
                }

            }
            else {
                this._editGridRowData(td, false, null);
                if (e.shiftKey) {
                    var tdEle = this._getPossibleSibling(eval('$(this.lastSelectedCell).children().last()[0]'), 'PreviousSibling');
                    tdEle.children[0].focus();
                }
                else {
                    if (this._grid.get_GridInfo().IsMasterChildGrid) {
                        var tdEle = this._getPossibleSibling(eval('$(this.lastSelectedCell).children().first()[1]'), 'NextSibling');
                        tdEle.children[1].focus();
                    }
                    else {
                        var tdEle = this._getPossibleSibling(eval('$(this.lastSelectedCell).children().first()[0]'), 'NextSibling');
                        tdEle.children[0].focus();
                    }
                }
            }
        }
        else {
            if (td != null) {
                this._editGridData(td);
            }
        }
        var scrollLeft = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_bodyDiv\').scrollLeft()');
        eval('$(\'#' + this._grid.get_GridInfo().GridId + '_headerDiv\').scrollLeft(' + scrollLeft + ')');
        var scrollTop = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_bodyDiv\').scrollTop()');
        eval('$(\'#' + this._grid.get_GridInfo().GridId + '_frozen_bodyDiv\').scrollTop(' + scrollTop + ')');
        if (document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_bodyDiv') != null) {
            e.preventDefault();
        }
    },
    _SetTextArea:function com_ivp_rad_controls_neogrid_scripts_EditGrid$_SetTextArea(e) {
        if ($(e.target.parentNode)[0].style.width != 'auto') {
            $(e.target.parentNode)[0].style.width = 'auto';
            $(e.target.parentNode)[0].style.height = 'auto';
            $($(e.target.parentNode).find(".xlEditGridTextBox"))[0].style.width = '100%';
            $($(e.target.parentNode).find(".xlEditGridTextBox"))[0].style.height = '22px';
        }
        else {
            $(e.target.parentNode)[0].style.width = '350px';
            $(e.target.parentNode)[0].style.height = '100px';
            $($(e.target.parentNode).find(".xlEditGridTextBox"))[0].style.width = '330px';
            $($(e.target.parentNode).find(".xlEditGridTextBox"))[0].style.height = '80px';
        }
      
    },
    getCleanNumber : function com_ivp_rad_controls_neogrid_scripts_EditGrid$getCleanNumber(value, prefix, suffix) {
    if (prefix == undefined) {
        prefix = "";
    }
    if (suffix == undefined) {
        suffix = "";
    }
    var t_prefix = prefix.trim();
    var t_suffix = suffix.trim()
    var temp = value.toString().toLowerCase().replace(/,/g, "");
    temp = temp.trim();

    if (t_prefix != "" && temp.startsWith(t_prefix)) {
        temp = temp.replace(t_prefix, "");
    }

    if (t_suffix != "" && temp.endsWith(t_suffix)) {
        temp = temp.replace(t_suffix, "");
    }

    temp = temp.trim();
    return temp;

    },

    formatNumber : function com_ivp_rad_controls_neogrid_scripts_EditGrid$formatNumber(value, precision, prefix, suffix, increment) {
        if (event.type == "keydown") {
            if (event.key != "ArrowUp" && event.key != "ArrowDown") {
                return value;
            }
        }
        value = value.toString();
        if (value == "") {
            return "";
        }
        increment = parseFloat(increment);
        if (!increment) {
            increment = 1;
        }
        var isNegative = false;
        if (value.includes("-")) {
            isNegative = true;
        }
        if (prefix == undefined) {
            prefix = "";
        }
        if (suffix == undefined) {
            suffix = "";
        }
        if (precision == undefined) {
            precision = 0;
        }
        var multiplier = 1;
        var temp = this.getCleanNumber(value, prefix, suffix);
        temp = temp.toLowerCase();
        if (temp.indexOf("k") != -1) {
            multiplier = 1000;
            temp = temp.replace(/k/g, '');
        } else if (temp.indexOf("m") != -1) {
            multiplier = 1000000;
            temp = temp.replace(/m/g, '');
        } else if (temp.indexOf("b") != -1) {
            multiplier = 1000000000;
            temp = temp.replace(/b/g, '');
        }
        var numericPart = parseFloat(temp);
        var isNegative = false;
        if (temp.indexOf('-') == 0) {
            isNegative = true;
        }
        if (Number.isNaN(numericPart) && temp == "-") {
            return temp;
        }
        var stringPart = temp.replace(numericPart, "");
        if (increment == undefined) {
            increment = 1;
        }
        if (increment != undefined && event.type == "keydown") {
            if (event.key == "ArrowUp") {
                numericPart += increment;
            } else if (event.key == "ArrowDown") {
                numericPart -= increment;
            }
        }
        var identifier = stringPart.replace(/0/g, '').trim();
        identifier = identifier.replace('.', '').trim();
        numericPart *= multiplier;
        var decimalPosition = -1;
        if (value != 0) {
            var valueWithoutPrefix = value.toString().replace(prefix, "").replace(suffix, "").trim();
            var length = valueWithoutPrefix.length;
            decimalPosition = valueWithoutPrefix.indexOf('.');
            var currentPrecision = precision;
            if (decimalPosition != -1) {
                currentPrecision = length - decimalPosition - 1;
                if (currentPrecision == 0) {
                    currentPrecision = 1;
                }
                if (currentPrecision < precision) {
                    precision = currentPrecision;
                }
                else {
                    var valueWithPrecision = numericPart.toFixed(currentPrecision);
                    var valueOld = valueWithPrecision;
                    var parts = valueWithPrecision.toString().split(".");
                    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    var numericPartWithComma = parts.join(".");

                    if (numericPartWithComma == "NaN") {
                        numericPartWithComma = "0";
                    }
                    if (currentPrecision == 0 && decimalPosition != -1) {
                        numericPartWithComma += ".";
                    }

                    if (prefix != "") {
                        numericPartWithComma = prefix + numericPartWithComma;
                    }
                    if (suffix != "") {
                        numericPartWithComma = numericPartWithComma + suffix;
                    }
                    return numericPartWithComma;

                }
            } else {
                precision = 0;
            }
        }
        var valueWithPrecision = numericPart.toFixed(precision);
        var valueOld = valueWithPrecision;
        var parts = valueWithPrecision.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        var numericPartWithComma = parts.join(".");

        if (numericPartWithComma == "NaN") {
            numericPartWithComma = "0";
        }
        if (precision == 0 && decimalPosition != -1) {
            numericPartWithComma += ".";
        }

        if (prefix != "") {
            numericPartWithComma = prefix + numericPartWithComma;
        }
        if (suffix != "") {
            numericPartWithComma = numericPartWithComma + suffix;
        }
        if (isNegative && !(numericPartWithComma.includes("-"))) {
            return numericPartWithComma * -1;
        } else {
            return numericPartWithComma;
        }
        //return numericPartWithComma;
    },
    fOnKeyUp: function com_ivp_rad_controls_neogrid_scripts_EditGrid$fOnKeyUp(currElement, value) {
        if (value == null || value == undefined) {
            value = "";
        }
        //var ele = $("#" + this.identifier + " [type='text']")[0];
        var ele = $(currElement)[0];
        if (ele == undefined) return;
        //var cursorPositionEnd = ele.selectionEnd;
        var cursorPositionOld = ele.selectionStart;
        var decimalPostionOld = ele.value.indexOf('.');
        if (decimalPostionOld < 0) {
            decimalPostionOld = ele.value.toString().length;
        }
        var p = undefined;
        if (p === undefined) {
            p = ["", 2, "", 1];
        } else {
            p = p.split('~');
        }
        var newValue = this.formatNumber(value, p[1], p[0], p[2], p[3]);
        if (newValue == "NaN") {
            newValue = "0";
        }
        if (newValue != value) {
            $(currElement).val(newValue);
            //  left of Decimal
            if (cursorPositionOld <= decimalPostionOld) {
                var decimalPostionNew = newValue.indexOf('.');
                if (decimalPostionNew < 0) {
                    decimalPostionNew = ele.value.toString().length;
                }
                var cursorPositionNew = decimalPostionNew - (decimalPostionOld - cursorPositionOld);
                ele.selectionStart = cursorPositionNew;
                ele.selectionEnd = cursorPositionNew;
            } else {
                var decimalPositionNew = newValue.indexOf('.');
                if (decimalPostionNew < 0) {
                    decimalPostionNew = ele.value.toString().length;
                }
                var cursorPositionNew = cursorPositionOld + (decimalPositionNew - decimalPostionOld);
                ele.selectionStart = cursorPositionNew;
                ele.selectionEnd = cursorPositionNew;
            }
        }
    },
    _elementKeyDown: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_elementKeyDown(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var td = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
        var cellIndex = $(td).hasClass("TextAreaParent") ? Number.parseInvariant(td.parentNode.getAttribute('columnindex').toString()) : Number.parseInvariant(td.getAttribute('columnIndex').toString());
        var dataType = $(td).hasClass("TextAreaParent") ? td.parentNode.getAttribute('dataType').toString() : td.getAttribute('dataType').toString();
        if (e.keyCode === Sys.UI.Key.enter) {
            document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').style.display = 'none';
            document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.display = 'none';
            document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').parentNode.style.display = '';
            if (!this._changeTDValue()) {
                return;
            }
            this.lastSelectedCell = null;
        }
        else if (e.ctrlKey && e.keyCode === com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.f && (dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int || dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal || dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double)) {
            e.preventDefault();
            var gridRuleEditor = document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor');
            document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').style.display = '';
            var __formula = '';
            this._setRuleEditorPosition(gridRuleEditor, e);
            document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.display = 'none';
            if (td.getAttribute('formula') != null) {
                if (Array.contains(window.Object.keys(this.computedColumns), td.getAttribute('columnName').toString())) {
                    this.matchedTokenRuleList = [];
                    this.matchedTokenRuleList = this.computedColumns[td.getAttribute('columnName').toString()];
                    if (this.matchedTokenRuleList.length > 0) {
                        this.previousToken = this.matchedTokenRuleList[this.matchedTokenRuleList.length - 1].toString();
                    }
                }
                __formula = td.getAttribute('formula').toString().replace(new RegExp('<br/>', 'g'), '');
                document.getElementById(this._grid.elementIDManager.get_ruleEditorWidth()).innerText = __formula;
                var width = eval('$(\'#' + this._grid.elementIDManager.get_ruleEditorWidth() + '\').outerWidth()');
                if (width + eval('$(\'#' + this._grid.get_GridInfo().GridId + '_RuleIntellisense' + '\').outerWidth()') > document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth) {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth - (document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth / 4) + 'px';
                }
                else {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = width + 'px';
                }
                (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value = __formula;
                document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').style.display = '';
                document.getElementById(this._grid.get_GridInfo().GridId + '_Arrow').style.display = '';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').parentNode.style.display = 'none';
            }
            else {
                this.matchedTokenRuleList = [];
                this.previousToken = null;
                (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value = 'Create New Rule Here';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').parentNode.style.display = '';
            }
            this._showEditor(__formula);
            this._currentRuleExecutingColumnName = td.getAttribute('columnName').toString();
            eval('window.event.keyCode = 505;');
        }
        else if (dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int || dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal || dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double) {
            if (dataType != com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int) {
                if (e.keyCode == 8 || e.keyCode == 39 || e.keyCode == 37 || e.keyCode == 46 || (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105) || e.keyCode == Sys.UI.Key.tab || e.keyCode == com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.EQUALS || e.keyCode == 189 || e.keyCode == 77 || e.keyCode == 66 || e.keyCode == 75|| e.keyCode == 190 ||e.keyCode == 110 ) {//e.keyCode == 190 ||
                    if (e.keyCode == 189)
                    {

                    }
                    else if(e.keyCode == 77 || e.keyCode == 66 || e.keyCode == 75)
                    {

                    }
                    else if (e.keyCode == 190) {
                        if ($(td).find(".xlEditGridTextBox")[0].value.indexOf(".") != -1) {
                            e.stopPropagation()
                            e.preventDefault();
                            return false;
                        }
                    }
                    else if (e.keyCode == Sys.UI.Key.tab) {
                        if ($(td).hasClass("TextAreaParent")) {
                            this._SetTextArea(e);
                        }
                        this._TabCode(e);
                    }
                    else if (e.keyCode == com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.EQUALS) {
                        this._EnterCode(e);
                    }
                }
                else {
                    e.stopPropagation()
                    e.preventDefault();
                    return false;
                }
            }
            else {
                if (e.keyCode == 8 || (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105) || e.keyCode == Sys.UI.Key.tab || e.keyCode == com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.EQUALS) {
                    if (e.keyCode == Sys.UI.Key.tab) {
                        if ($(td).hasClass("TextAreaParent")) {
                            this._SetTextArea(e);
                        }
                        this._TabCode(e);
                    }
                    else if (e.keyCode == com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.EQUALS) {
                        this._EnterCode(e);
                    }
                }
                else {
                    e.stopPropagation()
                    e.preventDefault();
                    return false;
                }
            }
        }
        else if (e.keyCode === com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.EQUALS) {
            this._EnterCode(e);
        }
        else if (e.keyCode === Sys.UI.Key.tab) {
            if ($(td).hasClass("TextAreaParent"))
            {
                this._SetTextArea(e);
            }
            this._TabCode(e);
        }
        
    },
    _editElementFocusOut: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_editElementFocusOut(e) {
        var td = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
        var dataType = $(td).hasClass("TextAreaParent") ? td.parentNode.getAttribute('dataType').toString() : td.getAttribute('dataType').toString();
        if (dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int || dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal || dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double) {
            if (e.target.value.indexOf('.') != -1) {
                td.style.border = "1px solid red !important"
            }
        }
    },
    _elementKeyUp: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_elementKeyUp(e) {
        var td = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
        var dataType = $(td).hasClass("TextAreaParent") ? td.parentNode.getAttribute('dataType').toString() : td.getAttribute('dataType').toString();
        if(dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int || dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal || dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double )
        {
            this.fOnKeyUp(e.target, e.target.value);
            // This HardCoding is done because of Rahul Gupta .(tsroy) 
            //if ($($(e.target).parent()).attr("columnname") == "quantity_eod") {
            //    if(e.target.value.indexOf('.') != -1)
            //    {
            //        e.target.value = e.target.value.substring(0, e.target.value.indexOf('.'))
            //    }
            //    if (e.target.value == 0) {
            //        e.target.value = this.changedRowsInfo[this.changedRowsInfo.length - 1].CellInfo.find(x => x.ColumnName == $($(e.target).parent()).attr("columnname")).OldValue;
            //    }
            //}
        }
    },
    _setRuleEditorPosition: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_setRuleEditorPosition(gridRuleEditor, e) {
        /// <param name="gridRuleEditor" type="Object" domElement="true">
        /// </param>
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var gridRuleintellisense = document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense');
        var offsettop = 0;
        var offsetleft = 0;
        var parent = document.getElementById(this._grid.get_GridInfo().GridId);
        while (parent != null && parent.offsetParent != null) {
            if ((parent.offsetParent.style.position !== '' && parent.offsetParent.style.position.toString().toLowerCase() !== 'static') || (eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== '' && eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== 'static')) {
                offsettop += parent.offsetParent.offsetTop;
                offsetleft += parent.offsetParent.offsetLeft;
                parent = parent.offsetParent;
            }
            else {
                parent = parent.offsetParent;
            }
        }
        var x = Math.floor(document.getElementById(this._grid.get_GridInfo().GridId).offsetWidth * 0.4);
        var documentHeight = document.documentElement.clientHeight;
        var documentWidth = document.documentElement.clientWidth;
        var locationX = this._grid.elementInfo.get_frozenBodyDiv().offsetWidth + this._getWidth(com.ivp.rad.controls.neogrid.scripts.GridUIHelper.cellIndex(e.target.parentNode)) - this._grid.elementInfo.get_bodyInnerDiv().scrollLeft;
        var locationY = (((e.target.parentNode).parentNode).rowIndex - 1) * 20 + 54 - this._grid.elementInfo.get_bodyInnerDiv().scrollTop;
        gridRuleEditor.style.top = locationY.toString() + 'px';
        gridRuleEditor.style.left = (locationX < 0) ? e.clientX + 'px' : ((locationX + (x + 16) + e.target.parentNode.offsetWidth > this._grid.elementInfo.get_bodyInnerDiv().offsetWidth) ? locationX - (x + 16) + 'px' : (locationX + e.target.parentNode.offsetWidth).toString() + 'px');
        if ((locationX + x + e.target.parentNode.offsetWidth > this._grid.elementInfo.get_bodyInnerDiv().offsetWidth)) {
            document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').parentNode.className = 'xlNewRuleRight';
        }
        else {
            document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').parentNode.className = 'xlNewRuleLeft';
        }
        gridRuleintellisense.style.left = '0px';
        gridRuleintellisense.style.top = (locationY - (this._grid.elementInfo.get_upperHeaderDiv().offsetHeight + this._grid.elementInfo.get_fluidHeaderDiv().offsetHeight) + 129 > this._grid.elementInfo.get_bodyInnerDiv().offsetHeight) ? '25px' : '25px';
    },

    _getWidth: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_getWidth(index) {
        /// <param name="index" type="Number" integer="true">
        /// </param>
        /// <returns type="Number" integer="true"></returns>
        var width = 0;
        for (var i = 0; i < index; i++) {
            width += (this._grid.elementInfo.get_bodyInnerTable().children[1].children[0]).cells[i].offsetWidth;
        }
        return width;
    },

    _skipElement: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_skipElement(td) {
        /// <param name="td" type="Object" domElement="true">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (td.className !== 'xlResetRowIcon') {
            var gridRow;
            if (this._grid.get_GridInfo().RequireEditableRow) {
                gridRow = td;
            }
            else {
                gridRow = td.parentNode;
            }
            var isEditableRow = false;
            if (this._grid.get_GridInfo().EditableRows.length > 0) {
                isEditableRow = Array.contains(this._grid.get_GridInfo().EditableRows, gridRow.getAttribute('idColumnValue').toString());
            }
            else if (this._grid.get_GridInfo().NonEditableRows != null) {
                isEditableRow = !Array.contains(this._grid.get_GridInfo().NonEditableRows, gridRow.getAttribute('idColumnValue').toString());
            }
            if (isEditableRow) {
                var linq;
                if (!this._grid.get_GridInfo().RequireEditableRow) {
                    var columnName = td.getAttribute('columnName').toString();
                    linq = new LINQ(this._grid.get_GridInfo().EditableColumns);
                    if (linq.Any(Function.createDelegate(this, function (o, i) {
                        if (o.toString() === columnName) {
                            return true;
                        }
                        return false;
                    }))) {
                        return false;
                    }
                    else {
                        return true;
                    }
                }
                else {
                    var columnName = this.selectCellOnRowEdit.getAttribute('columnName').toString();
                    linq = new LINQ(this._grid.get_GridInfo().EditableColumns);
                    if (linq.Any(Function.createDelegate(this, function (o, i) {
                        if (o.toString() === columnName) {
                            return true;
                        }
                        return false;
                    }))) {
                        return false;
                    }
                    else {
                        return true;
                    }
                }
            }
            return true;
        }
        else {
            return true;
        }
    },

    _skipElementForTab: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_skipElementForTab(td) {
        /// <param name="td" type="Object" domElement="true">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (td.className !== 'xlResetRowIcon') {
            var gridRow;
            if (this._grid.get_GridInfo().RequireEditableRow) {
                gridRow = td.parentNode;
            }
            else {
                gridRow = td.parentNode;
            }
            var isEditableRow = false;
            if (this._grid.get_GridInfo().EditableRows.length > 0) {
                isEditableRow = Array.contains(this._grid.get_GridInfo().EditableRows, gridRow.getAttribute('idColumnValue').toString());
            }
            else if (this._grid.get_GridInfo().NonEditableRows != null) {
                isEditableRow = !Array.contains(this._grid.get_GridInfo().NonEditableRows, gridRow.getAttribute('idColumnValue').toString());
            }
            if (isEditableRow) {
                var linq;
                if (!this._grid.get_GridInfo().RequireEditableRow) {
                    var columnName = td.getAttribute('columnName').toString();
                    linq = new LINQ(this._grid.get_GridInfo().EditableColumns);
                    if (linq.Any(Function.createDelegate(this, function (o, i) {
                        if (o.toString() === columnName) {
                            return true;
                        }
                        return false;
                    }))) {
                        return false;
                    }
                    else {
                        return true;
                    }
                }
                else {
                    var columnName = td.getAttribute('columnName').toString();
                    linq = new LINQ(this._grid.get_GridInfo().EditableColumns);
                    if (linq.Any(Function.createDelegate(this, function (o, i) {
                        if (o.toString() === columnName) {
                            return true;
                        }
                        return false;
                    }))) {
                        return false;
                    }
                    else {
                        return true;
                    }
                }
            }
            return true;
        }
        else {
            return true;
        }
    },

    _showEditor: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_showEditor(__formula) {
        /// <param name="__formula" type="String">
        /// </param>
        com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(true);
        if (this._formulaEditor == null) {
            this._ruleEditor = document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor');
            this._ruleEditorInput = document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput');
            this._ruleintellisense = document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense');
            com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._ruleEditor);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._ruleintellisense);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._ruleEditorInput);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._ruleEditor, 'click', Function.createDelegate(this, this._ruleEditorClick));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._ruleEditor, 'keyup', Function.createDelegate(this, this._getRuleIntellisense));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._ruleEditor, 'keydown', Function.createDelegate(this, this._executeRule));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._ruleEditorInput, 'keydown', Function.createDelegate(this, this._executeRuleOnEnter));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._ruleintellisense, 'keydown', Function.createDelegate(this, this._ruleEditorKeyDown));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._ruleintellisense, 'mouseover', Function.createDelegate(this, this._ruleEditorMouseOver));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._ruleintellisense, 'mouseout', Function.createDelegate(this, this._ruleEditorMouseOut));
        }
        else {
            this._resetEditor();
            this._resetRuleEditor();
        }
        this._ruleEditor.style.display = '';
        eval('$(\'#' + this._grid.get_GridInfo().GridId + '_gridRuleEditor\').fadeIn(1000);');
        this._formula = __formula;
        this._setIntellisenseData(0, '');
    },

    _formulaEditorClick: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_formulaEditorClick(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target != null) {
            if (e.target.nodeName === 'DIV' && e.target.id === this._grid.elementIDManager.get_gridEditor() + '_close') {
                this._closeEditor();
            }
            else if ((e.target.nodeName === 'INPUT' && (e.target).type === 'button') || e.target.nodeName === 'A') {
                if (e.target.id === this._grid.elementIDManager.get_gridEditor() + '_okButton') {
                    this._editorOkClick();
                }
                else if (e.target.id === this._grid.elementIDManager.get_gridEditor() + '_resetButton') {
                    this._editorResetClick();
                }
                else if (e.target.id === this._grid.elementIDManager.get_gridEditor() + '_closeButton') {
                    this._closeEditor();
                }
                else if (e.target.nodeName === 'A') {
                    this._formula += this._grid.raddomElement.getInnerContent(e.target);
                    this._setIntellisenseData(0, '');
                }
                else {
                    var value = (e.target).value;
                    var del = '';
                    if (value === 'Del') {
                        del = '|d';
                    }
                    else {
                        this._formula += value;
                    }
                    this._setIntellisenseData(0, del);
                }
            }
        }
    },

    _ruleEditorClick: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_ruleEditorClick(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target != null) {
            if (e.target.className === 'xlAddRule') {
                document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').style.display = '';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').parentNode.style.display = 'none';
            }
            else if (e.target.className === 'xlSaveRule') {
                if (this._currentEditingRule) {
                    this._currentEditingRule = false;
                    document.getElementById(this._xlRuleTextID).innerText = document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').innerHTML;
                }
                else {
                    this._createRuleEditorDiv(document.getElementById(this._grid.get_GridInfo().GridId + '_xlExistingRule'), document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').innerHTML);
                    document.getElementById(this._grid.get_GridInfo().GridId + '_xlExistingRule').style.display = '';
                }
                document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').style.display = 'none';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlSaveRule').style.display = 'none';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlCancelRule').style.display = 'none';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').style.display = '';
            }
            else if (e.target.className === 'xlCancelRule') {
                this._currentEditingRule = false;
                this._xlRuleTextID = '';
                document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').style.display = 'none';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlSaveRule').style.display = 'none';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlCancelRule').style.display = 'none';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').style.display = '';
            }
            else if (e.target.className === 'xlEditRule') {
                this._currentEditingRule = true;
                this._xlRuleTextID = e.target.previousSibling.previousSibling.getAttribute('id').toString();
                document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').innerText = e.target.previousSibling.previousSibling.innerText;
                document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').style.display = '';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlSaveRule').style.display = '';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlCancelRule').style.display = '';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').style.display = 'none';
            }
            else if (e.target.className === 'xlDeleteExistingRule') {
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlExistingRule').removeChild(e.target.parentNode);
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_xlExistingRule').children.length === 1) {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_xlExistingRule').style.display = 'none';
                }
            }
            else if (e.target.className === 'ruleEditorInput') {
                if ((document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value === 'Create New Rule Here') {
                    (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value = '';
                }
                (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).focus();
            }
            else if (e.target.className === 'btnExecuteRule') {
                this.previousToken = null;
                this._editorOkClick();
            }
            else if (e.target.className === 'btnReset') {
                this.previousToken = null;
                Array.clear(this.matchedTokenRuleList);
                this._closeRuleEditor();
            }
            else if (e.target.className === 'xlRuleIntellisenseCellfocussed') {
                if ((e.target).innerText === 'Enter Number') {
                    this._enterNumberFlag = true;
                }
                else {
                    var ruleInput = (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput'));
                    if (this.previousToken != null) {
                        ruleInput.value = ruleInput.value.substr(0, ruleInput.value.lastIndexOf(this.previousToken) + this.previousToken.length) + ' ' + (e.target).innerText + ' ';
                    }
                    else {
                        ruleInput.value = (e.target).innerText + ' ';
                    }
                    this.previousToken = (e.target).innerText;
                    Array.add(this.matchedTokenRuleList, this.previousToken);
                    var range = (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).createTextRange();
                    range.moveStart('character', (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value.length);
                    range.collapse(true);
                    range.select();
                    var value = ruleInput.value;
                    var del = '';
                    if (value === 'Del') {
                        del = '|d';
                    }
                    else {
                        this._formula = value;
                    }
                    var ruleTextWidth = document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisenseWidth');
                    ruleTextWidth.innerText = value;
                    var leftPosition = 0;
                    var width = eval('$(\'#' + this._grid.elementIDManager.get_ruleEditorWidth() + '\').outerWidth()');
                    if (leftPosition + width + document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth > leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth) {
                        document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth - document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth + 'px';
                    }
                    else {
                        document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + width + 'px';
                    }
                    this._setIntellisenseData(0, del.trim());
                }
            }
        }
    },

    _executeRuleOnEnter: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_executeRuleOnEnter(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.keyCode === com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.ENTER) {
            this.previousToken = null;
            this._editorOkClick();
            e.preventDefault();
            e.stopPropagation();
        }
    },

    _executeRule: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_executeRule(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.keyCode === com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.DOWNARRAOW) {
            var ruleIntellisense = document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense');
            if (window.jQuery(ruleIntellisense).find('TD[class=xlRuleIntellisenseCellfocussed]').length > 0) {
                var rowIndex = ((window.jQuery(ruleIntellisense).find('TD[class=xlRuleIntellisenseCellfocussed]')[0]).parentNode).rowIndex;
                if ((ruleIntellisense.firstChild.firstChild.firstChild).rows[rowIndex + 1] != null) {
                    (ruleIntellisense.firstChild.firstChild.firstChild).rows[rowIndex].children[0].className = 'xlRuleIntellisenseCell';
                    (ruleIntellisense.firstChild.firstChild.firstChild).rows[rowIndex + 1].children[0].className = 'xlRuleIntellisenseCellfocussed';
                    (ruleIntellisense.firstChild.firstChild.firstChild).rows[rowIndex + 1].children[0].focus();
                }
            }
            else {
                if ((ruleIntellisense.firstChild.firstChild.firstChild).rows.length > 0) {
                    (ruleIntellisense.firstChild.firstChild.firstChild).rows[0].children[0].focus();
                    (ruleIntellisense.firstChild.firstChild.firstChild).rows[0].children[0].className = 'xlRuleIntellisenseCellfocussed';
                }
            }
            e.preventDefault();
            e.stopPropagation();
        }
        else if (e.keyCode === com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.UPARROW) {
            var ruleIntellisense = document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense');
            if (window.jQuery(ruleIntellisense).find('TD[class=xlRuleIntellisenseCellfocussed]').length > 0) {
                var rowIndex = ((window.jQuery(ruleIntellisense).find('TD[class=xlRuleIntellisenseCellfocussed]')[0]).parentNode).rowIndex;
                if ((ruleIntellisense.firstChild.firstChild.firstChild).rows[rowIndex - 1] != null) {
                    (ruleIntellisense.firstChild.firstChild.firstChild).rows[rowIndex].children[0].className = 'xlRuleIntellisenseCell';
                    (ruleIntellisense.firstChild.firstChild.firstChild).rows[rowIndex - 1].children[0].className = 'xlRuleIntellisenseCellfocussed';
                    (ruleIntellisense.firstChild.firstChild.firstChild).rows[rowIndex - 1].children[0].focus();
                }
            }
            e.preventDefault();
            e.stopPropagation();
        }
    },

    _ruleIntellisenseClick: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_ruleIntellisenseClick(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'xlRuleIntellisenseCellfocussed') {
            if ((e.target).innerText === 'Enter Number') {
                this._enterNumberFlag = true;
            }
            else {
                var ruleInput = (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput'));
                if (this.previousToken != null) {
                    ruleInput.value = ruleInput.value.substr(0, ruleInput.value.lastIndexOf(this.previousToken) + this.previousToken.length) + ' ' + (e.target).innerText + ' ';
                }
                else {
                    ruleInput.value = (e.target).innerText + ' ';
                }
                this.previousToken = (e.target).innerText;
                Array.add(this.matchedTokenRuleList, this.previousToken);
                var range = (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).createTextRange();
                range.moveStart('character', (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value.length);
                range.collapse(true);
                range.select();
                var value = ruleInput.value;
                var del = '';
                if (value === 'Del') {
                    del = '|d';
                }
                else {
                    this._formula = value;
                }
                var ruleTextWidth = document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisenseWidth');
                ruleTextWidth.innerText = value;
                var leftPosition = 0;
                var width = eval('$(\'#' + this._grid.elementIDManager.get_ruleEditorWidth() + '\').outerWidth()');
                if (leftPosition + width + document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth > leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth) {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth - document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth + 'px';
                }
                else {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + width + 'px';
                }
                this._setIntellisenseData(0, del.trim());
            }
        }
    },

    _getRuleIntellisense: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_getRuleIntellisense(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'ruleEditorInput' && (e.keyCode !== com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.ENTER || e.keyCode !== com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.SPACE)) {
            if ((e.target).value.trim().length > 0) {
                if (!this._isNumber((e.target).value.trim().substr((e.target).value.trim().length - 1, (e.target).value.trim().length))) {
                    this.previuosTokenIsNumber = true;
                }
                else {
                    this.previuosTokenIsNumber = false;
                }
            }
            this._currentGrammar = [];
            if (!this._enterNumberFlag) {
                if (e.keyCode === com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.BACKSPACE) {
                    var actualRuleEditorText = '';
                    if (this.previousToken != null) {
                        actualRuleEditorText = (e.target).value;
                        if (!this._getPreviousTokenFlag(actualRuleEditorText)) {
                            var value = '';
                            if (this.previousToken != null) {
                                this._remainingTextFromRule = actualRuleEditorText.substr(actualRuleEditorText.lastIndexOf(this.previousToken) + this.previousToken.length).trim();
                                value = actualRuleEditorText.substr(0, actualRuleEditorText.lastIndexOf(this.previousToken) + this.previousToken.length);
                            }
                            else {
                                this._remainingTextFromRule = actualRuleEditorText;
                            }
                            var del = '';
                            if (value === 'Del') {
                                del = '|d';
                            }
                            else {
                                this._formula = value;
                            }
                            var ruleTextWidth = document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisenseWidth');
                            ruleTextWidth.innerText = value;
                            var leftPosition = 0;
                            var width = eval('$(\'#' + this._grid.elementIDManager.get_ruleEditorWidth() + '\').outerWidth()');
                            if (leftPosition + width + document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth > leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth) {
                                document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth - document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth + 'px';
                            }
                            else {
                                document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + width + 'px';
                            }
                            this._setIntellisenseData(0, del.trim());
                        }
                        else {
                            var token = actualRuleEditorText.substr(actualRuleEditorText.lastIndexOf(this.previousToken) + this.previousToken.length).trim();
                            for (var i = 0; i < this._ruleGrammerList.length; i++) {
                                if (this._ruleGrammerList[i].toString().toLowerCase().startsWith(token.toLowerCase())) {
                                    Array.add(this._currentGrammar, this._ruleGrammerList[i].toString());
                                }
                            }
                            this._createIntellisenseDiv(this._currentGrammar);
                        }
                    }
                    else {
                        actualRuleEditorText = (e.target).value;
                        for (var i = 0; i < this._ruleGrammerList.length; i++) {
                            if (this._ruleGrammerList[i].toString().toLowerCase().startsWith(actualRuleEditorText.toLowerCase())) {
                                Array.add(this._currentGrammar, this._ruleGrammerList[i].toString());
                            }
                        }
                        this._createIntellisenseDiv(this._currentGrammar);
                    }
                }
                else if ((e.target).value.endsWith('\"')) {
                    if (((e.target).value.split('\"').length - 1) % 2 === 0) {
                        var actualRuleEditorText = (e.target).value;
                        var ruleText = '';
                        ruleText = actualRuleEditorText;
                        var currentToken = '';
                        if (this.previousToken != null) {
                            currentToken = ruleText.substr(ruleText.lastIndexOf(this.previousToken) + this.previousToken.length + 1, ruleText.length);
                        }
                        else {
                            currentToken = ruleText;
                        }
                        if (this._enterNumberFlag) {
                            this._enterNumberFlag = false;
                        }
                        (e.target).value = (e.target).value + ' ';
                        this.previousToken = currentToken;
                        Array.add(this.matchedTokenRuleList, this.previousToken);
                        var value = (e.target).value;
                        var del = '';
                        if (value === 'Del') {
                            del = '|d';
                        }
                        else {
                            this._formula = value;
                        }
                        var ruleTextWidth = document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisenseWidth');
                        ruleTextWidth.innerText = value;
                        var leftPosition = 0;
                        var width = eval('$(\'#' + this._grid.elementIDManager.get_ruleEditorWidth() + '\').outerWidth()');
                        if (leftPosition + width + document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth > leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth) {
                            document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth - document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth + 'px';
                        }
                        else {
                            document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + width + 'px';
                        }
                        this._setIntellisenseData(0, del.trim());
                    }
                }
                else {
                    if (!this.previuosTokenIsNumber) {
                        var actualRuleEditorText = (e.target).value;
                        var ruleText = '';
                        ruleText = actualRuleEditorText;
                        var currentToken = '';
                        if (this.previousToken != null) {
                            currentToken = ruleText.substr(ruleText.lastIndexOf(this.previousToken) + this.previousToken.length, ruleText.length).trimStart().trimEnd();
                        }
                        else {
                            currentToken = ruleText.trimEnd().trimStart();
                        }
                        for (var i = 0; i < this._ruleGrammerList.length; i++) {
                            if (this._ruleGrammerList[i].toString().toLowerCase().startsWith(currentToken.toLowerCase().trimEnd().trimStart())) {
                                Array.add(this._currentGrammar, this._ruleGrammerList[i].toString());
                            }
                        }
                        if ((this._currentGrammar.length === 1 && this._matchEneteredText(this._currentGrammar, currentToken)) || this._numberEnteredFlag) {
                            if (this._enterNumberFlag) {
                                this._enterNumberFlag = false;
                            }
                            (e.target).value = (e.target).value + ' ';
                            this.previousToken = currentToken;
                            Array.add(this.matchedTokenRuleList, this.previousToken);
                            var value = (e.target).value;
                            var del = '';
                            if (value === 'Del') {
                                del = '|d';
                            }
                            else {
                                this._formula = value;
                            }
                            var ruleTextWidth = document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisenseWidth');
                            ruleTextWidth.innerText = value;
                            var leftPosition = 0;
                            var width = eval('$(\'#' + this._grid.elementIDManager.get_ruleEditorWidth() + '\').outerWidth()');
                            if (leftPosition + width + document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth > leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth) {
                                document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth - document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth + 'px';
                            }
                            else {
                                document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + width + 'px';
                            }
                            this._setIntellisenseData(0, del.trim());
                        }
                        else {
                            this._createIntellisenseDiv(this._currentGrammar);
                        }
                    }
                    else {
                        if (e.keyCode === com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.SPACE) {
                            var actualRuleEditorText = (e.target).value;
                            var ruleText = '';
                            ruleText = actualRuleEditorText;
                            var currentToken = '';
                            if (this.previousToken != null) {
                                currentToken = ruleText.substr(ruleText.lastIndexOf(this.previousToken) + this.previousToken.length + 1, ruleText.length);
                            }
                            else {
                                currentToken = ruleText;
                            }
                            if (this._enterNumberFlag) {
                                this._enterNumberFlag = false;
                            }
                            this.previousToken = currentToken;
                            Array.add(this.matchedTokenRuleList, this.previousToken);
                            var value = (e.target).value;
                            var del = '';
                            if (value === 'Del') {
                                del = '|d';
                            }
                            else {
                                this._formula = value;
                            }
                            var ruleTextWidth = document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisenseWidth');
                            ruleTextWidth.innerText = value;
                            var leftPosition = 0;
                            var width = eval('$(\'#' + this._grid.elementIDManager.get_ruleEditorWidth() + '\').outerWidth()');
                            if (leftPosition + width + document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth > leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth) {
                                document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').offsetWidth - document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').offsetWidth + 'px';
                            }
                            else {
                                document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.left = leftPosition + width + 'px';
                            }
                            this._setIntellisenseData(0, del.trim());
                            this.previuosTokenIsNumber = false;
                        }
                        else {
                            var actualRuleEditorText = (e.target).value;
                            var ruleText = '';
                            ruleText = actualRuleEditorText;
                            var currentToken = '';
                            if (this.previousToken != null) {
                                currentToken = ruleText.substr(ruleText.lastIndexOf(this.previousToken) + this.previousToken.length + 1, ruleText.length);
                            }
                            else {
                                currentToken = ruleText;
                            }
                            for (var i = 0; i < this._ruleGrammerList.length; i++) {
                                if (this._ruleGrammerList[i].toString().toLowerCase().startsWith(currentToken.toLowerCase().trimEnd().trimStart())) {
                                    Array.add(this._currentGrammar, this._ruleGrammerList[i].toString());
                                }
                            }
                            this._createIntellisenseDiv(this._currentGrammar);
                            document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.display = 'none';
                        }
                    }
                }
            }
            else {
                this._enterNumberFlag = false;
                this._numberEnteredFlag = true;
                var timeOut = 0;
                timeOut = window.setTimeout(Function.createDelegate(this, function () {
                    window.clearTimeout(timeOut);
                    this._getRuleIntellisense(e);
                }), 2000);
            }
        }
    },

    _matchEneteredText: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_matchEneteredText(matchGrammar, token) {
        /// <param name="matchGrammar" type="Array">
        /// </param>
        /// <param name="token" type="String">
        /// </param>
        /// <returns type="Boolean"></returns>
        var flag = false;
        for (var i = 0; i < matchGrammar.length; i++) {
            if (matchGrammar[i].toString().toLowerCase() === token.toLowerCase()) {
                flag = true;
                break;
            }
        }
        return flag;
    },

    _ruleEditorKeyup: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_ruleEditorKeyup(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
    },

    _ruleEditorKeyDown: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_ruleEditorKeyDown(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'xlRuleIntellisenseCellfocussed') {
            if (e.keyCode === com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.SPACE || e.keyCode === com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.ENTER) {
                this._ruleEditorClick(e);
                (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).focus();
                e.preventDefault();
                e.stopPropagation();
            }
        }
    },

    _ruleEditorMouseOver: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_ruleEditorMouseOver(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'xlRuleIntellisenseCell') {
            var ruleIntellisense = document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense');
            for (var i = 0; i < window.jQuery(ruleIntellisense).find('TD[class=xlRuleIntellisenseCellfocussed]').length; i++) {
                window.jQuery(ruleIntellisense).find('TD[class=xlRuleIntellisenseCellfocussed]')[i].className = 'xlRuleIntellisenseCell';
            }
            e.target.className = 'xlRuleIntellisenseCellfocussed';
            e.target.focus();
        }
    },

    _ruleEditorMouseOut: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_ruleEditorMouseOut(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'xlRuleIntellisenseCellfocussed') {
            e.target.className = 'xlRuleIntellisenseCell';
            (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).focus();
        }
    },

    _getPreviousTokenFlag: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_getPreviousTokenFlag(ruleEditorText) {
        /// <param name="ruleEditorText" type="String">
        /// </param>
        /// <returns type="Boolean"></returns>
        for (var i = 0; i < this.matchedTokenRuleList.length; i++) {
            if (ruleEditorText.lastIndexOf(this.matchedTokenRuleList[i].toString()) < 0) {
                var array = [];
                for (var j = 0; j < i; j++) {
                    Array.add(array, this.matchedTokenRuleList[j]);
                }
                if (array.length > 0) {
                    this.matchedTokenRuleList = array;
                    this.previousToken = this.matchedTokenRuleList[this.matchedTokenRuleList.length - 1].toString();
                }
                else {
                    this.previousToken = null;
                    Array.clear(this.matchedTokenRuleList);
                }
                return false;
            }
            else {
                ruleEditorText = ruleEditorText.substring(ruleEditorText.indexOf(this.matchedTokenRuleList[i].toString()) + this.matchedTokenRuleList[i].toString().length, ruleEditorText.length);
            }
        }
        return true;
    },

    _closeEditor: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_closeEditor() {
        com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(false);
    },

    _editorOkClick: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_editorOkClick() {
        this._setIntellisenseData(1, '');
    },

    _editorResetClick: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_editorResetClick() {
        this._resetEditor();
        this._setIntellisenseData(0, '');
    },

    _setIntellisenseData: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_setIntellisenseData(value, del) {
        /// <param name="value" type="Number" integer="true">
        /// </param>
        /// <param name="del" type="String">
        /// </param>
        this._disbaleAllIntellisenseData();
        var textArea = document.getElementById(this._grid.elementIDManager.get_gridEditorTextArea());
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_RULE_INTELLISENSE, value + '|' + this._formula + del, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_RULE_INTELLISENSE);
    },

    _resetEditor: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_resetEditor() {
        var div = document.getElementById(this._grid.elementIDManager.get_gridEditorColumnBody());
        div.innerHTML = '';
        div = document.getElementById(this._grid.elementIDManager.get_gridEditorOperatorBody());
        div.innerHTML = '';
        div = document.getElementById(this._grid.elementIDManager.get_gridEditorCalculatorBody());
        div.innerHTML = '';
        var textArea = document.getElementById(this._grid.elementIDManager.get_gridEditorTextArea());
        this._grid.raddomElement.setInnerContent(textArea, '');
        var chkBox = document.getElementById(this._grid.elementIDManager.get_gridEditorCheckAllCells());
        chkBox.checked = false;
        this._formula = this._grid.raddomElement.getInnerContent(textArea);
    },

    _disbaleAllIntellisenseData: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_disbaleAllIntellisenseData() {
        var div = document.getElementById(this._grid.elementIDManager.get_gridEditorColumnBody());
        for (var i = 0; i < div.childNodes.length; i++) {
            var el = div.childNodes[i];
            el.disabled = true;
        }
        div = document.getElementById(this._grid.elementIDManager.get_gridEditorOperatorBody());
        for (var i = 0; i < div.childNodes.length; i++) {
            var el = div.childNodes[i];
            el.disabled = true;
        }
        div = document.getElementById(this._grid.elementIDManager.get_gridEditorCalculatorBody());
        for (var i = 0; i < div.childNodes.length; i++) {
            var el = div.childNodes[i];
            el.disabled = true;
        }
    },

    _resetAllDivs: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_resetAllDivs(data) {
        /// <param name="data" type="String">
        /// </param>
        var divDatas = data.split('|');
        var div = document.getElementById(this._grid.elementIDManager.get_gridEditorOperatorBody());
        div.innerHTML = divDatas[0];
        div = document.getElementById(this._grid.elementIDManager.get_gridEditorCalculatorBody());
        div.innerHTML = divDatas[1];
        div = document.getElementById(this._grid.elementIDManager.get_gridEditorColumnBody());
        div.innerHTML = divDatas[2];
        var textArea = document.getElementById(this._grid.elementIDManager.get_gridEditorTextArea());
        this._grid.raddomElement.setInnerContent(textArea, divDatas[4]);
        this._formula = divDatas[4];
    },

    _getPossibleSibling: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_getPossibleSibling(td, whichSibling) {
        /// <param name="td" type="Object" domElement="true">
        /// </param>
        /// <param name="whichSibling" type="String">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        if (td == null) {
            return null;
        }
        var tdElement = td;
        if (whichSibling !== 'NextSibling') {
            if (td.className.indexOf('xlMasterGridColumnClass') !== -1) {
                return null;
            }
        }
        while (this._skipElementForTab(tdElement)) {
            if (whichSibling === 'NextSibling') {
                tdElement = eval('$(tdElement).next()[0]');
            }
            else {
                tdElement = eval('$(tdElement).prev()[0]');
            }
            if (tdElement == null || $(tdElement).hasClass("xlResetRowIcon")) {
                break;
            }
        }
        return tdElement;
    },

    _getNextCellToSelect: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_getNextCellToSelect(isShiftKeyPressed, cell) {
        /// <param name="isShiftKeyPressed" type="Boolean">
        /// </param>
        /// <param name="cell" type="Object" domElement="true">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var rowindex = eval('$(this.lastSelectedCell.parentNode).index()');
        var isFrozenRow = false;
        if (eval('$(cell).closest(\'#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\' ).length') > 0) {
            isFrozenRow = true;
        }
        var td = null;
        if (isShiftKeyPressed) {
            if (this._grid.get_GridInfo().RequireEditableRow) {
                td = this._getPossibleSibling(eval('$(cell).prev()[0]'), 'PreviousSibling');
            }
            else {
                td = this._getPossibleSibling(eval('$(this.lastSelectedCell).prev()[0]'), 'PreviousSibling');
            }
        }
        else {
            if (this._grid.get_GridInfo().RequireEditableRow) {
                td = this._getPossibleSibling(eval('$(cell).next()[0]'), 'NextSibling');
            }
            else {
                td = this._getPossibleSibling(eval('$(this.lastSelectedCell).next()[0]'), 'NextSibling');
            }
        }
        if (td == null) {
            var tr = null;
            if (this._grid.get_GridInfo().FrozenColumns.length > 0) {
                if (!isFrozenRow) {
                    if (isShiftKeyPressed) {
                        rowindex = rowindex + 1;
                    }
                    tr = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
                }
                else {
                    if (!isShiftKeyPressed) {
                        rowindex = rowindex - 1;
                    }
                    tr = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatBodyDivHead\').find(\"div[rowindex=' + rowindex + ']\")[0]');
                }
            }
            else {
                tr = this.lastSelectedCell.parentNode;
                if (this._grid.get_GridInfo().RequireEditableRow) {
                    tr = this.selectCellOnRowEdit.parentNode;
                }
            }
            if (isShiftKeyPressed) {
                tr = eval('$(tr).prev()[0]');
                while (tr != null) {
                    if (!((tr.className.indexOf(this._grid.get_GridInfo().CssAlternatingRow) !== -1) || (tr.className.indexOf(this._grid.get_GridInfo().CssNormalRow) !== -1))) {
                        tr = eval('$(tr).prev()[0]');
                        continue;
                    }
                    td = eval('$(tr).children().last()[0]');
                    td = this._getPossibleSibling(td, 'PreviousSibling');
                    if (td != null) {
                        break;
                    }
                    tr = eval('$(tr).prev()[0]');
                }
            }
            else {
                if (rowindex === -1 && isFrozenRow) {
                    tr = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatBodyDivHead\').find(\"div[rowindex=' + 0 + ']\")[0]');
                }
                else {
                    tr = eval('$(tr).next()[0]');
                }
                while (tr != null) {
                    if (!((tr.className.indexOf(this._grid.get_GridInfo().CssAlternatingRow) !== -1) || (tr.className.indexOf(this._grid.get_GridInfo().CssNormalRow) !== -1))) {
                        tr = eval('$(tr).next()[0]');
                        continue;
                    }
                    td = eval('$(tr).children().first()[0]');
                    if (td.className.indexOf('xlMasterGridColumnClass') !== -1) {
                        td = td.nextSibling;
                    }
                    td = this._getPossibleSibling(td, 'NextSibling');
                    if (td != null) {
                        break;
                    }
                    tr = eval('$(tr).next()[0]');
                }
            }
        }
        else {
            if (this._grid.get_GridInfo().RequireEditableRow) {
                this.nextCellToBeSelected = td;
                return null;
            }
        }
        return td;
    },

    _removeRedundantData: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_removeRedundantData() {
        var rowInfoToRemove = null;
        for (var i = 0; i < this.changedRowsInfo.length; i++) {
            var rowInfo = this.changedRowsInfo[i];
            var cellInfoToRemove = null;
            for (var j = 0; j < rowInfo.CellInfo.length; j++) {
                var cellInfo = rowInfo.CellInfo[j];
                if (cellInfo.NewValue === cellInfo.OldValue) {
                    cellInfoToRemove = cellInfo;
                    break;
                }
            }
            if (cellInfoToRemove != null) {
                Array.remove(rowInfo.CellInfo, cellInfoToRemove);
                if (rowInfo.CellInfo.length === 0) {
                    rowInfoToRemove = rowInfo;
                }
                break;
            }
        }
        if (rowInfoToRemove != null) {
            Array.remove(this.changedRowsInfo, rowInfoToRemove);
        }
    },

    _startPasting: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_startPasting(e, row) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <param name="row" type="Object" domElement="true">
        /// </param>
        this._stopPasting();
        this._editStartCell = e.target;
        this._editStartRow = row;
        var previousContent = this._grid.raddomElement.getInnerContent(this._editStartCell);
        var editableDiv = this._grid.elementHelper.get_divElement();
        editableDiv.style.backgroundColor = 'CYAN';
        editableDiv.setAttribute('contenteditable', true);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(editableDiv, 'paste', Function.createDelegate(this, this._handlePaste));
        editableDiv.innerHTML = previousContent;
        this._editStartCell.innerHTML = '';
        this._editStartCell.appendChild(editableDiv);
        editableDiv.focus();
        this._pasteStarted = true;
    },

    _handlePaste: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_handlePaste(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var savedcontent = e.target.innerHTML;
        e.target.innerHTML = '';
        this._waitforpastedata(e.target, savedcontent);
        this._pasteStarted = false;
    },

    _waitforpastedata: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_waitforpastedata(dOMElement, savedcontent) {
        /// <param name="dOMElement" type="Object" domElement="true">
        /// </param>
        /// <param name="savedcontent" type="String">
        /// </param>
        if (dOMElement.childNodes.length > 0) {
            this._processpaste(dOMElement, savedcontent);
        }
        else {
            var timeOut = 0;
            timeOut = window.setTimeout(Function.createDelegate(this, function () {
                window.clearTimeout(timeOut);
                this._waitforpastedata(dOMElement, savedcontent);
            }), 1);
        }
    },

    _processpaste: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_processpaste(dOMElement, savedcontent) {
        /// <param name="dOMElement" type="Object" domElement="true">
        /// </param>
        /// <param name="savedcontent" type="String">
        /// </param>
        var pasteddata = dOMElement.innerHTML;
        dOMElement.innerHTML = savedcontent;
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PASTE_DATA_FROM_EXCEL, pasteddata + '|' + this._editStartCell.getAttribute('columnName').toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PASTE_DATA_FROM_EXCEL);
    },

    _stopPasting: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_stopPasting() {
        if (this._editStartCell != null) {
            this._editStartCell.innerHTML = this._grid.raddomElement.getInnerContent(this._editStartCell);
        }
        this._pasteStarted = false;
    },

    _clearEditStartCell: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_clearEditStartCell() {
        if (this._editStartCell != null) {
            var editableDiv = this._editStartCell.firstChild;
            if (editableDiv != null) {
                this._editStartCell.removeChild(editableDiv);
            }
        }
    },

    _savePastedData: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_savePastedData(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.get_RaiseOnExcelDataCommitChange() != null) {
            eval(this._grid.get_RaiseOnExcelDataCommitChange() + '(' + Sys.Serialization.JavaScriptSerializer.serialize(this._pastedData) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(this._keyValuePair) + ');');
        }
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_PASTED_DATA_FROM_EXCEL, Sys.Serialization.JavaScriptSerializer.serialize(this.pastedDataList) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.keyValuePairList) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._pastedIDColumnValues), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_PASTED_DATA_FROM_EXCEL);
    },

    _createExistingRuleDiv: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_createExistingRuleDiv(RuleDataInfo) {
        /// <param name="RuleDataInfo" type="Object">
        /// </param>
        (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value = 'Create New Rule Here';
        if (window.Object.keys(RuleDataInfo).length > 0) {
            for (var i = 0; i < (RuleDataInfo['Test']).length; i++) {
                var xlExistingRuleDiv = document.getElementById(this._grid.get_GridInfo().GridId + '_xlExistingRule');
                xlExistingRuleDiv.style.display = '';
                var xlRuleDiv = this._grid.elementHelper.get_divElement();
                xlRuleDiv.className = 'xlRuleDiv';
                var xlRuleText = this._grid.elementHelper.get_divElement();
                xlRuleText.className = 'xlRuleText';
                xlRuleText.id = this._grid.get_GridInfo().GridId + '_xlRuleText' + i;
                xlRuleText.innerText = (RuleDataInfo['Test'])[i].toString();
                var xlDeleteRule = this._grid.elementHelper.get_divElement();
                xlDeleteRule.className = 'xlDeleteExistingRule';
                xlDeleteRule.title = 'Delete Rule';
                var xlEditRule = this._grid.elementHelper.get_divElement();
                xlEditRule.className = 'xlEditRule';
                xlEditRule.title = 'Edit Rule';
                xlRuleDiv.appendChild(xlRuleText);
                xlRuleDiv.appendChild(xlDeleteRule);
                xlRuleDiv.appendChild(xlEditRule);
                xlExistingRuleDiv.appendChild(xlRuleDiv);
            }
        }
    },

    _createRuleEditorDiv: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_createRuleEditorDiv(xlExistingRuleDiv, RuleText) {
        /// <param name="xlExistingRuleDiv" type="Object" domElement="true">
        /// </param>
        /// <param name="RuleText" type="String">
        /// </param>
        var xlRuleDiv = this._grid.elementHelper.get_divElement();
        xlRuleDiv.className = 'xlRuleDiv';
        var xlRuleText = this._grid.elementHelper.get_divElement();
        xlRuleText.className = 'xlRuleText';
        xlRuleText.id = this._grid.get_GridInfo().GridId + '_xlRuleText' + (xlExistingRuleDiv.children.length - 1);
        xlRuleText.innerText = RuleText;
        var xlDeleteRule = this._grid.elementHelper.get_divElement();
        xlDeleteRule.className = 'xlDeleteExistingRule';
        xlDeleteRule.title = 'Delete Rule';
        var xlEditRule = this._grid.elementHelper.get_divElement();
        xlEditRule.className = 'xlEditRule';
        xlEditRule.title = 'Edit Rule';
        xlRuleDiv.appendChild(xlRuleText);
        xlRuleDiv.appendChild(xlDeleteRule);
        xlRuleDiv.appendChild(xlEditRule);
        xlExistingRuleDiv.appendChild(xlRuleDiv);
    },

    _executeRuleEngine: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_executeRuleEngine(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var array = [];
        var ExistingRuleDiv = document.getElementById(this._grid.get_GridInfo().GridId + '_xlExistingRule');
        for (var i = 0; i < ExistingRuleDiv.children.length; i++) {
            Array.add(array, ExistingRuleDiv.children[i].children[0].innerText);
        }
        this._ruleEditorDataInfo[this._currentRuleExecutingColumnName] = array;
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXECUTE_RULE, Sys.Serialization.JavaScriptSerializer.serialize(this._ruleEditorDataInfo) + '|' + this._currentRuleExecutingColumnName, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXECUTE_RULE);
    },

    _resetRuleEditor: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_resetRuleEditor() {
        var ExistingRuleDiv = document.getElementById(this._grid.get_GridInfo().GridId + '_xlExistingRule');
        ExistingRuleDiv.innerHTML = '<div class=\"modaltitle\"><span style=\"text-align: center;\" id=\"H1\">Configured Rules</span></div>';
        document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').style.display = 'none';
        document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').style.display = '';
        document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').parentNode.style.display = '';
        document.getElementById(this._grid.get_GridInfo().GridId + '_xlSaveRule').style.display = 'none';
        document.getElementById(this._grid.get_GridInfo().GridId + '_xlCancelRule').style.display = 'none';
        document.getElementById(this._grid.get_GridInfo().GridId + '_xlRuleIntellisense').innerHTML = '';
        (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value = 'Create New Rule Here';
    },

    _closeRuleEditor: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_closeRuleEditor() {
        document.getElementById(this._grid.get_GridInfo().GridId + '_xlRuleIntellisense').innerHTML = '';
        (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value = 'Create New Rule Here';
        document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput').style.display = 'none';
        document.getElementById(this._grid.get_GridInfo().GridId + '_Arrow').style.display = 'none';
        document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').style.display = '';
        document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').parentNode.style.display = '';
        this._ruleEditor.style.display = 'none';
        this._ruleEditor = null;
    },

    _createIntellisenseDiv: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_createIntellisenseDiv(currentRuleList) {
        /// <param name="currentRuleList" type="Array">
        /// </param>
        document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.display = '';
        if (document.getElementById(this._grid.get_GridInfo().GridId + '_xlRuleIntellisense').firstChild != null) {
            document.getElementById(this._grid.get_GridInfo().GridId + '_xlRuleIntellisense').removeChild(document.getElementById(this._grid.get_GridInfo().GridId + '_xlRuleIntellisense').firstChild);
        }
        var table = this._grid.elementHelper.get_table();
        table.className = 'xlRuleIntellisenseTable';
        var row = 0;
        for (var i = 0; i < currentRuleList.length; i++) {
            if (!this._isNumber(currentRuleList[i].toString()) && currentRuleList[i].toString() === '0') {
                var tr = table.insertRow(row);
                var td = tr.insertCell();
                td.innerHTML = 'Enter Number';
                td.title = 'Enter Number';
                td.className = 'xlRuleIntellisenseCell';
                row++;
            }
            else if (this._isNumber(currentRuleList[i].toString())) {
                var tr = table.insertRow(row);
                var td = tr.insertCell();
                td.innerHTML = currentRuleList[i].toString();
                td.title = currentRuleList[i].toString();
                td.className = 'xlRuleIntellisenseCell';
                row++;
            }
        }
        document.getElementById(this._grid.get_GridInfo().GridId + '_xlRuleIntellisense').appendChild(table);
        var height = (document.getElementById(this._grid.get_GridInfo().GridId + '_xlRuleIntellisense').firstChild.clientHeight > 100) ? 100 : document.getElementById(this._grid.get_GridInfo().GridId + '_xlRuleIntellisense').firstChild.clientHeight;
        if (currentRuleList.length === 0) {
            document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.display = 'none';
        }
    },

    _isNumber: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_isNumber(number) {
        /// <param name="number" type="String">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (Array.contains(this._numberList, number)) {
            return false;
        }
        else {
            return true;
        }
    },

    _editGridRowData: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_editGridRowData(cell, isNewRow, newRow) {
        /// <param name="cell" type="Object" domElement="true">
        /// </param>
        /// <param name="isNewRow" type="Boolean">
        /// </param>
        /// <param name="newRow" type="Object" domElement="true">
        /// </param>
        var row = null;
        if (!isNewRow) {
            if (!this._isEditing) {
                return;
            }
            if (cell == null) {
                this._changeRowLevelTDValue();
                this.lastSelectedCell = null;
                return;
            }
            row = cell.parentNode;
        }
        else {
            row = newRow;
        }
        if (row == null) {
            return;
        }
        if (row.getAttribute('isGroupHeader') != null && Boolean.parse(row.getAttribute('isGroupHeader').toString())) {
            return;
        }
        if (row.getAttribute('isGroupFooter') != null && Boolean.parse(row.getAttribute('isGroupFooter').toString())) {
            return;
        }
        if (this.lastSelectedCell === row) {
            return;
        }
        if (this.frozenColumns.length > 0) {
            if (eval('$(this.lastSelectedCell).index()') === eval('$(row).index()')) {
                return;
            }
        }
        if (!isNewRow) {
            if (cell.getAttribute('rowid') == null) {
                return;
            }
        }
        if (this.lastSelectedCell != null && this.lastSelectedCell !== row) {
            if (!this._changeRowLevelTDValue()) {
                return;
            }
            this.lastSelectedCell = null;
        }
        if (this._grid.get_GridInfo().RequireEditableRow) {
            if (!isNewRow) {
                this.selectCellOnRowEdit = cell;
                if (cell == null || this._skipElement(row)) {
                    return;
                }
            }
            else {
                if (!this._isEditableRow(row)) {
                    return;
                }
            }
        }
        else {
            if (cell == null || this._skipElement(cell)) {
                return;
            }
        }
        this._editRowData(row, cell);
    },

    _editRowData: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_editRowData(row, cell) {
        /// <param name="row" type="Object" domElement="true">
        /// </param>
        /// <param name="cell" type="Object" domElement="true">
        /// </param>
        var cellToEdit = cell;
        this._checkEditRowData(row, cell);
        if (eval('$(row).find(\'.xlneochildgridParentMasterChildTheme\').length') === 0) {
            row.style.height = '38px';
            row.style.lineHeight = '38px';
        }
        else {
            eval('$(row).find(\'.xlneochildgridParentMasterChildTheme\').css({\'top\' : \'38px\'})');
        }
        row.style.color = '#1A1919';
        row.style.backgroundColor = 'white';
        row.setAttribute('inEditMode', 'true');
        eval('$(row).find(\"div[class*=\'datacolumn\']\").css({height:\'38px\'})');
        eval('$(row).addClass(\'xlEditRowBackground\')');
        var rowindex = eval('$(row).index()');
        var isFrozenRow = false;
        var frozenrow = null;
        if (eval('$(row).closest(\'#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\' ).length') > 0) {
            frozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            isFrozenRow = true;
            if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                frozenrow.style.height = '38px';
                frozenrow.style.lineHeight = '38px';
                frozenrow.children[0].style.height = '38px';
                frozenrow.style.color = '#1A1919';
                frozenrow.style.backgroundColor = 'white';
                frozenrow.setAttribute('inEditMode', 'true');
                frozenrow.className = frozenrow.className + ' xlEditRowBackground';
                frozenrow.children[0].children[0].className = 'xlEditGridCheckBoxMargin';
            }
        }
        frozenrow = null;
        var actualfrozenrow = null;
        if (!isFrozenRow) {
            actualfrozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            frozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            if (this.frozenColumns.length > 0) {
                isFrozenRow = true;
            }
            if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                actualfrozenrow.children[0].style.height = '38px';
                actualfrozenrow.children[0].children[0].className = 'xlEditGridCheckBoxMargin';
                actualfrozenrow.style.height = '38px';
                actualfrozenrow.style.lineHeight = '38px';
                actualfrozenrow.style.color = '#1A1919';
                actualfrozenrow.style.backgroundColor = 'white';
                actualfrozenrow.setAttribute('inEditMode', 'true');
                eval('$(actualfrozenrow).addClass(\'xlEditRowBackground\')');
            }
            if (this.frozenColumns.length > 0) {
                frozenrow.className = actualfrozenrow.className + ' xlEditRowBackground';
                frozenrow.style.height = '38px';
                frozenrow.style.lineHeight = '38px';
                frozenrow.style.color = '#1A1919';
                frozenrow.style.backgroundColor = 'white';
                frozenrow.setAttribute('inEditMode', 'true');
            }
        }
        else {
            frozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatBodyDivHead\').find(\"div[rowindex=' + rowindex + ']\")[0]');
        }
        if (isFrozenRow) {
            if (frozenrow != null) {
                this._checkEditRowData(frozenrow, cell);
                frozenrow.style.height = '38px';
                frozenrow.style.lineHeight = '38px';
                frozenrow.style.color = '#1A1919';
                frozenrow.style.backgroundColor = 'white';
                frozenrow.setAttribute('inEditMode', 'true');
                eval('$(frozenrow).find(\"div[class*=\'datacolumn\']\").css({height:\'38px\'})');
                eval('$(frozenrow).addClass(\'xlEditRowBackground\')');
            }
        }
        this.lastSelectedCell = row;
        this._createResetDiv();
        cellToEdit.childNodes[0].focus();
        if (this._grid.get_GridInfo().cellFocusOnEdit !== '' && this._grid.get_GridInfo().cellFocusOnEdit != null) {
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(cellToEdit.childNodes[0], 'focus', Function.createDelegate(this, this._inputTextFocusHandler));
            eval(this._grid.get_GridInfo().cellFocusOnEdit + '(cellToEdit.ChildNodes[0])');
        }
    },

    _checkEditRowData: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_checkEditRowData(row, cell) {
        /// <param name="row" type="Object" domElement="true">
        /// </param>
        /// <param name="cell" type="Object" domElement="true">
        /// </param>
        for (var rowCount = 0; rowCount < row.children.length; rowCount++) {
            if (row.children[rowCount].getAttribute('columnname') == null) {
                continue;
            }
            if (!Array.contains(this._grid.get_GridInfo().EditableColumns, row.children[rowCount].getAttribute('columnname').toString())) {
                continue;
            }
            else {
                cell = row.children[rowCount];
                var td = cell;
                var customElement;
                var ColumnName = cell.getAttribute('columnname').toString();
                var existingValue = '';
                var editcolInfo = null;
                for (var i = 0; i < this._grid.get_GridInfo().EditableColumnsInfo.length; i++) {
                    var editColI = this._grid.get_GridInfo().EditableColumnsInfo[i];
                    if (ColumnName === editColI.ColumnName) {
                        editcolInfo = editColI;
                        break;
                    }
                }
                var index = this.headerCellTextCollection.indexOf(ColumnName);//Number.parseInvariant(td.getAttribute('columnIndex').toString());
                if (td.parentNode.children[0].className.indexOf('xlMasterGridColumnClass') !== -1) {
                }
                if (td.getAttribute('dataType') == "xs_dateTime") {
                    customElement = document.createElement('INPUT');
                    customElement.style.borderColor = 'black';
                    (customElement).value = this._grid.raddomElement.getInnerContent(td);
                    customElement.setAttribute('dataType', td.getAttribute('dataType'));
                    customElement.style.width = '89%';
                    customElement.style.border = '1px solid #b8b7b7';
                    customElement.className = 'xlEditGridTextBox';
                    customElement.setAttribute('data-grid_id', this._grid.get_GridInfo().GridId);
                    td.innerHTML = '';
                    td.title = '';
                    td.appendChild(customElement);
                    $(td).find(".xlEditGridTextBox").datepicker({
                        autoclose:true,
                        changeMonth: true,
                        changeYear: true
                    });
                }
                else if (editcolInfo.EditColumnMode === com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.textBox) {
                    customElement = document.createElement('INPUT');
                    customElement.style.borderColor = 'black';
                    (customElement).value = this._grid.raddomElement.getInnerContent(td);
                    customElement.setAttribute('dataType', td.getAttribute('dataType'));
                    customElement.style.width = '89%';
                    customElement.style.border = '1px solid #b8b7b7';
                    customElement.className = 'xlEditGridTextBox';
                    customElement.setAttribute('data-grid_id', this._grid.get_GridInfo().GridId);
                    td.innerHTML = '';
                    td.title = '';
                    td.appendChild(customElement);
                    try {
                        var range = (customElement).createTextRange();
                        range.moveStart('character', (customElement).value.length);
                        range.collapse(true);
                        range.select();
                    }
                    catch ($e1) {
                    }
                    var editElementKeyDown = Function.createDelegate(this, this._elementKeyDown);
                    var editElementKeyUp = Function.createDelegate(this, this._elementKeyUp);
                    var editElementFocusOut = Function.createDelegate(this, this._editElementFocusOut);
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(customElement, 'keydown', editElementKeyDown);
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(customElement, 'keyup', editElementKeyUp);
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(customElement, 'focusout', editElementFocusOut);
                }
                else if (editcolInfo.EditColumnMode === com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.dropDown) {
                    customElement = document.createElement('SELECT');
                    customElement = this._getSelectElementForEditCell(editcolInfo.DropDownValues);
                    customElement.setAttribute('dataType', td.getAttribute('dataType'));
                    customElement.className = 'xlEditGridDropDown';
                    if (editcolInfo.DropDownValues.indexOf(td.innerText) != -1) {
                        $($(customElement).find('option')[editcolInfo.DropDownValues.indexOf(td.innerText) + 1]).attr('selected', true);//$(customElement).find('option[value=' + td.innerText + ']').attr('selected', true)
                    }
                    existingValue = this._grid.raddomElement.getInnerContent(td);
                    customElement.setAttribute('oldValue', existingValue);
                    customElement.style.width = '90%';
                    td.innerHTML = '';
                    td.title = '';
                    td.appendChild(customElement);
                    var editElementKeyDown = Function.createDelegate(this, this._elementKeyDown);
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(customElement, 'keydown', editElementKeyDown);
                }
                else {
                    customElementParent = document.createElement('div');
                    customElementParent.className = 'TextAreaParent';
                    customElement = document.createElement("TEXTAREA");
                    customElementParent.style.width = 'auto';
                    customElementParent.style.height = 'auto';
                    customElementParent.style.position = 'absolute'
                    customElement.rows = '4';
                    customElement.cols = '10';
                    customElement.style.borderColor = 'black';
                    (customElement).value = this._grid.raddomElement.getInnerContent(td);
                    customElement.setAttribute('dataType', td.getAttribute('dataType'));
                    customElement.style.width = '100%';
                    //customElement.style.height = '80px';
                    customElement.style.border = '1px solid #b8b7b7';
                    existingValue = this._grid.raddomElement.getInnerContent(td);
                    //customElement.style.position = 'absolute';
                    customElement.className = 'xlEditGridTextBox';
                    customElement.setAttribute('data-grid_id', this._grid.get_GridInfo().GridId);
                    customElement.setAttribute('oldValue', existingValue);
                    td.innerHTML = '';
                    td.title = '';
                    customElementParent.appendChild(customElement);
                    td.appendChild(customElementParent);
                    //td.style.position = 'static';
                    $($($(td).parent()).parent())[0].style.position = 'relative';
                    //$(td).closest("_repeatedBodyDiv")
                    var editElementKeyDown = Function.createDelegate(this, this._elementKeyDown);
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(customElement, 'keydown', editElementKeyDown);
                }
                if (td.getAttribute('oldstyle') == null) {
                    if (td.style.cssText === '') {
                        td.setAttribute('oldstyle', 'empty');
                    }
                    else {
                        td.setAttribute('oldstyle', td.style.cssText);
                    }
                }
                var rowID = td.getAttribute('rowid').toString();
                var rowInfo = null;
                for (var i = 0; i < this.changedRowsInfo.length; i++) {
                    var rowI = this.changedRowsInfo[i];
                    if (rowI.RowID === rowID) {
                        rowInfo = rowI;
                        break;
                    }
                }
                if (rowInfo == null) {
                    rowInfo = new com.ivp.rad.controls.neogrid.scripts.info.ChangedRowInfo();
                    rowInfo.RowID = rowID;
                    rowInfo._row = row;
                    Array.add(this.changedRowsInfo, rowInfo);
                }
                var cellInfo = null;
                for (var i = 0; i < rowInfo.CellInfo.length; i++) {
                    var cellI = rowInfo.CellInfo[i];
                    if (cellI.ColumnName === ((this._grid.get_GridInfo().CheckBoxInfo != null) ? this.headerCellTextCollection[index].toString() : this.headerCellTextCollection[index].toString())) {
                        cellInfo = cellI;
                        break;
                    }
                }
                if (cellInfo == null) {
                    cellInfo = new com.ivp.rad.controls.neogrid.scripts.info.ChangedCellInfo();
                    cellInfo.ColumnName = ((this._grid.get_GridInfo().CheckBoxInfo != null) ? this.headerCellTextCollection[index].toString() : this.headerCellTextCollection[index].toString());
                    if (editcolInfo.EditColumnMode === com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.textBox) {
                        cellInfo.OldValue = (customElement).value;
                        cellInfo.NewValue = (customElement).value;
                    }
                    else {
                        cellInfo.OldValue = existingValue;
                        cellInfo.NewValue = existingValue;
                    }
                    Array.add(rowInfo.CellInfo, cellInfo);
                }
            }
        }
    },

    _inputTextFocusHandler: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_inputTextFocusHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var gridID = e.target.getAttribute('data-grid_id');
        var functionToCall = eval('$find(gridID).get_GridInfo().cellFocusOnEdit');
        eval(functionToCall + '(this)');
    },

    _changeRowLevelTDValue: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_changeRowLevelTDValue() {
        /// <returns type="Boolean"></returns>
        if (this.lastSelectedCell == null) {
            return true;
        }
        if (!this._checkLastSelectedCell(this.lastSelectedCell)) {
            return false;
        }
        if (eval('$(this.lastSelectedCell).find(\'.xlneochildgridParentMasterChildTheme\').length') === 0) {
            this.lastSelectedCell.style.height = '22px';
            this.lastSelectedCell.style.lineHeight = '22px';
        }
        this.lastSelectedCell.removeAttribute('inEditMode');
        eval('$(this.lastSelectedCell).find(\"div[class*=\'datacolumn\']\").css({height:\'22px\'})');
        if (this.lastSelectedCell.className === this._grid.get_GridInfo().CssAlternatingRow) {
            eval('$(this.lastSelectedCell).removeClass(\'xlEditRowBackground\')');
            this.lastSelectedCell.style.color = '#1A1919';
        }
        else {
            eval('$(this.lastSelectedCell).removeClass(\'xlEditRowBackground\')');
            this.lastSelectedCell.style.color = '#1A1919';
        }
        var rowindex = eval('$(this.lastSelectedCell).index()');
        var isFrozenRow = false;
        var checkBoxRow = null;
        if (eval('$(this.lastSelectedCell.parentNode).closest(\'#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\' ).length') > 0) {
            isFrozenRow = true;
            if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                checkBoxRow = document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv').children[rowindex];
                checkBoxRow.children[0].style.height = '22px';
                checkBoxRow.children[0].children[0].className = '';
                checkBoxRow.style.height = '22px';
                checkBoxRow.style.lineHeight = '22px';
                eval('$(checkBoxRow).removeClass(\'xlEditRowBackground\')');
            }
        }
        var frozenrow = null;
        var actualfrozenrow = null;
        if (!isFrozenRow) {
            actualfrozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            frozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            if (this.frozenColumns.length > 0) {
                isFrozenRow = true;
                frozenrow.style.height = '22px';
                frozenrow.style.lineHeight = '22px';
                frozenrow.style.color = '#1A1919';
                frozenrow.style.backgroundColor = 'white';
                frozenrow.removeAttribute('inEditMode');
                eval('$(frozenrow).removeClass(\'xlEditRowBackground\')');
            }
            if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                actualfrozenrow.children[0].style.height = '22px';
                actualfrozenrow.children[0].children[0].className = '';
                actualfrozenrow.style.height = '22px';
                actualfrozenrow.style.lineHeight = '22px';
                eval('$(actualfrozenrow).removeClass(\'xlEditRowBackground\')');
            }
        }
        else {
            frozenrow = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatBodyDivHead\').find(\"div[rowindex=' + rowindex + ']\")[0]');
        }
        if (isFrozenRow) {
            if (frozenrow != null) {
                if (!this._checkLastSelectedCell(frozenrow)) {
                    return false;
                }
                frozenrow.style.height = '22px';
                frozenrow.style.lineHeight = '22px';
                frozenrow.style.color = '#1A1919';
                frozenrow.style.backgroundColor = 'white';
                frozenrow.removeAttribute('inEditMode');
                eval('$(frozenrow).find(\"div[class*=\'datacolumn\']\").css({height:\'22px\'})');
                eval('$(frozenrow).removeClass(\'xlEditRowBackground\')');
            }
        }
        if (this._grid.get_GridInfo().EditGridFocusOut !== '' && !this.revertChange) {
            var changeinfo = null;
            for (var i = 0; i < this.changedRowsInfo.length; i++) {
                if ((this.changedRowsInfo[i]).RowID === this.lastSelectedCell.id) {
                    changeinfo = this.changedRowsInfo[i];
                    changeinfo._row = null;
                    break;
                }
            }
            if (changeinfo != null) {
                eval(this._grid.get_GridInfo().EditGridFocusOut + '(' + Sys.Serialization.JavaScriptSerializer.serialize(changeinfo) + ');');
            }
        }
        return true;
    },

    _checkLastSelectedCell: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_checkLastSelectedCell(lastSelectedCell) {
        /// <param name="lastSelectedCell" type="Object" domElement="true">
        /// </param>
        /// <returns type="Boolean"></returns>
        for (var rowCount = 0; rowCount < lastSelectedCell.children.length; rowCount++) {
            if (lastSelectedCell.children[rowCount].getAttribute('columnname') == null) {
                continue;
            }
            if (!Array.contains(this._grid.get_GridInfo().EditableColumns, lastSelectedCell.children[rowCount].getAttribute('columnname').toString())) {
                continue;
            }
            else {
                var currentCell = lastSelectedCell.children[rowCount];
                var ColumnName = currentCell.getAttribute('columnname').toString();
                var currentValue = '';
                var editColInfo = null;
                for (var i = 0; i < this._grid.get_GridInfo().EditableColumnsInfo.length; i++) {
                    var editcolI = this._grid.get_GridInfo().EditableColumnsInfo[i];
                    if (editcolI.ColumnName === ColumnName) {
                        editColInfo = editcolI;
                        break;
                    }
                }
                var customElement = null;
                customElement = currentCell.childNodes[0];
                if (editColInfo.EditColumnMode === com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.dropDown) {
                    var val = (customElement).selectedIndex;
                    var option = ((customElement).options);
                    if (val > 0) {
                        currentValue = (option[val]).innerText;
                    }
                    else if (val === 0) {
                        currentValue = (customElement).getAttribute('oldValue').toString();
                    }
                }
                else if (editColInfo.EditColumnMode === com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.textArea) {
                    currentValue = $(customElement).find(".xlEditGridTextBox")[0].value
                }
                else {
                    currentValue = (customElement).value;
                }
                var cellIndex = this.headerCellTextCollection.indexOf(ColumnName);//Number.parseInvariant(currentCell.getAttribute('columnIndex').toString());
                if (currentCell.parentNode.children[0].className.indexOf('xlMasterGridColumnClass') !== -1) {
                }
                var isValid = (editColInfo.EditColumnMode === com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.textArea)? this._validateNewData(currentValue, $(customElement).find(".xlEditGridTextBox")[0].getAttribute('dataType').toString()) : this._validateNewData(currentValue, customElement.getAttribute('dataType').toString());
                if (isValid !== '') {
                    customElement.style.borderColor = 'red';
                    customElement.style.borderStyle = 'solid';
                    customElement.title = isValid;
                    customElement.focus();
                    return false;
                }
                // Code commented ...only done for 6 weekly
                //if ($(currentCell).attr("datatype") == 'xs_decimal') {
                //    if ($(currentCell).find(".xlEditGridTextBox")[0].value.indexOf('.') != -1) {
                //        if (parseInt($(currentCell).find(".xlEditGridTextBox")[0].value.substring($(currentCell).find(".xlEditGridTextBox")[0].value.indexOf('.') + 1, $(currentCell).find(".xlEditGridTextBox")[0].value.length)) > 0) {
                //            currentCell.style.borderBottom = '2px solid #af5c5c';
                //            $(currentCell).attr('title','Invalid Data');
                //        }
                //        else
                //        {
                //            currentCell.style.border = '0px';
                //            $(currentCell).attr('title', currentValue);
                //            currentCell.title = currentValue;
                //        }
                //    }
                //    else {
                //        currentCell.style.border = '0px';
                //        $(currentCell).attr('title', currentValue);
                //        currentCell.title = currentValue;
                //    }
                //}
                com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(customElement);
                currentCell.removeChild(customElement);
                this._grid.raddomElement.setInnerContent(currentCell, currentValue);
                //if ($(currentCell).attr("datatype") != 'xs_decimal') {
                    currentCell.title = currentValue;
                //}
                var linq = new LINQ(this.changedRowsInfo);
                var rowInfo = linq.Where(Function.createDelegate(this, function (o, index) {
                    var row = o;
                    return row.RowID === currentCell.getAttribute('rowid').toString();
                })).First(null);
                linq = new LINQ(rowInfo.CellInfo);
                var cellInfo = linq.Where(Function.createDelegate(this, function (o, index) {
                    var cell = o;
                    return cell.ColumnName === ((this._grid.get_GridInfo().CheckBoxInfo != null) ? this.headerCellTextCollection[cellIndex].toString() : this.headerCellTextCollection[cellIndex].toString());
                })).First(null);
                cellInfo.NewValue = currentValue;
                if (cellInfo.NewValue != cellInfo.OldValue)
                {
                    if (rowInfo.IsChanged == false) {
                        rowInfo.IsChanged = true;
                        if(this._grid.get_GridInfo().GridEditedDone == false)
                            this._grid.get_GridInfo().GridEditedDone = true
                    }
                }
                var isCellInfoRemoved = false;
                if (rowInfo.CellInfo.length === 0) {
                    Array.remove(this.changedRowsInfo, rowInfo);
                }
                if (!isCellInfoRemoved) {
                    currentCell.style.fontWeight = 'bold';
                }
                else {
                    this._applyOldStyle(currentCell);
                }
            }
        }
        return true;
    },

    _isEditableRow: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_isEditableRow(td) {
        /// <param name="td" type="Object" domElement="true">
        /// </param>
        /// <returns type="Boolean"></returns>
        var gridRow;
        if (this._grid.get_GridInfo().RequireEditableRow) {
            gridRow = td;
        }
        else {
            gridRow = td.parentNode;
        }
        var isEditableRow = false;
        if (this._grid.get_GridInfo().EditableRows.length > 0) {
            isEditableRow = Array.contains(this._grid.get_GridInfo().EditableRows, gridRow.getAttribute('idColumnValue').toString());
        }
        else if (this._grid.get_GridInfo().NonEditableRows != null) {
            isEditableRow = !Array.contains(this._grid.get_GridInfo().NonEditableRows, gridRow.getAttribute('idColumnValue').toString());
        }
        return isEditableRow;
    },

    _createResetDiv: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_createResetDiv() {
        var NewRowsCount = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\').find(\"div[isNewRow=\'false\']\")');
        var row = null;
        var column;
        var flag = false;
        var index;
        var isFrozenRow = false;
        if (eval('$(this.lastSelectedCell).closest(\'#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\' ).length') > 0) {
            isFrozenRow = true;
        }
        if (this._grid.get_GridInfo().RequireEditableRow) {
            var rowindex = eval('$(this.lastSelectedCell).index()');
            if (isFrozenRow) {
                row = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            }
            else {
                row = this.lastSelectedCell;
            }
        }
        else {
            var rowindex = eval('$(this.lastSelectedCell.parentNode).index()');
            if (isFrozenRow) {
                row = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\').find(\"div[rowindex=' + rowindex + ']\")[0]');
            }
            else {
                row = this.lastSelectedCell.parentNode;
            }
        }
        if (row.lastChild.className !== 'xlResetRowIcon') {
            index = eval('$(row).index()');
            index = index - NewRowsCount.length;
            if (row.getAttribute('isNewRow') != null) {
                flag = true;
            }
            column = document.createElement('DIV');
            column.className = 'xlResetRowIcon';
            column.style.top = $(column).position().top + 'px';
            column.title = 'Undo';
            if (flag) {
                column.style.right = '50px';
            }
            else {
                column.style.left = parseInt($('#' + this._grid.get_GridInfo().GridId + '_bodyDiv').css("width").substring(0, $('#' + this._grid.get_GridInfo().GridId + '_bodyDiv').css("width").length - 2)) - 30 + $('#' + this._grid.get_GridInfo().GridId + '_bodyDiv').scrollLeft() + "px";
            }
            row.appendChild(column);
        }
    },

    _resetIconMouseOver: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_resetIconMouseOver(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'xlResetRowIcon') {
            if (e.target.nextSibling == null) {
                var NewRowsCount = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\').find(\"div[isNewRow=\'false\']\")');
                var row = e.target.parentNode;
                var column;
                var flag = false;
                var index;
                index = eval('$(row).index()');
                index = index - NewRowsCount.length;
                if (row.getAttribute('isNewRow') != null) {
                    flag = true;
                }
                column = document.createElement('DIV');
                column.className = 'xlResetRowButton';
                column.style.top = ((index * 22) + 3) + 'px';
                if (!flag) {
                    column.style.right = '20px';
                }
                column.innerText = 'Undo';
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(column, 'mouseout', Function.createDelegate(this, this._resetIconMouseOut));
                row.appendChild(column);
            }
            else {
                if (e.target.nextSibling.className === 'xlResetRowButton') {
                    e.target.nextSibling.style.display = '';
                }
            }
        }
    },

    _resetIconMouseOut: function com_ivp_rad_controls_neogrid_scripts_EditGrid$_resetIconMouseOut(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'xlResetRowButton') {
            if (e.target.parentNode != null) {
                e.target.parentNode.removeChild(e.target);
            }
        }
    },

    resetChangesForSingleRow: function com_ivp_rad_controls_neogrid_scripts_EditGrid$resetChangesForSingleRow(rowid) {
        /// <param name="rowid" type="String">
        /// </param>
        var frozenColumnCollection = [];
        for (var k = 0; k < this._grid.get_GridInfo().FrozenColumns.length; k++) {
            Array.add(frozenColumnCollection, (this._grid.get_GridInfo().FrozenColumns[k]).ColumnName);
        }
        for (var i = 0; i < this.changedRowsInfo.length; i++) {
            var rowInfo = this.changedRowsInfo[i];
            if (rowInfo.RowID === rowid) {
                var row = rowInfo._row;//eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\").find(\"#' + rowInfo.RowID + '\")[0]');
                var frozenrow = $("#" + this._grid.get_GridInfo().GridId + "_repeatednewFrozenDiv").find('div[rowindex =' + $(rowInfo._row).attr("rowindex") + ']')[0]//eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\").find(\"#' + rowInfo.RowID + '\")[0]');
                for (var j = 0; j < rowInfo.CellInfo.length; j++) {
                    var cellInfo = rowInfo.CellInfo[j];
                    var index = Array.indexOf(this.headerCellTextCollection, cellInfo.ColumnName);
                    var padding = 0;
                    if (this._grid.get_GridInfo().IsMasterChildGrid) {
                        padding++;
                    }
                    var td = null;
                    if (Array.contains(frozenColumnCollection, cellInfo.ColumnName)) {
                        td = frozenrow.children[index - padding];
                    }
                    else {
                        td = row.children[index - this._grid.get_GridInfo().FrozenColumns.length - padding];
                    }
                    this._grid.raddomElement.setInnerContent(td, cellInfo.OldValue);
                    td.title = cellInfo.OldValue;
                    this._applyOldStyle(td);
                }
                Array.remove(this.changedRowsInfo, rowInfo);
                if(this._grid.get_GridInfo().GridEditedDone)
                {
                    count = 0;
                    for (var j = 0; j < this.changedRowsInfo.length; j++) {
                        if (this.changedRowsInfo[j].IsChanged == true) {
                            count++;
                            break;
                        }

                    }
                    if(count == 0)
                    {
                        this._grid.get_GridInfo().GridEditedDone = false;
                    }
                }
            }
        }
    },

    resetChangesForSingleRowInEditMode: function com_ivp_rad_controls_neogrid_scripts_EditGrid$resetChangesForSingleRowInEditMode(rowid) {
        /// <param name="rowid" type="String">
        /// </param>
        var frozenColumnCollection = [];
        for (var k = 0; k < this._grid.get_GridInfo().FrozenColumns.length; k++) {
            Array.add(frozenColumnCollection, (this._grid.get_GridInfo().FrozenColumns[k]).ColumnName);
        }
        for (var i = 0; i < this.changedRowsInfo.length; i++) {
            var rowInfo = this.changedRowsInfo[i];
            if (rowInfo.RowID === rowid) {
                var row = rowInfo._row;//eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\").find(\"#' + rowInfo.RowID + '\")[0]');
                var frozenrow = $("#" + this._grid.get_GridInfo().GridId + "_repeatednewFrozenDiv").find('div[rowindex =' + $(rowInfo._row).attr("rowindex") + ']')[0];//eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\").find(\"#' + rowInfo.RowID + '\")[0]');
                for (var j = 0; j < rowInfo.CellInfo.length; j++) {
                    var cellInfo = rowInfo.CellInfo[j];
                    var index = Array.indexOf(this.headerCellTextCollection, cellInfo.ColumnName);
                    var padding = 0;
                    if (this._grid.get_GridInfo().IsMasterChildGrid) {
                        padding++;
                    }
                    var td = null;
                    if (Array.contains(frozenColumnCollection, cellInfo.ColumnName)) {
                        td = frozenrow.children[index - padding];
                    }
                    else {
                        td = row.children[index - this._grid.get_GridInfo().FrozenColumns.length - padding];
                    }
                    for (var count = 0; count < this._grid.get_GridInfo().EditableColumnsInfo.length; count++) {
                        if (td.getAttribute('columnname').toString() === (this._grid.get_GridInfo().EditableColumnsInfo[count]).ColumnName) {
                            if ((this._grid.get_GridInfo().EditableColumnsInfo[count]).EditColumnMode === com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.textBox) {
                                if (td.children[0] != null)
                                    (td.children[0]).value = cellInfo.OldValue;
                                else if (td != null) {
                                    $(td).html(cellInfo.OldValue);
                                    cellInfo.NewValue = cellInfo.OldValue;
                                }
                            }
                            else {
                                (td.children[0]).selectedIndex = 0;
                            }
                        }
                    }
                }
            }
        }
    },

    removeResetDeleteIcon: function com_ivp_rad_controls_neogrid_scripts_EditGrid$removeResetDeleteIcon() {
        var collection = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\').find(\"div[class=\'xlResetRowButton\']\")');
        for (var i = 0; i < collection.length; i++) {
            collection[i].parentNode.removeChild(collection[i]);
        }
        collection = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\').find(\"div[class=\'xlDeleteRowButton\']\")');
        for (var i = 0; i < collection.length; i++) {
            collection[i].parentNode.removeChild(collection[i]);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ElementInfo

com.ivp.rad.controls.neogrid.scripts.ElementInfo = function com_ivp_rad_controls_neogrid_scripts_ElementInfo(element) {
    /// <param name="element" type="Object" domElement="true">
    /// </param>
    /// <field name="_element" type="Object" domElement="true">
    /// </field>
    /// <field name="_iDManager" type="com.ivp.rad.controls.neogrid.scripts.ElementIDManager">
    /// </field>
    /// <field name="_upperHeaderDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_footerDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_bodyDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_bodyInnerDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_groupDropPanel" type="Object" domElement="true">
    /// </field>
    /// <field name="_pagingPrevButton" type="Object" domElement="true">
    /// </field>
    /// <field name="_pagingNextButton" type="Object" domElement="true">
    /// </field>
    /// <field name="_pagingFirstButton" type="Object" domElement="true">
    /// </field>
    /// <field name="_pagingLastButton" type="Object" domElement="true">
    /// </field>
    /// <field name="_pagingGoButton" type="Object" domElement="true">
    /// </field>
    /// <field name="_pageNumber" type="Object" domElement="true">
    /// </field>
    /// <field name="_editGrid" type="Object" domElement="true">
    /// </field>
    /// <field name="_manageLayout" type="Object" domElement="true">
    /// </field>
    /// <field name="_manageLayoutDropDown" type="Object" domElement="true">
    /// </field>
    /// <field name="_manageLayoutDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_cacheStatusSymbol" type="Object" domElement="true">
    /// </field>
    /// <field name="_loading" type="Object" domElement="true">
    /// </field>
    /// <field name="_groupContextMenu" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnAddLayout" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnUpdateLayout" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnDeleteLayout" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnImportLayout" type="Object" domElement="true">
    /// </field>
    /// <field name="_ddlSharedLayout" type="Object" domElement="true">
    /// </field>
    /// <field name="_ddlSavedViews" type="Object" domElement="true">
    /// </field>
    /// <field name="_lblHeader" type="Object" domElement="true">
    /// </field>
    /// <field name="_txtViewName" type="Object" domElement="true">
    /// </field>
    /// <field name="_chkIsDefaultView" type="Object" domElement="true">
    /// </field>
    /// <field name="_chkIsSharedView" type="Object" domElement="true">
    /// </field>
    /// <field name="_lblErrorSaveView" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnSaveLayout" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnCancelLayout" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnShowSlider" type="Object" domElement="true">
    /// </field>
    /// <field name="_search" type="Object" domElement="true">
    /// </field>
    /// <field name="_pasteExcelDataDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_childGridDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_childGridDivForScroll" type="Object" domElement="true">
    /// </field>
    /// <field name="_childGridDivForScrollUp" type="Object" domElement="true">
    /// </field>
    this._element = element;
    this._iDManager = new com.ivp.rad.controls.neogrid.scripts.ElementIDManager(element.id);
}
com.ivp.rad.controls.neogrid.scripts.ElementInfo.prototype = {
    _element: null,
    _iDManager: null,

    get_headerInnerDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_headerInnerDiv() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_headerInnerTableID());
    },

    get_bodyInnerTable: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_bodyInnerTable() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_bodyInnerTableID());
    },

    get_frozenInnerTable: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_frozenInnerTable() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_frozenInnerTableID());
    },

    get_innerHeaderDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_innerHeaderDiv() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_headerInnerTableID());
    },

    get_frozenBodyDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_frozenBodyDiv() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_frozenBodyDivID());
    },

    get_frozenHeaderDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_frozenHeaderDiv() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_frozenHeaderDivID());
    },

    get_frozenNewHeaderDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_frozenNewHeaderDiv() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_frozenNewHeaderDivID());
    },

    get_fluidHeaderDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_fluidHeaderDiv() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_fluidHeaderDivID());
    },

    get_element: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_element() {
        /// <value type="Object" domElement="true"></value>
        return this._element;
    },

    _upperHeaderDiv: null,

    get_upperHeaderDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_upperHeaderDiv() {
        /// <value type="Object" domElement="true"></value>
        if (this._upperHeaderDiv == null) {
            this._upperHeaderDiv = document.createElement('DIV');
            this._upperHeaderDiv.id = this._iDManager.get_upperHeaderDivID();
            this.get_childGridDiv().appendChild(this._upperHeaderDiv);
        }
        return this._upperHeaderDiv;
    },

    _footerDiv: null,

    get_footerDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_footerDiv() {
        /// <value type="Object" domElement="true"></value>
        if (this._footerDiv == null) {
            this._footerDiv = document.createElement('DIV');
            this._footerDiv.id = this._iDManager.get_footerDivID();
            this._footerDiv.style.position = 'relative';
            this._footerDiv.style.bottom = '0px';
            this.get_childGridDiv().appendChild(this._footerDiv);
        }
        return this._footerDiv;
    },

    get_mathOpFooter: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_mathOpFooter() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_mathOpFooterId());
    },

    get_frozenMathOpFooter: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_frozenMathOpFooter() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_frozenMathOpFooterId());
    },

    _bodyDiv: null,

    get_bodyDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_bodyDiv() {
        /// <value type="Object" domElement="true"></value>
        if (this._bodyDiv == null) {
            this._bodyDiv = document.createElement('DIV');
            this._bodyDiv.id = this._iDManager.get_bodyDivID();
            this._bodyDiv.style.position = 'relative';
            this.get_childGridDiv().appendChild(this._bodyDiv);
        }
        return this._bodyDiv;
    },

    _bodyInnerDiv: null,

    get_bodyInnerDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_bodyInnerDiv() {
        /// <value type="Object" domElement="true"></value>
        this._bodyInnerDiv = document.getElementById(this._iDManager.get_bodyInnerDiv());
        return this._bodyInnerDiv;
    },

    _groupDropPanel: null,

    get_groupDropPanel: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_groupDropPanel() {
        /// <value type="Object" domElement="true"></value>
        if (this._groupDropPanel == null) {
            this._groupDropPanel = document.getElementById(this._iDManager.get_groupDropPanel());
        }
        return this._groupDropPanel;
    },

    get_selectAllOptionDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_selectAllOptionDiv() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_selectAllOptionDivId());
    },

    get_selectAllOptionFrozenDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_selectAllOptionFrozenDiv() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_selectAllOptionFrozenDivId());
    },

    _pagingPrevButton: null,

    get_pagingPrevButton: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_pagingPrevButton() {
        /// <value type="Object" domElement="true"></value>
        if (this._pagingPrevButton == null) {
            this._pagingPrevButton = document.getElementById(this._iDManager.get_pagingPrevButtonId());
        }
        return this._pagingPrevButton;
    },

    _pagingNextButton: null,

    get_pagingNextButton: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_pagingNextButton() {
        /// <value type="Object" domElement="true"></value>
        if (this._pagingNextButton == null) {
            this._pagingNextButton = document.getElementById(this._iDManager.get_pagingNextButtonId());
        }
        return this._pagingNextButton;
    },

    _pagingFirstButton: null,

    get_pagingFirstButton: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_pagingFirstButton() {
        /// <value type="Object" domElement="true"></value>
        if (this._pagingFirstButton == null) {
            this._pagingFirstButton = document.getElementById(this._iDManager.get_pagingFirstButtonId());
        }
        return this._pagingFirstButton;
    },

    _pagingLastButton: null,

    get_pagingLastButton: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_pagingLastButton() {
        /// <value type="Object" domElement="true"></value>
        if (this._pagingLastButton == null) {
            this._pagingLastButton = document.getElementById(this._iDManager.get_pagingLastButtonId());
        }
        return this._pagingLastButton;
    },

    _pagingGoButton: null,

    get_pagingGoButton: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_pagingGoButton() {
        /// <value type="Object" domElement="true"></value>
        if (this._pagingGoButton == null) {
            this._pagingGoButton = document.getElementById(this._iDManager.get_pagingGoButtonId());
        }
        return this._pagingGoButton;
    },

    _pageNumber: null,

    get_pageNumber: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_pageNumber() {
        /// <value type="Object" domElement="true"></value>
        if (this._pageNumber == null) {
            this._pageNumber = document.getElementById(this._iDManager.get_pageNumberId());
        }
        return this._pageNumber;
    },

    _editGrid: null,

    get_editGrid: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_editGrid() {
        /// <value type="Object" domElement="true"></value>
        if (this._editGrid == null) {
            this._editGrid = document.getElementById(this._iDManager.get_editableGrid());
        }
        return this._editGrid;
    },

    _manageLayout: null,

    get_manageLayout: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_manageLayout() {
        /// <value type="Object" domElement="true"></value>
        if (this._manageLayout == null) {
            this._manageLayout = document.getElementById(this._iDManager.get_manageLayoutId());
        }
        return this._manageLayout;
    },

    _manageLayoutDropDown: null,

    get_manageLayoutDropDown: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_manageLayoutDropDown() {
        /// <value type="Object" domElement="true"></value>
        if (this._manageLayoutDropDown == null) {
            this._manageLayoutDropDown = document.getElementById(this._iDManager.get_manageLayoutDropDownId());
        }
        return this._manageLayoutDropDown;
    },

    _manageLayoutDiv: null,

    get_manageLayoutDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_manageLayoutDiv() {
        /// <value type="Object" domElement="true"></value>
        if (this._manageLayoutDiv == null) {
            this._manageLayoutDiv = document.getElementById(this._iDManager.get_manageLayoutDivId());
        }
        return this._manageLayoutDiv;
    },

    _cacheStatusSymbol: null,

    get_cacheStatusSymbol: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_cacheStatusSymbol() {
        /// <value type="Object" domElement="true"></value>
        if (this._cacheStatusSymbol == null) {
            this._cacheStatusSymbol = document.getElementById(this._iDManager.get_cacheStatusSymbolID());
        }
        return this._cacheStatusSymbol;
    },

    _loading: null,

    get_loading: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_loading() {
        /// <value type="Object" domElement="true"></value>
        if (this._loading == null) {
            this._loading = document.getElementById(this._iDManager.get_loading());
        }
        return this._loading;
    },

    _groupContextMenu: null,

    get_groupContextMenu: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_groupContextMenu() {
        /// <value type="Object" domElement="true"></value>
        this._groupContextMenu = document.getElementById(this._iDManager.get_groupContextMenu());
        return this._groupContextMenu;
    },

    _btnAddLayout: null,

    get_btnAddLayout: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_btnAddLayout() {
        /// <value type="Object" domElement="true"></value>
        if (this._btnAddLayout == null) {
            this._btnAddLayout = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_rdAdd');
        }
        return this._btnAddLayout;
    },

    _btnUpdateLayout: null,

    get_btnUpdateLayout: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_btnUpdateLayout() {
        /// <value type="Object" domElement="true"></value>
        if (this._btnUpdateLayout == null) {
            this._btnUpdateLayout = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_rdUpdate');
        }
        return this._btnUpdateLayout;
    },

    _btnDeleteLayout: null,

    get_btnDeleteLayout: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_btnDeleteLayout() {
        /// <value type="Object" domElement="true"></value>
        if (this._btnDeleteLayout == null) {
            this._btnDeleteLayout = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_rdDelete');
        }
        return this._btnDeleteLayout;
    },

    _btnImportLayout: null,

    get_btnImportLayout: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_btnImportLayout() {
        /// <value type="Object" domElement="true"></value>
        if (this._btnImportLayout == null) {
            this._btnImportLayout = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_rdImport');
        }
        return this._btnImportLayout;
    },

    _ddlSharedLayout: null,

    get_ddlSharedLayout: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_ddlSharedLayout() {
        /// <value type="Object" domElement="true"></value>
        if (this._ddlSharedLayout == null) {
            this._ddlSharedLayout = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_ddlSharedViews');
        }
        return this._ddlSharedLayout;
    },

    _ddlSavedViews: null,

    get_ddlSavedViews: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_ddlSavedViews() {
        /// <value type="Object" domElement="true"></value>
        if (this._ddlSavedViews == null) {
            this._ddlSavedViews = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_ddlSavedViews');
        }
        return this._ddlSavedViews;
    },

    _lblHeader: null,

    get_lblHeader: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_lblHeader() {
        /// <value type="Object" domElement="true"></value>
        if (this._lblHeader == null) {
            this._lblHeader = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_lblHeader');
        }
        return this._lblHeader;
    },

    _txtViewName: null,

    get_txtViewName: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_txtViewName() {
        /// <value type="Object" domElement="true"></value>
        if (this._txtViewName == null) {
            this._txtViewName = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_txtViewName');
        }
        return this._txtViewName;
    },

    _chkIsDefaultView: null,

    get_chkIsDefaultView: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_chkIsDefaultView() {
        /// <value type="Object" domElement="true"></value>
        if (this._chkIsDefaultView == null) {
            this._chkIsDefaultView = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_chkIsDefaultView');
        }
        return this._chkIsDefaultView;
    },

    _chkIsSharedView: null,

    get_chkIsSharedView: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_chkIsSharedView() {
        /// <value type="Object" domElement="true"></value>
        if (this._chkIsSharedView == null) {
            this._chkIsSharedView = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_chkIsSharedView');
        }
        return this._chkIsSharedView;
    },

    _lblErrorSaveView: null,

    get_lblErrorSaveView: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_lblErrorSaveView() {
        /// <value type="Object" domElement="true"></value>
        if (this._lblErrorSaveView == null) {
            this._lblErrorSaveView = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_lblErrorSaveView');
        }
        return this._lblErrorSaveView;
    },

    _btnSaveLayout: null,

    get_btnSaveLayout: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_btnSaveLayout() {
        /// <value type="Object" domElement="true"></value>
        if (this._btnSaveLayout == null) {
            this._btnSaveLayout = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_btnSaveLayout');
        }
        return this._btnSaveLayout;
    },

    _btnCancelLayout: null,

    get_btnCancelLayout: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_btnCancelLayout() {
        /// <value type="Object" domElement="true"></value>
        if (this._btnCancelLayout == null) {
            this._btnCancelLayout = document.getElementById(this._iDManager.get_manageLayoutDivId() + '_btnCancel');
        }
        return this._btnCancelLayout;
    },

    _btnShowSlider: null,

    get_btnShowSlider: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_btnShowSlider() {
        /// <value type="Object" domElement="true"></value>
        if (this._btnShowSlider == null) {
            this._btnShowSlider = document.getElementById(this._iDManager.get_showSliderID());
        }
        return this._btnShowSlider;
    },

    get_sliderFilterDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_sliderFilterDiv() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_sliderFilterDiv());
    },

    get_radbalancepopupDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_radbalancepopupDiv() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_radbalancepopupDiv());
    },

    get_radExtrapopupDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_radExtrapopupDiv() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_radExtrapopupDiv());
    },

    _search: null,

    get_search: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_search() {
        /// <value type="Object" domElement="true"></value>
        if (this._search == null) {
            this._search = document.getElementById(this._iDManager.get_search());
        }
        return this._search;
    },

    get_radExtraInfoPopupTd: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_radExtraInfoPopupTd() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_radExtraInfoPopupTd());
    },

    get_scrollerMainVertical: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_scrollerMainVertical() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_scrollerMainVerticalId());
    },

    get_scrollerVertical: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_scrollerVertical() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_scrollerVerticalId());
    },

    get_scrollerVertical_down: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_scrollerVertical_down() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_scrollerVertical_downId());
    },

    get_scrollerVertical_up: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_scrollerVertical_up() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_scrollerVertical_upId());
    },

    get_scrollerMainHorizontal: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_scrollerMainHorizontal() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_scrollerMainHorizontalId());
    },

    get_scrollerHorizontal: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_scrollerHorizontal() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_scrollerHorizontalId());
    },

    get_scrollerHorizontal_left: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_scrollerHorizontal_left() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_scrollerHorizontal_leftId());
    },

    get_scrollerHorizontal_right: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_scrollerHorizontal_right() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_scrollerHorizontal_rightId());
    },

    get_verticalScrollerBody: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_verticalScrollerBody() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_verticalScrollerBodyId());
    },

    get_radExtraPopupBtn: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_radExtraPopupBtn() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_radExtraPopupId());
    },

    get_radBalancePopupBtn: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_radBalancePopupBtn() {
        /// <value type="Object" domElement="true"></value>
        return document.getElementById(this._iDManager.get_radBalancePopupId());
    },

    _pasteExcelDataDiv: null,

    get_pasteExcelDataDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_pasteExcelDataDiv() {
        /// <value type="Object" domElement="true"></value>
        if (this._pasteExcelDataDiv == null) {
            this._pasteExcelDataDiv = document.getElementById(this._iDManager.get_pasteExcelDataDivID());
        }
        return this._pasteExcelDataDiv;
    },

    _childGridDiv: null,

    get_childGridDiv: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_childGridDiv() {
        /// <value type="Object" domElement="true"></value>
        if (this._childGridDiv == null) {
            this._childGridDiv = document.createElement('DIV');
            this._childGridDiv.id = this._iDManager._gridID + '_EventsBodyDiv';
            this._element.appendChild(this._childGridDiv);
            this._childGridDiv = document.getElementById(this._iDManager._gridID + '_EventsBodyDiv');
        }
        return this._childGridDiv;
    },

    _childGridDivForScroll: null,

    get_childGridDivForScroll: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_childGridDivForScroll() {
        /// <value type="Object" domElement="true"></value>
        if (this._childGridDivForScroll == null) {
            this._childGridDivForScroll = document.createElement('DIV');
            this._childGridDivForScroll.id = this._iDManager._gridID + '_EventsBodyDivHidden';
            this._childGridDivForScroll.style.display = 'none';
            //this._childGridDivForScroll.style.height = "0px";
            this._element.appendChild(this._childGridDivForScroll);
            this._childGridDivForScroll = document.getElementById(this._iDManager._gridID + '_EventsBodyDivHidden');
        }
        return this._childGridDivForScroll;
    },

    _childGridDivForScrollUp: null,

    get_childGridDivForUpScroll: function com_ivp_rad_controls_neogrid_scripts_ElementInfo$get_childGridDivForUpScroll() {
        /// <value type="Object" domElement="true"></value>
        if (this._childGridDivForScrollUp == null) {
            this._childGridDivForScrollUp = document.createElement('DIV');
            this._childGridDivForScrollUp.id = this._iDManager._gridID + '_EventsBodyDivHiddenUp';
            this._childGridDivForScrollUp.style.display = 'none';
            //this._childGridDivForScrollUp.style.height = "0px";
            this._element.appendChild(this._childGridDivForScrollUp);
            this._childGridDivForScrollUp = document.getElementById(this._iDManager._gridID + '_EventsBodyDivHiddenUp');
        }
        return this._childGridDivForScrollUp;
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ElementIDManager

com.ivp.rad.controls.neogrid.scripts.ElementIDManager = function com_ivp_rad_controls_neogrid_scripts_ElementIDManager(gridID) {
    /// <param name="gridID" type="String">
    /// </param>
    /// <field name="_gridID" type="String">
    /// </field>
    this._gridID = gridID;
}
com.ivp.rad.controls.neogrid.scripts.ElementIDManager.prototype = {
    _gridID: null,

    get_filterButtonID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_filterButtonID() {
        /// <value type="String"></value>
        return 'data_filter_flip_btn';
    },

    get_composedHeaderInnerDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_composedHeaderInnerDivID() {
        /// <value type="String"></value>
        return this._gridID + '_headerExtraTableDiv';
    },

    get_headerInnerTableID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_headerInnerTableID() {
        /// <value type="String"></value>
        return this._gridID + '_headerDiv_Table';
    },

    get_bodyInnerTableID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_bodyInnerTableID() {
        /// <value type="String"></value>
        return this._gridID + '_bodyDiv_Table';
    },

    get_frozenInnerTableID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_frozenInnerTableID() {
        /// <value type="String"></value>
        return this._gridID + '_repeatednewFrozenDiv';
    },

    get_frozenBodyDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_frozenBodyDivID() {
        /// <value type="String"></value>
        return this._gridID + '_frozen_bodyDiv';
    },

    get_frozenHeaderDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_frozenHeaderDivID() {
        /// <value type="String"></value>
        return this._gridID + '_frozen_headerDiv';
    },

    get_frozenNewHeaderDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_frozenNewHeaderDivID() {
        /// <value type="String"></value>
        return this._gridID + '_frozen_new_headerDiv';
    },

    get_fluidHeaderDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_fluidHeaderDivID() {
        /// <value type="String"></value>
        return this._gridID + '_headerDiv';
    },

    get_columnContextMenuID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_columnContextMenuID() {
        /// <value type="String"></value>
        return this._gridID + '_columnContextMenuDiv';
    },

    get_columnContextMenuHeaderID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_columnContextMenuHeaderID() {
        /// <value type="String"></value>
        return this._gridID + 'columnContextMenuHeader_';
    },

    get_columnContextMenuIDBodyID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_columnContextMenuIDBodyID() {
        /// <value type="String"></value>
        return this._gridID + 'columnContextMenuBody_';
    },

    get_columnContextMenuAbsoluteSortId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_columnContextMenuAbsoluteSortId() {
        /// <value type="String"></value>
        return this._gridID + 'columnContextMenuAbsoluteSort_';
    },

    get_columnContextMenuGroupId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_columnContextMenuGroupId() {
        /// <value type="String"></value>
        return this._gridID + 'columnContextMenuGroup_';
    },

    get_columnContextSubMenuId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_columnContextSubMenuId() {
        /// <value type="String"></value>
        return this._gridID + 'columnContextSubMenu';
    },

    get_columnContextFrozenSubMenuId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_columnContextFrozenSubMenuId() {
        /// <value type="String"></value>
        return this._gridID + 'columnContextFrozenSubMenu';
    },

    get_upperHeaderDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_upperHeaderDivID() {
        /// <value type="String"></value>
        return this._gridID + '_upperHeader_Div';
    },

    get_footerDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_footerDivID() {
        /// <value type="String"></value>
        return this._gridID + '_footer_Div';
    },

    get_footerMathOpDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_footerMathOpDivID() {
        /// <value type="String"></value>
        return this._gridID + '_footer_math_op_Div';
    },

    get_fFooterMathOpDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_fFooterMathOpDivID() {
        /// <value type="String"></value>
        return this._gridID + '_frozen_footer_math_op_Div';
    },

    get_bodyDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_bodyDivID() {
        /// <value type="String"></value>
        return this._gridID + '_body_Div';
    },

    get_eventsBindDiv: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_eventsBindDiv() {
        /// <value type="String"></value>
        return this._gridID + '_Events_Bind_Div';
    },

    get_bodyInnerDiv: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_bodyInnerDiv() {
        /// <value type="String"></value>
        return this._gridID + '_bodyDiv';
    },

    get_cacheStatusSymbolID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_cacheStatusSymbolID() {
        /// <value type="String"></value>
        return this._gridID + '_CacheStatusSymbol';
    },

    get_clearSortID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_clearSortID() {
        /// <value type="String"></value>
        return this._gridID + '_btnClearSort';
    },

    get_clearFilterID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_clearFilterID() {
        /// <value type="String"></value>
        return this._gridID + '_btnClearFilter';
    },

    get_clearSelectionID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_clearSelectionID() {
        /// <value type="String"></value>
        return this._gridID + '_btnClearSelection';
    },

    get_clearGroupID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_clearGroupID() {
        /// <value type="String"></value>
        return this._gridID + '_btnClearGroup';
    },

    get_exportToExcelID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_exportToExcelID() {
        /// <value type="String"></value>
        return this._gridID + '_btnExportToExcel';
    },

    get_exportToPdfID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_exportToPdfID() {
        /// <value type="String"></value>
        return this._gridID + '_btnExportToPdf';
    },

    get_exportToExcelVisibleRows: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_exportToExcelVisibleRows() {
        /// <value type="String"></value>
        return this._gridID + '_btnExportToExcelVisibleRows';
    },

    get_search: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_search() {
        /// <value type="String"></value>
        return this._gridID + '_txtSearch';
    },

    get_manageLayoutDropDownId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_manageLayoutDropDownId() {
        /// <value type="String"></value>
        return this._gridID + '_manageLayoutDropDownId';
    },

    get_manageLayoutDivId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_manageLayoutDivId() {
        /// <value type="String"></value>
        return this._gridID + '_manageLayoutDivId';
    },

    get_gridSummary: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_gridSummary() {
        /// <value type="String"></value>
        return this._gridID + '_summary';
    },

    get_groupDropPanel: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_groupDropPanel() {
        /// <value type="String"></value>
        return this._gridID + '_groupDropPanel';
    },

    get_groupDropDiv: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_groupDropDiv() {
        /// <value type="String"></value>
        return this._gridID + '_dvgroup';
    },

    get_loading: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_loading() {
        /// <value type="String"></value>
        return this._gridID + '_gridLoading';
    },

    get_editableGrid: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_editableGrid() {
        /// <value type="String"></value>
        return this._gridID + '_btnEditableGrid';
    },

    get_manageLayoutId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_manageLayoutId() {
        /// <value type="String"></value>
        return this._gridID + '_manageLayoutID';
    },

    get_dragDropHeaderComponent: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_dragDropHeaderComponent() {
        /// <value type="String"></value>
        return (this._gridID + '_dragDropHeaderComponent');
    },

    get_radExtraInfoPopupTd: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_radExtraInfoPopupTd() {
        /// <value type="String"></value>
        return this._gridID + '_RADExtraInfoPopup';
    },

    get_droppedDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_droppedDivID() {
        /// <value type="String"></value>
        return this._gridID + 'droppedDiv_';
    },

    get_droppedDivSepID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_droppedDivSepID() {
        /// <value type="String"></value>
        return this._gridID + 'droppedSepDiv_';
    },

    get_containerFilterDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_containerFilterDivID() {
        /// <value type="String"></value>
        return this._gridID + '_container_FilterDiv';
    },

    get_filterListHeader: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_filterListHeader() {
        /// <value type="String"></value>
        return this._gridID + '_FilterListHeader';
    },

    get_filterFlippedBodyDiv: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_filterFlippedBodyDiv() {
        /// <value type="String"></value>
        return this._gridID + '_alternateFilterDiv';
    },

    get_filterListBody: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_filterListBody() {
        /// <value type="String"></value>
        return this._gridID + '_FilterListBody';
    },

    get_filterListFooter: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_filterListFooter() {
        /// <value type="String"></value>
        return this._gridID + '_FilterListFooter';
    },

    get_filterListFilter: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_filterListFilter() {
        /// <value type="String"></value>
        return this._gridID + '_FilterListFilter';
    },

    get_filterListCancel: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_filterListCancel() {
        /// <value type="String"></value>
        return this._gridID + '_FilterListCancel';
    },

    get_filterListReset: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_filterListReset() {
        /// <value type="String"></value>
        return this._gridID + '_FilterListReset';
    },

    get_filterListResize: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_filterListResize() {
        /// <value type="String"></value>
        return this._gridID + '_FilterListResize';
    },

    get_selectAllOptionDivId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_selectAllOptionDivId() {
        /// <value type="String"></value>
        return this._gridID + '_selectAllOption_Div';
    },

    get_selectAllOptionFrozenDivId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_selectAllOptionFrozenDivId() {
        /// <value type="String"></value>
        return this._gridID + '_selectAllOptionFrozen_Div';
    },

    get_pagingPrevButtonId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_pagingPrevButtonId() {
        /// <value type="String"></value>
        return this._gridID + '_PrevButtonPaging';
    },

    get_pagingNextButtonId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_pagingNextButtonId() {
        /// <value type="String"></value>
        return this._gridID + '_NextButtonPaging';
    },

    get_pagingFirstButtonId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_pagingFirstButtonId() {
        /// <value type="String"></value>
        return this._gridID + '_FirstPageButtonPaging';
    },

    get_pagingLastButtonId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_pagingLastButtonId() {
        /// <value type="String"></value>
        return this._gridID + '_LastPageButtonPaging';
    },

    get_pagingGoButtonId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_pagingGoButtonId() {
        /// <value type="String"></value>
        return this._gridID + '_GoButtonPaging';
    },

    get_pageNumberId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_pageNumberId() {
        /// <value type="String"></value>
        return this._gridID + '_PageNumberPaging';
    },

    get_messageBoxID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_messageBoxID() {
        /// <value type="String"></value>
        return this._gridID + '_MessageBoxID';
    },

    get_customMessageBoxID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_customMessageBoxID() {
        /// <value type="String"></value>
        return this._gridID + '_CustomMessageBoxID';
    },

    get_groupContextMenu: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_groupContextMenu() {
        /// <value type="String"></value>
        return this._gridID + '_GroupContextMenu';
    },

    get_createColorRuleID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_createColorRuleID() {
        /// <value type="String"></value>
        return this._gridID + '_btnCreateRules';
    },

    get_ruleDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_ruleDivID() {
        /// <value type="String"></value>
        return this._gridID + '_RuleDivID';
    },

    get_showSliderID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_showSliderID() {
        /// <value type="String"></value>
        return this._gridID + '_btnShowSlider';
    },

    get_fullScreenID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_fullScreenID() {
        /// <value type="String"></value>
        return this._gridID + '_btnFullScreen';
    },

    get_radBalancePopupId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_radBalancePopupId() {
        /// <value type="String"></value>
        return this._gridID + '_btnRADBalancePopupId';
    },

    get_radbalancepopupDiv: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_radbalancepopupDiv() {
        /// <value type="String"></value>
        return this._gridID + '_radbalancepopup_div';
    },

    get_radExtraPopupId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_radExtraPopupId() {
        /// <value type="String"></value>
        return this._gridID + '_btnRADExtraPopupId';
    },

    get_radExtrapopupDiv: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_radExtrapopupDiv() {
        /// <value type="String"></value>
        return this._gridID + '_radextrapopup_div';
    },

    get_sliderFilterDiv: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_sliderFilterDiv() {
        /// <value type="String"></value>
        return this._gridID + '_sliderFilter_div';
    },

    get_gridEditor: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_gridEditor() {
        /// <value type="String"></value>
        return this._gridID + '_gridEditor';
    },

    get_gridEditorCheckAllCells: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_gridEditorCheckAllCells() {
        /// <value type="String"></value>
        return this.get_gridEditor() + '_checkAllCells';
    },

    get_gridEditorTextArea: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_gridEditorTextArea() {
        /// <value type="String"></value>
        return this.get_gridEditor() + '_textArea';
    },

    get_gridEditorOperatorBody: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_gridEditorOperatorBody() {
        /// <value type="String"></value>
        return this.get_gridEditor() + '_operatorBody';
    },

    get_gridEditorColumnBody: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_gridEditorColumnBody() {
        /// <value type="String"></value>
        return this.get_gridEditor() + '_columnBody';
    },

    get_gridEditorCalculatorBody: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_gridEditorCalculatorBody() {
        /// <value type="String"></value>
        return this.get_gridEditor() + '_calculatorBody';
    },

    get_scrollerMainVerticalId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_scrollerMainVerticalId() {
        /// <value type="String"></value>
        return this._gridID + '_scrollerMainVertical';
    },

    get_scrollerVerticalId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_scrollerVerticalId() {
        /// <value type="String"></value>
        return this._gridID + '_scrollerVertical';
    },

    get_scrollerVertical_downId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_scrollerVertical_downId() {
        /// <value type="String"></value>
        return this._gridID + '_scrollerVertical_down';
    },

    get_scrollerVertical_upId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_scrollerVertical_upId() {
        /// <value type="String"></value>
        return this._gridID + '_scrollerVertical_up';
    },

    get_scrollerMainHorizontalId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_scrollerMainHorizontalId() {
        /// <value type="String"></value>
        return this._gridID + '_scrollerMainHorizontal';
    },

    get_scrollerHorizontalId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_scrollerHorizontalId() {
        /// <value type="String"></value>
        return this._gridID + '_scrollerHorizontal';
    },

    get_scrollerHorizontal_leftId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_scrollerHorizontal_leftId() {
        /// <value type="String"></value>
        return this._gridID + '_scrollerHorizontal_left';
    },

    get_searchBarID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_searchBarID() {
        /// <value type="String"></value>
        return 'SearchBarInFilter';
    },

    get_scrollerHorizontal_rightId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_scrollerHorizontal_rightId() {
        /// <value type="String"></value>
        return this._gridID + '_scrollerHorizontal_right';
    },

    get_verticalScrollerBodyId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_verticalScrollerBodyId() {
        /// <value type="String"></value>
        return this._gridID + '_verticalScrollerBody';
    },

    get_mathOpFooterId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_mathOpFooterId() {
        /// <value type="String"></value>
        return this._gridID + '_mathOpFooter';
    },

    get_frozenMathOpFooterId: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_frozenMathOpFooterId() {
        /// <value type="String"></value>
        return this._gridID + '_FrozenMathOpFooter';
    },

    get_fullScreenGridID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_fullScreenGridID() {
        /// <value type="String"></value>
        return this._gridID + '_btnFullScreenGrid';
    },

    get_pasteExcelDataID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_pasteExcelDataID() {
        /// <value type="String"></value>
        return this._gridID + '_btnPasteExcelData';
    },

    get_pasteExcelDataDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_pasteExcelDataDivID() {
        /// <value type="String"></value>
        return this._gridID + '_PasteExcelDataDivID';
    },

    get_invalidDataDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_invalidDataDivID() {
        /// <value type="String"></value>
        return this._gridID + '_InvalidDataDivID';
    },

    get_addColumnDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_addColumnDivID() {
        /// <value type="String"></value>
        return this._gridID + '_AddColumnDivID';
    },

    get_addColumnDiv: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_addColumnDiv() {
        /// <value type="String"></value>
        return this._gridID + 'AddColumnDiv';
    },

    get_ruleEditorWidth: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_ruleEditorWidth() {
        /// <value type="String"></value>
        return this._gridID + '_RuleIntellisenseWidth';
    },

    get_groupingInUpperHeader: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_groupingInUpperHeader() {
        /// <value type="String"></value>
        return this._gridID + '_groupingInUpperHeader';
    },

    get_showHideColumnDivID: function com_ivp_rad_controls_neogrid_scripts_ElementIDManager$get_showHideColumnDivID() {
        /// <value type="String"></value>
        return this._gridID + '_showHideColumnDiv';
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.GUIElementHelper

com.ivp.rad.controls.neogrid.scripts.GUIElementHelper = function com_ivp_rad_controls_neogrid_scripts_GUIElementHelper() {
}
com.ivp.rad.controls.neogrid.scripts.GUIElementHelper.prototype = {

    get_table: function com_ivp_rad_controls_neogrid_scripts_GUIElementHelper$get_table() {
        /// <value type="Object" domElement="true"></value>
        var table = document.createElement('TABLE');
        table.setAttribute('border', '0');
        table.setAttribute('cellSpacing', '0px');
        table.setAttribute('cellPadding', '0px');
        table.setAttribute('width', '100%');
        return table;
    },

    get_selectElement: function com_ivp_rad_controls_neogrid_scripts_GUIElementHelper$get_selectElement() {
        /// <value type="Object" domElement="true"></value>
        var select = document.createElement('SELECT');
        return select;
    },

    get_optionElement: function com_ivp_rad_controls_neogrid_scripts_GUIElementHelper$get_optionElement() {
        /// <value type="Object" domElement="true"></value>
        var options = document.createElement('OPTION');
        return options;
    },

    get_inputButtonElement: function com_ivp_rad_controls_neogrid_scripts_GUIElementHelper$get_inputButtonElement() {
        /// <value type="Object" domElement="true"></value>
        var el_button = document.createElement('INPUT');
        el_button.type = 'button';
        return el_button;
    },

    get_buttonElement: function com_ivp_rad_controls_neogrid_scripts_GUIElementHelper$get_buttonElement() {
        /// <value type="Object" domElement="true"></value>
        var el_button = document.createElement('BUTTON');
        el_button.setAttribute('type', 'button');
        return el_button;
    },

    get_textElement: function com_ivp_rad_controls_neogrid_scripts_GUIElementHelper$get_textElement() {
        /// <value type="Object" domElement="true"></value>
        var el_button = document.createElement('INPUT');
        el_button.type = 'text';
        return el_button;
    },

    get_divElement: function com_ivp_rad_controls_neogrid_scripts_GUIElementHelper$get_divElement() {
        /// <value type="Object" domElement="true"></value>
        var el_Div = document.createElement('DIV');
        return el_Div;
    },

    get_imageElement: function com_ivp_rad_controls_neogrid_scripts_GUIElementHelper$get_imageElement() {
        /// <value type="Object" domElement="true"></value>
        var el_Img = document.createElement('IMG');
        return el_Img;
    },

    get_anchorElement: function com_ivp_rad_controls_neogrid_scripts_GUIElementHelper$get_anchorElement() {
        /// <value type="Object" domElement="true"></value>
        var el_anchor = document.createElement('A');
        return el_anchor;
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.GridUIHelper

com.ivp.rad.controls.neogrid.scripts.GridUIHelper = function com_ivp_rad_controls_neogrid_scripts_GridUIHelper(gridID) {
    /// <param name="gridID" type="String">
    /// </param>
    /// <field name="_gridID" type="String">
    /// </field>
    this._gridID = gridID;
}
com.ivp.rad.controls.neogrid.scripts.GridUIHelper.getIndexById = function com_ivp_rad_controls_neogrid_scripts_GridUIHelper$getIndexById(id) {
    /// <param name="id" type="String">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var str = id.toString().split('_');
    if (str.length > 1) {
        return Number.parseLocale(str[str.length - 1]);
    }
    else {
        return Number.parseLocale(str[0]);
    }
}
com.ivp.rad.controls.neogrid.scripts.GridUIHelper.getElement = function com_ivp_rad_controls_neogrid_scripts_GridUIHelper$getElement(elementId, columnIndex) {
    /// <param name="elementId" type="String">
    /// </param>
    /// <param name="columnIndex" type="Number" integer="true">
    /// </param>
    /// <returns type="Object" domElement="true"></returns>
    var id = elementId + columnIndex;
    return document.getElementById(id);
}
com.ivp.rad.controls.neogrid.scripts.GridUIHelper.rowIndex = function com_ivp_rad_controls_neogrid_scripts_GridUIHelper$rowIndex(row) {
    /// <param name="row" type="Object" domElement="true">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    if (row.getAttribute('rowIndex') != null) {
        return Number.parseInvariant(row.getAttribute('rowIndex').toString());
    }
    else {
        var tr = row;
        return tr.rowIndex;
    }
}
com.ivp.rad.controls.neogrid.scripts.GridUIHelper.cellIndex = function com_ivp_rad_controls_neogrid_scripts_GridUIHelper$cellIndex(cell) {
    /// <param name="cell" type="Object" domElement="true">
    /// </param>
    /// <returns type="Number" integer="true"></returns>
    var td = cell;
    return td.cellIndex;
}
com.ivp.rad.controls.neogrid.scripts.GridUIHelper.outerHtml = function com_ivp_rad_controls_neogrid_scripts_GridUIHelper$outerHtml(element, withChildren) {
    /// <param name="element" type="Object" domElement="true">
    /// </param>
    /// <param name="withChildren" type="Boolean">
    /// </param>
    /// <returns type="String"></returns>
    if (Sys.Browser.name === com.ivp.rad.rscriptutils.RSConstants.mozillA_FIREFOX) {
        var htmlBuilder = new Sys.StringBuilder();
        var e = element.cloneNode(false);
        var createdTempElement = document.createElement('DIV');
        createdTempElement.appendChild(e);
        htmlBuilder.append(createdTempElement.innerHTML.split('><')[0] + '>');
        if (withChildren) {
            htmlBuilder.append(element.innerHTML);
            htmlBuilder.append('</');
            htmlBuilder.append(element.tagName);
            htmlBuilder.append('>');
        }
        return htmlBuilder.toString();
    }
    else {
        var customElement = element;
        if (withChildren) {
            return customElement.outerHTML;
        }
        else {
            return customElement.outerHTML.split('><')[0] + '>';
        }
    }
}
com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround = function com_ivp_rad_controls_neogrid_scripts_GridUIHelper$manageBackGround(disable) {
    /// <param name="disable" type="Boolean">
    /// </param>
    var background = document.getElementById('_gridDisablePanel');
    if (background != null) {
    }
}
com.ivp.rad.controls.neogrid.scripts.GridUIHelper.removeTextNodesFromGrid = function com_ivp_rad_controls_neogrid_scripts_GridUIHelper$removeTextNodesFromGrid(parentElement) {
    /// <param name="parentElement" type="Object" domElement="true">
    /// </param>
    var textCollection = parentElement.childNodes;
    var element = null;
    for (var i = 0; i < textCollection.length; i++) {
        try {
            element = textCollection[i];
            if (element.nodeType === 3 || element.nodeName.toLowerCase() === '#text') {
                element.parentNode.removeChild(element);
            }
        }
        catch ($e1) {
        }
    }
}
com.ivp.rad.controls.neogrid.scripts.GridUIHelper.prototype = {
    _gridID: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.EvalManager

com.ivp.rad.controls.neogrid.scripts.EvalManager = function com_ivp_rad_controls_neogrid_scripts_EvalManager() {
    /// <field name="eventHandlerList" type="Array" static="true">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler = function com_ivp_rad_controls_neogrid_scripts_EvalManager$addHandler(el, eventName, handler) {
    /// <param name="el" type="Object" domElement="true">
    /// </param>
    /// <param name="eventName" type="String">
    /// </param>
    /// <param name="handler" type="Sys.UI.DomEventHandler">
    /// </param>
    var info = new com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo();
    info.element = el;
    info.eventHandler = handler;
    info.eventName = eventName;
    Array.add(com.ivp.rad.controls.neogrid.scripts.EvalManager.eventHandlerList, info);
    $addHandler(el, eventName, handler);
}
com.ivp.rad.controls.neogrid.scripts.EvalManager.clearAllHandlers = function com_ivp_rad_controls_neogrid_scripts_EvalManager$clearAllHandlers(gridid) {
    /// <param name="gridid" type="String">
    /// </param>
    for (var i = 0; i < com.ivp.rad.controls.neogrid.scripts.EvalManager.eventHandlerList.length; i++) {
        var info = com.ivp.rad.controls.neogrid.scripts.EvalManager.eventHandlerList[i];
        if (info.element != null) {
            if ((info.element).id === gridid) {
                try {
                    $removeHandler(info.element, info.eventName, info.eventHandler);
                }
                catch ($e1) {
                    var element = info.element;
                    if (element != null && element.nodeName.toUpperCase() !== 'BODY') {
                        $clearHandlers(element);
                    }
                }
            }
        }
    }
}
com.ivp.rad.controls.neogrid.scripts.EvalManager.addWindowHandler = function com_ivp_rad_controls_neogrid_scripts_EvalManager$addWindowHandler(el, eventName, handler) {
    /// <param name="el" type="Object" domElement="true">
    /// </param>
    /// <param name="eventName" type="String">
    /// </param>
    /// <param name="handler" type="Sys.UI.DomEventHandler">
    /// </param>
    eval('$addHandler(window,\"' + eventName + '\",handler);');
}
com.ivp.rad.controls.neogrid.scripts.EvalManager.removeWindowHandler = function com_ivp_rad_controls_neogrid_scripts_EvalManager$removeWindowHandler(el, eventName, handler) {
    /// <param name="el" type="Object" domElement="true">
    /// </param>
    /// <param name="eventName" type="String">
    /// </param>
    /// <param name="handler" type="Sys.UI.DomEventHandler">
    /// </param>
    eval('$removeHandler(window,\"' + eventName + '\",handler);');
}
com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers = function com_ivp_rad_controls_neogrid_scripts_EvalManager$clearHandlers(el) {
    /// <param name="el" type="Object" domElement="true">
    /// </param>
    for (var i = 0; i < com.ivp.rad.controls.neogrid.scripts.EvalManager.eventHandlerList.length; i++) {
        var info = com.ivp.rad.controls.neogrid.scripts.EvalManager.eventHandlerList[i];
        if (info.element === el) {
            Array.remove(com.ivp.rad.controls.neogrid.scripts.EvalManager.eventHandlerList, info);
            i--;
        }
    }
    $clearHandlers(el);
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.EventsBody

com.ivp.rad.controls.neogrid.scripts.EventsBody = function com_ivp_rad_controls_neogrid_scripts_EventsBody(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    this._grid = grid;
    this.prepareEventsDiv();
    var servicecompletedHandler = Function.createDelegate(this, this.serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(servicecompletedHandler);
}
com.ivp.rad.controls.neogrid.scripts.EventsBody.prototype = {
    _grid: null,

    serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_EventsBody$serviceCompleted(serviceinfo) {
        /// <param name="serviceinfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
    },

    prepareEventsDiv: function com_ivp_rad_controls_neogrid_scripts_EventsBody$prepareEventsDiv() {
        this._grid.elementInfo.get_childGridDivForScroll().innerHTML = '';
        this._grid.elementInfo.get_childGridDivForUpScroll().innerHTML = '';
        this._grid.elementInfo.get_childGridDiv().innerHTML = '';
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.DelegateEventType

com.ivp.rad.controls.neogrid.scripts.DelegateEventType = function com_ivp_rad_controls_neogrid_scripts_DelegateEventType() {
    /// <field name="eventHeaderCellCellCreated" type="String" static="true">
    /// </field>
    /// <field name="eventOnServiceCompleted" type="String" static="true">
    /// </field>
    /// <field name="eventOnEventFired" type="String" static="true">
    /// </field>
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.EventType

com.ivp.rad.controls.neogrid.scripts.EventType = function com_ivp_rad_controls_neogrid_scripts_EventType() {
    /// <field name="evenT_DEFAULT" type="String" static="true">
    /// </field>
    /// <field name="evenT_CLIENT_SIDE_BINDING" type="String" static="true">
    /// </field>
    /// <field name="evenT_CANCEL_WHOLE_EDIT_INFO" type="String" static="true">
    /// </field>
    /// <field name="evenT_CANCEL_SINGLE_CELL_EDIT_INFO" type="String" static="true">
    /// </field>
    /// <field name="evenT_MULTIPLE_GROUPS" type="String" static="true">
    /// </field>
    /// <field name="evenT_SORT" type="String" static="true">
    /// </field>
    /// <field name="evenT_SORT_REMOVE_ALL" type="String" static="true">
    /// </field>
    /// <field name="evenT_REMOVE_SORT" type="String" static="true">
    /// </field>
    /// <field name="evenT_FILTER" type="String" static="true">
    /// </field>
    /// <field name="evenT_FILTER_BULK" type="String" static="true">
    /// </field>
    /// <field name="evenT_FILTER_REMOVE" type="String" static="true">
    /// </field>
    /// <field name="evenT_FILTER_REMOVE_ALL" type="String" static="true">
    /// </field>
    /// <field name="evenT_FILTER_LIST" type="String" static="true">
    /// </field>
    /// <field name="evenT_FILTER_SLIDER" type="String" static="true">
    /// </field>
    /// <field name="evenT_FILTER_SLIDER_REMOVE" type="String" static="true">
    /// </field>
    /// <field name="evenT_FILTER_MIN_MAX_COLUMN" type="String" static="true">
    /// </field>
    /// <field name="evenT_FILTER_SLIDER_REMOVE_ALL" type="String" static="true">
    /// </field>
    /// <field name="evenT_REMOVE_SINGLE_FILTER" type="String" static="true">
    /// </field>
    /// <field name="evenT_RESIZE_COLUMN" type="String" static="true">
    /// </field>
    /// <field name="evenT_GROUP" type="String" static="true">
    /// </field>
    /// <field name="evenT_GROUP_REMOVE_ALL" type="String" static="true">
    /// </field>
    /// <field name="evenT_RESET_TO_DEFAULT" type="String" static="true">
    /// </field>
    /// <field name="evenT_APPLY_CONFIGURATION" type="String" static="true">
    /// </field>
    /// <field name="evenT_APPLY_CONFIGURATION_WITHOUT_LAYOUT" type="String" static="true">
    /// </field>
    /// <field name="evenT_APPLY_COFIGURATION_WITH_NEW_LAYOUT" type="String" static="true">
    /// </field>
    /// <field name="evenT_CELL_SELECTED" type="String" static="true">
    /// </field>
    /// <field name="evenT_CELL_UNSELECTED" type="String" static="true">
    /// </field>
    /// <field name="evenT_CELL_ROW_UNSELECTED_ALL" type="String" static="true">
    /// </field>
    /// <field name="evenT_CELL_DRAG_SELECT_UNSELECT" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_SELECTED" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_SELECTED_ONE" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_WITH_CHECKBOX_SELECTED" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_WITH_CHECKBOX_UNSELECTED" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_WITH_CHECKBOX_SELECTED_ALL" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_UNSELECTED" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_UNSELECTED_ALL" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_WITH_CHECKBOX_UNSELECTED_ALL" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_WITH_GROUP_HEADER_CHECKBOX_SELECTED" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_WITH_GROUP_HEADER_CHECKBOX_UNSELECTED" type="String" static="true">
    /// </field>
    /// <field name="evenT_SAVE_MY_VIEW" type="String" static="true">
    /// </field>
    /// <field name="evenT_DELETE_MY_VIEW" type="String" static="true">
    /// </field>
    /// <field name="evenT_LOAD_MY_VIEW" type="String" static="true">
    /// </field>
    /// <field name="evenT_LOAD_DEFAULT_VIEW" type="String" static="true">
    /// </field>
    /// <field name="evenT_MANAGE_VIEW" type="String" static="true">
    /// </field>
    /// <field name="evenT_SAVE_MANAGE_VIEW" type="String" static="true">
    /// </field>
    /// <field name="evenT_HIDE_COLUMN" type="String" static="true">
    /// </field>
    /// <field name="evenT_HIDE_COLUMN_MULTIPLE" type="String" static="true">
    /// </field>
    /// <field name="evenT_UNHIDE_COLUMN" type="String" static="true">
    /// </field>
    /// <field name="evenT_UNHIDE_COLUMN_MULTIPLE" type="String" static="true">
    /// </field>
    /// <field name="evenT_UNHIDE_ALL_COLUMN" type="String" static="true">
    /// </field>
    /// <field name="evenT_SEARCH" type="String" static="true">
    /// </field>
    /// <field name="evenT_MASTER_GRID_SEARCH" type="String" static="true">
    /// </field>
    /// <field name="evenT_REMOVE_SEARCH" type="String" static="true">
    /// </field>
    /// <field name="evenT_FREEZE_COLUMN" type="String" static="true">
    /// </field>
    /// <field name="evenT_FREEZE_REMOVE_COLUMN" type="String" static="true">
    /// </field>
    /// <field name="evenT_FREEZE_REMOVE_COLUMN_ALL" type="String" static="true">
    /// </field>
    /// <field name="evenT_EXPORT_TO_EXCEL" type="String" static="true">
    /// </field>
    /// <field name="evenT_EXPORT_VISIBLE_TO_EXCEL" type="String" static="true">
    /// </field>
    /// <field name="evenT_EXPORT_CHECKED_ROWS" type="String" static="true">
    /// </field>
    /// <field name="evenT_EXPORT_PIVOT_ROWS" type="String" static="true">
    /// </field>
    /// <field name="evenT_EXPORT_TO_PDF" type="String" static="true">
    /// </field>
    /// <field name="evenT_CUSTOM_FORMATTER" type="String" static="true">
    /// </field>
    /// <field name="evenT_SAVE_CUSTOM_FORMATTING" type="String" static="true">
    /// </field>
    /// <field name="evenT_UPDATE_EDITABLEROWS" type="String" static="true">
    /// </field>
    /// <field name="evenT_TOTAL_PAGES_REQUEST" type="String" static="true">
    /// </field>
    /// <field name="evenT_PAGE_CHANGE_EVENT" type="String" static="true">
    /// </field>
    /// <field name="evenT_MAX_PAGE_SIZE_CHANGE_EVENT" type="String" static="true">
    /// </field>
    /// <field name="evenT_GET_SELECTED_INFO" type="String" static="true">
    /// </field>
    /// <field name="evenT_MERGE_HEADERS" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_KEY" type="String" static="true">
    /// </field>
    /// <field name="evenT_CHECK_ROW_IF_NONE_CHECKED" type="String" static="true">
    /// </field>
    /// <field name="evenT_CHECK_ROW_LIST_IF_NONE_CHECKED" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_KEY_VALUE" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_USER_DATA" type="String" static="true">
    /// </field>
    /// <field name="evenT_SAVE_COLUMN_WIDTHS" type="String" static="true">
    /// </field>
    /// <field name="evenT_UPDATE_GRID" type="String" static="true">
    /// </field>
    /// <field name="evenT_UPDATE_GRID_WITHOUT_REFERESH" type="String" static="true">
    /// </field>
    /// <field name="evenT_UPDATE_GRID_DELETE_ROW" type="String" static="true">
    /// </field>
    /// <field name="evenT_DISABLED_CHECKED_ROWS" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_ROWSINFO" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_EXPAND" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_COLLAPSE" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_EXPANDALL" type="String" static="true">
    /// </field>
    /// <field name="evenT_ROW_COLLAPSEALL" type="String" static="true">
    /// </field>
    /// <field name="evenT_DO_NOTHING" type="String" static="true">
    /// </field>
    /// <field name="evenT_WGHTAVG_COLUMN_SELECTED" type="String" static="true">
    /// </field>
    /// <field name="evenT_REARRANGE_COLUMN_DROP" type="String" static="true">
    /// </field>
    /// <field name="evenT_REARRANGE_MULTIPLE_COLUMN" type="String" static="true">
    /// </field>
    /// <field name="evenT_DISPOSE" type="String" static="true">
    /// </field>
    /// <field name="evenT_GET_CHECKED_ROWS" type="String" static="true">
    /// </field>
    /// <field name="evenT_ADD_COLUMNS" type="String" static="true">
    /// </field>
    /// <field name="evenT_REMOVE_COLUMNS" type="String" static="true">
    /// </field>
    /// <field name="evenT_UPDATE_ROW_DATA_INFO" type="String" static="true">
    /// </field>
    /// <field name="evenT_UPDATE_RADBALANCEPOPUP_DATASOURCE" type="String" static="true">
    /// </field>
    /// <field name="evenT_GET_RULE_INTELLISENSE" type="String" static="true">
    /// </field>
    /// <field name="evenT_EXECUTE_RULE" type="String" static="true">
    /// </field>
    /// <field name="evenT_RULE_BASED_COLORING" type="String" static="true">
    /// </field>
    /// <field name="evenT_PASTE_DATA_FROM_EXCEL" type="String" static="true">
    /// </field>
    /// <field name="evenT_SAVE_PASTED_DATA_FROM_EXCEL" type="String" static="true">
    /// </field>
    /// <field name="evenT_COLUMN_LEVEL_MATHEMATICAL_OPERATIONS" type="String" static="true">
    /// </field>
    /// <field name="evenT_DATA_PUSH" type="String" static="true">
    /// </field>
    /// <field name="evenT_FILTER_DATA" type="String" static="true">
    /// </field>
    /// <field name="evenT_CLEAR_FILTER_DATA" type="String" static="true">
    /// </field>
    /// <field name="evenT_MASTER_CHILD_GRID" type="String" static="true">
    /// </field>
    /// <field name="evenT_RANKING_COLUMN_INFO" type="String" static="true">
    /// </field>
    /// <field name="evenT_REMOVE_RANKING" type="String" static="true">
    /// </field>
    /// <field name="evenT_UPDATE_DATA_WITH_TICKS" type="String" static="true">
    /// </field>
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ExportToExcel

com.ivp.rad.controls.neogrid.scripts.ExportToExcel = function com_ivp_rad_controls_neogrid_scripts_ExportToExcel(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="isInterOpInstalled" type="Boolean">
    /// </field>
    this._grid = grid;
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.ExportToExcel.prototype = {
    _grid: null,
    isInterOpInstalled: false,

    showExportToExcelOptions: function com_ivp_rad_controls_neogrid_scripts_ExportToExcel$showExportToExcelOptions() {
        var popupBody = '';
        popupBody = '<table style=\"width:300px;\"><tbody><tr><td style=\"padding-left:20px;padding-top:4px;\"><input style=\"top:4px;\" type=\"radio\" value=\"exportall\" id=\"exportall\" name=\"exporttype\" checked><label style=\"padding-left:4px;padding-top:2px;padding-bottom:2px;font-family: \'Istok Web\', sans-serif;\" for=\"exportall\"> Export All Rows</label></input></td></tr>' + '<tr><td style=\"padding-left:20px;\"><input style=\"top:4px;font-family: \'Istok Web\', sans-serif;\" type=\"radio\" value=\"exportselected\" id=\"exportselected\" name=\"exporttype\"><label style=\"padding-left:4px;padding-top:2px;padding-bottom:2px;font-family: \'Istok Web\', sans-serif;\" for=\"exportselected\">Export Selected Rows</label></input></td></tr>' + '</tbody></table>';
        this._grid.managePopups._showCustomMessageBox('Export To Excel', popupBody, 'this._grid.exportToExcel._excelPopUpEvent', 'Export', '', 'this._grid.exportToExcel._popupCancelBtnClick');
    },


    _excelPopUpEvent: function com_ivp_rad_controls_neogrid_scripts_ExportToExcel$_excelPopUpEvent(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var radioBtns = document.getElementsByName('exporttype');
        for (var i = 0; i < radioBtns.length; i++) {
            if ((radioBtns[i]).checked) {
                switch ((radioBtns[i]).value) {
                    case 'exportall':
                        this.exportToExcelAllRows();
                        break;
                    case 'exportvisible':
                        this.exportToExcelVisibleRows();
                        break;
                    case 'exportselected':
                        this.exportToExcelSelectedRows();
                        break;
                    case 'exportpivot':
                        this.exportToExcelPivot();
                        break;
                }
                break;
            }
        }
        this._grid.managePopups.hidePopup();
    },

    _popupCancelBtnClick: function com_ivp_rad_controls_neogrid_scripts_ExportToExcel$_popupCancelBtnClick(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._grid.managePopups.hidePopup();
    },

    exportToExcelAllRows: function com_ivp_rad_controls_neogrid_scripts_ExportToExcel$exportToExcelAllRows() {
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_EXCEL, 'true|' + Math.round(Math.random() * 10000).toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_EXCEL);
    },

    exportToExcelVisibleRows: function com_ivp_rad_controls_neogrid_scripts_ExportToExcel$exportToExcelVisibleRows() {
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_VISIBLE_TO_EXCEL, 'true|' + Math.round(Math.random() * 10000).toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_VISIBLE_TO_EXCEL);
    },

    exportToExcelSelectedRows: function com_ivp_rad_controls_neogrid_scripts_ExportToExcel$exportToExcelSelectedRows() {
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_CHECKED_ROWS, 'true|' + Math.round(Math.random() * 10000).toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_CHECKED_ROWS);
    },

    exportToExcelPivot: function com_ivp_rad_controls_neogrid_scripts_ExportToExcel$exportToExcelPivot() {
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_PIVOT_ROWS, 'true|' + Math.round(Math.random() * 10000).toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_PIVOT_ROWS);
    },

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_ExportToExcel$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        try {
            var newWindow = null;
            if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_EXCEL || serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_VISIBLE_TO_EXCEL || serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_CHECKED_ROWS || serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_PIVOT_ROWS) {
                newWindow = this.createTableWindow(serviceInfo.serializedInfo.ExcelFileName);
            }
            if (!serviceInfo.serializedInfo.IsInterOpInstalled) {
                this.isInterOpInstalled = false;
            }
            else {
                this.isInterOpInstalled = true;
            }
        }
        catch (ex) {
            this._grid.showFailureMessage(ex.message);
            throw ex;
        }
    },

    createTableWindow: function com_ivp_rad_controls_neogrid_scripts_ExportToExcel$createTableWindow(eventData) {
        /// <param name="eventData" type="String">
        /// </param>
        /// <returns type="WindowInstance"></returns>
        eventData = eventData.split('~')[0];
        var newWindow = window.open('App_Dynamic_Resource/RADNeoGrid,com.ivp.rad.controls.neogrid.Resources.Files.RADGridExportToExcel.aspx?eventData=' + eventData.split('~')[0], '_blank', 'width=400,height=1,menubar=0,resizable=1');
        if (newWindow == null) {
            var openInSameWindow = confirm('There was some problem opening new window on your machine.\nClick OK if you want to open the new window in the current window.');
            if (openInSameWindow) {
                newWindow = window.open('App_Dynamic_Resource/RADneoGrid,com.ivp.rad.controls.neogrid.Resources.Files.RADGridExportToExcel.aspx?eventData=' + eventData.split('~')[0], '_self', 'width=500,height=550,menubar=1,resizable=1');
            }
            else {
                return null;
            }
        }
        return newWindow;
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ExportToPdf

com.ivp.rad.controls.neogrid.scripts.ExportToPdf = function com_ivp_rad_controls_neogrid_scripts_ExportToPdf(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    this._grid = grid;
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.ExportToPdf.prototype = {
    _grid: null,

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_ExportToPdf$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        try {
            var newWindow = null;
            if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_PDF) {
                newWindow = this._createTableWindow(serviceInfo.serializedInfo.PdfFileName.split('~')[0]);
            }
        }
        catch (ex) {
            this._grid.showFailureMessage(ex.message);
            throw ex;
        }
    },

    _createTableWindow: function com_ivp_rad_controls_neogrid_scripts_ExportToPdf$_createTableWindow(eventData) {
        /// <param name="eventData" type="String">
        /// </param>
        /// <returns type="WindowInstance"></returns>
        var columnNotToExport = this._grid.get_GridInfo().ColumnNotToExport.join(',');
        var newWindow = window.open('App_Dynamic_Resource/RADNeoGrid,com.ivp.rad.controls.neogrid.Resources.Files.RADGridExportToPdf.aspx?eventData=' + eventData.split('|')[1] + '&headerText=' + this._grid.get_GridInfo().PdfHeaderText + '&columnNotToExport=' + columnNotToExport, '_blank', 'width=500,height=1,menubar=0,resizable=1');
        if (newWindow == null) {
            var openInSameWindow = confirm('There was some problem opening new window on your machine.\nClick OK if you want to open the new window in the current window.');
            if (openInSameWindow) {
                newWindow = window.open('App_Dynamic_Resource/RADNeoGrid,com.ivp.rad.controls.neogrid.Resources.Files.RADGridExportToPdf.aspx?eventData=' + eventData.split('|')[1] + '&headerText=' + this._grid.get_GridInfo().PdfHeaderText + '&columnNotToExport=' + columnNotToExport, '_self', 'width=500,height=550,menubar=1,resizable=1');
            }
            else {
                return null;
            }
        }
        return newWindow;
    },

    _exportToPdfAllRows: function com_ivp_rad_controls_neogrid_scripts_ExportToPdf$_exportToPdfAllRows(serializeData) {
        /// <param name="serializeData" type="String">
        /// </param>
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_PDF, serializeData + '|' + Math.round(Math.random() * 10000).toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_PDF);
    }
}
com.ivp.rad.controls.neogrid.scripts.CommentInfoDetails = function com_ivp_rad_controls_neogrid_scripts_CommentInfoDetails(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="ColumnName" type="String">
    /// </field>
    /// <field name="RowId" type="String">
    /// </field>
    /// <field name="Grid_Marker" type="String">
    /// </field>
    /// <field name="CoomenTInfo" type="ArrayList">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.CommentInfoDetails.prototype = {
    ColumnName: '',
    RowId:'',
    Grid_Marker: '',
    CoomenTInfo: null,
}

com.ivp.rad.controls.neogrid.scripts.CoomenTInfoDetails = function com_ivp_rad_controls_neogrid_scripts_CoomenTInfoDetails() {
    /// <field name="Comment" type="String">
    /// </field>
    /// <field name="UserId" type="String">
    /// </field>
    /// <field name="UpdatedDate" type="String">
    /// </field
    /// <field name="ID" type="int">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.CoomenTInfoDetails.prototype = {
    Comment: "",
    UserId: "",
    UpdatedDate: "",
    ID: 0
}
////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.Filter

com.ivp.rad.controls.neogrid.scripts.Filter = function com_ivp_rad_controls_neogrid_scripts_Filter(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_searchBar" type="Object" domElement="true">
    /// </field>
    /// <field name="_filterList" type="Object" domElement="true">
    /// </field>
    /// <field name="_headerDivElement" type="Object" domElement="true">
    /// </field>
    /// <field name="_bodyDivElement" type="Object" domElement="true">
    /// </field>
    /// <field name="_bodyDivElementParent" type="Object" domElement="true">
    /// </field>
    /// <field name="_footerDivElement" type="Object" domElement="true">
    /// </field>
    /// <field name="_alternateFilterDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_alternateFilterDivParent" type="Object" domElement="true">
    /// </field>
    /// <field name="_resizeFilterListDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_containerFilterDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_betweenDatesDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_fixedHeaderFilter" type="Object" domElement="true">
    /// </field>
    /// <field name="_isSelectAllCheckBoxClicked" type="Boolean">
    /// </field>
    /// <field name="_buttonFilter" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonCancel" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonReset" type="Object" domElement="true">
    /// </field>
    /// <field name="_buttonFlip" type="Object" domElement="true">
    /// </field>
    /// <field name="_search" type="Object" domElement="true">
    /// </field>
    /// <field name="_fixedFilterTextBox" type="Object" domElement="true">
    /// </field>
    /// <field name="_filterOperationsTextBox" type="Object" domElement="true">
    /// </field>
    /// <field name="_fromDateTextBox" type="Object" domElement="true">
    /// </field>
    /// <field name="_toDateTextBox" type="Object" domElement="true">
    /// </field>
    /// <field name="_fromLabel" type="Object" domElement="true">
    /// </field>
    /// <field name="_toLabel" type="Object" domElement="true">
    /// </field>
    /// <field name="_ul" type="Object" domElement="true">
    /// </field>
    /// <field name="_filterListResizeStart" type="Boolean">
    /// </field>
    /// <field name="filteredColumns" type="Array">
    /// </field>
    /// <field name="filteredColumnInfo" type="Array">
    /// </field>
    /// <field name="_selectedOperation" type="String">
    /// </field>
    /// <field name="_toBeOperatedValue" type="String">
    /// </field>
    /// <field name="_latestOperation" type="String">
    /// </field>
    /// <field name="_filteredData" type="Array">
    /// </field>
    /// <field name="_unFilteredData" type="Array">
    /// </field>
    /// <field name="_initialX" type="Number" integer="true">
    /// </field>
    /// <field name="_initialY" type="Number" integer="true">
    /// </field>
    /// <field name="_initialHeight" type="Number" integer="true">
    /// </field>
    /// <field name="_initialWidth" type="Number" integer="true">
    /// </field>
    /// <field name="_shiftKeyPressed" type="Boolean">
    /// </field>
    /// <field name="_flagFlipped" type="Boolean">
    /// </field>
    /// <field name="_checkFilterCheckBox" type="Boolean">
    /// </field>
    /// <field name="currentColumnName" type="String">
    /// </field>
    /// <field name="_fixedHeaderHTML" type="String">
    /// </field>
    this._grid = grid;
    this.filteredColumns = [];
    this._filteredData = [];
    this._unFilteredData = [];
    var cellEventHandler = Function.createDelegate(this, this._iterateOnHeaderCellsForFilterList);
    this._grid.eventHandlerManager.addHeaderCellIterated(cellEventHandler);
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}

com.ivp.rad.controls.neogrid.scripts.Filter.prototype = {
    _grid: null,
    _searchBar: null,
    _filterList: null,
    _headerDivElement: null,
    _bodyDivElement: null,
    _bodyDivElementParent: null,
    _footerDivElement: null,
    _alternateFilterDiv: null,
    _alternateFilterDivParent: null,
    _resizeFilterListDiv: null,
    _containerFilterDiv: null,
    _betweenDatesDiv: null,
    _fixedHeaderFilter: null,
    _isSelectAllCheckBoxClicked: false,
    _buttonFilter: null,
    _buttonCancel: null,
    _buttonReset: null,
    _buttonFlip: null,
    _search: null,
    _fixedFilterTextBox: null,
    _filterOperationsTextBox: null,
    _fromDateTextBox: null,
    _toDateTextBox: null,
    _fromLabel: null,
    _toLabel: null,
    _ul: null,
    _filterListResizeStart: false,
    filteredColumns: null,
    filteredColumnInfo: null,
    _selectedOperation: null,
    _toBeOperatedValue: null,
    _latestOperation: null,
    _filteredData: null,
    _unFilteredData: null,
    _initialX: 0,
    _initialY: 0,
    _initialHeight: 0,
    _initialWidth: 0,
    _shiftKeyPressed: false,
    _flagFlipped: false,
    _checkFilterCheckBox: false,
    _AlreadyFilteredValue: [],
    _selectAllNeoCheckBox: false,
    _AddToCurrentFilterListCheckBox:false, 
    currentColumnName: '',
    _fixedHeaderHTML: '<table style=\"table-layout:fixed\" width=\"100%;\"><colgroup><col width=\"6px\"><col width=\"20px\"><col width=\"100%\"><col width=\"9px\"></colgroup><tr style=\"\"><td></td><td style=\"text-align:left; padding-top:3px; border-bottom:1px solid #DDDDDD;\"><input type=\"checkbox\" value=\"~All~\" id=\"{0}\"/></td><td style=\"border-bottom:1px solid #DDDDDD;\" title=\"Select All\" ><label for=\"{1}\" id=\"{2}\" style=\"padding-bottom:3px;margin-top:2px;vertical-align:middle;font-weight:600;line-height:15px;padding-right:5px;color:black;font-family:\'Open Sans\', sans-serif;white-space:nowrap;font-size:12px;padding-top:7px;\" >Select All</label></td><td></td></tr></table>',

    _createFilterListDiv: function com_ivp_rad_controls_neogrid_scripts_Filter$_createFilterListDiv(ColumnName) {
        /// <param name="ColumnName" type="String">
        /// </param>
		this._selectedOperation = "";
        var selectAllCheckBoxId = this._grid.get_GridInfo().GridId + '_' + ColumnName.replace(new RegExp('[ ]', 'gi'), '_') + '_Select_All__FilterList';
        var selectAllLabelId = 'lbl_' + selectAllCheckBoxId;
        if (document.getElementById(this._grid.get_GridInfo().GridId + 'filterSelectList') != null) {
            this._grid.elementInfo.get_element().parentNode.removeChild(document.getElementById(this._grid.get_GridInfo().GridId + 'filterSelectList'));
        }
        this._searchBar = this._grid.elementHelper.get_divElement();
        this._searchBar.id = this._grid.elementIDManager.get_searchBarID();
        this._ul = document.createElement('ul');
        this._ul.style.paddingLeft = '0px';
        this._ul.style.paddingRight = '12px';
        this._ul.style.width = '100%';
        this._flagFlipped = false;
        this._search = this._grid.elementHelper.get_textElement();
        this._search.id = 'data_txtSearch';
        this._search.className = 'form-control searchTextBoxInFilter';
        this._search.setAttribute('placeholder', 'Search');
        this._search.setAttribute('isFilterFilter', 'true');
        this._search.style.width = '75%';
        this._buttonFilter = this._grid.elementHelper.get_buttonElement();
        this._buttonFilter.value = 'Filter';
        this._buttonFilter.style.marginTop = '0px';
        this._buttonFilter.style.marginBottom = '0px';
        this._buttonFilter.title = 'Filter';
        this._buttonFilter.id = this._grid.elementIDManager.get_filterListFilter();
        this._buttonCancel = this._grid.elementHelper.get_buttonElement();
        this._buttonCancel.value = 'Cancel';
        this._buttonCancel.style.marginTop = '0px';
        this._buttonCancel.style.marginBottom = '0px';
        this._buttonCancel.title = 'Cancel';
        this._buttonCancel.id = this._grid.elementIDManager.get_filterListCancel();
        this._buttonReset = this._grid.elementHelper.get_buttonElement();
        this._buttonReset.value = 'Reset';
        this._buttonReset.style.marginTop = '0px';
        this._buttonReset.style.marginBottom = '0px';
        this._buttonReset.title = 'Reset';
        this._buttonReset.id = this._grid.elementIDManager.get_filterListReset();
        this._buttonFlip = this._grid.elementHelper.get_buttonElement();
        this._buttonFlip.id = this._grid.elementIDManager.get_filterButtonID();
        this._buttonFlip.setAttribute('allowFlip', true);
        this._buttonFlip.value = 'F';
        this._buttonFlip.style.height = '20px';
        this._buttonFlip.style.width = '10%';
        this._buttonFlip.style.marginLeft = '10px';
        this._buttonFlip.title = 'Advanced Filter';
        this._fixedFilterTextBox = this._grid.elementHelper.get_textElement();
        this._searchBar.appendChild(this._search);
        this._searchBar.appendChild(this._buttonFlip);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._buttonFilter);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._buttonCancel);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._buttonReset);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._buttonFlip);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._search);
        var btnfilterclick = Function.createDelegate(this, this._btnfilterHandler);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._buttonFilter, 'click', btnfilterclick);
        var btnCancelFilter = Function.createDelegate(this, this._btnCancelFilterHandler);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._buttonCancel, 'click', btnCancelFilter);
        var btnResetFilter = Function.createDelegate(this, this._btnResetFilterHandler);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._buttonReset, 'click', btnResetFilter);
        var flipHandler = Function.createDelegate(this, this._btnFlipButtonHandler);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._buttonFlip, 'click', flipHandler);
        this._alternateFilterDiv = this._grid.elementHelper.get_divElement();
        this._alternateFilterDiv.id = this._grid.elementIDManager.get_filterFlippedBodyDiv();
        this._alternateFilterDivParent = this._grid.elementHelper.get_divElement();
        this._alternateFilterDivParent.id = this._grid.elementIDManager.get_filterFlippedBodyDiv() + '_parent';
        this._alternateFilterDivParent.setAttribute('style', '-webkit-transition: 1.5s ease-in-out;-ms-transition: 1.5s ease-in-out;position:absolute;max-height: 175px; width:100%;padding-left: 5px;  height: 175px; background: rgb(255, 255, 255); -webkit-transform: perspective(800px) rotateY(180deg); -webkit-backface-visibility: hidden;-ms-transform: perspective(800px) rotateY(180deg); -ms-backface-visibility: hidden;');
        this._filterOperationsTextBox = this._grid.elementHelper.get_textElement();
        this._filterOperationsTextBox.id = 'filterOperationTextBox';
        this._filterOperationsTextBox.style.width = '75%';
        this._filterOperationsTextBox.style.marginLeft = '4px';
        this._filterOperationsTextBox.setAttribute('placeholder', 'Enter Value');
        if ($("#" + this._grid.get_GridInfo().GridId + '_' + ColumnName.replace(new RegExp('[ ]', 'gi'), '_') + "_Sort").parent().parent().attr("datatype") === 'xs_dateTime') {
            this._filterOperationsTextBox.setAttribute('readonly', true);
        }
        this._filterOperationsTextBox.className = 'form-control enterValueTextBoxInFilter';
        this._fromLabel = document.createElement('LABEL');
        this._fromLabel.innerHTML = 'From';
        this._fromLabel.setAttribute('style', 'float:left;margin-left:4px;width:30%');
        this._toLabel = document.createElement('LABEL');
        this._toLabel.innerHTML = 'To';
        this._toLabel.setAttribute('style', 'float:left;width:12%;margin-left:4px;');
        this._fromDateTextBox = this._grid.elementHelper.get_textElement();
        this._fromDateTextBox.id = 'FromfilterOperationTextBox';
        this._fromDateTextBox.setAttribute('placeholder', 'Start Date');
        this._fromDateTextBox.className = 'form-control enterValueTextBoxInFilter';
        this._fromDateTextBox.setAttribute('style', 'float:left;width:100%;margin-left:4px;height:20px;');
        if ($("#" + this._grid.get_GridInfo().GridId + '_' + ColumnName.replace(new RegExp('[ ]', 'gi'), '_') + "_Sort").parent().parent().attr("datatype") === 'xs_dateTime') {
            this._fromDateTextBox.setAttribute('readonly', true);
        }
        this._toDateTextBox = this._grid.elementHelper.get_textElement();
        this._toDateTextBox.id = 'TofilterOperationTextBox';
        this._toDateTextBox.setAttribute('placeholder', 'End Date');
        this._toDateTextBox.className = 'form-control enterValueTextBoxInFilter';
        this._toDateTextBox.setAttribute('style', 'float:left;width:100%;height:20px;margin-left:4px;margin-top:6px;');
        if ($("#" + this._grid.get_GridInfo().GridId + '_' + ColumnName.replace(new RegExp('[ ]', 'gi'), '_') + "_Sort").parent().parent().attr("datatype") === 'xs_dateTime') {
            this._toDateTextBox.setAttribute('readonly', true);
        }
        this._betweenDatesDiv = this._grid.elementHelper.get_divElement();
        this._betweenDatesDiv.setAttribute('style', 'float:left;height:40px;width:80%');
        this._betweenDatesDiv.appendChild(this._fromDateTextBox);
        this._betweenDatesDiv.appendChild(this._toDateTextBox);
        this._alternateFilterDivParent.appendChild(this._alternateFilterDiv);
        this._alternateFilterDiv.appendChild(this._ul);
        this._filterList = this._grid.elementHelper.get_divElement();
        this._headerDivElement = this._grid.elementHelper.get_divElement();
        this._headerDivElement.id = this._grid.elementIDManager.get_filterListHeader();
        this._headerDivElement.className = 'filterHeaderDiv';

        this._fixedHeaderSelectSearchFilter = this._grid.elementHelper.get_divElement();
        this._fixedHeaderSelectSearchFilter.id= 'RAD_fixedHeaderSelectSearchFilter';
        this._fixedHeaderSelectSearchFilter.className = 'RAD_fixedHeaderSelectSearchFilter';
        //this._fixedHeaderSelectSearchFilter.style.width = '100%';
        //this._fixedHeaderSelectSearchFilter.style.paddingTop = '2px';
        this._fixedHeaderSelectSearchFilter.style.display = 'none';
        this._fixedHeaderSelectSearchFilterChilD1 = this._grid.elementHelper.get_divElement();
        this._fixedHeaderSelectSearchFilterChilD2 = this._grid.elementHelper.get_divElement();
        this._fixedHeaderSelectSearchFilterChilD1.className = 'RAD_fixedHeaderSelectSearchFilterChilD1';
        this._fixedHeaderSelectSearchFilterChilD2.className = 'RAD_fixedHeaderSelectSearchFilterChilD2';
        this._fixedHeaderSelectSearchFilterSelectCheckBox = this._grid.elementHelper.get_divElement();
        this._fixedHeaderSelectSearchFilterAddCurrentSelectionCheckBox = this._grid.elementHelper.get_divElement();
        this._fixedHeaderSelectSearchFilterSelect = this._grid.elementHelper.get_divElement();
        this._fixedHeaderSelectSearchFilterAddCurrentSelection = this._grid.elementHelper.get_divElement();
        this._fixedHeaderSelectSearchFilterSelectCheckBox.className = "RAD_fixedHeaderSelectSearchFilterSelectCheckBox";
        this._fixedHeaderSelectSearchFilterAddCurrentSelectionCheckBox.className = "RAD_fixedHeaderSelectSearchFilterAddCurrentSelectionCheckBox";
        this._fixedHeaderSelectSearchFilterSelect.className = 'RAD_fixedHeaderSelectSearchFilterSelect';
        this._fixedHeaderSelectSearchFilterAddCurrentSelection.className = 'RAD_fixedHeaderSelectSearchFilterAddCurrentSelection';
        this._fixedHeaderSelectSearchFilterSelect.innerHTML = "Select All Search Results";
        this._fixedHeaderSelectSearchFilterAddCurrentSelection.innerHTML = "Add to Current Filter List";
        this._fixedHeaderSelectSearchFilterSelectCheckBox.innerHTML = '<input type="checkbox" checked="checked" id="RAD_fixedHeaderSelectSearchFilterSelectCheckBoxChild">';
        this._fixedHeaderSelectSearchFilterAddCurrentSelectionCheckBox.innerHTML = '<input type="checkbox"  id="RAD_fixedHeaderSelectSearchFilterAddCurrentSelectionCheckBoxChild">';
        
        this._fixedHeaderSelectSearchFilter.appendChild(this._fixedHeaderSelectSearchFilterChilD1);
        this._fixedHeaderSelectSearchFilter.appendChild(this._fixedHeaderSelectSearchFilterChilD2);
        this._fixedHeaderSelectSearchFilterChilD1.appendChild(this._fixedHeaderSelectSearchFilterSelectCheckBox);
        this._fixedHeaderSelectSearchFilterChilD1.appendChild(this._fixedHeaderSelectSearchFilterSelect);
        this._fixedHeaderSelectSearchFilterChilD2.appendChild(this._fixedHeaderSelectSearchFilterAddCurrentSelectionCheckBox);
        this._fixedHeaderSelectSearchFilterChilD2.appendChild(this._fixedHeaderSelectSearchFilterAddCurrentSelection);
        this._fixedHeaderFilter = this._grid.elementHelper.get_divElement();
        this._fixedHeaderFilter.id = this._grid.get_GridInfo().GridId + '_filterFixedHeader';
        this._fixedHeaderFilter.innerHTML = String.format(this._fixedHeaderHTML, selectAllCheckBoxId, selectAllCheckBoxId, selectAllLabelId);
        this._fixedHeaderFilter.style.width = '100%';
        this._fixedHeaderFilter.style.paddingTop = '2px';
        this._bodyDivElement = this._grid.elementHelper.get_divElement();
        this._bodyDivElement.id = this._grid.elementIDManager.get_filterListBody();
        this._bodyDivElement.setAttribute('style', 'position:absolute;max-height: 140px; padding-left: 5px; width: auto; height: 140px; background: rgb(255, 255, 255);');
        this._bodyDivElementParent = this._grid.elementHelper.get_divElement();
        this._bodyDivElementParent.id = this._grid.elementIDManager.get_filterListBody() + '_parent';
        this._bodyDivElementParent.setAttribute('style', '-webkit-transition: 1.5s ease-in-out;-ms-transition: 1.5s ease-in-out;position:absolute;max-height: 175px; margin-right: 5px; width: auto; height: 175px; background: rgb(255, 255, 255); -webkit-transform: perspective(800px) rotateY(0deg); -webkit-backface-visibility: hidden;-ms-transform: perspective(800px) rotateY(0deg); -ms-backface-visibility: hidden;');
        this._footerDivElement = this._grid.elementHelper.get_divElement();
        this._footerDivElement.id = this._grid.elementIDManager.get_filterListFooter();
        this._resizeFilterListDiv = this._grid.elementHelper.get_divElement();
        this._resizeFilterListDiv.id = this._grid.elementIDManager.get_filterListResize();
        this._resizeFilterListDiv.className = 'resizeFilterList';
        this._resizeFilterListDiv.innerHTML = '&nbsp;';
        this._bodyDivElementParent.appendChild(this._fixedHeaderFilter);
        this._bodyDivElementParent.appendChild(this._fixedHeaderSelectSearchFilter);
        this._bodyDivElementParent.appendChild(this._bodyDivElement);
        this._containerFilterDiv = this._grid.elementHelper.get_divElement();
        this._containerFilterDiv.id = this._grid.elementIDManager.get_containerFilterDivID();
        this._containerFilterDiv.appendChild(this._bodyDivElementParent);
        this._containerFilterDiv.appendChild(this._alternateFilterDivParent);
        this._containerFilterDiv.setAttribute('style', 'max-height:175px; height:175px;position:relative;');
        this._footerDivElement.appendChild(this._buttonFilter);
        this._footerDivElement.appendChild(this._buttonCancel);
        this._footerDivElement.appendChild(this._buttonReset);
        this._footerDivElement.appendChild(this._resizeFilterListDiv);
        this._filterList.appendChild(this._headerDivElement);
        this._filterList.appendChild(this._searchBar);
        this._filterList.appendChild(this._containerFilterDiv);
        this._filterList.appendChild(this._footerDivElement);
        this._setStyle();
        //if (this._grid.filter._AddToCurrentFilterListCheckBox)
        //{
        //    $("#RAD_fixedHeaderSelectSearchFilterAddCurrentSelectionCheckBoxChild")[0].checked = true;
        //}
        //else
        //{
        //    $("#RAD_fixedHeaderSelectSearchFilterAddCurrentSelectionCheckBoxChild")[0].checked = false;
        //}
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._filterList);
        var filterListHandler = Function.createDelegate(this, this._filterListEventHandler);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._filterList, 'click', filterListHandler);
        var keydownhandler = Function.createDelegate(this, this._keydownHandlerForFilter);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._filterList, 'keydown', keydownhandler);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._filterList, 'keyup', Function.createDelegate(this, this._fireKeyUpHandlerForFilter));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._filterList, 'mousedown', Function.createDelegate(this, this._filterMouseDownHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._filterList, 'mouseleave', Function.createDelegate(this, this._filterMouseLeaveHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._filterList, 'mousemove', Function.createDelegate(this, this._filterMouseMoveHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._filterList, 'mouseup', Function.createDelegate(this, this._filterMouseUpHanndler));
        this._grid.elementInfo.get_element().parentNode.appendChild(this._filterList);
        eval('$(\"#' + this._grid.elementIDManager.get_filterListBody() + '\").slimscrollNew({height : \'' + 140 + 'px\'})');
    },

    _setStyle: function com_ivp_rad_controls_neogrid_scripts_Filter$_setStyle() {
        this._filterList.style.display = 'none';
        this._filterList.style.width = '170px';
        this._filterList.id = this._grid.get_GridInfo().GridId + 'filterSelectList';
        this._filterList.className = 'filterSelectList';
        this._filterList.style.position = 'absolute';
        this._headerDivElement.style.display = 'none';
        this._footerDivElement.className = 'selectButtonPanel';
        this._buttonFilter.className = 'filterButton filterImageButton';
        this._buttonReset.className = 'filterButton filterResetImageButton';
        this._buttonCancel.className = 'filterCancelButton';
    },

    _iterateOnHeaderCellsForFilterList: function com_ivp_rad_controls_neogrid_scripts_Filter$_iterateOnHeaderCellsForFilterList(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs">
        /// </param>
        var filterListDiv = this._grid.elementHelper.get_divElement();
        filterListDiv.id = this._grid.get_id() + '_' + e.get_columnName().replace(new RegExp('[ ]', 'gi'), '_') + '_FilterListShow';
        filterListDiv.setAttribute('columnName', e.get_columnName());
        filterListDiv.innerHTML = '&nbsp;';
        filterListDiv.className = this._grid.get_GridInfo().CssFilter;
        filterListDiv.style.verticalAlign = 'middle';
        filterListDiv.style.cursor = 'pointer';
        filterListDiv.setAttribute('isgridheader', true);
        if (Array.contains(window.Object.keys(this._grid.get_GridInfo().CustomHeaderInfo), e.get_columnName())) {
            var element = null;
            if ((eval('$(e.get_TH()).find(\".xlneofilterSortDiv\").length')) > 0) {
                element = eval('$(e.get_TH()).find(\".xlneofilterSortDiv\")[0]');
                element.appendChild(filterListDiv);
            }
            else {
                element = eval('$(e.get_TH()).find(\".xlneofilterSortDivFloatLeft\")[0]');
                element.appendChild(filterListDiv);
            }
            element.setAttribute('isgridheader', true);
        }
        else {
            e.get_TH().getElementsByTagName('DIV')[1].setAttribute('isgridheader', true);
            e.get_TH().getElementsByTagName('DIV')[1].appendChild(filterListDiv);
        }
    },

    showFilterList: function com_ivp_rad_controls_neogrid_scripts_Filter$showFilterList(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._createFilterListDiv(e.target.getAttribute('columnName').toString());
        this.currentColumnName = e.target.getAttribute('columnName').toString();
		this.currentColumnDataType = $(e.target).closest(".newHeaderColumn").attr("datatype");
        var $dict1 = this._grid.get_GridInfo().ColumnNameMapping;
        for (var $key2 in $dict1) {
            var entry = { key: $key2, value: $dict1[$key2] };
            if (entry.value.toString() === this.currentColumnName) {
                this.currentColumnName = entry.key;
            }
        }
        var filter = new com.ivp.rad.controls.neogrid.scripts.info.FilterInfo();
        filter.ColumnName = e.target.getAttribute('columnName').toString();
        if (!Array.contains(this._grid.sliderFilter._sliderFilteredColumns, filter.ColumnName)) {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_LIST, Sys.Serialization.JavaScriptSerializer.serialize(filter), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_LIST);
            this._headerDivElement.innerHTML = filter.ColumnName;
            this._headerDivElement.title = filter.ColumnName;
            this._filteredData = [];
            this._unFilteredData = [];
            this._setFilterListPosition(e);
        }
        else {
            alert('Use slider to filter data');
            e.preventDefault();
        }
    },

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_Filter$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        this.filteredColumnInfo = [];
        if (serviceInfo.serializedInfo.FilterData != null) {
            if (serviceInfo.serializedInfo.FilterData['toBeOperatedValue'] != null) {
                eval('window._toBeOperatedValue=\"' + serviceInfo.serializedInfo.FilterData['toBeOperatedValue'] + '\"');
            }
            else {
                eval('window._toBeOperatedValue=\"\"');
            }
            if (serviceInfo.serializedInfo.FilterData['latestOperation'] != null) {
                eval('window._latestOperation=\"' + serviceInfo.serializedInfo.FilterData['latestOperation'] + '\"');
            }
            else {
                eval('window._latestOperation=\"\"');
            }
            if (serviceInfo.serializedInfo.FilterData['startDateInBetween'] != null) {
                eval('window._startDateInBetween=\"' + serviceInfo.serializedInfo.FilterData['startDateInBetween'] + '\"');
            }
            else {
                eval('window._startDateInBetween=\"\"');
            }
            if (serviceInfo.serializedInfo.FilterData['endDateInBetween'] != null) {
                eval('window._endDateInBetween=\"' + serviceInfo.serializedInfo.FilterData['endDateInBetween'] + '\"');
            }
            else {
                eval('window._endDateInBetween=\"\"');
            }
            if (serviceInfo.serializedInfo.FilterData['selectedOperation'] != null) {
                eval('window._selectedOperation=\"' + serviceInfo.serializedInfo.FilterData['selectedOperation'] + '\"');
            }
            else {
                eval('window._selectedOperation=\"\"');
            }
        }
        else {
            eval('window._toBeOperatedValue=\"\"');
            eval('window._latestOperation=\"\"');
            eval('window._startDateInBetween=\"\"');
            eval('window._endDateInBetween=\"\"');
            eval('window._selectedOperation=\"\"');
        }
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_LIST) {
            this._bodyDivElement.innerHTML = serviceInfo.output;
            this._bodyDivElement.scrollTop = 0;
            this._filterList.style.width = '170px';
            this._filterList.style.maxHeight = '230px';
            this._bodyDivElement.style.maxHeight = '175px';
            this._bodyDivElementParent.style.maxHeight = '175px';
            if (!this._grid._isRefreshWithCache) {
                this._filterList.style.display = '';
            }
            for (var i = 0; i < serviceInfo.serializedInfo.filterOperatorsEnum.length; i++) {
                var li = document.createElement('li');
                li.id = '_' + i + '_FilterOperatorSelected';
                li.className = 'filterOperatorListElement';
                var a = document.createElement('a');
                a.className = 'filterOperatorSelect';
                var span = document.createElement('span');
                span.innerText = serviceInfo.serializedInfo.filterOperatorsEnum[i].toString();
                a.appendChild(span);
                li.appendChild(a);
                this._ul.appendChild(li);
            }
            if (serviceInfo.serializedInfo.filterONColumn === 'xs_dateTime') {
                this._searchBar.appendChild(this._filterOperationsTextBox);
                this._searchBar.appendChild(this._betweenDatesDiv);
                if (serviceInfo.serializedInfo.FilterData != null) {
                    if (serviceInfo.serializedInfo.FilterData['toBeOperatedValue'] != null && serviceInfo.serializedInfo.FilterData['toBeOperatedValue'].toString() !== '') {
                        eval('$(\'#filterOperationTextBox\').datepicker({autoclose:true,beforeShow:function(input,inst){$(\"#ui-datepicker-div\").addClass(\"myDatePicker\");}, changeYear:true, onSelect:function(dateText,inst){ window._toBeOperatedValue=dateText;   if(window._selectedOperation!=\"\" && window._selectedOperation!=null) {window._latestOperation = \"operation\";  $(\"[id$=\'_FilterListFilter\']\").removeAttr(\"disabled\") ;} else $(\"[id$=\'_FilterListFilter\']\").attr(\"disabled\",\"disabled\") ;} , showAnim : \"blind\",defaultDate:' + serviceInfo.serializedInfo.FilterData['toBeOperatedValue'].toString() + '})');
						if(serviceInfo.serializedInfo.ShowAdvanceFilter == true)
						{
							 eval('window._latestOperation = \"operation\"');
						}
                    }
                    else {
                        eval('$(\'#filterOperationTextBox\').datepicker({autoclose:true,beforeShow:function(input,inst){$(\"#ui-datepicker-div\").addClass(\"myDatePicker\");},changeYear:true, onSelect:function(dateText,inst){ window._toBeOperatedValue=dateText;    if(window._selectedOperation!=\"\" && window._selectedOperation!=null) {window._latestOperation = \"operation\";  $(\"[id$=\'_FilterListFilter\']\").removeAttr(\"disabled\") ;} else $(\"[id$=\'_FilterListFilter\']\").attr(\"disabled\",\"disabled\") ;} , showAnim : \"blind\"})');
						if(serviceInfo.serializedInfo.ShowAdvanceFilter == true)
						{
							 eval('window._latestOperation = \"operation\"');
						}
                    }
                    if (serviceInfo.serializedInfo.FilterData['startDateInBetween'] != null && serviceInfo.serializedInfo.FilterData['startDateInBetween'].toString() !== '') {
                        eval('$(\'#FromfilterOperationTextBox\').datepicker({autoclose:true,beforeShow:function(input,inst){$(\"#ui-datepicker-div\").addClass(\"myDatePicker\");},changeYear:true, onSelect:function(dateText,inst){ window._startDateInBetween=dateText;    if(window._selectedOperation!=\"\" && window._selectedOperation!=null) {window._latestOperation = \"operation\";  $(\"[id$=\'_FilterListFilter\']\").removeAttr(\"disabled\") ;} else $(\"[id$=\'_FilterListFilter\']\").attr(\"disabled\",\"disabled\") ;} , showAnim : \"blind\" ,defaultDate :' + serviceInfo.serializedInfo.FilterData['startDateInBetween'].toString() + '})');
						if(serviceInfo.serializedInfo.ShowAdvanceFilter == true)
						{
							 eval('window._latestOperation = \"operation\"');
						}
                    }
                    else {
                        eval('$(\'#FromfilterOperationTextBox\').datepicker({autoclose:true,beforeShow:function(input,inst){$(\"#ui-datepicker-div\").addClass(\"myDatePicker\");},changeYear:true, onSelect:function(dateText,inst){ window._startDateInBetween=dateText;  if(window._selectedOperation!=\"\" && window._selectedOperation!=null) {window._latestOperation = \"operation\";  $(\"[id$=\'_FilterListFilter\']\").removeAttr(\"disabled\") ;} else $(\"[id$=\'_FilterListFilter\']\").attr(\"disabled\",\"disabled\") ;} , showAnim : \"blind\" })');
						if(serviceInfo.serializedInfo.ShowAdvanceFilter == true)
						{
							 eval('window._latestOperation = \"operation\"');
						}
                    }
                    if (serviceInfo.serializedInfo.FilterData['endDateInBetween'] != null && serviceInfo.serializedInfo.FilterData['endDateInBetween'].toString() !== '') {
                        eval('$(\'#TofilterOperationTextBox\').datepicker({autoclose:true,beforeShow:function(input,inst){$(\"#ui-datepicker-div\").addClass(\"myDatePicker\");},changeYear:true, onSelect:function(dateText,inst){ window._endDateInBetween=dateText;  if(window._selectedOperation!=\"\" && window._selectedOperation!=null) {window._latestOperation = \"operation\";  $(\"[id$=\'_FilterListFilter\']\").removeAttr(\"disabled\") ;} else $(\"[id$=\'_FilterListFilter\']\").attr(\"disabled\",\"disabled\") ;}  , showAnim : \"blind\",defaultDate :' + serviceInfo.serializedInfo.FilterData['endDateInBetween'].toString() + '})');
						if(serviceInfo.serializedInfo.ShowAdvanceFilter == true)
						{
							 eval('window._latestOperation = \"operation\"');
						}
                    }
                    else {
                        eval('$(\'#TofilterOperationTextBox\').datepicker({autoclose:true,beforeShow:function(input,inst){$(\"#ui-datepicker-div\").addClass(\"myDatePicker\");},changeYear:true, onSelect:function(dateText,inst){ window._endDateInBetween=dateText;   if(window._selectedOperation!=\"\" && window._selectedOperation!=null) {window._latestOperation = \"operation\";  $(\"[id$=\'_FilterListFilter\']\").removeAttr(\"disabled\") ;} else $(\"[id$=\'_FilterListFilter\']\").attr(\"disabled\",\"disabled\") ;},  showAnim : \"blind\"})');
						if(serviceInfo.serializedInfo.ShowAdvanceFilter == true)
						{
							 eval('window._latestOperation = \"operation\"');
						}
                    }
                }
                else {
                    eval('$(\'#filterOperationTextBox\').datepicker({autoclose:true,beforeShow:function(input,inst){$(\"#ui-datepicker-div\").addClass(\"myDatePicker\");},changeYear:true, onSelect:function(dateText,inst){ window._toBeOperatedValue=dateText;    if(window._selectedOperation!=\"\" && window._selectedOperation!=null) {window._latestOperation = \"operation\";  $(\"[id$=\'_FilterListFilter\']\").removeAttr(\"disabled\") ;} else $(\"[id$=\'_FilterListFilter\']\").attr(\"disabled\",\"disabled\") ;} , showAnim : \"blind\"})').toString();
                    eval('$(\'#FromfilterOperationTextBox\').datepicker({autoclose:true,beforeShow:function(input,inst){$(\"#ui-datepicker-div\").addClass(\"myDatePicker\");},changeYear:true, onSelect:function(dateText,inst){ window._startDateInBetween=dateText;   if(window._selectedOperation!=\"\" && window._selectedOperation!=null) {window._latestOperation = \"operation\";  $(\"[id$=\'_FilterListFilter\']\").removeAttr(\"disabled\") ;} else $(\"[id$=\'_FilterListFilter\']\").attr(\"disabled\",\"disabled\") ;}  , showAnim : \"blind\" })').toString();
                    eval('$(\'#TofilterOperationTextBox\').datepicker({autoclose:true,beforeShow:function(input,inst){$(\"#ui-datepicker-div\").addClass(\"myDatePicker\");},changeYear:true, onSelect:function(dateText,inst){ window._endDateInBetween=dateText;   if(window._selectedOperation!=\"\" && window._selectedOperation!=null) {window._latestOperation = \"operation\";  $(\"[id$=\'_FilterListFilter\']\").removeAttr(\"disabled\") ;} else $(\"[id$=\'_FilterListFilter\']\").attr(\"disabled\",\"disabled\") ;} , showAnim : \"blind\"})').toString();
                }
                this._searchBar.removeChild(this._filterOperationsTextBox);
                this._searchBar.removeChild(this._betweenDatesDiv);
            }
            else {
                eval('$(\"#filterOperationTextBox\").removeClass(\"hasDatepicker\")');
                eval('$(\"#FromfilterOperationTextBox\").removeClass(\"hasDatepicker\")');
                eval('$(\"#TofilterOperationTextBox\").removeClass(\"hasDatepicker\")');
            }
            if (serviceInfo.serializedInfo.FilterData != null) {
                if (serviceInfo.serializedInfo.FilterData['latestOperation'] != null && serviceInfo.serializedInfo.FilterData['latestOperation'].toString() === 'operation') {
                    if (serviceInfo.serializedInfo.FilterData['OperatorUsed'] != null && (serviceInfo.serializedInfo.FilterData['OperatorUsed'].toString() === 'Between' || serviceInfo.serializedInfo.FilterData['OperatorUsed'].toString() === 'NotBetween')) {
                        this._latestOperation = 'Between';
                        this._fromDateTextBox.value = serviceInfo.serializedInfo.FilterData['toBeShownFirstValue'].toString();
                        this._toDateTextBox.value = serviceInfo.serializedInfo.FilterData['toBeShownSecondValue'].toString();
                    }
                    else {
                        this._latestOperation = 'Simple';
                        this._filterOperationsTextBox.value = serviceInfo.serializedInfo.FilterData['toBeOperatedValue'].toString();
                    }
                    eval('$(\"[id$=\'_FilterOperatorSelected\']\").css(\"background-color\",\"\")');
                    eval('$(\"[id$=\'_FilterOperatorSelected\']\").find(\'span\').filter(function(){return this.innerText==\"' + serviceInfo.serializedInfo.FilterData['OperatorUsed'].toString() + '\";}).parent().parent().css(\"background-color\",\"#d3d3d3\" )');
                    this._alternateFilterDivParent.setAttribute('style', '-webkit-transition: 0.005s ease-in-out;-ms-transition: 1.5s ease-in-out;position:absolute;max-height: 175px; padding-left: 5px; width:100%; height: 175px; background: rgb(255, 255, 255); -webkit-transform: perspective(800px) rotateY(0deg); -webkit-backface-visibility: hidden;-ms-transform: perspective(800px) rotateY(0deg); -ms-backface-visibility: hidden;');
                    this._bodyDivElementParent.setAttribute('style', '-webkit-transition: 0.005s ease-in-out;-ms-transition: 1.5s ease-in-out;position:absolute;max-height: 175px; padding-left: 5px; width: auto; height: 175px; background: rgb(255, 255, 255); -webkit-transform: perspective(800px) rotateY(-180deg); -webkit-backface-visibility: hidden;-ms-transform: perspective(800px) rotateY(-180deg); -ms-backface-visibility: hidden;');
                    this._flagFlipped = true;
                    if (this._searchBar.contains(this._search)) {
                        if (this._latestOperation === 'Between') {
                            this._searchBar.replaceChild(this._betweenDatesDiv, this._search);
                            this._searchBar.style.height = '50px';
                        }
                        else {
                            this._searchBar.replaceChild(this._filterOperationsTextBox, this._search);
                            this._searchBar.style.height = '20px';
                        }
                    }
                }
                else if (serviceInfo.serializedInfo.ShowAdvanceFilter) {
                    this._flagFlipped = true;
                    document.getElementById('data_filter_flip_btn').setAttribute('allowFlip', false);
                    this._alternateFilterDivParent.setAttribute('style', '-webkit-transition: 0.005s ease-in-out;-ms-transition: 0.005s ease-in-out;position:absolute;max-height: 175px; padding-left: 5px; width:100%; height: 175px; background: rgb(255, 255, 255); -webkit-transform: perspective(800px) rotateY(0deg); -webkit-backface-visibility: hidden;-ms-transform: perspective(800px) rotateY(0deg); -ms-backface-visibility: hidden;');
                    this._bodyDivElementParent.setAttribute('style', '-webkit-transition: 0.005s ease-in-out;-ms-transition: 0.005s ease-in-out;position:absolute;max-height: 175px; padding-left: 5px; width: auto; height: 175px; background: rgb(255, 255, 255); -webkit-transform: perspective(800px) rotateY(-180deg); -webkit-backface-visibility: hidden;-ms-transform: perspective(800px) rotateY(-180deg); -ms-backface-visibility: hidden;');
                    this._searchBar.replaceChild(this._filterOperationsTextBox, this._search);
                    this._searchBar.style.height = '20px';
                }
            }
            Array.clear(this._filteredData);
            Array.clear(this._unFilteredData);
            this._grid.filter._AlreadyFilteredValue = [];
            var checkBoxesAll = this._filterList.getElementsByTagName('INPUT');
            for (var i = 1; i < checkBoxesAll.length; i++) {
                var columnData = (checkBoxesAll[i]).value;
                if (columnData !== '~All~') {
                    if ((checkBoxesAll[i]).checked) {
                        Array.add(this._filteredData, columnData);
                        this._grid.filter._AlreadyFilteredValue.push(columnData)
                    }
                    else {
						if (serviceInfo.serializedInfo.FilterData['latestOperation'] != null)
							Array.add(this._unFilteredData, columnData);
                    }
                }
            }
            this._checkFilterCheckBox = serviceInfo.serializedInfo.CheckSelectAllForFilter;
            if (this._checkFilterCheckBox) {
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_' + this.currentColumnName.replace(new RegExp('[ ]', 'gi'), '_') + '_Select_All__FilterList') != null) {
                    (document.getElementById(this._grid.get_GridInfo().GridId + '_' + this.currentColumnName.replace(new RegExp('[ ]', 'gi'), '_') + '_Select_All__FilterList')).checked = true;
                }
            }
            else {
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_' + this.currentColumnName.replace(new RegExp('[ ]', 'gi'), '_') + '_Select_All__FilterList') != null) {
                    (document.getElementById(this._grid.get_GridInfo().GridId + '_' + this.currentColumnName.replace(new RegExp('[ ]', 'gi'), '_') + '_Select_All__FilterList')).checked = false;
                }
            }
        }
        if (serviceInfo.serializedInfo.FilteredColumns != null) {
            this.resetAllIcons();
            var filterInfo;
            Array.forEach(serviceInfo.serializedInfo.FilteredColumns, Function.createDelegate(this, function (o) {
                filterInfo = o;
                Array.add(this.filteredColumns, filterInfo.ColumnName);
                Array.add(this.filteredColumnInfo, filterInfo);
            }));
        }
        this._setIcons();
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER) {
            var div = document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv');
            for (var i = 0; i < document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv').children[0].children[1].children[0].children.length; i++) {
                var currentRow = div.children[0].children[1].children[0].children[i];
                if (currentRow.getAttribute('isgroupheader') == null) {
                    if (Array.contains((serviceInfo.serializedInfo.ChildGridsToOpen), currentRow.getAttribute('idcolumnvalue').toString())) {
                        this._getChildGridDataForFilter(currentRow.id, currentRow.getAttribute('idcolumnvalue').toString());
                    }
                }
            }
        }
        this._initialHeight = 190;
        this._initialWidth = 170;
    },

    _getChildGridDataForFilter: function com_ivp_rad_controls_neogrid_scripts_Filter$_getChildGridDataForFilter(currentrowid, idcolumnvalue) {
        /// <param name="currentrowid" type="String">
        /// </param>
        /// <param name="idcolumnvalue" type="String">
        /// </param>
        this._grid.childGrid.idcolumnValue = idcolumnvalue;
        this._grid.childGrid.rowid = currentrowid;
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_CHILD_GRID, idcolumnvalue + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_CHILD_GRID);
    },

    _abc: function com_ivp_rad_controls_neogrid_scripts_Filter$_abc(date) {
        /// <param name="date" type="String">
        /// </param>
        this._toBeOperatedValue = date;
    },

    _setFilterListPosition: function com_ivp_rad_controls_neogrid_scripts_Filter$_setFilterListPosition(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var offsettop = 0;
        var offsetleft = 0;
        var scrollTop = 0;
        var parent = document.getElementById(this._grid.get_GridInfo().GridId);
        while (parent != null && parent.offsetParent != null) {
            if ((parent.offsetParent.style.position !== '' && parent.offsetParent.style.position.toString().toLowerCase() !== 'static') || (eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== '' && eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== 'static')) {
                offsettop += parent.offsetParent.offsetTop;
                offsetleft += parent.offsetParent.offsetLeft;
                scrollTop += parent.offsetParent.scrollTop;
                parent = parent.offsetParent;
            }
            else {
                parent = parent.offsetParent;
            }
        }
        var x = -140;
        if (e.target.parentNode.className === 'maingroupDragButton') {
            x = 0;
        }
        else if (e.target.parentNode.nextSibling.style.textAlign.toString().toLowerCase() === 'right') {
            x = 0;
        }
        var documentHeight = document.documentElement.clientHeight;
        var documentWidth = document.documentElement.clientWidth;
        var locationX = e.clientX + document.documentElement.scrollLeft + x - offsetleft;
        var locationY = e.clientY + scrollTop + document.documentElement.scrollTop + 5 - offsettop;
        var offsetLeftGrid = eval('$(\"#' + this._grid.get_GridInfo().GridId + '\").offset().left');
        if (offsetLeftGrid > locationX) {
        }
        this._filterList.style.left = (locationX < 0) ? (locationX + 140).toString() + 'px' : (((locationX + 140) > documentWidth) ? (locationX - 140).toString() + 'px' : locationX.toString() + 'px');
        this._filterList.style.top = (locationY.toString() + 'px');
    },

    _getElementX: function com_ivp_rad_controls_neogrid_scripts_Filter$_getElementX(d) {
        /// <param name="d" type="Object" domElement="true">
        /// </param>
        /// <returns type="Number" integer="true"></returns>
        var left = 0;
        if (d.offsetParent != null) {
            while (1 === 1) {
                left += d.offsetLeft;
                if (d.offsetParent == null) {
                    break;
                }
                d = d.offsetParent;
            }
        }
        return left;
    },

    _hideFilterList: function com_ivp_rad_controls_neogrid_scripts_Filter$_hideFilterList(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._filterList.style.display = 'none';
    },

    _resetFilterList: function com_ivp_rad_controls_neogrid_scripts_Filter$_resetFilterList(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._filteredData = [];
        this._unFilteredData = [];
        var columnName = this._grid.filter.currentColumnName;
        var filterdiv = document.getElementById(this._grid.get_GridInfo().GridId + '_' + columnName + '_FilterListShow');
        if (filterdiv != null) {
            filterdiv.className = 'xlneofilterIcon fa fa-filter';
        }
        this.filterData(e);
    },

    _manageFilterList: function com_ivp_rad_controls_neogrid_scripts_Filter$_manageFilterList(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        eval('window._latestOperation =\"checkBox\"');
        var checkBoxesAll = this._filterList.getElementsByTagName('INPUT');
        var checkBoxes = [];
        for (var i = 1; i < checkBoxesAll.length; i++) {
            Array.add(checkBoxes, checkBoxesAll[i]);
        }
        var _selectAllCheckBox = checkBoxes[0];
        var columnData = '';
        if (e.target.tagName.toUpperCase() === 'INPUT') {
            columnData = (e.target).value;
            this._isSelectAllCheckBoxClicked = columnData === '~All~';
        }
        else if (e.target.tagName.toUpperCase() === 'LABEL') {
            columnData = e.target.innerHTML;
            this._isSelectAllCheckBoxClicked = columnData === 'Select All';
        }
        if (this._isSelectAllCheckBoxClicked) {
            for (var i = 1; i < checkBoxes.length; i++) {
                if (e.target.tagName.toUpperCase() === 'INPUT') {
                    columnData = (checkBoxes[i]).value;
                }
                if (checkBoxes[i].id != "RAD_fixedHeaderSelectSearchFilterAddCurrentSelectionCheckBoxChild") {
                    if (checkBoxes[i].id === "RAD_fixedHeaderSelectSearchFilterSelectCheckBoxChild") {
                        (checkBoxes[i]).checked = true;
                    }
                    else {
                        (checkBoxes[i]).checked = _selectAllCheckBox.checked;
                    }
                }
                if ((checkBoxes[i]).checked) {
                    if (!Array.contains(this._filteredData, columnData)) {
                        Array.add(this._filteredData, columnData);
                    }
                    Array.remove(this._unFilteredData, columnData);
                }
                else {
                    Array.remove(this._filteredData, columnData);
                    if (!Array.contains(this._unFilteredData, columnData)) {
                        Array.add(this._unFilteredData, columnData);
                    }
                }
            }
        }
        if (!this._isSelectAllCheckBoxClicked) {
            if (!Array.contains(this._filteredData, columnData)) {
                Array.add(this._filteredData, columnData);
                Array.remove(this._unFilteredData, columnData);
            }
            else {
                Array.remove(this._filteredData, columnData);
                Array.add(this._unFilteredData, columnData);
            }
            //if (checkBoxes[i].id != "RAD_fixedHeaderSelectSearchFilterSelectCheckBoxChild")
            _selectAllCheckBox.checked = this._filteredData.length === checkBoxes.length - 1;
        }
        if (this._filteredData.length > 0 || _selectAllCheckBox.checked) {
            this._buttonFilter.disabled = false;
        }
        else {
            this._buttonFilter.disabled = true;
        }
        if (_selectAllCheckBox.checked) {
        }
        var k = 0;
        for (var j = 0; j < $("#" + this._grid.get_GridInfo().GridId + "_FilterListBody").find("tr:visible").length; j++) {
            if ($($("#" + this._grid.get_GridInfo().GridId + "_FilterListBody").find("tr:visible")[j]).find("input")[0].checked == false) {
                k++;
            }
        }
        if($(".RAD_fixedHeaderSelectSearchFilter").length > 0 && $(".RAD_fixedHeaderSelectSearchFilter")[0].style.display != "none")
        {
            if(k > 0)
            {
                this._grid.filter._selectAllNeoCheckBox = false;
                $("#RAD_fixedHeaderSelectSearchFilterSelectCheckBoxChild")[0].checked = false;
            }
            else
            {
                this._grid.filter._selectAllNeoCheckBox = true;
                $("#RAD_fixedHeaderSelectSearchFilterSelectCheckBoxChild")[0].checked = true;
            }
        }
    },

    filterData: function com_ivp_rad_controls_neogrid_scripts_Filter$filterData(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var filter = new com.ivp.rad.controls.neogrid.scripts.info.FilterInfo();
        var xyz = [];
        filter.ColumnName = this._headerDivElement.innerHTML;
        filter.startDateInBetween = '';
        filter.endDateInBetween = '';
        filter.toBeOperatedValue = '';
        filter.OperatorUsed = this._selectedOperation;
        filter.latestOperation = eval('window._latestOperation').toString();
        if (filter.latestOperation === 'operation') {
			if(filter.OperatorUsed =="")
			{
				$(".filterOperatorListElement").each(function(){
				if($(this).css("background-color") == "rgb(211, 211, 211)"){ filter.OperatorUsed = $($(this).find("span"))[0].innerText}})
			}
            if (filter.OperatorUsed === 'Between') {
                filter.startDateInBetween = (document.getElementById('FromfilterOperationTextBox')).value.toString();
                filter.endDateInBetween = (document.getElementById('TofilterOperationTextBox')).value.toString();
            }
            else {
                filter.toBeOperatedValue = (document.getElementById('filterOperationTextBox')).value.toString();
                if (filter.toBeOperatedValue.indexOf('-') !== -1) {
                    xyz = filter.toBeOperatedValue.split('-');
                    filter.toBeOperatedValue = xyz[1] + '/' + xyz[2] + '/' + xyz[0];
                }
            }
        }
        var a = new Date(filter.startDateInBetween);
        var b = new Date(filter.endDateInBetween);
        this._grid.set_PreviousStartIndex(0);
        var eventType;
		eventType = com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER;
        if (this._filteredData.length === 0) {
			if (filter.latestOperation != 'operation')
			{
				if (this.filteredColumns.indexOf(filter.ColumnName) != -1) {
					eventType = com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE;
					Array.remove(this.filteredColumns, filter.ColumnName);
				}
				else
				{
					return;
				}
			}
        }
        else {
            if (this._grid.filter._AddToCurrentFilterListCheckBox)
            {
                for(var i=0; i < this._grid.filter._AlreadyFilteredValue.length; i++)
                {
                    if (!Array.contains(this._filteredData, this._grid.filter._AlreadyFilteredValue[i])) {
                        Array.add(this._filteredData, this._grid.filter._AlreadyFilteredValue[i]);
                        Array.remove(this._unFilteredData, this._grid.filter._AlreadyFilteredValue[i]);
                    }
                    
                }
                this._grid.filter._AlreadyFilteredValue = [];
                this._grid.filter._AddToCurrentFilterListCheckBox = false;
            }
            if (filter.latestOperation != 'operation')
			{
				if(this._unFilteredData.length > 0 || this.filteredColumns.indexOf(filter.ColumnName) != -1)
				{
					if (this._unFilteredData.length < this._filteredData.length) {
						filter.Values = this._unFilteredData;
						filter.IsDestructive = 't';
					}
					else {
						filter.Values = this._filteredData;
						filter.IsDestructive = 'f';
					}
					 eventType = com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER;
					Array.add(this.filteredColumns, filter.ColumnName);
				}
				else
				{
					return;
				}
			 }
        }
		if (filter.latestOperation == 'operation') {
		    if (filter.toBeOperatedValue == "" && (filter.startDateInBetween == "" && filter.endDateInBetween == "") && ((this._selectedOperation != "IsNull" && this._selectedOperation != "IsNotNull" && this._selectedOperation != "IsEmpty" && this._selectedOperation != "IsNotEmpty") && $(e.target).hasClass("filterResetImageButton") == false)) {
               return;
			}
		    else if (this._selectedOperation == "" && $(e.target).hasClass("filterResetImageButton") == false) {
               var a = 0;
               for(var i =1; i <= $("#" + this._grid.get_id() + "_alternateFilterDiv").find(".filterOperatorListElement").length; i++)
               {
                   if($("#" + this._grid.get_id() + "_alternateFilterDiv").find(".filterOperatorListElement")[i - 1].style.backgroundColor == "rgb(211, 211, 211)")
                   {
                       a = i;
                   }
               }
               if (a == 0) {
                   return;
               }
               else
               {
                   filter.OperatorUsed = $($("#" + this._grid.get_id() + "_alternateFilterDiv").find(".filterOperatorListElement")[a - 1]).find("span")[0].innerHTML;
               }
			}
			else if($(e.target).hasClass("filterResetImageButton") == true)
		    {
		        eventType = com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE;
		        Array.remove(this.filteredColumns, filter.ColumnName);
		    }
        }
        if (filter.startDateInBetween !== '' && filter.endDateInBetween !== '' && a < b && filter.OperatorUsed === 'Between') {
            if(this._grid.get_GridInfo().IsMasterChildGrid)
                this._grid.gridEngine.executeWCFProcess(eventType, Sys.Serialization.JavaScriptSerializer.serialize(filter) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), eventType);
            else
                this._grid.gridEngine.executeWCFProcess(eventType, Sys.Serialization.JavaScriptSerializer.serialize(filter), eventType);
        }
        else if (filter.toBeOperatedValue !== '' && filter.OperatorUsed !== 'Between') {
            if (this._grid.get_GridInfo().IsMasterChildGrid)
                this._grid.gridEngine.executeWCFProcess(eventType, Sys.Serialization.JavaScriptSerializer.serialize(filter) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), eventType);
            else
                this._grid.gridEngine.executeWCFProcess(eventType, Sys.Serialization.JavaScriptSerializer.serialize(filter), eventType);
        }
        else if (filter.latestOperation === 'checkBox') {
            if (this._grid.get_GridInfo().IsMasterChildGrid)
                this._grid.gridEngine.executeWCFProcess(eventType, Sys.Serialization.JavaScriptSerializer.serialize(filter) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), eventType);
            else
                this._grid.gridEngine.executeWCFProcess(eventType, Sys.Serialization.JavaScriptSerializer.serialize(filter), eventType);
        }
		else if (filter.toBeOperatedValue === "" && filter.latestOperation === "operation" && filter.OperatorUsed != 'Between')
        {
            if (this._grid.get_GridInfo().IsMasterChildGrid)
                this._grid.gridEngine.executeWCFProcess(eventType, Sys.Serialization.JavaScriptSerializer.serialize(filter) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), eventType);
            else
                this._grid.gridEngine.executeWCFProcess(eventType, Sys.Serialization.JavaScriptSerializer.serialize(filter), eventType);
        }
        else {
            this._grid.showFailureMessage('Either Start Date is less than End Date Or The Input field is Empty');
			return false;
        }
        this._hideFilterList(e);
    },

    removeFilter: function com_ivp_rad_controls_neogrid_scripts_Filter$removeFilter(ColumnName) {
        /// <param name="ColumnName" type="String">
        /// </param>
        var filter = new com.ivp.rad.controls.neogrid.scripts.info.FilterInfo();
        filter.ColumnName = ColumnName;
        filter.toBeOperatedValue = eval('window._toBeOperatedValue').toString();
        filter.OperatorUsed = this._selectedOperation;
        filter.latestOperation = eval('window._latestOperation').toString();
        filter.startDateInBetween = eval('window._startDateInBetween').toString();
        filter.endDateInBetween = eval('window._endDateInBetween').toString();
        Array.remove(this.filteredColumns, filter.ColumnName);
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE, Sys.Serialization.JavaScriptSerializer.serialize(filter) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE);
    },

    clearAllfilters: function com_ivp_rad_controls_neogrid_scripts_Filter$clearAllfilters(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._grid.set_PreviousStartIndex(0);
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE_ALL, '' + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE_ALL);
        this.resetAllIcons();
    },

    resetAllIcons: function com_ivp_rad_controls_neogrid_scripts_Filter$resetAllIcons() {
        var regEx = new RegExp('[ ]', 'gi');
        var filterIcon = null;
        Array.forEach(this.filteredColumns, Function.createDelegate(this, function (o) {
            filterIcon = document.getElementById(this._grid.get_id() + '_' + o.toString().replace(regEx, '_') + '_FilterListShow');
            if (filterIcon != null) {
                filterIcon.className = this._grid.get_GridInfo().CssFilter;
            }
        }));
        Array.clear(this.filteredColumns);
    },

    _setIcons: function com_ivp_rad_controls_neogrid_scripts_Filter$_setIcons() {
        var regEx = new RegExp('[ ]', 'gi');
        var filterIcon = null;
        Array.forEach(this.filteredColumns, Function.createDelegate(this, function (o) {
            filterIcon = document.getElementById(this._grid.get_id() + '_' + o.toString().replace(regEx, '_') + '_FilterListShow');
            if (filterIcon != null) {
                filterIcon.className = this._grid.get_GridInfo().CssFiltered;
            }
            if (Array.contains(this._grid.group._groupedColumns, o.toString())) {
                if (document.getElementById('Filter' + o.toString().replace(regEx, '_') + '_FilterListShow') != null) {
                    document.getElementById('Filter' + o.toString().replace(regEx, '_') + '_FilterListShow').className = this._grid.get_GridInfo().CssFiltered;
                }
            }
        }));
    },

    _filterFilterList: function com_ivp_rad_controls_neogrid_scripts_Filter$_filterFilterList(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        eval('window._latestOperation =\"checkBox\"');
        var collectionofTrs = document.getElementById(this._grid.get_id() + '_filterFixedHeader').children[0].children[1].children;
        var collectionofTrsToFilter = document.getElementById(this._grid.elementIDManager.get_filterListBody()).firstChild.firstChild.children[1].childNodes;
        if((e.target).value == "")
        {
            if($(".RAD_fixedHeaderSelectSearchFilter")[0].style.display != "none")
            {
                $(".RAD_fixedHeaderSelectSearchFilter")[0].style.display = "none";
            }
            if ($("#" + this._grid.get_id() + "_container_FilterDiv").hasClass("RADFilterListImportant"))
                $("#" + this._grid.get_id() + "_container_FilterDiv").removeClass("RADFilterListImportant");
        }
        else
        {
            this._grid.filter._selectAllNeoCheckBox = true;
            if ($(".RAD_fixedHeaderSelectSearchFilter")[0].style.display == "none") {
                $(".RAD_fixedHeaderSelectSearchFilter")[0].style.display = "";
            }
            if ($("#" + this._grid.get_id() + "_container_FilterDiv").hasClass("RADFilterListImportant") == false)
                $("#" + this._grid.get_id() + "_container_FilterDiv").addClass("RADFilterListImportant");
        }
        //this._grid.filter._AlreadyFilteredValue = [];
        //if (this.filteredColumns.indexOf(this._grid.filter.currentColumnName) == -1)
        //{
        //    for (var j = 0; j < this._filteredData.length; j++)
        //    {
        //        this._grid.filter._AlreadyFilteredValue.push(this._filteredData[j]);
        //    }
            
        //}
        //else
        //{
        //    for (var j = 0; j < this._filteredData.length; j++) {
        //        this._grid.filter._AlreadyFilteredValue.push(this._filteredData[j]);
        //    }
        //}
        var label = null;
        collectionofTrs[0].style.display = ((e.target).value.length > 0) ? 'none' : '';
        for (var i = 0; i < collectionofTrsToFilter.length; i++) {
            label = com.ivp.rad.rscriptutils.RSCommonScripts.findChildControl((collectionofTrsToFilter[i]).cells[1], 'LABEL');
            if (label != null) {
                collectionofTrsToFilter[i].style.display = (this._grid.raddomElement.getInnerContent(label).toUpperCase().indexOf((e.target).value.toUpperCase()) >= 0) ? '' : 'none';
                if(collectionofTrsToFilter[i].style.display == 'none')
                {
                    $(label).closest("tr").find("input")[0].checked = false;
                }
                else
                {
                    $(label).closest("tr").find("input")[0].checked = true;
                }
            }
            if (this._grid.raddomElement.getInnerContent(label).toUpperCase().indexOf((e.target).value.toUpperCase()) >= 0)
            {
                if (!Array.contains(this._filteredData, $(label).closest("tr").find("input").attr("value"))) {
                    Array.add(this._filteredData, $(label).closest("tr").find("input").attr("value"));
                }
                Array.remove(this._unFilteredData, $(label).closest("tr").find("input").attr("value"));
            }
            else
            {
                Array.remove(this._filteredData, $(label).closest("tr").find("input").attr("value"));
                if (!Array.contains(this._unFilteredData, $(label).closest("tr").find("input").attr("value"))) {
                    Array.add(this._unFilteredData, $(label).closest("tr").find("input").attr("value"));
                }
            }
        }
       
    },

    _resizeFilterList: function com_ivp_rad_controls_neogrid_scripts_Filter$_resizeFilterList(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var _newWidth = this._initialWidth + e.clientX - this._initialX;
        var _newHeight = this._initialHeight + e.clientY - this._initialY;
        if (this._filterListResizeStart) {
            eval('var target = document.getElementById(\"' + this._grid.get_element().id + '\"); if(target.style.MozUserSelect!=\"undefined\") target.style.MozUserSelect=\"none\";');
            this._filterList.style.height = this._filterList.offsetHeight + (e.clientX - this._initialX) + 'px';
            this._filterList.style.width = this._filterList.offsetWidth + (e.clientY - this._initialY) + 'px';
            if (_newHeight >= 190) {
                this._filterList.style.height = _newHeight.toString() + 'px';
            }
            else {
                this._filterList.style.height = 220 + 'px';
            }
            if (_newWidth >= 170) {
                this._filterList.style.width = _newWidth.toString() + 'px';
            }
            else {
                this._filterList.style.width = 150 + 'px';
            }
            document.body.style.cursor = 'nw-resize';
        }
        else {
            eval('var target = document.getElementById(\"' + this._grid.get_element().id + '\"); if(target.style.MozUserSelect!=\"undefined\") target.style.MozUserSelect=\"\";');
            document.body.style.cursor = '';
        }
    },

    _startFilterListResize: function com_ivp_rad_controls_neogrid_scripts_Filter$_startFilterListResize(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.id === this._grid.elementIDManager.get_filterListResize()) {
            this._filterListResizeStart = true;
            this._initialX = e.clientX;
            this._initialY = e.clientY;
        }
    },

    _endFilterListResize: function com_ivp_rad_controls_neogrid_scripts_Filter$_endFilterListResize(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._filterListResizeStart) {
            this._filterListResizeStart = false;
            document.body.style.cursor = '';
            this._initialHeight = this._filterList.clientHeight;
            this._initialWidth = this._filterList.clientWidth;
        }
    },

    _btnfilterHandler: function com_ivp_rad_controls_neogrid_scripts_Filter$_btnfilterHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.id === this._grid.elementIDManager.get_filterListFilter()) {
            this._grid.filter.filterData(e);
        }
        this._grid.editGrid.lastSelectedCell = null;
    },

    _btnCancelFilterHandler: function com_ivp_rad_controls_neogrid_scripts_Filter$_btnCancelFilterHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.id === this._grid.elementIDManager.get_filterListCancel()) {
            this._grid.filter._hideFilterList(e);
            this._grid.get_GridInfo().CurrentFilteredColumn = '';
        }
    },

    _btnResetFilterHandler: function com_ivp_rad_controls_neogrid_scripts_Filter$_btnResetFilterHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.id === this._grid.elementIDManager.get_filterListReset()) {
            this._grid.filter._resetFilterList(e);
        }
        this._grid.editGrid.lastSelectedCell = null;
    },

    _btnFlipButtonHandler: function com_ivp_rad_controls_neogrid_scripts_Filter$_btnFlipButtonHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._buttonFilter.disabled = false;
        if (e.target.id === this._grid.elementIDManager.get_filterButtonID()) {
            if (this._flagFlipped) {
                var flag = document.getElementById('data_filter_flip_btn').getAttribute('allowFlip').toString();
                
                if (flag !== 'false') {
                    eval('window._latestOperation =\"checkBox\"');
                    this._bodyDivElementParent.setAttribute('style', '-webkit-transition: 1.5s ease-in-out;-ms-transition: 1.5s ease-in-out;position:absolute;max-height: 175px;  padding-left:5px; width: auto; height: 175px; background: rgb(255, 255, 255); -webkit-transform: perspective(800px) rotateY(0deg); -webkit-backface-visibility: hidden;-ms-transform: perspective(800px) rotateY(0deg); -ms-backface-visibility: hidden;');
                    this._alternateFilterDivParent.setAttribute('style', '-webkit-transition: 1.5s ease-in-out;-ms-transition: 1.5s ease-in-out;position:absolute;max-height: 175px;  padding-left:5px;  width:100%; height: 175px; background: rgb(255, 255, 255); -webkit-transform: perspective(800px) rotateY(180deg); -webkit-backface-visibility: hidden;-ms-transform: perspective(800px) rotateY(180deg); -ms-backface-visibility: hidden;');
                    this._flagFlipped = false;
                    if (this._searchBar.contains(this._filterOperationsTextBox)) {
                        this._searchBar.replaceChild(this._search, this._filterOperationsTextBox);
                        this._searchBar.style.height = '20px';
                        eval('$(\"#' + this._grid.elementIDManager.get_filterListBody() + '\").slimscrollNew({height : \'' + 140 + 'px\'})');
                    }
                    else if (this._searchBar.contains(this._betweenDatesDiv)) {
                        this._searchBar.replaceChild(this._search, this._betweenDatesDiv);
                        this._searchBar.style.height = '20px';
                        eval('$(\"#' + this._grid.elementIDManager.get_filterListBody() + '\").slimscrollNew({height : \'' + 140 + 'px\'})');
                    }
                }
                if (this._grid.filter.filteredColumns.indexOf(this._grid.filter.currentColumnName) != -1)
                {
                    if(this._grid.filter.filteredColumnInfo[this._grid.filter.filteredColumns.indexOf(this._grid.filter.currentColumnName)].latestOperation == "operation")
                    {
                        for (var i = 0;$("#" + this._grid.get_GridInfo().GridId + "_container_FilterDiv").find("input").length; i++)
                        {
                            if ($("#" + this._grid.get_GridInfo().GridId + "_container_FilterDiv").find("input")[i].id != "RAD_fixedHeaderSelectSearchFilterSelectCheckBoxChild")
                                $("#" + this._grid.get_GridInfo().GridId + "_container_FilterDiv").find("input")[i].checked = false;
                        }
                    }
                }
            }
            else {
                 eval('window._latestOperation =\"operation\"');
                this._alternateFilterDivParent.setAttribute('style', '-webkit-transition: 1.5s ease-in-out;-ms-transition: 1.5s ease-in-out;position:absolute;max-height: 175px; padding-left:5px; width:100%; height: 175px; background: rgb(255, 255, 255); -webkit-transform: perspective(800px) rotateY(0deg); -webkit-backface-visibility: hidden;-ms-transform: perspective(800px) rotateY(0deg); -ms-backface-visibility: hidden;');
                this._bodyDivElementParent.setAttribute('style', '-webkit-transition: 1.5s ease-in-out;-ms-transition: 1.5s ease-in-out;position:absolute;max-height: 175px; padding-left:5px; width: auto; height: 175px; background: rgb(255, 255, 255); -webkit-transform: perspective(800px) rotateY(-180deg); -webkit-backface-visibility: hidden;-ms-transform: perspective(800px) rotateY(-180deg); -ms-backface-visibility: hidden;');
                this._flagFlipped = true;
                if (this._searchBar.contains(this._search)) {
                    if (this._latestOperation === 'Between') {
                        this._searchBar.replaceChild(this._betweenDatesDiv, this._search);
                        this._searchBar.style.height = '50px';
                    }
                    else {
                        this._searchBar.replaceChild(this._filterOperationsTextBox, this._search);
                        this._searchBar.style.height = '20px';
                    }
                }
            }
        }
    },

    _filterListEventHandler: function com_ivp_rad_controls_neogrid_scripts_Filter$_filterListEventHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.id.endsWith('_FilterList')) {
            this._grid.get_GridInfo().CurrentFilteredColumn = '';
            this._manageFilterList(e);
        }
        else if (e.target.id.endsWith('_FilterOperatorSelected') || e.target.parentNode.id.endsWith('_FilterOperatorSelected') || e.target.parentNode.parentNode.id.endsWith('_FilterOperatorSelected')) {
            this._manageOperatorFilterList(e);
        }
        else if ($(e.target)[0].id == "RAD_fixedHeaderSelectSearchFilterSelectCheckBoxChild" || $(e.target)[0].id == "RAD_fixedHeaderSelectSearchFilterAddCurrentSelectionCheckBoxChild") {
            this._manageNeoFilterList(e);
        }
    },
    _manageNeoFilterList:function com_ivp_rad_controls_neogrid_scripts_Filter$_manageNeoFilterList(e) {
        eval('window._latestOperation =\"checkBox\"');
        if ($(e.target)[0].id == "RAD_fixedHeaderSelectSearchFilterSelectCheckBoxChild")
        {
            var checkBoxes = [];
            if(this._grid.filter._selectAllNeoCheckBox == true)
            {
                this._grid.filter._selectAllNeoCheckBox = false;
                checkBoxes = $("#" + this._grid.get_GridInfo().GridId + "_FilterListBody").find("input:checked");
                for (var i = 0 ; i < checkBoxes.length; i++)
                {
                    (checkBoxes[i]).checked = false;
                      if ((checkBoxes[i]).checked) {
                          if (!Array.contains(this._filteredData, $(checkBoxes[i]).attr("value"))) {
                              Array.add(this._filteredData, $(checkBoxes[i]).attr("value"));
                        }
                        Array.remove(this._unFilteredData, $(checkBoxes[i]).attr("value"));
                      }
                      else {
                          Array.remove(this._filteredData, $(checkBoxes[i]).attr("value"));
                        if (!Array.contains(this._unFilteredData, $(checkBoxes[i]).attr("value"))) {
                            Array.add(this._unFilteredData, $(checkBoxes[i]).attr("value"));
                        }
                      }
                }
                
            }
            else
            {
                this._grid.filter._selectAllNeoCheckBox = true;
                checkBoxes = $("#" + this._grid.get_GridInfo().GridId + "_FilterListBody").find("tr:visible").find("input");
                for (var i = 0 ; i < checkBoxes.length; i++)
                {
                    (checkBoxes[i]).checked = true;
                    if (checkBoxes[i].checked) {
                        if (!Array.contains(this._filteredData, $(checkBoxes[i]).attr("value"))) {
                            Array.add(this._filteredData, $(checkBoxes[i]).attr("value"));
                            Array.remove(this._unFilteredData, $(checkBoxes[i]).attr("value"));
                        }
                        else {
                            Array.remove(this._filteredData, $(checkBoxes[i]).attr("value"));
                            Array.add(this._unFilteredData, $(checkBoxes[i]).attr("value"));
                        }
                    }
                }
            }
        }
        else if ($(e.target)[0].id == "RAD_fixedHeaderSelectSearchFilterAddCurrentSelectionCheckBoxChild")
        {
            if(this._grid.filter._AddToCurrentFilterListCheckBox)
            {
                this._grid.filter._AddToCurrentFilterListCheckBox = false;
                e.target.checked = false;
            }
            else
            {
                this._grid.filter._AddToCurrentFilterListCheckBox = true;
                e.target.checked = true;
            }
        }
    },
    _manageOperatorFilterList: function com_ivp_rad_controls_neogrid_scripts_Filter$_manageOperatorFilterList(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
		this._selectedOperation = "";
        if (e.target.tagName.toUpperCase() === 'LI') {
            this._selectedOperation = e.target.firstChild.firstChild.innerText;
            eval('window._selectedOperation=\"' + this._selectedOperation + '\"');
            if (this._selectedOperation === 'Between' || this._selectedOperation === 'NotBetween') {
                if (this._searchBar.contains(this._filterOperationsTextBox)) {
                    this._searchBar.replaceChild(this._betweenDatesDiv, this._filterOperationsTextBox);
                    this._searchBar.style.height = '50px';
                }
                if ((eval('$(\"#FromfilterOperationTextBox\").val()').toString() !== '' && eval('$(\"#FromfilterOperationTextBox\").val()').toString() != null) && (eval('$(\"#TofilterOperationTextBox\").val()').toString() !== '' && eval('$(\"#TofilterOperationTextBox\").val()').toString() != null)) {
                    eval('window._latestOperation = \"operation\"');
                    eval('window._startDateInBetween=$(\"#FromfilterOperationTextBox\").val()');
                    eval('window._endDateInBetween=$(\"#TofilterOperationTextBox\").val()');
                    this._buttonFilter.disabled = false;
                }
                else {
                }
            }
            else {
                if (this._searchBar.contains(this._betweenDatesDiv)) {
                    this._searchBar.replaceChild(this._filterOperationsTextBox, this._betweenDatesDiv);
                    this._searchBar.style.height = '20px';
                }
                if (eval('window._toBeOperatedValue').toString() !== '' && eval('window._toBeOperatedValue').toString() != null || this._selectedOperation === 'IsNull' || this._selectedOperation === 'IsNotNull' || this._selectedOperation === 'IsEmpty' || this._selectedOperation === 'IsNotEmpty') {
                    eval('window._latestOperation = \"operation\"');
                    eval('window._toBeOperatedValue=$(\"#filterOperationTextBox\").val()');
                    this._buttonFilter.disabled = false;
                }
                else if (eval('$(\"#filterOperationTextBox\").val()').toString() !== '' && eval('$(\"#filterOperationTextBox\").val()').toString() != null) {
                    eval('window._latestOperation = \"operation\"');
                    eval('window._toBeOperatedValue=$(\"#filterOperationTextBox\").val()');
                    this._buttonFilter.disabled = false;
                }
                else {
                }
            }
            eval('$(\"[id$=\'_FilterOperatorSelected\']\").css(\"background-color\",\"\")');
            e.target.style.backgroundColor = '#d3d3d3';
        }
        else if (e.target.tagName.toUpperCase() === 'A') {
            this._selectedOperation = e.target.firstChild.innerText;
            eval('window._selectedOperation=\"' + this._selectedOperation + '\"');
            if (this._selectedOperation === 'Between' || this._selectedOperation === 'NotBetween') {
                if (this._searchBar.contains(this._filterOperationsTextBox)) {
                    this._searchBar.replaceChild(this._betweenDatesDiv, this._filterOperationsTextBox);
                    this._searchBar.style.height = '50px';
                }
                if ((eval('$(\"#FromfilterOperationTextBox\").val()').toString() !== '' && eval('$(\"#FromfilterOperationTextBox\").val()').toString() != null) && (eval('$(\"#TofilterOperationTextBox\").val()').toString() !== '' && eval('$(\"#TofilterOperationTextBox\").val()').toString() != null)) {
                    eval('window._latestOperation = \"operation\"');
                    eval('window._startDateInBetween=$(\"#FromfilterOperationTextBox\").val()');
                    eval('window._endDateInBetween=$(\"#TofilterOperationTextBox\").val()');
                    this._buttonFilter.disabled = false;
                }
                else {
                }
            }
            else {
                if (this._searchBar.contains(this._betweenDatesDiv)) {
                    this._searchBar.replaceChild(this._filterOperationsTextBox, this._betweenDatesDiv);
                    this._searchBar.style.height = '20px';
                }
                if (eval('window._toBeOperatedValue').toString() !== '' && eval('window._toBeOperatedValue').toString() != null || this._selectedOperation === 'IsNull' || this._selectedOperation === 'IsNotNull' || this._selectedOperation === 'IsEmpty' || this._selectedOperation === 'IsNotEmpty') {
                    eval('window._latestOperation = \"operation\"');
                    eval('window._toBeOperatedValue=$(\"#filterOperationTextBox\").val()');
                    this._buttonFilter.disabled = false;
                }
                else if (eval('$(\"#filterOperationTextBox\").val()').toString() !== '' && eval('$(\"#filterOperationTextBox\").val()').toString() != null) {
                    eval('window._latestOperation = \"operation\"');
                    eval('window._toBeOperatedValue=$(\"#filterOperationTextBox\").val()');
                    this._buttonFilter.disabled = false;
                }
                else {
                }
            }
            eval('$(\"[id$=\'_FilterOperatorSelected\']\").css(\"background-color\",\"\")');
            e.target.parentNode.style.backgroundColor = '#d3d3d3';
        }
        else if (e.target.tagName.toUpperCase() === 'SPAN') {
            this._selectedOperation = e.target.innerText;
            eval('window._selectedOperation=\"' + this._selectedOperation + '\"');
            if (this._selectedOperation === 'Between' || this._selectedOperation === 'NotBetween') {
                if (this._searchBar.contains(this._filterOperationsTextBox)) {
                    this._searchBar.replaceChild(this._betweenDatesDiv, this._filterOperationsTextBox);
                    this._searchBar.style.height = '50px';
                }
                if ((eval('$(\"#FromfilterOperationTextBox\").val()').toString() !== '' && eval('$(\"#FromfilterOperationTextBox\").val()').toString() != null) && (eval('$(\"#TofilterOperationTextBox\").val()').toString() !== '' && eval('$(\"#TofilterOperationTextBox\").val()').toString() != null)) {
                    eval('window._latestOperation = \"operation\"');
                    eval('window._startDateInBetween=$(\"#FromfilterOperationTextBox\").val()');
                    eval('window._endDateInBetween=$(\"#TofilterOperationTextBox\").val()');
                    this._buttonFilter.disabled = false;
                }
                else {
                }
            }
            else {
                if (this._searchBar.contains(this._betweenDatesDiv)) {
                    this._searchBar.replaceChild(this._filterOperationsTextBox, this._betweenDatesDiv);
                    this._searchBar.style.height = '20px';
                }
                if (eval('window._toBeOperatedValue').toString() !== '' && eval('window._toBeOperatedValue').toString() != null || this._selectedOperation === 'IsNull' || this._selectedOperation === 'IsNotNull' || this._selectedOperation === 'IsEmpty' || this._selectedOperation === 'IsNotEmpty') {
                    eval('window._latestOperation = \"operation\"');
                    eval('window._toBeOperatedValue=$(\"#filterOperationTextBox\").val()');
                    this._buttonFilter.disabled = false;
                }
                else if (eval('$(\"#filterOperationTextBox\").val()').toString() !== '' && eval('$(\"#filterOperationTextBox\").val()').toString() != null) {
                    eval('window._latestOperation = \"operation\"');
                    eval('window._toBeOperatedValue=$(\"#filterOperationTextBox\").val()');
                    this._buttonFilter.disabled = false;
                }
                else {
                }
            }
            eval('$(\"[id$=\'_FilterOperatorSelected\']\").css(\"background-color\",\"\")');
            e.target.parentNode.parentNode.style.backgroundColor = '#d3d3d3';
        }
    },

    _keydownHandlerForFilter: function com_ivp_rad_controls_neogrid_scripts_Filter$_keydownHandlerForFilter(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._shiftKeyPressed = e.shiftKey;
		if (this.currentColumnDataType == com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal || this.currentColumnDataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int || this.currentColumnDataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double || this.currentColumnDataType === 'xs_long') {
            if (!((e.keyCode >= 48 && e.keyCode <= 57 && !e.shiftKey) || (e.keyCode >= 96 && e.keyCode <= 105) || e.keyCode == 8|| e.keyCode == 190 || e.keyCode == 110 || e.keyCode == 46)) {
                e.preventDefault();
                e.stopPropagation()
                return false;
            }
        }
        if (e.keyCode === Sys.UI.Key.esc) {
            this._grid.editGrid._stopPasting();
        }
    },

    _fireKeyUpHandlerForFilter: function com_ivp_rad_controls_neogrid_scripts_Filter$_fireKeyUpHandlerForFilter(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.tagName.toUpperCase() === 'INPUT' && e.target.getAttribute('isFilterFilter') != null) {
            this._grid.filter._filterFilterList(e);
        }
        else if (e.target.id.endsWith('filterOperationTextBox')) {
            eval('window._toBeOperatedValue = e.target.value');
            if (this._selectedOperation != null) {
                eval('window._latestOperation = \"operation\"');
                this._buttonFilter.disabled = false;
            }
            else {
                this._buttonFilter.disabled = true;
            }
        }
    },

    _filterMouseDownHandler: function com_ivp_rad_controls_neogrid_scripts_Filter$_filterMouseDownHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.filter != null) {
            this._startFilterListResize(e);
        }
    },

    _filterMouseLeaveHandler: function com_ivp_rad_controls_neogrid_scripts_Filter$_filterMouseLeaveHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
    },

    _filterMouseMoveHandler: function com_ivp_rad_controls_neogrid_scripts_Filter$_filterMouseMoveHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._containsFiletrResizeListDiv(e.target)) {
            this._grid.filter._resizeFilterList(e);
        }
    },

    _filterMouseUpHanndler: function com_ivp_rad_controls_neogrid_scripts_Filter$_filterMouseUpHanndler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.filter != null) {
            this._endFilterListResize(e);
        }
    },

    _containsFiletrResizeListDiv: function com_ivp_rad_controls_neogrid_scripts_Filter$_containsFiletrResizeListDiv(e) {
        /// <param name="e" type="Object" domElement="true">
        /// </param>
        /// <returns type="Boolean"></returns>
        var parent = document.getElementById(this._grid.get_GridInfo().GridId + 'filterSelectList');
        var node = e.parentNode;
        while (node != null) {
            if (node === parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    },

    cLearFilterHandlers: function com_ivp_rad_controls_neogrid_scripts_Filter$cLearFilterHandlers(gridid) {
        /// <param name="gridid" type="String">
        /// </param>
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(document.getElementById(gridid + '_FilterListFilter'));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(document.getElementById(gridid + '_FilterListCancel'));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(document.getElementById(gridid + '_FilterListReset'));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(document.getElementById('data_filter_flip_btn'));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(document.getElementById('data_txtSearch'));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(document.getElementById(gridid + 'filterSelectList'));
    },

    addFilterHandlers: function com_ivp_rad_controls_neogrid_scripts_Filter$addFilterHandlers(gridid) {
        /// <param name="gridid" type="String">
        /// </param>
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(gridid + '_FilterListFilter'), 'click', Function.createDelegate(this, this._btnfilterHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(gridid + '_FilterListCancel'), 'click', Function.createDelegate(this, this._btnCancelFilterHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(gridid + '_FilterListReset'), 'click', Function.createDelegate(this, this._btnResetFilterHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById('data_filter_flip_btn'), 'click', Function.createDelegate(this, this._btnFlipButtonHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(gridid + 'filterSelectList'), 'click', Function.createDelegate(this, this._filterListEventHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(gridid + 'filterSelectList'), 'keydown', Function.createDelegate(this, this._keydownHandlerForFilter));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(gridid + 'filterSelectList'), 'keyup', Function.createDelegate(this, this._fireKeyUpHandlerForFilter));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(gridid + 'filterSelectList'), 'mousedown', Function.createDelegate(this, this._filterMouseDownHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(gridid + 'filterSelectList'), 'mouseleave', Function.createDelegate(this, this._filterMouseLeaveHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(gridid + 'filterSelectList'), 'mousemove', Function.createDelegate(this, this._filterMouseMoveHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(gridid + 'filterSelectList'), 'mouseup', Function.createDelegate(this, this._filterMouseUpHanndler));
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.Footer

com.ivp.rad.controls.neogrid.scripts.Footer = function com_ivp_rad_controls_neogrid_scripts_Footer(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_recordsCount" type="Number" integer="true">
    /// </field>
    /// <field name="_totalPages" type="Number" integer="true">
    /// </field>
    /// <field name="_apparentRecordCount" type="Number" integer="true">
    /// </field>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_outerTableRowCell2" type="Object" domElement="true">
    /// </field>
    /// <field name="_shownRecordCell" type="Object" domElement="true">
    /// </field>
    /// <field name="_showMathsOps" type="Object" domElement="true">
    /// </field>
    /// <field name="_showLayoutName" type="Object" domElement="true">
    /// </field>
    /// <field name="_totalRecordCount" type="Object" domElement="true">
    /// </field>
    /// <field name="_totalPagesDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_pagerSizeDDL" type="Object" domElement="true">
    /// </field>
    this._grid = grid;
    this._prepareGridFooter();
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.Footer.prototype = {
    _recordsCount: 0,
    _totalPages: 0,
    _apparentRecordCount: 0,
    _grid: null,

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_Footer$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_CHECKED_ROWS) {
            return;
        }
        var pageSize = serviceInfo.serializedInfo.PageSize;
        var pageIndex = serviceInfo.serializedInfo.PageIndex;
        this._apparentRecordCount = serviceInfo.serializedInfo.ApparentRecordCount;
        this._recordsCount = serviceInfo.serializedInfo.RecordCount;
        this._grid.get_GridInfo().PageSize = serviceInfo.serializedInfo.PageSize;
        this._grid.elementInfo.get_pageNumber().value = serviceInfo.serializedInfo.PageIndex.toString();
        this._totalPages = Math.ceil(this._apparentRecordCount / pageSize);
        if (this._totalPages === 0) {
            this._totalPages++;
        }
        this._totalPagesDiv.innerHTML = ' of ' + this._totalPages;
        this._totalPagesDiv.setAttribute('isgridfooter', true);
        this._shownRecordCell.innerHTML = 'Showing ' + (((serviceInfo.serializedInfo.PageIndex - 1) === 0) ? 1 : (((serviceInfo.serializedInfo.PageIndex - 1) * serviceInfo.serializedInfo.PageSize) + 1)) + ' - ' + (((serviceInfo.serializedInfo.PageIndex * serviceInfo.serializedInfo.PageSize) < this._recordsCount) ? this._totalPages == 1 ? this._recordsCount : (serviceInfo.serializedInfo.PageIndex * serviceInfo.serializedInfo.PageSize) : (((serviceInfo.serializedInfo.PageIndex * serviceInfo.serializedInfo.PageSize) >= this._recordsCount) ? this._recordsCount : (this._recordsCount - ((serviceInfo.serializedInfo.PageIndex - 1) * serviceInfo.serializedInfo.PageSize)))) + ' of ' + this._recordsCount;
        this._shownRecordCell.setAttribute('isgridfooter', true);
        this._totalRecordCount.innerHTML = 'Number Of Records : ' + this._recordsCount;
        this._totalRecordCount.setAttribute('isgridfooter', true);
        this._totalRecordCount.style.paddingLeft = '15px';
        if (this._grid.get_GridInfo().RequireSelectedRows) {
            this._outerTableRowCell2.innerHTML = 'Selected Rows : ' + serviceInfo.serializedInfo.SelectedRows;
            this._outerTableRowCell2.className = 'SelectedRowsDiv';
            this._outerTableRowCell2.setAttribute('isgridfooter', true);
        }
        if (this._grid.get_GridInfo().RequireMathematicalOperations || this._grid.get_GridInfo().ShowTotalRecordCount) {
            if (serviceInfo.serializedInfo.FooterAnimation === com.ivp.rad.controls.neogrid.scripts.info.FooterAnimation.zeroWidth || serviceInfo.serializedInfo.FooterAnimation === com.ivp.rad.controls.neogrid.scripts.info.FooterAnimation.animate) {
                this._showMathsOps.innerHTML = '<div class=\"wrapper\"><div class=\"contents\"><div class=\"inner\"><table align=\"left\"><tbody><tr><td isgridfooter=\"true\">Sum : <span style=\"color:blue;\">' + serviceInfo.serializedInfo.SumValue + '</span></td><td isgridfooter=\"true\">Min : <span style=\"color:blue;\">' + serviceInfo.serializedInfo.MinValue + '</span></td><td isgridfooter=\"true\">Max : <span style=\"color:blue;\">' + serviceInfo.serializedInfo.MaxValue + '</span></td><td isgridfooter=\"true\">Avg : <span style=\"color:blue;\">' + serviceInfo.serializedInfo.AvgValue + '</span></td><td isgridfooter=\"true\">WghtAvg : <span style=\"color:blue;\">' + serviceInfo.serializedInfo.WeightedAvgValue + '</span></td></tr></tbody></table></div><div class=\"arrow fa fa-arrow-circle-right\"></div></div></div>';
            }
            else {
                this._showMathsOps.innerHTML = '<div class=\"wrapper wrapperwidth\"><div class=\"contents contentswidth\"><div class=\"inner innerwidth\"><table align=\"left\"><tbody><tr><td isgridfooter=\"true\">Sum : <span style=\"color:blue;\">' + serviceInfo.serializedInfo.SumValue + '</span></td><td isgridfooter=\"true\">Min : <span style=\"color:blue;\">' + serviceInfo.serializedInfo.MinValue + '</span></td><td isgridfooter=\"true\">Max : <span style=\"color:blue;\">' + serviceInfo.serializedInfo.MaxValue + '</span></td><td isgridfooter=\"true\">Avg : <span style=\"color:blue;\">' + serviceInfo.serializedInfo.AvgValue + '</span></td><td isgridfooter=\"true\">WghtAvg : <span style=\"color:blue;\">' + serviceInfo.serializedInfo.WeightedAvgValue + '</span></td></tr></tbody></table></div><div class=\"arrow fa fa-arrow-circle-right arrowLeft\"></div></div></div>';
            }
            this._showMathsOps.setAttribute('isgridfooter', true);
        }
        if (serviceInfo.serializedInfo.LayoutInfo.ViewName !== '') {
            this._showLayoutName.innerHTML = '<div class=\"footerlayoutname\">' + 'Selected Layout :' + ' ' + serviceInfo.serializedInfo.LayoutInfo.ViewName + '</div>';
        }
        else {
            this._showLayoutName.innerHTML = '';
        }
        if (this._grid.get_GridInfo().DataInsight) {
            this._dataInsight.innerHTML = '<div class =\"DataInsightParent\"><div class=\"Image\"></div><div class=\"DataInsightsElement\">Insight</div></div>';
        }
        this._pagerSizeDDL.value = serviceInfo.serializedInfo.CurrentPageSize.toString();
        this._prepareGridMathOpFooter(serviceInfo.serializedInfo);
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT) {
            var div = document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv');
            for (var i = 0; i < div.children.length; i++) {
                var currentRow = div.children[i];
                if (currentRow.getAttribute('isgroupheader') == null) {
                    if (Array.contains((serviceInfo.serializedInfo.ChildGridsToOpen), currentRow.getAttribute('idcolumnvalue').toString())) {
                        this._getChildGridDataForpaging(currentRow.id, currentRow.getAttribute('idcolumnvalue').toString());
                    }
                }
            }
        }
        if (this._grid.get_GridInfo().IsMasterChildGrid) {
            if (this._grid.get_GridInfo().MasterGridId !== this._grid.get_GridInfo().GridId) {
                if (this._totalPages < 2) {
                    document.getElementById(this._grid.elementIDManager.get_footerDivID()).style.display = 'none';
                }
            }
        }
        //if (this._grid.get_GridInfo().RequireSelectedRows || this._grid.get_GridInfo().CheckBoxInfo != null) {
          //  this._outerTableRowCell2.style.display = 'none';
        //}
    },

    _getChildGridDataForpaging: function com_ivp_rad_controls_neogrid_scripts_Footer$_getChildGridDataForpaging(currentrowid, idcolumnvalue) {
        /// <param name="currentrowid" type="String">
        /// </param>
        /// <param name="idcolumnvalue" type="String">
        /// </param>
        this._grid.childGrid.idcolumnValue = idcolumnvalue;
        this._grid.childGrid.rowid = currentrowid;
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_CHILD_GRID, idcolumnvalue + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_CHILD_GRID);
    },

    _prepareGridMathOpFooter: function com_ivp_rad_controls_neogrid_scripts_Footer$_prepareGridMathOpFooter(extraInfo) {
        /// <param name="extraInfo" type="com.ivp.rad.controls.neogrid.scripts.info.GridExtraInfo">
        /// </param>
        var tds = extraInfo.MathematicalOperationsInfo.FooterHTML;
        var fTds = extraInfo.MathematicalOperationsInfo.FFooterHTML;
        this._resizeAndAssignValues(tds, true);
        this._resizeAndAssignValues(fTds, false);
        var mathOpFooter = this._grid.elementInfo.get_mathOpFooter();
        var frozenMathOpFooter = document.getElementById(this._grid.get_GridInfo().GridId + '_FrozenNewMathOpFooter');
        var checkBoxMathOpFooter = this._grid.elementInfo.get_frozenMathOpFooter();
        if (frozenMathOpFooter != null) {
            frozenMathOpFooter.parentNode.style.display = 'none';
        }
        if (mathOpFooter != null) {
            mathOpFooter.parentNode.style.display = 'none';
        }
        if (checkBoxMathOpFooter != null) {
            checkBoxMathOpFooter.parentNode.style.display = 'none';
        }
        if ((this._grid.get_GridInfo().checkedRowIndices.length > 0 && this._grid.get_GridInfo().RequireMathematicalOperations)) {
            if (frozenMathOpFooter != null) {
                frozenMathOpFooter.parentNode.style.display = '';
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowfrozen') != null) {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowfrozen').style.display = '';
                }
            }
            if (mathOpFooter != null) {
                mathOpFooter.parentNode.style.display = '';
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow') != null) {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow').style.display = '';
                }
            }
            if (checkBoxMathOpFooter != null) {
                checkBoxMathOpFooter.parentNode.style.display = 'none';
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowNewfrozen') != null) {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowNewfrozen').style.display = '';
                }
            }
            if (this._grid.elementInfo.get_bodyInnerDiv().firstChild.offsetWidth < this._grid.elementInfo.get_bodyInnerDiv().offsetWidth) {
                if (frozenMathOpFooter != null) {
                    frozenMathOpFooter.parentNode.style.bottom = '11px';
                }
                if (this._grid.elementInfo.get_mathOpFooter() != null) {
                    this._grid.elementInfo.get_mathOpFooter().parentNode.style.bottom = '11px';
                }
                if (checkBoxMathOpFooter != null) {
                    checkBoxMathOpFooter.parentNode.style.bottom = '11px';
                }
                //if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow') != null) {
                //    document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow').style.display = 'none';
                //}
            }
            else {
                if (frozenMathOpFooter != null) {
                    frozenMathOpFooter.parentNode.style.bottom = '13px';
                }
                if (this._grid.elementInfo.get_mathOpFooter() != null) {
                    this._grid.elementInfo.get_mathOpFooter().parentNode.style.bottom = '13px';
                }
                if (checkBoxMathOpFooter != null) {
                    checkBoxMathOpFooter.parentNode.style.bottom = '13px';
                }
            }
        }
        else {
            if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowfrozen') != null) {
                document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowfrozen').style.display = 'none';
            }
            if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow') != null) {
                document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow').style.display = 'none';
            }
            if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowNewfrozen') != null) {
                document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowNewfrozen').style.display = 'none';
            }
            if (this._grid.get_GridInfo().ShowTotalRecordCount) {
                if (frozenMathOpFooter != null) {
                    frozenMathOpFooter.parentNode.style.display = '';
                    if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowfrozen') != null) {
                        document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowfrozen').style.display = '';
                    }
                }
                if (mathOpFooter != null) {
                    mathOpFooter.parentNode.style.display = '';
                    if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow') != null) {
                        document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow').style.display = '';
                    }
                }
                if (checkBoxMathOpFooter != null) {
                    checkBoxMathOpFooter.parentNode.style.display = 'none';
                    if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowNewfrozen') != null) {
                        document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRowNewfrozen').style.display = '';
                    }
                }
            }
            if (this._grid.elementInfo.get_bodyInnerDiv().firstChild.offsetWidth < this._grid.elementInfo.get_bodyInnerDiv().offsetWidth) {
                if (frozenMathOpFooter != null) {
                    frozenMathOpFooter.parentNode.style.bottom = '11px';
                }
                if (this._grid.elementInfo.get_mathOpFooter() != null) {
                    this._grid.elementInfo.get_mathOpFooter().parentNode.style.bottom = '11px';
                }
                if (checkBoxMathOpFooter != null) {
                    checkBoxMathOpFooter.parentNode.style.bottom = '11px';
                }
                //if (document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow') != null) {
                //    document.getElementById(this._grid.get_GridInfo().GridId + '_dummyRow').style.display = 'none';
                //}
            }
            else {
                if (frozenMathOpFooter != null) {
                    frozenMathOpFooter.parentNode.style.bottom = '13px';
                }
                if (this._grid.elementInfo.get_mathOpFooter() != null) {
                    this._grid.elementInfo.get_mathOpFooter().parentNode.style.bottom = '13px';
                }
                if (checkBoxMathOpFooter != null) {
                    checkBoxMathOpFooter.parentNode.style.bottom = '13px';
                }
            }
        }
    },
    _resizeAndAssignValues: function com_ivp_rad_controls_neogrid_scripts_Footer$_resizeAndAssignValues(tds, isFluid) {
        /// <param name="tds" type="Array">
        /// </param>
        /// <param name="isFluid" type="Boolean">
        /// </param>
        var collection = null;
        var parent = null;
        if (isFluid) {
            var mathOpFooter = this._grid.elementInfo.get_mathOpFooter();
            if (mathOpFooter != null) {
                collection = mathOpFooter.childNodes;
                parent = mathOpFooter.parentNode.previousSibling.children[mathOpFooter.parentNode.previousSibling.children.length - 1];
            }
        }
        else {
            var frozenMathOpFooter = document.getElementById(this._grid.get_GridInfo().GridId + '_FrozenNewMathOpFooter');
            if (frozenMathOpFooter != null) {
                collection = frozenMathOpFooter.childNodes;
                parent = frozenMathOpFooter.parentNode.previousSibling.children[frozenMathOpFooter.parentNode.previousSibling.children.length - 1];
            }
        }
        if (collection != null && parent != null) {
            for (var i = 0; i < collection.length; i++) {
                var element = window.jQuery(collection[i]);
                if (tds != null) {
                    collection[i].innerHTML = tds[i].toString();
                    collection[i].title = element.find('em').text();
                }
            }
            window.jQuery(this._grid.elementInfo.get_mathOpFooter()).find('li').click(Function.createDelegate(this, this._clickHandler));
            window.jQuery(this._grid.elementInfo.get_frozenMathOpFooter()).find('li').click(Function.createDelegate(this, this._clickHandler));
        }
    },

    _clickHandler: function com_ivp_rad_controls_neogrid_scripts_Footer$_clickHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var columnName = e.target.getAttribute('columnName');
        if (columnName != null) {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_COLUMN_LEVEL_MATHEMATICAL_OPERATIONS, columnName + '|' + e.target.innerHTML.replace(' ', '_'), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_COLUMN_LEVEL_MATHEMATICAL_OPERATIONS);
            e.preventDefault();
            e.stopPropagation();
        }
    },

    _keyDownHandler: function com_ivp_rad_controls_neogrid_scripts_Footer$_keyDownHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.keyCode === Sys.UI.Key.enter) {
            this._doPaging(e);
            e.preventDefault();
            e.stopPropagation();
        }
    },

    _outerTableRowCell2: null,
    _shownRecordCell: null,
    _showMathsOps: null,
    _showLayoutName: null,
    _totalRecordCount: null,
    _dataInsight: null,

    _prepareGridFooter: function com_ivp_rad_controls_neogrid_scripts_Footer$_prepareGridFooter() {
        var outerMostTable = this._grid.elementHelper.get_table();
        var outerTableRow = outerMostTable.insertRow(0);
        var layoutName = outerMostTable.insertRow(0);
        this._showMathsOps = outerTableRow.insertCell(0);
        this._showMathsOps.style.width = '30%';
        this._outerTableRowCell2 = outerTableRow.insertCell(1);
        this._totalRecordCount = outerTableRow.insertCell(2);
        var outerTableRowCell1 = outerTableRow.insertCell(3);
        this._showLayoutName = outerTableRow.insertCell(4);
        if (this._grid.get_GridInfo().DataInsight) {
            this._dataInsight = outerTableRow.insertCell(5);
            this._dataInsight.className = "DataInsightTd";
            //this._dataInsight.style.width = "9%";
            //this._dataInsight.style.backgroundColor = "#d0d0d2";
            //this._dataInsight.style.cursor = "pointer";
            //this._dataInsight.style.border = "1px solid #c7c6c6";
        }
        this._showLayoutName.style.width = '20%';
        outerTableRowCell1.style.width = '30%';
        outerTableRowCell1.setAttribute('isgridfooter', true);
        this._outerTableRowCell2.style.textAlign = 'center';
        this._outerTableRowCell2.setAttribute('isgridfooter', true);
        outerMostTable.className = this._grid.get_GridInfo().CssStatusBar;
        var tbl = this._grid.elementHelper.get_table();
        tbl.setAttribute('cellpadding', 0);
        tbl.setAttribute('cellspacing', 0);
        tbl.style.border = '0';
        var tr = tbl.insertRow(0);
        this._getPageFirstLastCell('First', tr);
        this._getPreviousNextCell('Prev', tr);
        this._getPagerIndex(tr);
        this._getPreviousNextCell('Next', tr);
        this._getPageFirstLastCell('Last', tr);
        this._getPagerSize(tr);
        this._shownRecordCell = tr.insertCell(9);
        this._shownRecordCell.style.textAlign = 'right';
        if (!this._grid.get_GridInfo().IsMasterChildGrid) {
            if (!this._grid.get_GridInfo().RequirePaging || this._grid.get_GridInfo().RequireInfiniteScroll) {
                tbl.style.display = 'none';
            }
        }
        else {
            if (!this._grid.get_GridInfo().RequirePaging) {
                tbl.style.display = 'none';
            }
        }
        outerTableRowCell1.appendChild(tbl);
        this._grid.elementInfo.get_footerDiv().appendChild(outerMostTable);
        var popUpData = document.createElement('DIV');
        popUpData.id = this._grid.get_id() + '_popUpData';
        popUpData.innerText = 'Please wait while the data is loaded';
        popUpData.className = 'neogridpopUpData';
    },

    _getPreviousNextCell: function com_ivp_rad_controls_neogrid_scripts_Footer$_getPreviousNextCell(direction, tr) {
        /// <param name="direction" type="String">
        /// </param>
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        var tc = null;
        if (direction === 'Prev') {
            tc = tr.insertCell(1);
            tc.id = this._grid.elementIDManager.get_pagingPrevButtonId();
            tc.className = this._grid.get_GridInfo().CssPrevPage;
            tc.setAttribute('isgridfooter', true);
        }
        else {
            tc = tr.insertCell(5);
            tc.id = this._grid.elementIDManager.get_pagingNextButtonId();
            tc.className = this._grid.get_GridInfo().CssNextPage;
            tc.setAttribute('isgridfooter', true);
            tc.style.position = 'relative';
        }
    },

    _getPageFirstLastCell: function com_ivp_rad_controls_neogrid_scripts_Footer$_getPageFirstLastCell(direction, tr) {
        /// <param name="direction" type="String">
        /// </param>
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        if (direction === 'First') {
            var tc = tr.insertCell(0);
            tc.setAttribute('isgridfooter', true);
            tc.id = this._grid.elementIDManager.get_pagingFirstButtonId();
            tc.className = 'xlneoFirstPage fa fa-fast-backward fa-lg';
        }
        else {
            var tc = tr.insertCell(6);
            tc.setAttribute('isgridfooter', true);
            tc.id = this._grid.elementIDManager.get_pagingLastButtonId();
            tc.className = 'xlneoLastPage fa fa-fast-forward fa-lg';
            tc.style.position = 'relative';
        }
    },

    _totalPagesDiv: null,

    _getPagerIndex: function com_ivp_rad_controls_neogrid_scripts_Footer$_getPagerIndex(tr) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        var tc = tr.insertCell(2);
        var label = this._grid.elementHelper.get_divElement();
        label.innerHTML = 'Page: ';
        label.setAttribute('isgridfooter', true);
        label.style.display = 'inline';
        label.className = 'PageTextInFooter';
        tc.appendChild(label);
        tc.style.textAlign = 'left';
        tc.style.width = '50px';
        tc.style.position = 'relative';
        tc.setAttribute('isgridfooter', true);
        tc = tr.insertCell(3);
        var pageIndex = this._grid.elementHelper.get_textElement();
        pageIndex.id = this._grid.elementIDManager.get_pageNumberId();
        pageIndex.value = '1';
        pageIndex.className = this._grid.get_GridInfo().CssPageTextBox;
        tc.style.width = '5%';
        tc.style.width = '50px';
        tc.style.position = 'relative';
        tc.appendChild(pageIndex);
        window.jQuery(pageIndex).keydown(Function.createDelegate(this, this._keyDownHandler));
        tc.setAttribute('isgridfooter', true);
        tc = tr.insertCell(4);
        this._totalPagesDiv = this._grid.elementHelper.get_divElement();
        this._totalPagesDiv.className = 'ofNumberDivInFooter';
        tc.style.width = '40px';
        tc.style.position = 'relative';
        tc.appendChild(this._totalPagesDiv);
        tc.setAttribute('isgridfooter', true);
    },

    _pagerSizeDDL: null,

    _getPagerSize: function com_ivp_rad_controls_neogrid_scripts_Footer$_getPagerSize(tr) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        this._pagerSizeDDL = this._grid.elementHelper.get_selectElement();
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._pagerSizeDDL, 'change', Function.createDelegate(this, function (e) {
            this._grid.set_PreviousStartIndex(0);
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MAX_PAGE_SIZE_CHANGE_EVENT, (e.target).value, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MAX_PAGE_SIZE_CHANGE_EVENT);
        }));
        var pager = this._grid.elementHelper.get_divElement();
        pager.className = 'pagerClass';
        var _pages = [];
        if (this._grid.get_GridInfo().PageSize < 50) {
            Array.add(_pages, this._grid.get_GridInfo().PageSize);
        }
        Array.add(_pages, 50);
        if (this._grid.get_GridInfo().PageSize > 50 && this._grid.get_GridInfo().PageSize < 100) {
            Array.add(_pages, this._grid.get_GridInfo().PageSize);
        }
        Array.add(_pages, 100);
        if (this._grid.get_GridInfo().PageSize > 100 && this._grid.get_GridInfo().PageSize < 200) {
            Array.add(_pages, this._grid.get_GridInfo().PageSize);
        }
        Array.add(_pages, 200);
        if (this._grid.get_GridInfo().PageSize > 200 && this._grid.get_GridInfo().PageSize < 500) {
            Array.add(_pages, this._grid.get_GridInfo().PageSize);
        }
        Array.add(_pages, 500);
        var optionsCountToAdd = this._grid.get_GridInfo().PageSize / 100;
        for (var i = 3; i <= optionsCountToAdd; i++) {
            Array.add(_pages, i * 100);
            if (this._grid.get_GridInfo().PageSize < (i + 1) * 100) {
                Array.add(_pages, this._grid.get_GridInfo().PageSize);
            }
        }
        var option = null;
        for (var i = 0; i < _pages.length; i++) {
            option = this._grid.elementHelper.get_optionElement();
            option.text = _pages[i].toString();
            option.value = _pages[i].toString();
            this._grid.raddomElement.addOptionElement(this._pagerSizeDDL, option);
        }
        this._pagerSizeDDL.className = this._grid.get_GridInfo().CssPageChange;
        var tcName = tr.insertCell(7);
        tcName.setAttribute('isgridfooter', true);
        tcName.style.width = '20px';
        var pageSizeDiv = this._grid.elementHelper.get_divElement();
        pageSizeDiv.innerHTML = 'Page Size ';
        pageSizeDiv.className = 'PageSizeLabel';
        tcName.appendChild(pageSizeDiv);
        var tc = tr.insertCell(8);
        pager.appendChild(this._pagerSizeDDL);
        tc.appendChild(pager);
        tc.setAttribute('isgridfooter', true);
    },

    _doPaging: function com_ivp_rad_controls_neogrid_scripts_Footer$_doPaging(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var eventArgs = null;
        if (this._grid.gridEngine.get_cache()['eventArg'] != null) {
            eventArgs = this._grid.gridEngine.get_cache()['eventArg'].toString().split(com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD);
        }
        eventArgs[1] = com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT;
        this._grid.gridEngine.get_cache()['eventArg'] = eventArgs;
        var _doPaging = false;
        var _fetchRecords = false;
        var currentNumber = Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value);
        var scrollcount = 0;
        if (!this._grid.get_InfiniteScroll()) {
            if (isNaN(currentNumber)) {
                currentNumber = 1;
            }
            if (e.target === this._grid.elementInfo.get_pagingNextButton()) {
                if (currentNumber < this._totalPages) {
                    this._grid.set_PreviousStartIndex(currentNumber * this._grid.get_GridInfo().PageSize);
                    this._grid.elementInfo.get_pageNumber().value = (currentNumber + 1).toString();
                    _doPaging = true;
                }
                else {
                    this._grid.set_PreviousStartIndex((currentNumber - 1) * this._grid.get_GridInfo().PageSize);
                    this._grid.elementInfo.get_pageNumber().value = currentNumber.toString();
                    _doPaging = true;
                }
            }
            else if (e.target === this._grid.elementInfo.get_pagingPrevButton()) {
                if (currentNumber !== 1) {
                    this._grid.set_PreviousStartIndex((currentNumber - 2) * this._grid.get_GridInfo().PageSize);
                    this._grid.elementInfo.get_pageNumber().value = (currentNumber - 1).toString();
                    _doPaging = true;
                }
                else {
                    this._grid.set_PreviousStartIndex((currentNumber - 1) * this._grid.get_GridInfo().PageSize);
                    this._grid.elementInfo.get_pageNumber().value = currentNumber.toString();
                    _doPaging = true;
                }
            }
            else if (e.target === this._grid.elementInfo.get_pagingFirstButton()) {
                this._grid.set_PreviousStartIndex(0);
                this._grid.elementInfo.get_pageNumber().value = '1';
                _doPaging = true;
            }
            else if (e.target === this._grid.elementInfo.get_pagingLastButton()) {
                this._grid.set_PreviousStartIndex((this._totalPages - 1) * this._grid.get_GridInfo().PageSize);
                this._grid.elementInfo.get_pageNumber().value = this._totalPages.toString();
                _doPaging = true;
            }
            else if (e.target === this._grid.elementInfo.get_pageNumber() && e.type.toLowerCase() === 'keyup' && e.keyCode === Sys.UI.Key.enter) {
                if (currentNumber <= Math.ceil(this._apparentRecordCount / this._grid.get_GridInfo().PageSize) && currentNumber >= 1) {
                    this._grid.set_PreviousStartIndex((currentNumber - 1) * this._grid.get_GridInfo().PageSize);
                    this._grid.elementInfo.get_pageNumber().value = currentNumber.toString();
                    _doPaging = true;
                }
                else {
                    if (currentNumber < 1) {
                        this._grid.set_PreviousStartIndex(0);
                        this._grid.elementInfo.get_pageNumber().value = '1';
                        _doPaging = true;
                    }
                    else {
                        this._grid.set_PreviousStartIndex((Math.ceil(this._apparentRecordCount / this._grid.get_GridInfo().PageSize) - 1) * this._grid.get_GridInfo().PageSize);
                        this._grid.elementInfo.get_pageNumber().value = Math.ceil(this._apparentRecordCount / this._grid.get_GridInfo().PageSize).toString();
                        _doPaging = true;
                    }
                }
            }
            else if (e.target === this._grid.elementInfo.get_pagingGoButton()) {
                if (currentNumber <= Math.ceil(this._apparentRecordCount / this._grid.get_GridInfo().PageSize) && currentNumber >= 1) {
                    this._grid.set_PreviousStartIndex((currentNumber - 1) * this._grid.get_GridInfo().PageSize);
                    this._grid.elementInfo.get_pageNumber().value = currentNumber.toString();
                    _doPaging = true;
                }
                else {
                    if (currentNumber < 1) {
                        this._grid.set_PreviousStartIndex(0);
                        this._grid.elementInfo.get_pageNumber().value = '1';
                        _doPaging = true;
                    }
                    else {
                        this._grid.set_PreviousStartIndex((Math.ceil(this._apparentRecordCount / this._grid.get_GridInfo().PageSize) - 1) * this._grid.get_GridInfo().PageSize);
                        this._grid.elementInfo.get_pageNumber().value = Math.ceil(this._apparentRecordCount / this._grid.get_GridInfo().PageSize).toString();
                        _doPaging = true;
                    }
                }
            }
        }
        else {
            if (this._grid.get_GridInfo().RequireInfiniteScroll && !this._grid.serviceInProgress) {
                scrollcount = (this._grid.get_GridInfo().ScrollCount === 0) ? 4 : this._grid.get_GridInfo().ScrollCount;
                _doPaging = true;
                if (this._grid.get_ScrollDir() === com.ivp.rad.controls.neogrid.scripts.ScrollDirection.DOWN) {
                    if (document.getElementById(this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden').lastChild.children.length >= scrollcount) {
                        _fetchRecords = true;
                    }
                    else if (document.getElementById(this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden').lastChild.children.length > 0) {
                        scrollcount = document.getElementById(this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden').lastChild.children.length;
                        _fetchRecords = true;
                    }
                    else {
                        _fetchRecords = false;
                    }
                    if (this._grid.get_PreviousStartIndex() + this._grid.get_GridInfo().PageSize + scrollcount > this._apparentRecordCount) {
                        this._grid.set_PreviousStartIndex(this._apparentRecordCount - this._grid.get_GridInfo().PageSize);
                        scrollcount = this._apparentRecordCount - (this._grid.get_PreviousStartIndex() + this._grid.get_GridInfo().PageSize);
                        _fetchRecords = true;
                    }
                    else {
                        if (_fetchRecords) {
                            this._grid.set_PreviousStartIndex(this._grid.get_PreviousStartIndex() + scrollcount);
                        }
                    }
                    if (_fetchRecords) {
                        if (document.getElementById(this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden').lastChild.children.length > 0) {
                            var scrollCount = (this._grid.get_GridInfo().ScrollCount === 0) ? 4 : this._grid.get_GridInfo().ScrollCount;
                            for (var i = 0; i < scrollCount; i++) {
                                var eleToRemove = null;
                                if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                                    var divNew = eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\").children()[0]).children()[0]');
                                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\").append($(divNew))');
                                    eleToRemove = eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\").children()[0])');
                                    eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\").children()[0]).append($(eleToRemove))');
                                }
                                if (this._grid.get_GridInfo().FrozenColumns.length > 0) {
                                    var divNew2 = eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\").children()[1]).children()[0]');
                                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\").append($(divNew2))');
                                    eleToRemove = eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\").children()[0])');
                                    eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\").children()[1]).append($(eleToRemove))');
                                }
                                var divNew1 = eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\").children()[2]).children()[0]');
                                eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\").append($(divNew1))');
                                eleToRemove = eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\").children()[0])');
                                eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\").children()[2]).append($(eleToRemove))');
                            }
                        }
                        else {
                            _fetchRecords = false;
                        }
                    }
                }
                else {
                    if (document.getElementById(this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp').lastChild.children.length >= scrollcount) {
                        _fetchRecords = true;
                    }
                    else if (document.getElementById(this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp').lastChild.children.length > 0) {
                        scrollcount = document.getElementById(this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp').lastChild.children.length;
                        _fetchRecords = true;
                    }
                    else {
                        _fetchRecords = false;
                    }
                    this._grid.set_PreviousStartIndex(((this._grid.get_PreviousStartIndex() - scrollcount > 0) ? this._grid.get_PreviousStartIndex() - scrollcount : 0));
                    if (_fetchRecords) {
                        if (document.getElementById(this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp').lastChild.children.length > 0) {
                            var scrollCount = (this._grid.get_GridInfo().ScrollCount === 0) ? 4 : this._grid.get_GridInfo().ScrollCount;
                            for (var i = 0; i < scrollCount; i++) {
                                var eleToRemove = null;
                                var childrencount = eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\").children()[2]).children().length');
                                var num = this._grid.get_GridInfo().PageSize;
                                if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                                    var divNew = eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\").children()[0]).children()[childrencount-1]');
                                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\").prepend($(divNew))');
                                    eleToRemove = $($("#" + this._grid.get_GridInfo().GridId + "_repeatedFrozenDiv").children())[$("#" + this._grid.get_GridInfo().GridId + "_repeatedFrozenDiv").children().length - 1];//eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\").children()[num-1])');
                                    eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\").children()[0]).prepend($(eleToRemove))');
                                }
                                if (this._grid.get_GridInfo().FrozenColumns.length > 0) {
                                    var divNew2 = eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\").children()[1]).children()[childrencount-1]');
                                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\").prepend($(divNew2))');
                                    eleToRemove = $($("#" + this._grid.get_GridInfo().GridId + "_repeatednewFrozenDiv").children())[$("#" + this._grid.get_GridInfo().GridId + "_repeatednewFrozenDiv").children().length - 1];//eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\").children()[num-1])');
                                    eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\").children()[1]).prepend($(eleToRemove))');
                                }
                                var divNew1 = eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\").children()[2]).children()[childrencount-1]');
                                eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\").prepend($(divNew1))');
                                eleToRemove = $($("#" + this._grid.get_GridInfo().GridId + "_repeatedBodyDiv").children())[$("#" + this._grid.get_GridInfo().GridId + "_repeatedBodyDiv").children().length - 1]
                                eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\").children()[2]).prepend($(eleToRemove))');
                            }
                        }
                        else {
                            _fetchRecords = false;
                        }
                    }
                }
                if (this._apparentRecordCount > 0 && this._grid.get_PreviousStartIndex() > 0 && (this._grid.get_PreviousStartIndex() + this._grid.get_GridInfo().PageSize < this._recordsCount)) {
                    _doPaging = true;
                }
                else {
                    _doPaging = false;
                    //this._grid.set_PreviousStartIndex(0);
                }
            }
        }
        if (_doPaging && !_fetchRecords && !this._grid.serviceInProgress) {
			if (this._grid.clientDataController._previouslySelectedCheckBox != null)
            {
                this._grid.clientDataController._previouslySelectedCheckBox = null
            }
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT, this._grid.elementInfo.get_pageNumber().value + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT);
        }
        this._grid.set_AjaxStart(false);
        this._grid.set_InfiniteScroll(false);
    },

    _horizontalScrollClick: function com_ivp_rad_controls_neogrid_scripts_Footer$_horizontalScrollClick(scrollBar, scrollRail, position) {
        /// <param name="scrollBar" type="Object" domElement="true">
        /// </param>
        /// <param name="scrollRail" type="Object" domElement="true">
        /// </param>
        /// <param name="position" type="Number" integer="true">
        /// </param>
        var delta = 0;
        var scrollleft = 0;
        if (position > (scrollBar.offsetLeft + scrollBar.parentNode.offsetLeft)) {
            delta = position - (scrollBar.offsetLeft + scrollBar.parentNode.offsetLeft);
            if (((position - scrollBar.parentNode.offsetLeft) + scrollBar.offsetWidth) > scrollRail.offsetWidth) {
                delta = position - scrollBar.parentNode.offsetLeft;
                scrollleft = delta - scrollBar.offsetWidth;
                this._grid.elementInfo.get_bodyInnerDiv().scrollLeft = (delta - scrollBar.offsetWidth) * (this._grid.elementInfo.get_bodyInnerTable().offsetWidth / scrollRail.offsetWidth);
                this._grid.elementInfo.get_fluidHeaderDiv().scrollLeft = (delta - scrollBar.offsetWidth) * (this._grid.elementInfo.get_bodyInnerTable().offsetWidth / scrollRail.offsetWidth);
            }
            else {
                scrollleft = scrollBar.offsetLeft + (delta - scrollBar.offsetWidth);
                this._grid.elementInfo.get_bodyInnerDiv().scrollLeft = this._grid.elementInfo.get_bodyInnerDiv().scrollLeft + (delta - scrollBar.offsetWidth) * (this._grid.elementInfo.get_bodyInnerTable().offsetWidth / scrollRail.offsetWidth);
                this._grid.elementInfo.get_fluidHeaderDiv().scrollLeft = this._grid.elementInfo.get_fluidHeaderDiv().scrollLeft + (delta - scrollBar.offsetWidth) * (this._grid.elementInfo.get_bodyInnerTable().offsetWidth / scrollRail.offsetWidth);
            }
        }
        else {
            delta = position - scrollBar.parentNode.offsetLeft;
            scrollleft = delta;
            this._grid.elementInfo.get_bodyInnerDiv().scrollLeft = (delta * (this._grid.elementInfo.get_bodyInnerTable().offsetWidth / scrollRail.offsetWidth));
            this._grid.elementInfo.get_fluidHeaderDiv().scrollLeft = (delta * (this._grid.elementInfo.get_bodyInnerTable().offsetWidth / scrollRail.offsetWidth));
        }
        this._grid.set_HorizontalScrollPosition(scrollBar.offsetLeft);
    },

    _verticalScrollClick: function com_ivp_rad_controls_neogrid_scripts_Footer$_verticalScrollClick(scrollBar, scrollRail, position) {
        /// <param name="scrollBar" type="Object" domElement="true">
        /// </param>
        /// <param name="scrollRail" type="Object" domElement="true">
        /// </param>
        /// <param name="position" type="Number" integer="true">
        /// </param>
        var delta = 0;
        if (position > (scrollBar.offsetTop + scrollBar.parentNode.offsetParent.offsetTop)) {
            delta = position - (scrollBar.offsetTop + scrollBar.parentNode.offsetParent.offsetTop);
            if (((position - scrollBar.parentNode.offsetParent.offsetTop) + scrollBar.offsetHeight) > scrollRail.offsetHeight) {
                delta = position - scrollBar.parentNode.offsetParent.offsetTop;
                this._grid.elementInfo.get_bodyInnerDiv().scrollTop = (delta - scrollBar.offsetHeight) * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / scrollRail.offsetHeight);
                this._grid.elementInfo.get_frozenBodyDiv().scrollTop = (delta - scrollBar.offsetHeight) * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / scrollRail.offsetHeight);
            }
            else {
                this._grid.elementInfo.get_bodyInnerDiv().scrollTop = (delta - scrollBar.offsetHeight) * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / scrollRail.offsetHeight);
                this._grid.elementInfo.get_frozenBodyDiv().scrollTop = (delta - scrollBar.offsetHeight) * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / scrollRail.offsetHeight);
            }
        }
        else {
            delta = position - scrollBar.parentNode.offsetParent.offsetTop;
            this._grid.elementInfo.get_bodyInnerDiv().scrollTop = delta * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / scrollRail.offsetHeight);
            this._grid.elementInfo.get_frozenBodyDiv().scrollTop = delta * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / scrollRail.offsetHeight);
        }
    },

    _clickUpdate: function com_ivp_rad_controls_neogrid_scripts_Footer$_clickUpdate(scrollvalues, position) {
        /// <param name="scrollvalues" type="Array">
        /// </param>
        /// <param name="position" type="Number" integer="true">
        /// </param>
        var delta = 0;
        if (position > (Number.parseInvariant(scrollvalues[0].toString()) + Number.parseInvariant(scrollvalues[1].toString()))) {
            delta = position - (Number.parseInvariant(scrollvalues[0].toString()) + Number.parseInvariant(scrollvalues[1].toString()));
            if (((position - Number.parseInvariant(scrollvalues[1].toString())) + Number.parseInvariant(scrollvalues[2].toString())) > Number.parseInvariant(scrollvalues[3].toString())) {
                delta = position - Number.parseInvariant(scrollvalues[1].toString());
                this._grid.elementInfo.get_bodyInnerDiv().scrollTop = (delta - Number.parseInvariant(scrollvalues[2].toString())) * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / Number.parseInvariant(scrollvalues[3].toString()));
                this._grid.elementInfo.get_frozenBodyDiv().scrollTop = (delta - Number.parseInvariant(scrollvalues[2].toString())) * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / Number.parseInvariant(scrollvalues[3].toString()));
                this._grid.set_VerticalScrollPosition(delta - Number.parseInvariant(scrollvalues[2].toString()));
            }
            else {
                this._grid.elementInfo.get_bodyInnerDiv().scrollTop = (delta - Number.parseInvariant(scrollvalues[2].toString())) * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / Number.parseInvariant(scrollvalues[3].toString()));
                this._grid.elementInfo.get_frozenBodyDiv().scrollTop = (delta - Number.parseInvariant(scrollvalues[2].toString())) * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / Number.parseInvariant(scrollvalues[3].toString()));
                this._grid.set_VerticalScrollPosition(delta - Number.parseInvariant(scrollvalues[2].toString()));
            }
        }
        else {
            delta = position - Number.parseInvariant(scrollvalues[1].toString());
            this._grid.elementInfo.get_bodyInnerDiv().scrollTop = delta * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / Number.parseInvariant(scrollvalues[3].toString()));
            this._grid.elementInfo.get_frozenBodyDiv().scrollTop = delta * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight / Number.parseInvariant(scrollvalues[3].toString()));
            this._grid.set_VerticalScrollPosition(delta);
        }
    },

    _onWheelUpdate: function com_ivp_rad_controls_neogrid_scripts_Footer$_onWheelUpdate(scrollvalues, scrollup, barposition, delta, verticalscrolltop) {
        /// <param name="scrollvalues" type="Array">
        /// </param>
        /// <param name="scrollup" type="Boolean">
        /// </param>
        /// <param name="barposition" type="Number" integer="true">
        /// </param>
        /// <param name="delta" type="Number" integer="true">
        /// </param>
        /// <param name="verticalscrolltop" type="Number" integer="true">
        /// </param>
        var lastpageflag = false;
        var apparentRecordCount = this._grid.footer._apparentRecordCount;
        var pagesize = this._grid.get_GridInfo().PageSize;
        if (Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value) === Math.ceil(apparentRecordCount / pagesize) && Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value) !== 1) {
            lastpageflag = true;
        }
        if (((this._grid.elementInfo.get_bodyInnerTable().offsetHeight < this._grid.elementInfo.get_bodyInnerDiv().offsetHeight) && lastpageflag && scrollup) || (this._grid.elementInfo.get_bodyInnerTable().offsetHeight > this._grid.elementInfo.get_bodyInnerDiv().offsetHeight)) {
            if (((Math.round(Number.parseInvariant(scrollvalues[1].toString())) + Math.round(Number.parseInvariant(scrollvalues[2].toString()))) === (Math.round(Number.parseInvariant(scrollvalues[3].toString())) + Math.round(Number.parseInvariant(scrollvalues[4].toString())))) && !scrollup) {
                if (!this._grid.get_AjaxStart() && ((this._grid.get_GridInfo().PageSize + this._grid.get_PreviousStartIndex()) < this._grid.footer._recordsCount)) {
                    this._grid.set_ScrollDir(com.ivp.rad.controls.neogrid.scripts.ScrollDirection.DOWN);
                    this._grid.set_ScrollPosition(delta - Math.round(0.1 * delta));
                    this._grid.set_BarPosition(barposition);
                    this._infniteScrollUpdated(Number.parseInvariant(scrollvalues[0].toString()));
                }
            }
            if (verticalscrolltop === 0 && (!this._grid.get_AjaxStart() && this._grid.get_PreviousStartIndex() > 0)) {
                this._grid.set_ScrollDir(com.ivp.rad.controls.neogrid.scripts.ScrollDirection.UP);
                this._infniteScrollUpdated(Number.parseInvariant(scrollvalues[0].toString()));
            }
            if (delta >= 0) {
                this._grid.elementInfo.get_frozenBodyDiv().scrollTop = delta;
            }
        }
    },

    _onWheel: function com_ivp_rad_controls_neogrid_scripts_Footer$_onWheel(horizontalbar, scrollbar, scrollRail, scrollup, barposition, delta, verticalscrolltop, wheelstep) {
        /// <param name="horizontalbar" type="Object" domElement="true">
        /// </param>
        /// <param name="scrollbar" type="Object" domElement="true">
        /// </param>
        /// <param name="scrollRail" type="Object" domElement="true">
        /// </param>
        /// <param name="scrollup" type="Boolean">
        /// </param>
        /// <param name="barposition" type="Number" integer="true">
        /// </param>
        /// <param name="delta" type="Number" integer="true">
        /// </param>
        /// <param name="verticalscrolltop" type="Number" integer="true">
        /// </param>
        /// <param name="wheelstep" type="Number" integer="true">
        /// </param>
        var lastpageflag = false;
        var apparentRecordCount = this._grid.footer._apparentRecordCount;
        var pagesize = this._grid.get_GridInfo().PageSize;
        this._grid.set_VerticalScrollPosition(scrollbar.offsetTop);
        if (Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value) === Math.ceil(apparentRecordCount / pagesize) && Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value) !== 1) {
            lastpageflag = true;
        }
        if (((this._grid.elementInfo.get_bodyInnerTable().offsetHeight < this._grid.elementInfo.get_bodyInnerDiv().offsetHeight) && lastpageflag && scrollup) || (this._grid.elementInfo.get_bodyInnerTable().offsetHeight > this._grid.elementInfo.get_bodyInnerDiv().offsetHeight)) {
            if (((Math.round(scrollRail.offsetTop) + Math.round(scrollRail.offsetHeight)) === (Math.round(scrollbar.offsetTop) + Math.round(scrollbar.offsetHeight))) && !scrollup) {
                if (!this._grid.get_AjaxStart() && ((this._grid.get_GridInfo().PageSize + this._grid.get_PreviousStartIndex()) < this._grid.footer._recordsCount)) {
                    this._grid.set_ScrollDir(com.ivp.rad.controls.neogrid.scripts.ScrollDirection.DOWN);
                    this._grid.set_ScrollPosition(delta);
                    this._grid.set_BarPosition(barposition);
                    this._infniteScroll(horizontalbar);
                    if (Sys.Browser.name === 'Microsoft Internet Explorer' && Sys.Browser.version === 8 && wheelstep === 0) {
                        this._grid.get_GridInfo().WheelStep = 0.2;
                    }
                }
            }
            if (verticalscrolltop === 0 && (!this._grid.get_AjaxStart() && this._grid.get_PreviousStartIndex() > 0)) {
                this._grid.set_ScrollDir(com.ivp.rad.controls.neogrid.scripts.ScrollDirection.UP);
                this._infniteScroll(horizontalbar);
                if (Sys.Browser.name === 'Microsoft Internet Explorer' && Sys.Browser.version === 8 && wheelstep === 2) {
                }
            }
            if (delta >= 0) {
                this._grid.elementInfo.get_frozenBodyDiv().scrollTop = delta;
                this._grid.elementInfo.get_bodyInnerDiv().scrollTop = delta;
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_newbodyDiv') != null) {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_newbodyDiv').scrollTop = delta;
                }
            }
        }
    },

    _setVerticalScrollPosition: function com_ivp_rad_controls_neogrid_scripts_Footer$_setVerticalScrollPosition(scrollPos) {
        /// <param name="scrollPos" type="Number" integer="true">
        /// </param>
        this._grid.set_VerticalScrollPosition(scrollPos);
    },

    _getScrollBarHeight: function com_ivp_rad_controls_neogrid_scripts_Footer$_getScrollBarHeight(scrollbar) {
        /// <param name="scrollbar" type="Object" domElement="true">
        /// </param>
        if (scrollbar != null) {
            this._grid.set_VerticalScrollHeight(scrollbar.offsetHeight);
        }
    },

    _infniteScroll: function com_ivp_rad_controls_neogrid_scripts_Footer$_infniteScroll(scrollbar) {
        /// <param name="scrollbar" type="Object" domElement="true">
        /// </param>
        this._grid.set_HorizontalScrollPosition(scrollbar.offsetLeft);
        this._grid.set_AjaxStart(true);
        this._grid.set_InfiniteScroll(true);
        this._doPaging(null);
    },

    _infniteScrollUpdated: function com_ivp_rad_controls_neogrid_scripts_Footer$_infniteScrollUpdated(scrollbar) {
        /// <param name="scrollbar" type="Number" integer="true">
        /// </param>
        this._grid.set_HorizontalScrollPosition(scrollbar);
        this._grid.set_AjaxStart(true);
        this._grid.set_InfiniteScroll(true);
        this._doPaging(null);
    },

    _moveVerticalScroll: function com_ivp_rad_controls_neogrid_scripts_Footer$_moveVerticalScroll() {
        if (this._grid.elementInfo.get_bodyInnerTable().offsetHeight > this._grid.elementInfo.get_bodyInnerDiv().offsetHeight) {
            eval('$(\'.slimScrollBar' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').css({\'top\' : \'0px\'})');
            this._grid.elementInfo.get_bodyInnerDiv().scrollTop = 0;
            this._grid.elementInfo.get_frozenBodyDiv().scrollTop = 0;
        }
    },

    _moveVerticalScrollToBottom: function com_ivp_rad_controls_neogrid_scripts_Footer$_moveVerticalScrollToBottom() {
        if (this._grid.elementInfo.get_bodyInnerTable().offsetHeight > this._grid.elementInfo.get_bodyInnerDiv().offsetHeight) {
            var top = this._grid.elementInfo.get_bodyInnerDiv().offsetHeight - eval('$(\'.slimScrollBar' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').height()');
            eval('$(\'.slimScrollBar' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').css({\'top\' : \'' + top + 'px\'})');
            var a = eval('parseInt($(\'.slimScrollBar' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').css(\'top\'))');
            var percentScroll = a / (this._grid.elementInfo.get_bodyInnerDiv().offsetHeight - eval('$(\'.slimScrollBar' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').height()'));
            this._grid.elementInfo.get_bodyInnerDiv().scrollTop = (percentScroll * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight - this._grid.elementInfo.get_bodyInnerDiv().offsetHeight));
            this._grid.elementInfo.get_frozenBodyDiv().scrollTop = (percentScroll * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight - this._grid.elementInfo.get_bodyInnerDiv().offsetHeight));
        }
    },

    _fullScreenGrid: function com_ivp_rad_controls_neogrid_scripts_Footer$_fullScreenGrid() {
        var previosBodyWidth = this._grid.get_GridInfo().WidthInNormalView;
        var scrollBarValue = (((this._grid.get_HorizontalScrollPosition() / previosBodyWidth) * 100) * this._grid.elementInfo.get_bodyInnerDiv().offsetWidth) / 100;
        var scrollValue = (scrollBarValue / (this._grid.elementInfo.get_bodyInnerDiv().offsetWidth - ((this._grid.elementInfo.get_bodyInnerDiv().offsetWidth / this._grid.elementInfo.get_bodyInnerDiv().scrollWidth) * this._grid.elementInfo.get_bodyInnerDiv().offsetWidth))) * (this._grid.elementInfo.get_bodyInnerDiv().scrollWidth - this._grid.elementInfo.get_bodyInnerDiv().offsetWidth);
        eval('$(\"#' + this._grid.get_id() + '\").find(\"div #' + this._grid.get_id() + '_bodyDiv\").slimscrollHorizontal({height : \'' + this._grid.get_GridInfo().Height + '\',scrollclick : ' + 'function(arg1,arg2,arg3) { $find(\'' + this._grid.get_id() + '\').footer._horizontalScrollClick(arg1,arg2,arg3); }' + ',draghorizonscroll : function() { $(\'#' + this._grid.elementIDManager.get_fluidHeaderDivID() + '\').scrollLeft($(\'#' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').scrollLeft());}' + ',leftposition : \'' + Math.round(scrollBarValue) + '\',railVisible: true,scrollTo : \'20px\',' + 'horizonxlgridid : \'' + this._grid.get_id() + '\'})');
        eval('$(\"#' + this._grid.get_id() + '\").find(\"div #' + this._grid.get_id() + '_bodyDiv\").slimscroll({height : \'' + this._grid.get_GridInfo().Height + '\',controlscroll : ' + 'function (a1,a2,a3,a4,a5,a6,a7) { $find(\'' + this._grid.get_id() + '\').footer._onWheel(a1,a2,a3,a4,a5,a6,a7); }' + ',controlclick : ' + 'function(a1,a2,a3) { $find(\'' + this._grid.get_id() + '\').footer._clickUpdate(a1,a2,a3); }' + ',dragscroll : function() { $(\'#' + this._grid.elementIDManager.get_frozenBodyDivID() + '\').scrollTop($(\'#' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').scrollTop());}' + ',railVisible: true,' + 'xlgridid : \'' + this._grid.get_id() + '\'})');
        eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollLeft(' + Math.round(scrollValue) + ')');
        eval('$(\"#' + this._grid.get_id() + '_headerDiv' + '\" ).scrollLeft(' + Math.round(scrollValue) + ')');
    }
}
com.ivp.rad.controls.neogrid.scripts.CommentEngine = function com_ivp_rad_controls_neogrid_scripts_CommentEngine(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="WrapperViewModel" type="Object" >
    /// </field>
    this._grid = grid;
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}






com.ivp.rad.controls.neogrid.scripts.CommentEngine.prototype = {
    WrapperViewModel: null,
    _grid: null,
    viewModel: function com_ivp_rad_controls_neogrid_scripts_CommentEngine$viewModel() {
            var closure = this;
            closure.GridID = ko.observable();
            closure.UserId = ko.observable();
            closure.PapaComments = ko.observableArray([]);
            closure.RemoveCommentPopUp = function (model, event) {
                $(event.target).closest(".RADCommentPapaContainer").remove();
                $(".RADleftMenuOpenedIcon").remove();
                $(".RADrightMenuOpenedIcon").remove();
                event.stopPropagation();
                event.preventDefault();
            };
            closure.EditComment = function (model, event) {
                if ($(event.target).hasClass("RADDisabled") == false) {
                    $(event.target).closest(".RADCommentWrapper").find(".RADTextBoxEditSection").removeClass("RADHidden");
                    $(event.target).closest(".RADCommentWrapper").find(".RADCommentParent").addClass("RADHidden");
                    $(event.target).closest(".RADCommentWrapper").find(".RADTextEditBox").text = $(event.target).closest(".RADCommentWrapper").find(".RADComment").text;
                    $(event.target).closest(".RADCommentWrapper").find(".RADEditDeleteParent").addClass("RADHidden");
                }
                event.stopPropagation();
                event.preventDefault();
            };
            closure.DeleteComment = function (model, event) {
                $find(this.GridID).CommentInfoEngine.fireDeleteCommentFunction(event);
                event.stopPropagation();
                event.preventDefault();
            };
            closure.AddComments = function (model, event) {
                $(event.target).hide();
                $(event.target).closest(".RADCommentPapaContainer").find(".RADTextBoxSection").removeClass("RADHidden");
                event.stopPropagation();
                event.preventDefault();
            };
            closure.ViewMore = function (model, event) {
                $(event.target).closest(".RADCommentPapaContainer").find(".RADCommentWrapper").each(function () {
                    if ($(this).hasClass("RADHidden")) {
                        $(this).removeClass("RADHidden");
                        $(this).attr("ViewMore", "true");
                    }
                })
                $(event.target).closest(".RADCommentPapaContainer").find(".RADViewLess").removeClass("RADHidden");
                $(event.target).addClass("RADHidden");
                event.stopPropagation();
                event.preventDefault();
            };
            closure.ViewLess = function (model, event) {
                $(event.target).closest(".RADCommentPapaContainer").find(".RADCommentWrapper").each(function () {
                    if ($(this).attr("ViewMore") == "true") {
                        $(this).attr("ViewMore", "false");
                        $(this).addClass("RADHidden");
                    }
                })
                $(event.target).addClass("RADHidden");
                $(event.target).closest(".RADCommentPapaContainer").find(".RADViewMore").removeClass("RADHidden");
                event.stopPropagation();
                event.preventDefault();
            };
            closure.Submit = function (model, event) {
                if ($(event.target).hasClass("RADSubmitButton")) {
                    $find(this.GridID).CommentInfoEngine.fireInsertCommentFunction(event);
                }
                else if ($(event.target).hasClass("RADSubmitEditButton")) {
                    $find(this.GridID).CommentInfoEngine.fireEditCommentFunction(event);
                }
                event.stopPropagation();
                event.preventDefault();
            };
            closure.addEditClass = function (item, model, event) {
                return (item.EditIsTrue ? "RADEnabled" : "RADDisabled");
            };
            closure.addDeleteClass = function (item, model, event) {
                return (item.DeleteIsTrue ? "RADEnabled" : "RADDisabled");
            };
            closure.Cancel = function (model, event) {
                if ($(event.target).hasClass("RADCancelButton")) {
                    $(event.target).closest(".RADTextBoxSection").addClass("RADHidden");
                    $(event.target).closest(".RADTextBoxSection").find(".RADTextBox").html("");
                }
                else if ($(event.target).hasClass("RADCancelEditButton")) {
                    $(".RADTextBoxEditSection").addClass("RADHidden");
                    $(event.target).closest(".RADTextBoxEditSection").find(".RADTextEditBox").html("");
                }
                event.stopPropagation();
                event.preventDefault();
            };
    },
    fireDeleteCommentFunction: function com_ivp_rad_controls_neogrid_scripts_CommentEngine$fireDeleteCommentFunction(event) {
        /// <param name="event" type="Sys.UI.DomEvent">
        /// </param>
        var data = new com.ivp.rad.controls.neogrid.scripts.CommentInfoDetails();
        var ActualCommentData = new com.ivp.rad.controls.neogrid.scripts.CoomenTInfoDetails();
        data.ColumnName = "";
        data.RowId = "";
        data.Grid_Marker = "";
        ActualCommentData.Comment = "";
        ActualCommentData.UserId = "";
        ActualCommentData.UpdatedDate = "";
        ActualCommentData.ID = $(event.target).closest(".RADCommentWrapper").attr("key");
        data.CoomenTInfo = [];
        data.CoomenTInfo.push(ActualCommentData);
        for (var i = 0; i < WrapperViewModel.PapaComments().length; i++) {
            if (WrapperViewModel.PapaComments()[i].Key == data.CoomenTInfo[0].ID) {
                WrapperViewModel.PapaComments.splice(i, 1)
                break;
            }
        }
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DELETE_COMMENT, Sys.Serialization.JavaScriptSerializer.serialize(data), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DELETE_COMMENT);
    },
    fireInsertCommentFunction: function com_ivp_rad_controls_neogrid_scripts_CommentEngine$fireInsertCommentFunction(event) {
        /// <param name="event" type="Sys.UI.DomEvent">
        /// </param>
        var data = new com.ivp.rad.controls.neogrid.scripts.CommentInfoDetails();
        var ActualCommentData = new com.ivp.rad.controls.neogrid.scripts.CoomenTInfoDetails();
        data.ColumnName = this._grid.manageEvents._CoulmnName;
        data.RowId = this._grid.manageEvents._RowID;
        data.Grid_Marker = this._grid.get_GridInfo().GridId + this._grid.get_GridInfo().CurrentPageId + this._grid.get_GridInfo().ViewKey;
        ActualCommentData.Comment = $(event.target).closest(".RADCommentPapaContainer").find(".RADTextBox").html();
        ActualCommentData.UserId = this._grid.get_GridInfo().UserId;
        ActualCommentData.UpdatedDate = new Date().toLocaleString();
        ActualCommentData.ID = 0;
        data.CoomenTInfo = [];
        data.CoomenTInfo.push(ActualCommentData);
        WrapperViewModel.PapaComments.splice(0, 0, { Comments: data.CoomenTInfo[0].Comment, id: 0, ByPersonTime: "By " + data.CoomenTInfo[0].UserId + " at " + data.CoomenTInfo[0].UpdatedDate, EditIsTrue: true, DeleteIsTrue: true, Key: data.CoomenTInfo[0].ID });
        $(event.target).closest(".RADTextBoxSection").find(".RADTextBox").html("");
        $(event.target).closest(".RADTextBoxSection").addClass("RADHidden");
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_COMMENT, Sys.Serialization.JavaScriptSerializer.serialize(data), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_COMMENT)
    },
    fireEditCommentFunction: function com_ivp_rad_controls_neogrid_scripts_CommentEngine$fireEditCommentFunction(event) {
        /// <param name="event" type="Sys.UI.DomEvent">
        /// </param>
        var data = new com.ivp.rad.controls.neogrid.scripts.CommentInfoDetails();
        var ActualCommentData = new com.ivp.rad.controls.neogrid.scripts.CoomenTInfoDetails();
        data.ColumnName = "";
        data.RowId = "";
        data.Grid_Marker = "";
        ActualCommentData.Comment = $(event.target).closest(".RADCommentPapaContainer").find(".RADTextEditBox").html();
        ActualCommentData.UserId = "";
        ActualCommentData.UpdatedDate = "";
        ActualCommentData.ID = $(event.target).closest(".RADCommentWrapper").attr("key");
        data.CoomenTInfo = [];
        data.CoomenTInfo.push(ActualCommentData);
        $(event.target).closest(".RADTextBoxEditSection").find(".RADTextEditBox").html("");
        $(".RADTextBoxEditSection").addClass("RADHidden");
        for (var i = 0; i < WrapperViewModel.PapaComments().length; i++) {
            if (WrapperViewModel.PapaComments()[i].Key == data.CoomenTInfo[0].ID) {
                WrapperViewModel.PapaComments()[i].Comments = data.CoomenTInfo[0].Comment;
                break;
            }
        }
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_COMMENT, Sys.Serialization.JavaScriptSerializer.serialize(data), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_COMMENT);
    },
    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_CommentEngine$_serviceCompleted(serviceInfo) {
        
        var GridExtraInfo = serviceInfo.serializedInfo;
        if (this._grid.get_GridInfo().CommentProperty) {
            WrapperViewModel = new this._grid.CommentInfoEngine.viewModel();
        }
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_COLUMNHTML && this._grid.get_GridInfo().CommentProperty) {
            $("body").append(serviceInfo.output);
            WrapperViewModel.UserId = this._grid.get_GridInfo().UserId;
            WrapperViewModel.GridID = this._grid.get_id();
            for (var i = 0; i < GridExtraInfo.CommentDetails.length; i++) {
                if (GridExtraInfo.CommentDetails[i].RowId == this._grid.manageEvents._RowID && GridExtraInfo.CommentDetails[i].ColumnName == this._grid.manageEvents._CoulmnName)
                    var CommentsInfo = GridExtraInfo.CommentDetails[i];
            }
            if (CommentsInfo != null)
                for (var i = 0; i < CommentsInfo.CoomenTInfo.length; i++) {
                    WrapperViewModel.PapaComments().push({ Comments: CommentsInfo.CoomenTInfo[i].Comment, id: i, ByPersonTime: "By " + CommentsInfo.CoomenTInfo[i].UserID + " at " + CommentsInfo.CoomenTInfo[i].UpdatedDate, EditIsTrue: (CommentsInfo.CoomenTInfo[i].UserID == this._grid.get_GridInfo().UserId), DeleteIsTrue: (CommentsInfo.CoomenTInfo[i].UserID == this._grid.get_GridInfo().UserId), Key: CommentsInfo.CoomenTInfo[i].ID })
                }

            ko.applyBindings(WrapperViewModel, $("#RADCommentPapaContainer")[0]);
            if (this._grid.manageEvents.RIGHT + 300 > $(document).width()) {
                $("#RADTooltipEdge").addClass("RADrightMenuOpenedIcon");
                var div = document.createElement('div');
                div.className = "RADrightMenuOpenedIconInside";
                $("#RADTooltipEdge")[0].append(div);

                $("#RADTooltipEdge")[0].style.left = (this._grid.manageEvents.LEFT) + "px";
                $("#RADCommentPapaContainer")[0].style.left = (this._grid.manageEvents.LEFT - 300) + "px";
                if (this._grid.manageEvents.TOP + $("#RADCommentPapaContainer").height() > $(document).height()) {
                    $("#RADCommentPapaContainer")[0].style.top = (this._grid.manageEvents.TOP - $("#RADCommentPapaContainer").height() + 22) + "px";
                    $("#RADTooltipEdge")[0].style.top = (this._grid.manageEvents.TOP - $("#RADCommentPapaContainer").height()) + "px";
                }
                else {
                    $("#RADCommentPapaContainer")[0].style.top = (this._grid.manageEvents.TOP - 22) + "px";
                    $("#RADTooltipEdge")[0].style.top = this._grid.manageEvents.TOP + "px";
                }
            }
            else {
                $("#RADTooltipEdge").addClass("RADleftMenuOpenedIcon");
                var div = document.createElement('div');
                div.className = "RADleftMenuOpenedIconInside";
                $("#RADTooltipEdge")[0].append(div);

                $("#RADTooltipEdge")[0].style.left = (this._grid.manageEvents.RIGHT - 10) + "px";
                $("#RADCommentPapaContainer")[0].style.left = (this._grid.manageEvents.RIGHT + 10) + "px";
                if (this._grid.manageEvents.TOP + $("#RADCommentPapaContainer").height() > $(document).height()) {
                    $("#RADTooltipEdge")[0].style.top = this._grid.manageEvents.TOP - $("#RADCommentPapaContainer").height() + "px";
                    $("#RADCommentPapaContainer")[0].style.top = (this._grid.manageEvents.TOP - $("#RADCommentPapaContainer").height() + 22) + "px";
                }
                else {
                    $("#RADTooltipEdge")[0].style.top = (this._grid.manageEvents.TOP) + "px";
                    $("#RADCommentPapaContainer")[0].style.top = (this._grid.manageEvents.TOP - 22) + "px";
                }
            }
           
        }

    }
}
////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.GridEngine

com.ivp.rad.controls.neogrid.scripts.GridEngine = function com_ivp_rad_controls_neogrid_scripts_GridEngine(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_service" type="com.ivp.rad.controls.neogrid.service.RADNeoGridService">
    /// </field>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_success" type="com.ivp.rad.controls.neogrid.service.SuccessCallbackDelegate">
    /// </field>
    /// <field name="_failure" type="com.ivp.rad.controls.neogrid.service.FailureCallbackDelegate">
    /// </field>
    /// <field name="_onScrollMain" type="Sys.UI.DomEventHandler">
    /// </field>
    /// <field name="_onScrollFreeze" type="Sys.UI.DomEventHandler">
    /// </field>
    /// <field name="_onWheelMoveMain" type="Sys.UI.DomEventHandler">
    /// </field>
    /// <field name="_onWheelMoveFreeze" type="Sys.UI.DomEventHandler">
    /// </field>
    /// <field name="_onmousedown" type="Sys.UI.DomEventHandler">
    /// </field>
    /// <field name="_onmouseup" type="Sys.UI.DomEventHandler">
    /// </field>
    /// <field name="_oncontextmenu" type="Sys.UI.DomEventHandler">
    /// </field>
    /// <field name="_currentpage" type="Number" integer="true">
    /// </field>
    /// <field name="_previousmousepos" type="Number" integer="true">
    /// </field>
    /// <field name="_groupedColumns" type="Array">
    /// </field>
    /// <field name="_sortInfoList" type="Array">
    /// </field>
    
    /// <field name="_columnIndexAndNameMap" type="Object">
    /// </field>
    /// <field name="_onkeyup" type="Sys.UI.DomEventHandler">
    /// </field>
    /// <field name="_verticalScrollingStart" type="Number" integer="true">
    /// </field>
    /// <field name="_horizontalScrollingStart" type="Number" integer="true">
    /// </field>
    /// <field name="_headerWidths" type="Object">
    /// </field>
    /// <field name="_dataWidths" type="Object">
    /// </field>
    /// <field name="_lastScrollerScrollLeft" type="Number" integer="true">
    /// </field>
    /// <field name="_lastScrollerScrollTop" type="Number" integer="true">
    /// </field>
    /// <field name="_lastBodyScrollLeft" type="Number" integer="true">
    /// </field>
    /// <field name="_lastBodyScrollTop" type="Number" integer="true">
    /// </field>
    /// <field name="_extraPopupHTML" type="String">
    /// </field>
    /// <field name="_hasExtraINfo" type="Boolean">
    /// </field>
    /// <field name="cache" type="Object">
    /// </field>
    /// <field name="_scrollerVertical" type="Object" domElement="true">
    /// </field>
    
    /// <field name="_scrollerHorizontal" type="Object" domElement="true">
    /// </field>
    /// <field name="_docH" type="Number" integer="true">
    /// </field>
    /// <field name="_contH" type="Number" integer="true">
    /// </field>
    /// <field name="_scrollAreaH" type="Number" integer="true">
    /// </field>
    /// <field name="_scrollH" type="Number" integer="true">
    /// </field>
    /// <field name="_docW" type="Number" integer="true">
    /// </field>
    /// <field name="_contW" type="Number" integer="true">
    /// </field>
    /// <field name="_scrollAreaW" type="Number" integer="true">
    /// </field>
    /// <field name="_scrollW" type="Number" integer="true">
    /// </field>
    this._sortInfoList = [];
    this._verticalScrollingStart = -1;
    this._horizontalScrollingStart = -1;
    this._grid = grid;
    this._service = new com.ivp.rad.controls.neogrid.service.RADNeoGridService();
    this._headerWidths = {};
    this._dataWidths = {};
    this._success = Function.createDelegate(this, this._onSuccess);
    this._failure = Function.createDelegate(this, this._onFailure);
    this._onScrollMain = Function.createDelegate(this, this._onScrollMain);
    this._onScrollFreeze = Function.createDelegate(this, this._onScrollFreeze);
    this._onWheelMoveMain = Function.createDelegate(this, this._onWheelMain);
    this._onWheelMoveFreeze = Function.createDelegate(this, this._onWheelFreeze);
    this._onmousedown = Function.createDelegate(this, this._onmousedown);
    this._oncontextmenu = Function.createDelegate(this, this._oncontextmenu);
    this._onmouseup = Function.createDelegate(this, this._onmouseup);
    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.get_element(), 'contextmenu', this._oncontextmenu);
    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.get_element(), 'mousedown', this._onmousedown);
    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.get_element(), 'mouseup', this._onmouseup);
    this._onkeyup = Function.createDelegate(this, this._onkeyup);
    this._columnIndexAndNameMap = this._grid.group._columnIndexAndNameMap;
    this.cache = {};
}
com.ivp.rad.controls.neogrid.scripts.GridEngine.prototype = {
    _service: null,
    _grid: null,
    _success: null,
    _failure: null,
    _onScrollMain: null,
    _onScrollFreeze: null,
    _onWheelMoveMain: null,
    _onWheelMoveFreeze: null,
    _onmousedown: null,
    _onmouseup: null,
    _oncontextmenu: null,
    _currentpage: 0,
    _previousmousepos: 0,
    _groupedColumns: null,
    _columnIndexAndNameMap: null,
    _onkeyup: null,
    _headerWidths: null,
    _dataWidths: null,
    _lastScrollerScrollLeft: 0,
    _lastScrollerScrollTop: 0,
    _lastBodyScrollLeft: 0,
    _lastBodyScrollTop: 0,
    _extraPopupHTML: '',
    _hasExtraINfo: false,
    cache: null,

    get_cache: function com_ivp_rad_controls_neogrid_scripts_GridEngine$get_cache() {
        /// <value type="Object"></value>
        return this.cache;
    },
    set_cache: function com_ivp_rad_controls_neogrid_scripts_GridEngine$set_cache(value) {
        /// <value type="Object"></value>
        this.cache = value;
        return value;
    },
  
    executeWCFProcess: function com_ivp_rad_controls_neogrid_scripts_GridEngine$executeWCFProcess(eventType, data, userContext) {
        /// <param name="eventType" type="String">
        /// </param>
        /// <param name="data" type="String">
        /// </param>
        /// <param name="userContext" type="String">
        /// </param>
        $(".DataInsightTd").hide();
        $("#" + this._grid.get_GridInfo().GridId).css({ "width": $("#" + this._grid.get_GridInfo().GridId).parent().width() });
        $(".DataInsightTd").show();
        eval('time=new Date().getTime()');
        if (this._grid.elementInfo.get_radExtrapopupDiv() != null) {
            this._extraPopupHTML = this._grid.elementInfo.get_radExtrapopupDiv().innerHTML;
        }
        this._grid.elementInfo.get_loading().style.display = '';
        if (this._grid.elementInfo.get_bodyInnerDiv() != null && this._grid.elementInfo.get_fluidHeaderDiv() != null) {
            this._grid.set_InnerBodyPosition(this._grid.elementInfo.get_fluidHeaderDiv().scrollLeft);
            this._grid.set_HeaderDivPosition(this._grid.elementInfo.get_fluidHeaderDiv().scrollLeft);
        }
        if (this._grid.elementInfo.get_bodyInnerDiv() != null) {
            this._grid.set_InnerBodyTopScroll(this._grid.elementInfo.get_frozenBodyDiv().scrollTop);
        }
        if (eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_LIST || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_CHECKED_ROWS || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_RULE_INTELLISENSE || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PASTE_DATA_FROM_EXCEL || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_DRAG_SELECT_UNSELECT || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DISABLED_CHECKED_ROWS || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_CHECKED_ROWS || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_DEFAULT_VIEW || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_SELECTED || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_SELECTED_ONE || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_UNSELECTED || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_UNSELECTED_ALL || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CHECK_ROW_IF_NONE_CHECKED || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED_ALL || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_SELECTED || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_UNSELECTED || eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH) {
        }
        else {
            com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(true);
        }
        var state = null;
        var popupState = null;
        if (this._grid.elementInfo.get_radExtraPopupBtn() != null) {
            state = this._grid.elementInfo.get_radExtraPopupBtn().getAttribute('state');
        }
        var popupBtn = this._grid.elementInfo.get_radBalancePopupBtn();
        if (popupBtn != null) {
            popupState = popupBtn.getAttribute('state');
        }
        if (this._grid.get_GridInfo().RaiseGridCallBackBeforeExecute !== '' && this._grid.get_GridInfo().RaiseGridCallBackBeforeExecute != null) {
            var ColumnsToBeHiddenWithGrouping = eval(this._grid.get_GridInfo().RaiseGridCallBackBeforeExecute + '(\'' + eventType + '\')');
            if (ColumnsToBeHiddenWithGrouping != null && ColumnsToBeHiddenWithGrouping !== '') {
                data = data + '|' + ColumnsToBeHiddenWithGrouping;
            }
        }
        if (this._grid.get_GridInfo().JsonData == null) {
            this._grid.get_GridInfo().JsonData = '';
        }
        if (eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT) {
            eval('$(\'#' + this._grid.get_id() + '_popUpData\').animate({\"width\":\"300px\"})');
            document.getElementById(this._grid.get_id() + '_body_Div').style.opacity = '0.2';
        }
        if (this._grid.get_GridInfo().SessionIdentifier == null) {
            this._grid.get_GridInfo().SessionIdentifier = '';
        }
        if (eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING) {
            this._grid.set_CacheKey(this._grid.get_GridInfo().UserId + this._grid.get_GridInfo().GridId + this._grid.get_GridInfo().CurrentPageId + this._grid.get_GridInfo().ViewKey + this._grid.get_GridInfo().SessionIdentifier);
            if (this._grid.get_GridInfo().IsMasterChildGrid) {
                if (this._grid.get_GridInfo().GridId !== this._grid.get_GridInfo().MasterGridId) {
                    this._service.ExecuteGridService(this._grid.get_CacheKey(), eventType, data + '~' + Sys.Serialization.JavaScriptSerializer.serialize(this._headerWidths) + '~' + this._grid.get_GridInfo().Height + '~' + this._grid.get_InfiniteScroll() + '~' + this._grid.get_PreviousStartIndex() + '~' + this._grid.get_AjaxStart() + '~' + this._grid.get_VerticalScrollPosition() + '~' + this._grid.get_GridInfo().JsonData + '~' + document.getElementById(this._grid.get_GridInfo().GridId).parentNode.offsetWidth + '~' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo()), this._success, this._failure, data + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + userContext + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((state != null && state.toString() === 'show') ? true : false) + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((popupState != null && popupState.toString() === 'show') ? true : false));
                }
                else {
                    this._service.ExecuteGridService(this._grid.get_CacheKey(), eventType, data + '~' + Sys.Serialization.JavaScriptSerializer.serialize(this._headerWidths) + '~' + this._grid.get_GridInfo().Height + '~' + this._grid.get_InfiniteScroll() + '~' + this._grid.get_PreviousStartIndex() + '~' + this._grid.get_AjaxStart() + '~' + this._grid.get_VerticalScrollPosition() + '~' + this._grid.get_GridInfo().JsonData + '~' + document.getElementById(this._grid.get_GridInfo().GridId).parentNode.offsetWidth + '~' + '', this._success, this._failure, data + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + userContext + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((state != null && state.toString() === 'show') ? true : false) + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((popupState != null && popupState.toString() === 'show') ? true : false));
                }
            }
            else {
                if (this._grid.editGrid != null) {
                    if (this._grid.editGrid.changedRowsInfo.length > 0) {
                        this._service.ExecuteGridService(this._grid.get_CacheKey(), eventType, data + '~' + Sys.Serialization.JavaScriptSerializer.serialize(this._headerWidths) + '~' + this._grid.get_GridInfo().Height + '~' + this._grid.get_InfiniteScroll() + '~' + this._grid.get_PreviousStartIndex() + '~' + this._grid.get_AjaxStart() + '~' + this._grid.get_VerticalScrollPosition() + '~' + this._grid.get_GridInfo().JsonData + '~' + document.getElementById(this._grid.get_GridInfo().GridId).parentNode.offsetWidth + '~' + '' + '~' + this._grid.get_GridInfo().GridEditedDone + '~' + JSON.stringify(this._grid.editGrid.changedRowsInfo), this._success, this._failure, data + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + userContext + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((state != null && state.toString() === 'show') ? true : false) + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((popupState != null && popupState.toString() === 'show') ? true : false));
                    }
                    else {
                        this._service.ExecuteGridService(this._grid.get_CacheKey(), eventType, data + '~' + Sys.Serialization.JavaScriptSerializer.serialize(this._headerWidths) + '~' + this._grid.get_GridInfo().Height + '~' + this._grid.get_InfiniteScroll() + '~' + this._grid.get_PreviousStartIndex() + '~' + this._grid.get_AjaxStart() + '~' + this._grid.get_VerticalScrollPosition() + '~' + this._grid.get_GridInfo().JsonData + '~' + document.getElementById(this._grid.get_GridInfo().GridId).parentNode.offsetWidth + '~' + '' + '~' + this._grid.get_GridInfo().GridEditedDone, this._success, this._failure, data + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + userContext + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((state != null && state.toString() === 'show') ? true : false) + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((popupState != null && popupState.toString() === 'show') ? true : false));
                    }
                }
                else
                {
                    this._service.ExecuteGridService(this._grid.get_CacheKey(), eventType, data + '~' + Sys.Serialization.JavaScriptSerializer.serialize(this._headerWidths) + '~' + this._grid.get_GridInfo().Height + '~' + this._grid.get_InfiniteScroll() + '~' + this._grid.get_PreviousStartIndex() + '~' + this._grid.get_AjaxStart() + '~' + this._grid.get_VerticalScrollPosition() + '~' + this._grid.get_GridInfo().JsonData + '~' + document.getElementById(this._grid.get_GridInfo().GridId).parentNode.offsetWidth + '~' + '' , this._success, this._failure, data + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + userContext + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((state != null && state.toString() === 'show') ? true : false) + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((popupState != null && popupState.toString() === 'show') ? true : false));
                }
            }
            this._grid.serviceInProgress = true;
        }
        else if (eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_AUDIT_GRID_DATA) {
            this._service.ExecuteGridService(this._grid.get_CacheKey(), eventType, data + '~' + Sys.Serialization.JavaScriptSerializer.serialize(this._headerWidths) + '~' + this._grid.get_GridInfo().Height + '~' + this._grid.get_InfiniteScroll() + '~' + this._grid.get_PreviousStartIndex() + '~' + this._grid.get_AjaxStart() + '~' + this._grid.get_VerticalScrollPosition() + '~' + this._grid.get_GridInfo().JsonData + '~' + document.getElementById(this._grid.get_GridInfo().GridId).parentNode.offsetWidth + '~' + '', this._success, this._failure, data + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + userContext + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((state != null && state.toString() === 'show') ? true : false) + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((popupState != null && popupState.toString() === 'show') ? true : false));
            this._grid.serviceInProgress = true;
        }
        else {
            if (this._grid.editGrid != null) {
                if (this._grid.editGrid.changedRowsInfo.length > 0) {
                    this._service.ExecuteGridService(this._grid.get_CacheKey(), eventType, data + '~' + Sys.Serialization.JavaScriptSerializer.serialize(this._headerWidths) + '~' + this._grid.get_GridInfo().Height + '~' + this._grid.get_InfiniteScroll() + '~' + this._grid.get_PreviousStartIndex() + '~' + this._grid.get_AjaxStart() + '~' + this._grid.get_VerticalScrollPosition() + '~' + this._grid.get_GridInfo().JsonData + '~' + document.getElementById(this._grid.get_GridInfo().GridId).parentNode.offsetWidth + '~' + '' + '~' + this._grid.get_GridInfo().GridEditedDone + '~' + JSON.stringify(this._grid.editGrid.changedRowsInfo), this._success, this._failure, data + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + userContext + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((state != null && state.toString() === 'show') ? true : false) + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((popupState != null && popupState.toString() === 'show') ? true : false));
                }
                else {
                    this._service.ExecuteGridService(this._grid.get_CacheKey(), eventType, data + '~' + Sys.Serialization.JavaScriptSerializer.serialize(this._headerWidths) + '~' + this._grid.get_GridInfo().Height + '~' + this._grid.get_InfiniteScroll() + '~' + this._grid.get_PreviousStartIndex() + '~' + this._grid.get_AjaxStart() + '~' + this._grid.get_VerticalScrollPosition() + '~' + this._grid.get_GridInfo().JsonData + '~' + document.getElementById(this._grid.get_GridInfo().GridId).parentNode.offsetWidth + '~' + '' + '~' + this._grid.get_GridInfo().GridEditedDone, this._success, this._failure, data + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + userContext + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((state != null && state.toString() === 'show') ? true : false) + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((popupState != null && popupState.toString() === 'show') ? true : false));
                }
            }
            else {
                this._service.ExecuteGridService(this._grid.get_CacheKey(), eventType, data + '~' + Sys.Serialization.JavaScriptSerializer.serialize(this._headerWidths) + '~' + this._grid.get_GridInfo().Height + '~' + this._grid.get_InfiniteScroll() + '~' + this._grid.get_PreviousStartIndex() + '~' + this._grid.get_AjaxStart() + '~' + this._grid.get_VerticalScrollPosition() + '~' + this._grid.get_GridInfo().JsonData + '~' + document.getElementById(this._grid.get_GridInfo().GridId).parentNode.offsetWidth + '~' + '' + '~' + this._grid.get_GridInfo().GridEditedDone, this._success, this._failure, data + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + userContext + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((state != null && state.toString() === 'show') ? true : false) + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((popupState != null && popupState.toString() === 'show') ? true : false));
            }
            this._grid.serviceInProgress = true;
        }
    },

    _onSuccess: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_onSuccess(resultData, eventArg) {
        /// <param name="resultData" type="Object">
        /// </param>
        /// <param name="eventArg" type="Object">
        /// </param>
        this._grid.serviceInProgress = false;
        this._grid._isRendered = true;
        if (eventArg.toString().split(com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD)[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING)
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.body, 'click', Function.createDelegate(this._grid.upperHeader, this._grid.upperHeader.clickedOnBodyHandler));
        this.cache['resultData'] = resultData;
        this.cache['eventArg'] = eventArg;
        var serverData = resultData.toString().split(com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD);
        var result = serverData[0];
        if (result.toString() !== '') {
            this.cache['resultHTML'] = result;
        }
        var eventArgs = eventArg.toString().split(com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD);
        if (document.getElementById(this._grid.get_id() + 'gridEmptyDiv') != null) {
            document.getElementById(this._grid.get_id() + 'gridEmptyDiv').innerHTML = '';
        }
        if (result === '!') {
			var GridExtraInfo = Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1]);
			this._grid.set_CacheKey(GridExtraInfo.Cachekey);
            this._grid.get_element().style.display = 'none';
            if (this._grid.get_GridInfo().EmptyGridText == null || this._grid.get_GridInfo().EmptyGridText === '') {
                this._grid.get_GridInfo().EmptyGridText = '<div style=\"border:1px solid #ccc;width:99%;padding:5px;font-weight:bold;\">There are no records in the grid.</div>';
            }
            var element = document.getElementById(this._grid.get_id() + 'gridEmptyDiv');
            if (element != null) {
                this._grid.get_element().parentNode.removeChild(element);
            }
            element = this._grid.elementHelper.get_divElement();
            element.id = this._grid.get_id() + 'gridEmptyDiv';
            element.innerHTML = this._grid.get_GridInfo().EmptyGridText;
            this._grid.get_element().parentNode.appendChild(element);
            var serviceInfo = this._getServiceInfo(result.toString(), serverData[1], eventArgs[0], eventArgs[1]);
            this._manageServiceCompleted(serviceInfo);
            return;
        }
        var GridExtraInfo = Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1]);
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_EDIT_AUDIT) {
            this._MakeEditAuditGird(GridExtraInfo);
            return null;
        }
        
        this._grid.get_GridInfo().ColumnList = GridExtraInfo.ColumnList;
        this._grid.get_GridInfo().ColumnsToHide = GridExtraInfo.ColumnsToHide;
        this._grid.get_GridInfo().GridEditedDone = GridExtraInfo.GridEditedDone;
        if (this._grid.get_GridInfo().DistributionSuggestion)
        {
            this._grid.get_GridInfo().MaskingSuggestionInfo = GridExtraInfo.MaskingSuggestionInfo;
        }
       
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_DEFAULT_VIEW) {
            this._grid.get_GridInfo().AllColumnList = GridExtraInfo.ColumnList;
			if (GridExtraInfo.GroupedSortedColumns.length > 0)  {
               for (var i = 0; i < GridExtraInfo.ColumnRealNamesList.length; i++) {
                   this._grid.group._columnIndexAndNameMap[i] = GridExtraInfo.ColumnRealNamesList[i];
               }
            }
            this._grid.get_GridInfo().uniqueValuesForColumn = Sys.Serialization.JavaScriptSerializer.serialize(GridExtraInfo.UniqueValuesForColumn);
            this._grid.get_GridInfo().searchInfo = Sys.Serialization.JavaScriptSerializer.serialize(GridExtraInfo.searchInfo);
        }
        this._grid.get_GridInfo().NumericColumnName = GridExtraInfo.NumericColumnName;
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING) {
            if (!this._grid.get_GridInfo().IsMasterChildGrid) {
                this._grid.upperHeader.createGroupingDiv();
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION_WITHOUT_LAYOUT || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RANKING_COLUMN_INFO || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_COFIGURATION_WITH_NEW_LAYOUT || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION) {
            document.getElementById(this._grid.get_id() + '_upperHeader_Div').style.opacity = '1';
        }
        if (!this._grid._isRefreshWithCache) {
            this._grid.get_GridInfo().KnockOutJsonDataForScroll = GridExtraInfo.KnockOutJsonDataForScroll;
            this._grid.get_GridInfo().KnockoutJsonData = GridExtraInfo.knockOutJsonData;
            this._grid.get_GridInfo().KnockOutJsonDataPreviousRecords = GridExtraInfo.KnockOutJsonDataPreviousRecords;
        }
        if (this._grid.get_element() != null) {
            this._grid.get_element().style.display = '';
        }
        this._grid.get_GridInfo().checkedRowIndices = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).CheckedRowIndices;
        this._grid.get_GridInfo().ViewColumnsClone = GridExtraInfo.ColumnMappingInfo;
        this._grid.get_GridInfo().GridCustomFormatMapping = GridExtraInfo.GridCustomFormatMapping;

        var doHeaderRecreation = (this._isHeaderRecreationRequired(eventArgs[1]) && (!this._grid.isMethodRefereshFromClient)) || this._grid.manageHeader._isResized;
        this._grid.manageHeader._isResized = false;
        this._managePreviouslySelectedCheckBox(eventArgs[1]);
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXECUTE_RULE) {
            Array.clear(this._grid.editGrid.matchedTokenRuleList);
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_ROW_UNSELECTED_ALL) {
            var timeOut = 0;
            timeOut = window.setTimeout(Function.createDelegate(this, function () {
                window.clearTimeout(timeOut);
                if (this._grid.manageEvents._isDblClicked && !this._grid.clientDataController._isCellUnSelectedCalled) {
                    this._grid.manageEvents._isDblClicked = false;
                }
                else {
                    this._grid.clientDataController._isCellUnSelectedCalled = false;
                    this._runClientEngine(serverData, result, eventArgs, doHeaderRecreation);
                    if (Sys.Browser.name === com.ivp.rad.rscriptutils.RSConstants.interneT_EXPLORER) {
                        document.selection.empty();
                    }
                }
                this._grid.elementInfo.get_loading().style.display = 'none';
                com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(false);
                if (Sys.Browser.name === 'Microsoft Internet Explorer') {
                    if (Sys.Browser.version > 8) {
                        this._grid.get_GridInfo().WheelStep = 2;
                    }
                    else if (this._grid.get_GridInfo().WheelStep !== 0.2 && Sys.Browser.version === 8) {
                        this._grid.get_GridInfo().WheelStep = 2;
                    }
                }
                else {
                    this._grid.get_GridInfo().WheelStep = 2;
                }
                var bodyDivWidth = eval('$(\"#' + this._grid.get_id() + '\").find(\"#' + this._grid.get_id() + '_repeatedBodyDiv\").width()');
                if (this._grid.get_GridInfo().RequireScrollOnFrozenBody) {
                    var width = eval('$(\"#' + this._grid.get_id() + '\").width()') - 10;
                    var frozenDivWidth = eval('$(\"#' + this._grid.get_id() + '\").find(\"#' + this._grid.get_id() + '_frozen_newbodyDiv\").width()');
                    if (frozenDivWidth > (width / 2)) {
                        if (bodyDivWidth < (width / 2)) {
                            document.getElementById(this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv').style.width = (width - bodyDivWidth - 26) + 'px';
                            document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv').parentNode.style.width = (width - bodyDivWidth - 26) + 'px';
                        }
                        else {
                            document.getElementById(this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv').style.width = (width / 2) + 'px';
                            document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv').parentNode.style.width = (width / 2) + 'px';
                        }
                    }
                }
                if (this._grid.get_InfiniteScroll()) {
                    this._grid.set_AjaxStart(false);
                    this._grid.set_InfiniteScroll(false);
                    if (this._grid.get_ScrollDir() === com.ivp.rad.controls.neogrid.scripts.ScrollDirection.DOWN) {
                        eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollTop(' + this._grid.get_ScrollPosition() + ')');
                        eval('$(\"#' + this._grid.get_id() + '_frozen_bodyDiv' + '\" ).scrollTop(' + this._grid.get_ScrollPosition() + ')');
                        eval('$(\"#' + this._grid.get_id() + '_frozen_newbodyDiv' + '\" ).scrollTop(' + this._grid.get_ScrollPosition() + ')');
                    }
                    this._grid.set_ScrollDir(com.ivp.rad.controls.neogrid.scripts.ScrollDirection.NONE);
                }
                this._resetGridPosition(eventArgs[1]);
                this._grid.set_PreviousBodyWidth(this._grid.elementInfo.get_bodyInnerDiv().offsetWidth);
            }), 500);
        }
        else {
            this._runClientEngine(serverData, result, eventArgs, doHeaderRecreation);
            this._grid.elementInfo.get_loading().style.display = 'none';
            if (this._grid.get_GridInfo().Height.toString().indexOf("px") > -1) {
                this._grid.elementInfo.get_bodyInnerDiv().style.height = this._grid.get_GridInfo().Height;
                this._grid.elementInfo.get_frozenBodyDiv().style.height = this._grid.get_GridInfo().Height;
                document.getElementById(this._grid.get_id() + '_frozen_newbodyDiv').style.height = this._grid.get_GridInfo().Height;
            }
            else {
                this._grid.elementInfo.get_bodyInnerDiv().style.height = this._grid.get_GridInfo().Height + "px";
                this._grid.elementInfo.get_frozenBodyDiv().style.height = this._grid.get_GridInfo().Height + "px";
                document.getElementById(this._grid.get_id() + '_frozen_newbodyDiv').style.height = this._grid.get_GridInfo().Height + "px";

            }
            this._grid.manageEvents.forVerticalScroll();
            this._grid.manageEvents.mouseHover();
            this._grid.manageEvents.frozenScrollPart();
            //this._grid.manageEvents.checkBoxScrollPart();
           
            var ellipsisDivs = $($($("#RADXLGridPosition_repeatedBodyDiv").find(".GridColumnClass")));
            this._generateDataTail(ellipsisDivs, GridExtraInfo);
            ellipsisDivs = $($("#" + this._grid.get_id() + "_EventsBodyDivHidden").find("#" + this._grid.get_id() + "_repeat").find(".GridColumnClass"));
            this._generateDataTail(ellipsisDivs, GridExtraInfo);
            ellipsisDivs = $($("#" + this._grid.get_id() + "_EventsBodyDivHidden").find("#" + this._grid.get_id() + "_repeatnewFrozen").find(".GridColumnClass"));
            this._generateDataTail(ellipsisDivs, GridExtraInfo);
            ellipsisDivs = $($("#" + this._grid.get_id() + "_EventsBodyDivHiddenUp").find("#" + this._grid.get_id() + "_repeatnewFrozenUp").find(".GridColumnClass"));
            this._generateDataTail(ellipsisDivs, GridExtraInfo);
            ellipsisDivs = $($("#" + this._grid.get_id() + "_EventsBodyDivHiddenUp").find("#" + this._grid.get_id() + "_repeatUp").find(".GridColumnClass"));
            this._generateDataTail(ellipsisDivs, GridExtraInfo);
            ellipsisDivs = $($("#" + this._grid.get_id() + "_EventsBodyDiv").find("#" + this._grid.get_id() + "_repeatednewFrozenDiv").find(".GridColumnClass"));
            this._generateDataTail(ellipsisDivs, GridExtraInfo);
            //ellipsisDivs = $("#" + this._grid.get_id() + "_headerDiv_Table").find(".xlneogroupDiv");
            //this._generateDataTail(ellipsisDivs, GridExtraInfo);

            //            if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT) {
            //                if (this._grid.get_ScrollDir() === com.ivp.rad.controls.neogrid.scripts.ScrollDirection.UP) {
            //                    eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollTop(' + 3 + ')');
            //                    eval('$(\"#' + this._grid.get_id() + '_frozen_bodyDiv' + '\" ).scrollTop(' + 3 + ')');
            //                    eval('$(\"#' + this._grid.get_id() + '_frozen_newbodyDiv' + '\" ).scrollTop(' + 3 + ')');
            //                }
            //            }
			if (this._grid.get_GridInfo().Height.toString().indexOf("px") > -1) {
                if($("#" + this._grid.get_GridInfo().GridId + "_repeatedBodyDiv")[0].clientHeight > parseInt(this._grid.get_GridInfo().Height.toString().substring(0, this._grid.get_GridInfo().Height.toString().indexOf("px"))))
                {
                    $("#" + this._grid.get_GridInfo().GridId + "_headerDiv")[0].style.marginRight = "10px";
                }
            }
            else
            {
                if ($("#" + this._grid.get_GridInfo().GridId + "_repeatedBodyDiv")[0].clientHeight > parseInt(this._grid.get_GridInfo().Height.toString())){
                    $("#" + this._grid.get_GridInfo().GridId + "_headerDiv")[0].style.marginRight = "10px";
                }
            }
            com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(false);
        }
        if (this._grid.get_GridInfo().DataInsight == true)
        {
        //    if (eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RESET_TO_DEFAULT || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MULTIPLE_GROUPS || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW && $("#datasourceId").length > 0)
        //    {
        //        $("#datasourceId").Insights("destroy");
        //        //$("#" + this._grid.get_GridInfo().GridId).parent().append('<div class="datasourceClass"id ="datasourceId"style="width:400px;height:754px;border:1px solid lightgray;position: fixed;z - index: 1001;top: 48px;background - color: #f6f6f6;color: #777777;box - shadow: 2px 32px 9px 3px rgb(179, 168, 168);"></div>)');
        //        $("#datasourceId").Insights({ "GridId": this._grid.get_GridInfo().GridId });
        //        $("#datasourceId").data("custom-Insights")._BindCharts();
        //    }
        //    else if (eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RESET_TO_DEFAULT || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MULTIPLE_GROUPS || eventArgs[1] == com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW && $("#datasourceId").length == 0)
        //    {
            //        //$("#" + this._grid.get_GridInfo().GridId).css({ "width": $("#" + this._grid.get_GridInfo().GridId).parent().width() - 354 });
                if ($("#datasourceId") != null)
                {
                    $("#datasourceId").remove();
                }
                $("#" + this._grid.get_GridInfo().GridId).parent().append('<div class="datasourceClass"id ="datasourceId" style="width:350px;height:' + $("#" + this._grid.get_GridInfo().GridId).height() + 'px;right:0px;border:1px solid lightgray;position: fixed;z - index: 1001;top: 80px;background - color: #f6f6f6;color: #777777;box - shadow: 2px 32px 9px 3px rgb(179, 168, 168);"></div>)');
                $("#datasourceId").hide();
                $("#datasourceId").Insights({ "GridId": this._grid.get_GridInfo().GridId, "ServiceUrl": iago.baseUrl + "/Resources/Services" });
        //    }

        }
        if (this._grid.get_GridInfo().CheckBoxInfo != null && eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\").height()') !== eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatBodyDivHead\").height()')) {
            //            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\").height($(\"#' + this._grid.get_GridInfo().GridId + '_repeatBodyDivHead\")[0].scrollHeight)');
            //            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatBodyDivHead\").height($(\"#' + this._grid.get_GridInfo().GridId + '_repeatBodyDivHead\")[0].scrollHeight)');
            //            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\").height($(\"#' + this._grid.get_GridInfo().GridId + '_repeatBodyDivHead\")[0].scrollHeight)');
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RULE_BASED_COLORING) {
            document.getElementById(this._grid.get_id() + '_RuleDivID').style.display = '';
        }
        if (eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED && eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED) {
            this._grid.get_GridInfo().groupHeaderToCheck = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).CheckGroupHeaderRows;
            this._grid.get_GridInfo().groupHeaderToUnCheck = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).UnCheckGroupHeaderRows;
            this._grid.get_GridInfo().rowsToCheck = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).RowsToCheck;
            this._grid.get_GridInfo().rowsToUnCheck = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).RowsToUnCheck;
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_GROUP_HEADER_CHECKBOX_SELECTED || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED) {
            this._checkGroupHeaderandRows(true, eventArgs[1]);
        }
        else if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_GROUP_HEADER_CHECKBOX_UNSELECTED || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED_ALL) {
            this._checkGroupHeaderandRows(false, eventArgs[1]);
        }
        else {
            this._checkGroupHeaderandRowsCommon(eventArgs[1]);
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXECUTE_RULE || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_DEFAULT_VIEW || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT) {
            Array.clear(this._grid.editGrid.matchedTokenRuleList);
            this._grid.editGrid.computedColumns = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).ComputedColumns;
            var columns = window.Object.keys((Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).ComputedColumns);
            for (var i = 0; i < columns.length; i++) {
                if (window.jQuery(this._grid.elementInfo.get_fluidHeaderDiv()).find('DIV[id=' + this._grid.get_GridInfo().GridId + '_computedColumn_' + columns[i].toString().replace(new RegExp('[ ]', 'gi'), '_') + ']') != null) {
                    if (window.jQuery(this._grid.elementInfo.get_fluidHeaderDiv()).find('DIV[id=' + this._grid.get_GridInfo().GridId + '_computedColumn_' + columns[i].toString().replace(new RegExp('[ ]', 'gi'), '_') + ']')[0] != null) {
                        window.jQuery(this._grid.elementInfo.get_fluidHeaderDiv()).find('DIV[id=' + this._grid.get_GridInfo().GridId + '_computedColumn_' + columns[i].toString().replace(new RegExp('[ ]', 'gi'), '_') + ']')[0].className = 'xlcomputedColumn';
                    }
                }
            }
            var array = [];
            array = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).EditableColumns;
            for (var i = 0; i < array.length; i++) {
                if (!Array.contains(this._grid.get_GridInfo().EditableColumns, array[i].toString())) {
                    Array.add(this._grid.get_GridInfo().EditableColumns, array[i].toString());
                }
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RANKING_COLUMN_INFO) {
            if (document.getElementById(this._grid.get_id() + '_rankingMainDiv') != null) {
                var div = document.getElementById(this._grid.get_id() + '_rankingMainDiv');
                div.style.display = 'None';
            }
        }
        if (eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_LIST && eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED && eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED && eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL && eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED_ALL && eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_ROW_UNSELECTED_ALL && eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_RULE_INTELLISENSE) {
            if (Sys.Browser.name === 'Microsoft Internet Explorer') {
                if (Sys.Browser.version > 8) {
                    this._grid.get_GridInfo().WheelStep = 2;
                }
                else if (this._grid.get_GridInfo().WheelStep !== 0.2 && Sys.Browser.version === 8) {
                    this._grid.get_GridInfo().WheelStep = 2;
                }
            }
            else {
                this._grid.get_GridInfo().WheelStep = 2;
            }
            var bodyDivWidth = eval('$(\"#' + this._grid.get_id() + '\").find(\"#' + this._grid.get_id() + '_repeatedBodyDiv\").width()');
            if (this._grid.get_GridInfo().RequireScrollOnFrozenBody) {
                var width = eval('$(\"#' + this._grid.get_id() + '\").width()') - 10;
                var frozenDivWidth = eval('$(\"#' + this._grid.get_id() + '\").find(\"#' + this._grid.get_id() + '_frozen_newbodyDiv\").width()');
                if (frozenDivWidth > (width / 2)) {
                    if (bodyDivWidth < (width / 2)) {
                        if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                            document.getElementById(this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv').style.width = (width - bodyDivWidth - 26) + 'px';
                            document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv').parentNode.style.width = (width - bodyDivWidth - 26) + 'px';
                        }
                        else {
                            document.getElementById(this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv').style.width = (width - bodyDivWidth) + 'px';
                            document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv').parentNode.style.width = (width - bodyDivWidth) + 'px';
                        }
                    }
                    else {
                        document.getElementById(this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv').style.width = (width / 2) + 'px';
                        document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv').parentNode.style.width = (width / 2) + 'px';
                    }
                }
            }
            this._resetGridPosition(eventArgs[1]);
            this._grid.set_PreviousBodyWidth(this._grid.elementInfo.get_bodyInnerDiv().offsetWidth);
        }
        if (this._grid.get_InfiniteScroll()) {
            if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_LIST || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED_ALL || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_ROW_UNSELECTED_ALL || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_RULE_INTELLISENSE) {
                var bodyDivWidth = eval('$(\"#' + this._grid.get_id() + '\").find(\"#' + this._grid.get_id() + '_repeatedBodyDiv\").width()');
                if (this._grid.get_GridInfo().RequireScrollOnFrozenBody) {
                    var width = eval('$(\"#' + this._grid.get_id() + '\").width()') - 10;
                    var frozenDivWidth = eval('$(\"#' + this._grid.get_id() + '\").find(\"#' + this._grid.get_id() + '_frozen_newbodyDiv\").width()');
                    if (frozenDivWidth > (width / 2)) {
                        if (bodyDivWidth < (width / 2)) {
                            document.getElementById(this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv').style.width = (width - bodyDivWidth - 26) + 'px';
                            document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv').parentNode.style.width = (width - bodyDivWidth - 26) + 'px';
                        }
                        else {
                            document.getElementById(this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv').style.width = (width / 2) + 'px';
                            document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv').parentNode.style.width = (width / 2) + 'px';
                        }
                    }
                }
                this._resetGridPosition(eventArgs[1]);
                this._grid.set_PreviousBodyWidth(this._grid.elementInfo.get_bodyInnerDiv().offsetWidth);
            }
            this._grid.set_AjaxStart(false);
            this._grid.set_InfiniteScroll(false);
            if (this._grid.get_ScrollDir() === com.ivp.rad.controls.neogrid.scripts.ScrollDirection.DOWN) {
                eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollTop(' + this._grid.get_GridInfo().lastScrollTop + ')');
                eval('$(\"#' + this._grid.get_id() + '_frozen_bodyDiv' + '\" ).scrollTop(' + this._grid.get_GridInfo().lastScrollTop + ')');
                eval('$(\"#' + this._grid.get_id() + '_frozen_newbodyDiv' + '\" ).scrollTop(' + this._grid.get_GridInfo().lastScrollTop + ')');
            }
            this._grid.set_ScrollDir(com.ivp.rad.controls.neogrid.scripts.ScrollDirection.NONE);
            var serviceInfoChecked = this._getServiceInfo(result.toString(), serverData[1], eventArgs[0], eventArgs[1]);
            for (var i = 0; i < serviceInfoChecked.serializedInfo.CheckedRowIndices.length; i++) {
                var element = document.getElementById(this._grid.get_id() + '_' + serviceInfoChecked.serializedInfo.CheckedRowIndices[i]);
                if (element != null) {
                    document.getElementById(this._grid.get_id() + '_' + serviceInfoChecked.serializedInfo.CheckedRowIndices[i]).childNodes[0].childNodes[0].setAttribute('checked', 'checked');
                    document.getElementById(this._grid.get_id() + '_' + serviceInfoChecked.serializedInfo.CheckedRowIndices[i]).className = 'xlneocheckedRow xlneocommonrowcss';
                }
            }
        }
		$('.xlMathematialFooterBody').width($("#" + this._grid.get_GridInfo().GridId + "_repeatBodyDivHead").width());
if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_DEFAULT_VIEW || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP_REMOVE_ALL || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MULTIPLE_GROUPS) {
            this._grid.get_GridInfo().GroupHeaderInfo = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).GroupHeaderInfo;
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ADD_COLUMNS) {
            var array = [];
            array = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).EditableColumns;
            for (var i = 0; i < array.length; i++) {
                if (!Array.contains(this._grid.get_GridInfo().EditableColumns, array[i].toString())) {
                    Array.add(this._grid.get_GridInfo().EditableColumns, array[i].toString());
                }
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_LIST || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE) {
            this._grid.get_GridInfo().CurrentFilteredColumn = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).CurrentFilteredColumn;
        }
        if (eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PASTE_DATA_FROM_EXCEL) {
            if (document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()) != null) {
                document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className = 'xlneoCopyDataFromExcel';
                document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).title = 'Enable Copy Data From Excel';
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH) {
            if (this._grid.get_GridInfo().IsAdvanceSearch) {
                if (document.getElementById(this._grid.get_id() + '_SearchInMainGrid').className === 'EntSearchMainSearchBox SearchBoxHidden') {
                    (document.getElementById(this._grid.get_id() + '_txtSearch')).value = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).SearchEnterPriseSearch;
                    if (document.getElementById(this._grid.get_id() + '_headerDiv') != null) {
                        document.getElementById(this._grid.get_id() + '_headerDiv').style.opacity = '1';
                    }
                    if (document.getElementById(this._grid.get_id() + '_bodyDiv') != null) {
                        document.getElementById(this._grid.get_id() + '_bodyDiv').style.opacity = '1';
                    }
                    if (document.getElementById(this._grid.get_id() + '_footerDiv') != null) {
                        document.getElementById(this._grid.get_id() + '_footerDiv').style.opacity = '1';
                    }
                    if (document.getElementById('EntSearchreduceWidth') != null) {
                        document.getElementById('EntSearchreduceWidth').style.opacity = '1';
                    }
                    if (document.getElementById('RightUpperHeaderMainDiv') != null) {
                        document.getElementById('RightUpperHeaderMainDiv').style.opacity = '1';
                    }
                    var search = (eval('$(\"#' + this._grid.get_GridInfo().GridId + '_txtSearch\")'));
                    var uniqueValuesForColumn = this._grid.get_GridInfo().uniqueValuesForColumn;
                    var searchInfo = this._grid.get_GridInfo().searchInfo;
                    eval('RADNeoGridSearch(search[0][\"id\"],searchInfo,uniqueValuesForColumn)');
                }
            }
        }
        if (eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH) {
            if (this._grid.get_GridInfo().IsAdvanceSearch) {
                if (eval('$(\"#' + this._grid.get_GridInfo().GridId + '_SearchInMainGridParent\").height()') !== 0) {
                    (document.getElementById(this._grid.get_id() + '_txtSearch')).value = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).SearchEnterPriseSearch;
                    if (document.getElementById(this._grid.get_id() + '_headerDiv') != null) {
                        document.getElementById(this._grid.get_id() + '_headerDiv').style.opacity = '1';
                    }
                    if (document.getElementById(this._grid.get_id() + '_bodyDiv') != null) {
                        document.getElementById(this._grid.get_id() + '_bodyDiv').style.opacity = '1';
                    }
                    if (document.getElementById(this._grid.get_id() + '_footerDiv') != null) {
                        document.getElementById(this._grid.get_id() + '_footerDiv').style.opacity = '1';
                    }
                    if (document.getElementById('EntSearchreduceWidth') != null) {
                        document.getElementById('EntSearchreduceWidth').style.opacity = '1';
                    }
                    if (document.getElementById('RightUpperHeaderMainDiv') != null) {
                        document.getElementById('RightUpperHeaderMainDiv').style.opacity = '1';
                    }
                    var search = (eval('$(\"#' + this._grid.get_GridInfo().GridId + '_txtSearch\")'));
                    var uniqueValuesForColumn = this._grid.get_GridInfo().uniqueValuesForColumn;
                    var searchInfo = this._grid.get_GridInfo().searchInfo;
                    eval('RADNeoGridSearch(search[0][\"id\"],searchInfo,uniqueValuesForColumn)');
                }
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_SELECTED) {
            if (GridExtraInfo.FooterAnimation === com.ivp.rad.controls.neogrid.scripts.info.FooterAnimation.animate) {
                eval('$(\'.wrapper\').addClass(\'wrapperwidth\')');
                eval('$(\'.contents\').addClass(\'contentswidth\')');
                eval('$(\'.inner\').addClass(\'innerwidth\')');
                eval('$(\'.arrow\').addClass(\'arrowLeft\')');
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION) {
            if (document.getElementById(this._grid.get_id() + '_mergerParentDiv') != null) {
                if (document.getElementById(this._grid.get_id() + '_mergerParentDiv').style.display === '') {
                    document.getElementById(this._grid.get_id() + '_mergerParentDiv').style.display = 'none';
                }
            }
        }
        this._grid.get_GridInfo().ColumnList = GridExtraInfo.ColumnList;
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_UNSELECTED) {
            if (GridExtraInfo.FooterAnimation === com.ivp.rad.controls.neogrid.scripts.info.FooterAnimation.zeroWidthAnimation) {
                eval('$(\'.wrapper\').removeClass(\'wrapperwidth\')');
                eval('$(\'.contents\').removeClass(\'contentswidth\')');
                eval('$(\'.inner\').removeClass(\'innerwidth\')');
                eval('$(\'.arrow\').removeClass(\'arrowLeft\')');
            }
        }
        eval('$(\"#' + this._grid.elementIDManager.get_bodyInnerDiv() + '\").find(\'td[formula]\').each(function(){$(this).qtip({content:$(this).attr(\'formula\'),position: {my: \'center right\',at: \'center left\',target:$(this)},show: \'mouseover\',hide: \'mouseout\'})});');
        document.getElementById(this._grid.get_id()).style.backgroundImage = 'none';
        eval('diff=new Date().getTime()-time');
        if (this._grid.get_GridInfo().IsMasterChildGrid) {
            if (this._grid.get_GridInfo().GridId !== this._grid.get_GridInfo().MasterGridId) {
                document.getElementById(this._grid.elementIDManager.get_fluidHeaderDivID()).style.width = eval('$(\'#' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').width()') + 'px';
            }
        }
        for (var i = 0; i < this._grid.sort.sortedColumns.length; i++) {
            if (document.getElementById(this._grid.get_id() + '_' + (this._grid.sort.sortedColumns[i]).ColumnName.toString().replace(new RegExp('[ ]', 'gi'), '_') + '_Sort') != null) {
                document.getElementById(this._grid.get_id() + '_' + (this._grid.sort.sortedColumns[i]).ColumnName.toString().replace(new RegExp('[ ]', 'gi'), '_') + '_Sort').style.display = '';
            }
            if (document.getElementById(this._grid.get_id() + '_' + (this._grid.sort.sortedColumns[i]).ColumnName.toString().replace(new RegExp('[ ]', 'gi'), '_') + '_FilterListShow') != null) {
                document.getElementById(this._grid.get_id() + '_' + (this._grid.sort.sortedColumns[i]).ColumnName.toString().replace(new RegExp('[ ]', 'gi'), '_') + '_FilterListShow').style.paddingTop = '10px';
            }
        }
        if ((Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).IsMasterGridSearch) {
            var chilGridMappedWidth = {};
            if (this._grid.get_GridInfo().RequireColumnAlign) {
                chilGridMappedWidth = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).ChildGridMappedWidth;
            }
            var masterChildMapping = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).MasterChildMapping;
            var clientSideData = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).ChildGridData;
            var lastChildMappingList = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).LastChildMappingList;
            this._bindDetailsGrid(clientSideData, masterChildMapping, (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).IsMasterGridSearch, chilGridMappedWidth, lastChildMappingList);
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_SORT || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT_REMOVE_ALL || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE_ALL || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP_REMOVE_ALL) {
            this._grid.manageEvents.createClearFunctionalityDiv();
        }
        else {
            if (document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv') != null) {
                document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv').style.display = 'none';
            }
        }
        if ((this._grid.group._groupedColumns.length > 0 || this._grid.sort.sortedColumns.length > 0 || this._grid.filter.filteredColumns.length > 0 || this._grid.get_DefaultGroupedAndSortedColumns().length !== 0 || (this._grid.get_GridInfo().RankingColumnInfo != null && this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null && this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo.length > 0))) {
            if (document.getElementById(this._grid.get_id() + '_btnClearFunctionality') != null) {
                document.getElementById(this._grid.get_id() + '_btnClearFunctionality').style.display = '';
            }
        }
        else {
            if (document.getElementById(this._grid.get_id() + '_btnClearFunctionality') != null) {
                document.getElementById(this._grid.get_id() + '_btnClearFunctionality').style.display = 'none';
            }
        }
        if (document.getElementById(this._grid.get_id() + '_ConfigurationSettings') != null) {
            document.getElementById(this._grid.get_id() + '_ConfigurationSettings').style.display = 'none';
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CUSTOM_FORMATTER) {
            if (document.getElementById(this._grid.get_id() + '_FormatMenuDiv') != null) {
                this._grid.get_element().parentNode.removeChild(document.getElementById(this._grid.get_id() + '_FormatMenuDiv'));
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION) {
            if (document.getElementById(this._grid.get_id() + '_showHideColumnsDiv') != null) {
                this._grid.get_element().parentNode.removeChild(document.getElementById(this._grid.get_id() + '_showHideColumnsDiv'));
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_CUSTOM_FORMATTING) {
            if (document.getElementById(this._grid.get_id() + '_FormatMenuDiv') != null) {
                this._grid.get_element().parentNode.removeChild(document.getElementById(this._grid.get_id() + '_FormatMenuDiv'));
            }
            this._grid.upperHeader.createFormatColumnMenu();
        }
        if (this._grid.get_GridInfo().IsMasterChildGrid) {
            if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING) {
                var MasterGridId = this._grid.get_GridInfo().MasterGridId;
                if (this._grid.get_GridInfo().IsMasterChildGrid) {
                    if (this._grid.get_GridInfo().GridId !== this._grid.get_GridInfo().MasterGridId) {
                        document.getElementById(this._grid.elementIDManager.get_fluidHeaderDivID()).style.width = eval('$(\'#' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').width()') + 'px';
                    }
                }
                var height = 0;
                if (this._grid.get_GridInfo().CurrentRowId !== '') {
                    height = eval('$(\"#' + this._grid.get_GridInfo().GridId + '\").height()') + 5;
                    if (eval('$find(MasterGridId).get_GridInfo().RequireEditGrid')) {
                        height += 11;
                    }
                    eval('$(\"#' + this._grid.get_GridInfo().CurrentRowId + 'fa-plus\").parent().height(' + (height + 22)+ ')');
                    var index = eval('$(\"#' + this._grid.get_GridInfo().CurrentRowId + 'fa-plus\").parent().index()');
                    eval('$($(\"#' + this._grid.get_GridInfo().ParentGridId + '_repeatedFrozenDiv\").children()[index]).height(height)');
                    if (eval('$find(MasterGridId).get_GridInfo().RequireEditGrid')) {
                        eval('$(document.getElementById(this._grid.elementIDManager.get_fluidHeaderDivID())).closest(\'.' + this._grid.get_GridInfo().xlneochildgridParent + '\').height($(document.getElementById(this._grid.elementIDManager.get_fluidHeaderDivID())).closest(\'.' + this._grid.get_GridInfo().xlneochildgridParent + '\').height() - 7).toString() + \'px\'');
                    }
                    else {
                        eval('$(document.getElementById(this._grid.elementIDManager.get_fluidHeaderDivID())).closest(\'.' + this._grid.get_GridInfo().xlneochildgridParent + '\').height($(document.getElementById(this._grid.elementIDManager.get_fluidHeaderDivID())).closest(\'.' + this._grid.get_GridInfo().xlneochildgridParent + '\').height() - 18).toString() + \'px\'');
                    }
                }
                var currentgridparentid = this._grid.get_GridInfo().ParentGridId;
                var currentgridID = this._grid.get_GridInfo().GridId;
                height = eval('$(\"#' + currentgridparentid + '\").height()');
                var rowHeight = 0;
                var rowid = '';
                if (currentgridparentid !== '') {
                    while (this._grid.get_GridInfo().MasterGridId !== currentgridparentid) {
                        rowid = eval('$find(\"' + currentgridparentid + '\").get_GridInfo().CurrentRowId');
                        rowHeight = height + 5;
                        if (eval('$find(MasterGridId).get_GridInfo().RequireEditGrid')) {
                            rowHeight += 11;
                        }
                        var bodyDivWidth = eval('$(\"#' + this._grid.get_id() + '\").find(\"#' + this._grid.get_id() + '_bodyDiv\").width()');
                        //eval('$(\"#' + rowid + '\").height(' + rowHeight + ')');
                        //eval('$(\"#' + this._grid.get_GridInfo().MasterGridId + '_repeatBodyDivHead\").find(\'#' + rowid + '\').height(' + rowHeight + ')');
						 eval('$(\"#' + this._grid.get_GridInfo().MasterGridId + '_repeatBodyDivHead\").find(\'#' + rowid + "fa-plus" + '\').parent().height(' + rowHeight + ')');
                        if (this._grid.get_GridInfo().RequireScrollOnFrozenBody) {
                            var width = eval('$(\"#' + this._grid.get_id() + '\").width()');
                            var frozenDivWidth = eval('$(\"#' + this._grid.get_id() + '\").find(\"#' + this._grid.get_id() + '_frozen_newbodyDiv\").width()');
                            if (frozenDivWidth > (width / 2)) {
                                if (bodyDivWidth < (width / 2)) {
                                    document.getElementById(this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv').style.width = (width - bodyDivWidth - 26) + 'px';
                                    document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv').parentNode.style.width = (width - bodyDivWidth - 26) + 'px';
                                }
                                else {
                                    document.getElementById(this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv').style.width = (width / 2) + 'px';
                                    document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv').parentNode.style.width = (width / 2) + 'px';
                                }
                            }
                        }
                        eval('$(document.getElementById(currentgridparentid)).closest(\'.' + this._grid.get_GridInfo().xlneochildgridParent + '\').height(' + (rowHeight - 21) + ')');
                        currentgridparentid = eval('$find(\"' + currentgridparentid + '\").get_GridInfo().ParentGridId');
                        height = eval('$(\"#' + currentgridparentid + '\").height()');
                        currentgridID = eval('$find(\"' + currentgridID + '\").get_GridInfo().ParentGridId');
                        document.getElementById(currentgridID + '_headerDiv').style.width = eval('$(\'#' + currentgridID + '_bodyDiv' + '\').width()') + 'px';
                    }
                }
                if (this._grid.get_GridInfo().MasterGridId !== '') {
                    eval('$(\"#' + this._grid.get_GridInfo().MasterGridId + '\").find(\"div #' + this._grid.get_GridInfo().MasterGridId + '_bodyDiv\").slimscrollHorizontal({height : \'' + eval('$find(\'' + this._grid.get_GridInfo().MasterGridId + '\').get_GridInfo().Height') + '\',scrollclick : ' + 'function(arg1,arg2,arg3) { $find(\'' + this._grid.get_GridInfo().MasterGridId + '\').footer._horizontalScrollClick(arg1,arg2,arg3); }' + ',draghorizonscroll : function() { $(\'#' + this._grid.get_GridInfo().MasterGridId + '_headerDiv' + '\').scrollLeft($(\'#' + this._grid.get_GridInfo().MasterGridId + '_bodyDiv' + '\').scrollLeft());}' + ',leftposition : \'' + eval('$find(\"' + this._grid.get_GridInfo().MasterGridId + '\").get_HorizontalScrollPosition()') + '\',railVisible: true,scrollTo : \'20px\',' + 'horizonxlgridid : \'' + this._grid.get_GridInfo().MasterGridId + '\'})');
                    eval('$(\"#' + this._grid.get_GridInfo().MasterGridId + '\").find(\"div #' + this._grid.get_GridInfo().MasterGridId + '_bodyDiv\").slimscroll({height : \'' + eval('$find(\'' + this._grid.get_GridInfo().MasterGridId + '\').get_GridInfo().Height') + '\',controlscroll : ' + 'function (a1,a2,a3,a4,a5,a6,a7,a8,a9) { $find(\'' + this._grid.get_GridInfo().MasterGridId + '\').footer._onWheel(a1,a2,a3,a4,a5,a6,a7,a8,a9); }' + ',controlclick : ' + 'function(a1,a2,a3) { $find(\'' + this._grid.get_GridInfo().MasterGridId + '\').footer._clickUpdate(a1,a2,a3); }' + ',dragscroll : function() { $(\'#' + this._grid.get_GridInfo().MasterGridId + '_frozen_bodyDiv' + '\').scrollTop($(\'#' + this._grid.get_GridInfo().MasterGridId + '_bodyDiv' + '\').scrollTop());}' + ',railVisible: true,' + 'getScrollBarHeight : ' + 'function (a1) { $find(\'' + this._grid.get_GridInfo().MasterGridId + '\').footer._getScrollBarHeight(a1); }' + ',setVerticalScroll : ' + 'function (a1) { $find(\'' + this._grid.get_GridInfo().MasterGridId + '\').footer._setVerticalScrollPosition(a1); }' + ',wheelStep: \'' + this._grid.get_GridInfo().WheelStep + '\',TopPosition: \'' + eval('$find(\'' + this._grid.get_GridInfo().MasterGridId + '\').get_VerticalScrollPosition()') + '\',xlgridid : \'' + this._grid.get_GridInfo().MasterGridId + '\'})');
                }
                if (MasterGridId !== '') {
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + MasterGridId + '\').elementInfo.get_element()'));
                    eval('$find(\'' + MasterGridId + '\').manageEvents.addEventHandler(\'' + MasterGridId + '\');');
                    if (eval('$find(MasterGridId).editGrid._isEditing')) {
                        eval('$find(_grid.GridInfo.GridId).editGrid.startEditing()');
                    }
                    eval('$(\"#' + rowid + '\").height(' + rowHeight + ')');
                    eval('$(\"#' + currentgridparentid + '\").find(\"div #' + currentgridparentid + '_bodyDiv\").slimscrollHorizontal({height : \'' + eval('$find(\'' + this._grid.get_GridInfo().ParentGridId + '\').get_GridInfo().Height') + '\',scrollclick : ' + 'function(arg1,arg2,arg3) { $find(\'' + currentgridparentid + '\').footer._horizontalScrollClick(arg1,arg2,arg3); }' + ',draghorizonscroll : function() { $(\'#' + this._grid.get_GridInfo().ParentGridId + '_headerDiv' + '\').scrollLeft($(\'#' + currentgridparentid + '_bodyDiv' + '\').scrollLeft()); $(\'#' + this._grid.elementIDManager.get_composedHeaderInnerDivID() + '\').scrollLeft($(\'#' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').scrollLeft());}' + ',leftposition : \'' + eval('$find(\"' + this._grid.get_GridInfo().ParentGridId + '\").get_HorizontalScrollPosition()') + '\',railVisible: true,scrollTo : \'20px\',' + 'horizonxlgridid : \'' + currentgridparentid + '\'})');
                    eval('$(\"#' + currentgridparentid + '\").find(\"div #' + currentgridparentid + '_bodyDiv\").slimscroll({height : \'' + eval('$find(\'' + this._grid.get_GridInfo().ParentGridId + '\').get_GridInfo().Height') + '\',controlscroll : ' + 'function (a1,a2,a3,a4,a5,a6,a7,a8,a9) { $find(\'' + currentgridparentid + '\').footer._onWheel(a1,a2,a3,a4,a5,a6,a7,a8,a9); }' + ',controlclick : ' + 'function(a1,a2,a3) { $find(\'' + currentgridparentid + '\').footer._clickUpdate(a1,a2,a3); }' + ',dragscroll : function() { $(\'#' + this._grid.get_GridInfo().ParentGridId + '_frozen_bodyDiv' + '\').scrollTop($(\'#' + currentgridparentid + '_bodyDiv' + '\').scrollTop());}' + ',railVisible: true,' + 'getScrollBarHeight : ' + 'function (a1) { $find(\'' + currentgridparentid + '\').footer._getScrollBarHeight(a1); }' + ',setVerticalScroll : ' + 'function (a1) { $find(\'' + currentgridparentid + '\').footer._setVerticalScrollPosition(a1); }' + ',wheelStep: \'' + this._grid.get_GridInfo().WheelStep + '\',TopPosition: \'' + eval('$find(\'' + this._grid.get_GridInfo().ParentGridId + '\').get_VerticalScrollPosition()') + '\',xlgridid : \'' + currentgridparentid + '\'})');
                    eval('$(document.getElementById(currentgridparentid)).closest(\'.' + this._grid.get_GridInfo().xlneochildgridParent + '\').height(' + (rowHeight - 21) + ')');
                    currentgridparentid = eval('$find(\"' + currentgridparentid + '\").get_GridInfo().ParentGridId');
                    height = eval('$(\"#' + currentgridparentid + '\").height()');
                    currentgridID = eval('$find(\"' + currentgridID + '\").get_GridInfo().ParentGridId');
                    document.getElementById(currentgridID + '_headerDiv').style.width = eval('$(\'#' + currentgridID + '_bodyDiv' + '\').width()') + 'px';
                }
                if (this._grid.get_GridInfo().MasterGridId !== '') {
                    eval('$(\"#' + this._grid.get_GridInfo().MasterGridId + '\").find(\"div #' + this._grid.get_GridInfo().MasterGridId + '_bodyDiv\").slimscrollHorizontal({height : \'' + eval('$find(\'' + this._grid.get_GridInfo().MasterGridId + '\').get_GridInfo().Height') + '\',scrollclick : ' + 'function(arg1,arg2,arg3) { $find(\'' + this._grid.get_GridInfo().MasterGridId + '\').footer._horizontalScrollClick(arg1,arg2,arg3); }' + ',draghorizonscroll : function() { $(\'#' + this._grid.get_GridInfo().MasterGridId + '_headerDiv' + '\').scrollLeft($(\'#' + this._grid.get_GridInfo().MasterGridId + '_bodyDiv' + '\').scrollLeft()); $(\'#' + this._grid.elementIDManager.get_composedHeaderInnerDivID() + '\').scrollLeft($(\'#' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').scrollLeft());}' + ',leftposition : \'' + eval('$find(\"' + this._grid.get_GridInfo().MasterGridId + '\").get_HorizontalScrollPosition()') + '\',railVisible: true,scrollTo : \'20px\',' + 'horizonxlgridid : \'' + this._grid.get_GridInfo().MasterGridId + '\'})');
                    eval('$(\"#' + this._grid.get_GridInfo().MasterGridId + '\").find(\"div #' + this._grid.get_GridInfo().MasterGridId + '_bodyDiv\").slimscroll({height : \'' + eval('$find(\'' + this._grid.get_GridInfo().MasterGridId + '\').get_GridInfo().Height') + '\',controlscroll : ' + 'function (a1,a2,a3,a4,a5,a6,a7,a8,a9) { $find(\'' + this._grid.get_GridInfo().MasterGridId + '\').footer._onWheel(a1,a2,a3,a4,a5,a6,a7,a8,a9); }' + ',controlclick : ' + 'function(a1,a2,a3) { $find(\'' + this._grid.get_GridInfo().MasterGridId + '\').footer._clickUpdate(a1,a2,a3); }' + ',dragscroll : function() { $(\'#' + this._grid.get_GridInfo().MasterGridId + '_frozen_bodyDiv' + '\').scrollTop($(\'#' + this._grid.get_GridInfo().MasterGridId + '_bodyDiv' + '\').scrollTop());}' + ',railVisible: true,' + 'getScrollBarHeight : ' + 'function (a1) { $find(\'' + this._grid.get_GridInfo().MasterGridId + '\').footer._getScrollBarHeight(a1); }' + ',setVerticalScroll : ' + 'function (a1) { $find(\'' + this._grid.get_GridInfo().MasterGridId + '\').footer._setVerticalScrollPosition(a1); }' + ',wheelStep: \'' + this._grid.get_GridInfo().WheelStep + '\',TopPosition: \'' + eval('$find(\'' + this._grid.get_GridInfo().MasterGridId + '\').get_VerticalScrollPosition()') + '\',xlgridid : \'' + this._grid.get_GridInfo().MasterGridId + '\'})');
                }
                if (MasterGridId !== '') {
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + MasterGridId + '\').elementInfo.get_element()'));
                    eval('$find(\'' + MasterGridId + '\').manageEvents.addEventHandler(\'' + MasterGridId + '\');');
                    if (eval('$find(MasterGridId).editGrid._isEditing')) {
                        eval('$find(_grid.GridInfo.GridId).editGrid.startEditing()');
                    }
                }
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_CHILD_GRID) {
            this._grid.get_GridInfo().ChildGridsToOpen = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).ChildGridsToOpen;
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_GRID_SEARCH) {
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.elementInfo.get_element(), 'keyup', Function.createDelegate(this._grid.manageEvents, this._grid.manageEvents.fireKeyUpHandler));
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP) {
            if (!this._grid.get_GridInfo().CollapseAllGroupHeader) {
                var ele = document.getElementById(this._grid.get_id() + '_repeatedBodyDiv').children[0].cloneNode(true);
                if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow') != null) {
                    if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow').children.length > 0) {
                        document.getElementById(this._grid.get_id() + '_FixedHeaderRow').removeChild(document.getElementById(this._grid.get_id() + '_FixedHeaderRow').children[0]);
                    }
                }
				if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow') != null)
					document.getElementById(this._grid.get_id() + '_FixedHeaderRow').appendChild(ele);
                if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow') != null) {
                    document.getElementById(this._grid.get_id() + '_FixedHeaderRow').style.display = '';
                }
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPANDALL) {
            var ele = document.getElementById(this._grid.get_id() + '_repeatedBodyDiv').children[0].cloneNode(true);
            if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow') != null) {
                if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow').children.length > 0) {
                    document.getElementById(this._grid.get_id() + '_FixedHeaderRow').removeChild(document.getElementById(this._grid.get_id() + '_FixedHeaderRow').children[0]);
                }
            }
            if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow') != null)
                document.getElementById(this._grid.get_id() + '_FixedHeaderRow').appendChild(ele);
            if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow') != null) {
                document.getElementById(this._grid.get_id() + '_FixedHeaderRow').style.display = '';
            }
        }
        if (document.getElementById(this._grid.get_id() + '_repeatedBodyDiv').children.length > 0) {
            if (document.getElementById(this._grid.get_id() + '_repeatedBodyDiv').children[0].getAttribute('grouprowid') != null) {
                if (!this._grid.get_GridInfo().CollapseAllGroupHeader) {
                    if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow') != null) {
                        document.getElementById(this._grid.get_id() + '_FixedHeaderRow').style.display = '';
                    }
                }
                if (this._grid.get_GridInfo().CollapseAllGroupHeader) {
                    if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow') != null) {
                        document.getElementById(this._grid.get_id() + '_FixedHeaderRow').style.display = 'none';
                    }
                }
                if (!this._grid.get_GridInfo().CollapseAllGroupHeader && eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSEALL) {
                    if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow') != null) {
                        document.getElementById(this._grid.get_id() + '_FixedHeaderRow').style.display = 'none';
                    }
                }
                if (this._grid.get_GridInfo().CollapseAllGroupHeader && eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPANDALL) {
                    if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow') != null) {
                        document.getElementById(this._grid.get_id() + '_FixedHeaderRow').style.display = '';
                    }
                }
            }
        }
        if (this._grid.group._groupedColumns.length === 0) {
            if (document.getElementById(this._grid.get_id() + '_FixedHeaderRow') != null) {
                document.getElementById(this._grid.get_id() + '_FixedHeaderRow').style.display = 'none';
            }
        }
        if (eventArgs[1] !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_CUSTOM_FORMATTING) {
            if (document.getElementById(this._grid.get_id()) != null) {
                if (document.getElementById(this._grid.get_id()).className.toString().indexOf('xlOpacityForGrid') !== -1) {
                    document.getElementById(this._grid.get_id()).className = '';
                }
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RANKING_COLUMN_INFO || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_RANKING || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RESET_TO_DEFAULT) {
            this._grid.get_GridInfo().RankingColumnInfo = (Sys.Serialization.JavaScriptSerializer.deserialize(serverData[1])).RankingColumnInfo;
            var realNames = [];
            realNames = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
            if (this._grid.get_GridInfo().RankingColumnInfo == null) {
                this._grid.get_GridInfo().RankingColumnInfo = new com.ivp.rad.controls.neogrid.scripts.info.RankingInfo();
            }
            if (Array.contains(realNames, this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo)) {
                this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo = this._grid.get_GridInfo().ColumnNameMapping[this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo].toString();
            }
            for (var i = 0; i < this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo.length; i++) {
                if (Array.contains(realNames, this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo[i])) {
                    this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo[i] = this._grid.get_GridInfo().ColumnNameMapping[this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo[i].toString()];
                }
            }
        }
        if (!this._grid.get_GridInfo().IsMasterChildGrid) {
            if (this._grid.get_GridInfo().GridTheme === com.ivp.rad.controls.neogrid.scripts.info.Theme.flatTheme) {
                document.getElementById(this._grid.get_GridInfo().GridId + '_footer_Div').style.display = 'none';
                document.getElementById(this._grid.get_GridInfo().GridId + '_upperHeader_Div').style.display = 'none';
            }
            else {
                document.getElementById(this._grid.get_GridInfo().GridId + '_footer_Div').style.display = '';
                document.getElementById(this._grid.get_GridInfo().GridId + '_upperHeader_Div').style.display = '';
            }
        }
        else {
            if (this._grid.get_GridInfo().MasterGridId === this._grid.get_GridInfo().GridId) {
                if (this._grid.get_GridInfo().GridTheme === com.ivp.rad.controls.neogrid.scripts.info.Theme.masterChildGridTheme) {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_footer_Div').style.display = 'none';
                }
            }
            else {
                //document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv').parentNode.parentNode.style.top = '-19px';
                document.getElementById(this._grid.get_GridInfo().GridId + '_headerDiv').style.position = 'relative';
                //document.getElementById(this._grid.get_GridInfo().GridId + '_headerDiv').style.top = '-21px';
            }
        }
        if (document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv') != null) {
            if (this._grid.get_GridInfo().GridTheme === com.ivp.rad.controls.neogrid.scripts.info.Theme.pnLTheme) {
                document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv').style.backgroundColor = '#1A1B1F';
            }
            else if (this._grid.get_GridInfo().GridTheme === com.ivp.rad.controls.neogrid.scripts.info.Theme.pnLWhiteTheme) {
                document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv').style.backgroundColor = '#FAFAFA';
            }
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT) {
            eval('$(\'#' + this._grid.get_id() + '_popUpData\').animate({\"width\":\"0px\"})');
            document.getElementById(this._grid.get_id() + '_body_Div').style.opacity = '1';
        }
    },
     
    _generateDataTail: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_generateDataTail(ellipsisDivs,GridExtraInfo) {
        var NUM_CHARS = 4;
                    for (var i = 0; i < ellipsisDivs.length; ++i) {
                        var e = ellipsisDivs[i];
                        if ((e.getAttribute("datatype") == "xs_string" || e.getAttribute("datatype") == "xs_dateTime") && ($.inArray(e.getAttribute("columnname"), Object.keys(this._grid.get_GridInfo().CustomFormatInfoClientSide)) == -1)) {//&& ($.inArray(e.getAttribute("columnname"), GridExtraInfo.LargeSizeColumns) != -1)
                            if (e.offsetWidth < e.scrollWidth) {
                                var text = e.textContent;
                                e.dataset.tail = text.slice(text.length - NUM_CHARS);
                                //$(e).attr("tail",text.slice(text.length - NUM_CHARS));
                            }
                        }
                    }
            },
    _bindDetailsGrid: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_bindDetailsGrid(childData, masterChildMapping, isMasterGridSearch, chilGridMappedWidth, lastChildMappingList) {
        /// <param name="childData" type="String">
        /// </param>
        /// <param name="masterChildMapping" type="Object">
        /// </param>
        /// <param name="isMasterGridSearch" type="Boolean">
        /// </param>
        /// <param name="chilGridMappedWidth" type="Object">
        /// </param>
        /// <param name="lastChildMappingList" type="Array">
        /// </param>
        var ClientSideData = childData;
        var MasterGridId = this._grid.get_GridInfo().MasterGridId;
        var idcolumnnamesforchildgrid = [];
        for (var i = 1; i < this._grid.get_GridInfo().IdColumnNames.length; i++) {
            Array.add(idcolumnnamesforchildgrid, this._grid.get_GridInfo().IdColumnNames[i].toString());
        }
        for (var i = 0; i < document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv').children[0].children[1].children[0].children.length; i++) {
            if (window.jQuery(document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv').children[0].children[1].children[0].children[i]).find('DIV[class*=' + 'fa-plus' + ']').length > 0) {
                if (ClientSideData !== '') {
                    var div = document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv');
                    var currentRow = div.children[0].children[1].children[0].children[i];
                    var className = window.jQuery(currentRow).find('DIV[class*=' + 'fa-plus' + ']')[0].className;
                    window.jQuery(currentRow).find('DIV[class*=' + 'fa-plus' + ']')[0].style.borderRight = '1px solid #DDDDDD';
                    window.jQuery(currentRow).find('DIV[class*=' + 'fa-plus' + ']')[0].className = className.replace('fa fa-plus', 'fa fa-minus');
                    var childGridParent = this._grid.elementHelper.get_divElement();
                    var childGrid = this._grid.elementHelper.get_divElement();
                    childGrid.id = this._grid.get_GridInfo().GridId + '_' + currentRow.getAttribute('idcolumnvalue').toString() + '_ChildRow';
                    childGridParent.style.width = (currentRow.offsetWidth - 19) + 'px';
                    childGrid.style.position = 'relative';
                    //childGrid.style.top = '-21px';
                    childGridParent.appendChild(childGrid);
                    if (eval('$find(\'' + this._grid.get_GridInfo().MasterGridId + ').get_GridInfo().GridTheme\'') === com.ivp.rad.controls.neogrid.scripts.info.Theme.masterChildGridTheme) {
                        childGridParent.className = 'xlneochildgridParentMasterChildTheme';
                    }
                    else {
                        childGridParent.className = 'xlneochildgridParent';
                    }
                    currentRow.appendChild(childGridParent);
                    childGridParent.style.border = '1px solid #EBE7E7';
                    childGridParent.style.backgroundColor = '#ffffff ! important';
                    childGridParent.style.marginLeft = '19px';
                    childGridParent.style.position = 'relative';
                    childGridParent.style.top = '22px';
                    var temporaryArrayListOfCustomInfo = [];
                    var temporaryRaiseGridRenderInfo = [];
                    var temporaryColumnsToHideList = [];
                    var temporaryColumnNameMappingList = [];
                    var tempRequirePagingMasterChildGrid = [];
                    var tempPageSizeMasterChildGrid = [];
                    var tempCustomFormatInfoClientSideList = [];
                    if (this._grid.get_GridInfo().CustomInfoList != null) {
                        temporaryArrayListOfCustomInfo = Array.clone(this._grid.get_GridInfo().CustomInfoList);
                        Array.removeAt(temporaryArrayListOfCustomInfo, 0);
                    }
                    if (this._grid.get_GridInfo().RaiseGridRenderList != null) {
                        temporaryRaiseGridRenderInfo = Array.clone(this._grid.get_GridInfo().RaiseGridRenderList);
                        Array.removeAt(temporaryRaiseGridRenderInfo, 0);
                    }
                    if (this._grid.get_GridInfo().ColumnsToHideList != null) {
                        temporaryColumnsToHideList = Array.clone(this._grid.get_GridInfo().ColumnsToHideList);
                        Array.removeAt(temporaryColumnsToHideList, 0);
                    }
                    if (this._grid.get_GridInfo().ColumnNameMappingList != null) {
                        temporaryColumnNameMappingList = Array.clone(this._grid.get_GridInfo().ColumnNameMappingList);
                        Array.removeAt(temporaryColumnNameMappingList, 0);
                    }
                    if (this._grid.get_GridInfo().CustomFormatInfoClientSideList != null) {
                        tempCustomFormatInfoClientSideList = Array.clone(this._grid.get_GridInfo().CustomFormatInfoClientSideList);
                        Array.removeAt(tempCustomFormatInfoClientSideList, 0);
                    }
                    if (this._grid.get_GridInfo().RequirePagingMasterChildGrid != null) {
                        tempRequirePagingMasterChildGrid = Array.clone(this._grid.get_GridInfo().RequirePagingMasterChildGrid);
                        Array.removeAt(tempRequirePagingMasterChildGrid, 0);
                    }
                    else {
                        Array.add(tempRequirePagingMasterChildGrid, false);
                    }
                    if (this._grid.get_GridInfo().PageSizeMasterChildGrid != null) {
                        tempPageSizeMasterChildGrid = Array.clone(this._grid.get_GridInfo().PageSizeMasterChildGrid);
                        Array.removeAt(tempPageSizeMasterChildGrid, 0);
                    }
                    else {
                        Array.add(tempPageSizeMasterChildGrid, 500);
                    }
                    var gridchildlevel = this._grid.get_GridInfo().GridChildLevel + 1;
                    var masterChildMap = (currentRow.getAttribute('masterChildColumnMap') != null) ? currentRow.getAttribute('masterChildColumnMap').toString() : '';
                    eval('ChildGrid(\'' + childGrid.id + '\',\'' + ClientSideData + '\',\'' + this._grid.get_GridInfo().GridId + '\',\'' + this._grid.get_GridInfo().MasterGridId + '\',\'' + currentRow.getAttribute('id').toString() + '\',' + Sys.Serialization.JavaScriptSerializer.serialize(masterChildMapping) + ',' + isMasterGridSearch + ',\'' + idcolumnnamesforchildgrid[0].toString() + '\',' + Sys.Serialization.JavaScriptSerializer.serialize(idcolumnnamesforchildgrid) + ',\'' + ((this._grid.get_GridInfo().IdColumnNames[0].toString() === 'autogenerateidcolumn') ? '__ID' : this._grid.get_GridInfo().IdColumnNames[0].toString()) + '\',' + Sys.Serialization.JavaScriptSerializer.serialize(temporaryArrayListOfCustomInfo) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(temporaryRaiseGridRenderInfo) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(temporaryColumnsToHideList) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(temporaryColumnNameMappingList) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(temporaryColumnNameMappingList) + ',' + gridchildlevel + ',' + Sys.Serialization.JavaScriptSerializer.serialize(chilGridMappedWidth) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ColumnAlignmentMapping) + ',' + this._grid.get_GridInfo().RequireColumnAlign + ',\'' + masterChildMap + '\',' + Sys.Serialization.JavaScriptSerializer.serialize(lastChildMappingList) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(tempRequirePagingMasterChildGrid) + ',' + Sys.Serialization.JavaScriptSerializer.serialize(tempPageSizeMasterChildGrid) + ');');
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._grid.elementInfo.get_element());
                    var currentparentid = this._grid.get_GridInfo().ParentGridId;
                    while (currentparentid !== '') {
                        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + currentparentid + '\').elementInfo.get_element()'));
                        eval('$find(\'' + currentparentid + '\').manageEvents.addEventHandler(\'' + currentparentid + '\');');
                        currentparentid = eval('$find(\'' + currentparentid + '\').get_GridInfo().ParentGridId');
                    }
                }
            }
        }
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + MasterGridId + '\').elementInfo.get_element()'));
        eval('$find(\'' + MasterGridId + '\').manageEvents.addEventHandler(\'' + MasterGridId + '\');');
    },

    _checkGroupHeaderandRowsCommon: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_checkGroupHeaderandRowsCommon(eventType) {
        /// <param name="eventType" type="String">
        /// </param>
        var rows = this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children;
        var checkbox = null;
        for (var i = 0; i < rows.length; i++) {
            if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].getAttribute('groupRowID') != null) {
                var itemToIterate = [];
                itemToIterate = this._grid.get_GridInfo().groupHeaderToUnCheck;
                if (itemToIterate != null) {
                    for (var j = 0; j < itemToIterate.length; j++) {
                        if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].getAttribute('groupRowID') === itemToIterate[j]) {
                            checkbox = (((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i]).children[0].getElementsByTagName('INPUT')[0]);
                            if (checkbox != null) {
                                checkbox.checked = false;
                            }
                        }
                    }
                }
                itemToIterate = this._grid.get_GridInfo().groupHeaderToCheck;
                if (itemToIterate != null) {
                    for (var j = 0; j < itemToIterate.length; j++) {
                        if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].getAttribute('groupRowID') === itemToIterate[j]) {
                            checkbox = (((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i]).children[0].getElementsByTagName('INPUT')[0]);
                            if (checkbox != null) {
                                checkbox.checked = true;
                            }
                        }
                    }
                }
            }
        }
    },

    _checkGroupHeaderandRows: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_checkGroupHeaderandRows(flag, eventType) {
        /// <param name="flag" type="Boolean">
        /// </param>
        /// <param name="eventType" type="String">
        /// </param>
        var rows = this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children;
        var checkbox = null;
        for (var i = 0; i < rows.length; i++) {
            if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].getAttribute('groupRowID') != null) {
                var itemToIterate = [];
                if (flag) {
                    itemToIterate = this._grid.get_GridInfo().groupHeaderToCheck;
                }
                else {
                    itemToIterate = this._grid.get_GridInfo().groupHeaderToUnCheck;
                }
                for (var j = 0; j < itemToIterate.length; j++) {
                    if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].getAttribute('groupRowID') === itemToIterate[j]) {
                        checkbox = (((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i]).children[0].getElementsByTagName('INPUT')[0]);
                        if (checkbox != null) {
                            checkbox.checked = flag;
                        }
                    }
                }
            }
            if (eventType !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED && eventType !== com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED) {
                if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].getAttribute('groupRowID') == null) {
                    var rowsToIterate = [];
                    if (flag) {
                        rowsToIterate = this._grid.get_GridInfo().rowsToCheck;
                    }
                    else {
                        rowsToIterate = this._grid.get_GridInfo().rowsToUnCheck;
                    }
                    if (rowsToIterate != null) {
                        for (var j = 0; j < rowsToIterate.length; j++) {
                            checkbox = (((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i]).children[0].getElementsByTagName('INPUT')[0]);
                            if (checkbox != null) {
                                if (checkbox.getAttribute('idColumnValue') === rowsToIterate[j]) {
                                    checkbox.checked = flag;
                                    if (flag) {
										if($("#" + this._grid.get_GridInfo().GridId + "_repeatednewFrozenDiv").children()[i] != null)
										{
											$("#" + this._grid.get_GridInfo().GridId + "_repeatednewFrozenDiv").children()[i].className = this._grid.get_GridInfo().CssCheckedRow;
										}
                                        rows[i].className = this._grid.get_GridInfo().CssCheckedRow;
                                        (this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].className = this._grid.get_GridInfo().CssCheckedRow;
                                    }
                                    else {
										if($("#" + this._grid.get_GridInfo().GridId + "_repeatednewFrozenDiv").children()[i] != null)
										{
											$("#" + this._grid.get_GridInfo().GridId + "_repeatednewFrozenDiv").children()[i].className = this._grid.clientDataController._findClassName($("#" + this._grid.get_GridInfo().GridId + "_repeatednewFrozenDiv").children()[i]);//this._grid.get_GridInfo().CssNormalRow;
										}
                                        rows[i].className = this._grid.clientDataController._findClassName(rows[i]);//this._grid.get_GridInfo().CssNormalRow;
                                        (this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].className = this._grid.clientDataController._findClassName((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i]);//this._grid.get_GridInfo().CssNormalRow;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    _runClientEngine: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_runClientEngine(serverData, result, eventArgs, doHeaderRecreation) {
        /// <param name="serverData" type="Array" elementType="String">
        /// </param>
        /// <param name="result" type="String">
        /// </param>
        /// <param name="eventArgs" type="Array" elementType="String">
        /// </param>
        /// <param name="doHeaderRecreation" type="Boolean">
        /// </param>
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_ROW_DATA_INFO || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CHECK_ROW_IF_NONE_CHECKED) {
            return;
        }
        var serviceInfo = this._getServiceInfo(result.toString(), serverData[1], eventArgs[0], eventArgs[1]);
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING) {
            this._grid.set_CacheKey(serviceInfo.serializedInfo.Cachekey);
        }
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_DEFAULT_VIEW || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT) {
            this._grid.set_VerticalScrollPosition(serviceInfo.serializedInfo.VerticalScrollPosition);
        }
        if ((result.toString() === '' || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_LIST || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_CHECKED_ROWS || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_RULE_INTELLISENSE || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PASTE_DATA_FROM_EXCEL || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_COLUMNHTML)) {
            if (this._grid.get_InfiniteScroll()) {
                this._grid.elementInfo.get_bodyDiv().innerHTML = this.cache['resultHTML'].toString();
                eval('function Rows(){ this.' + this._grid.get_GridInfo().GridId.replace(new RegExp('[.|-]', 'gi'), '_') + '_rows=ko.observableArray(' + this._grid.get_GridInfo().KnockoutJsonData + ')}');
                eval('ko.cleanNode(document.getElementById(\"' + this._grid.get_GridInfo().GridId + '_EventsBodyDiv\"))');
                eval('ko.applyBindings(new Rows(),document.getElementById(\"' + this._grid.get_GridInfo().GridId + '_EventsBodyDiv\"))');
            }
            if (this._grid.get_RaiseGridRender() != null && this._grid.get_RaiseGridRender() !== '') {
                eval(this._grid.get_RaiseGridRender() + '(\'' + serviceInfo.eventType + '\');');
            }
        }
        else {
            var _headerInnerTable;
            var _bodyInnerTable;
            _headerInnerTable = this._grid.elementInfo.get_innerHeaderDiv();
            _bodyInnerTable = this._grid.elementInfo.get_bodyInnerTable();
            if (_bodyInnerTable != null) {
                com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(_bodyInnerTable.parentNode);
            }
            var _old = (_headerInnerTable != null) ? _headerInnerTable.parentNode.innerHTML : null;
            try {
                this._grid.elementInfo.get_bodyDiv().innerHTML = result.toString();
                eval(' function Rows(){ this.' + this._grid.get_GridInfo().GridId.replace(new RegExp('[.|-]', 'gi'), '_') + '_rows=ko.observableArray(' + this._grid.get_GridInfo().KnockoutJsonData + ')}');
                if (!this._grid.isRefreshGridWithData) {
                    var div = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDiv\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\").clone()');
                    var div2 = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDiv\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeatedBodyDiv\").clone()');
                    var div5 = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDiv\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\").clone()');
                    var div3 = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDiv\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\").clone()');
                    var div4 = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDiv\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\").clone()');
                    var div6 = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDiv\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeatednewFrozenDiv\").clone()');
                    $(div).addClass("_repeatedBodyDiv");
                    $(div2).addClass("_repeatedBodyDiv");
                    $(div5).addClass("_repeatednewFrozenDiv");
                    $(div6).addClass("_repeatednewFrozenDiv");
                    $(div3).addClass("_repeatedFrozenDiv");
                    $(div4).addClass("_repeatedFrozenDiv");
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeat\").remove()');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeatFrozen\").remove()');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeatnewFrozen\").remove()');
                    eval('$(div).attr(\"id\",this._grid.get_GridInfo().GridId + \'_repeat\')');
                    eval('$(div3).attr(\"id\",this._grid.get_GridInfo().GridId + \'_repeatFrozen\')');
                    eval('$(div5).attr(\"id\",this._grid.get_GridInfo().GridId + \'_repeatnewFrozen\')');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\").append($(div3))');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\").append($(div5))');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\").append($(div))');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeatUp\").remove()');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeatFrozenUp\").remove()');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\"' + ').find(\"#' + this._grid.get_GridInfo().GridId + '_repeatnewFrozenUp\").remove()');
                    eval('$(div2).attr(\"id\",this._grid.get_GridInfo().GridId + \'_repeatUp\')');
                    eval('$(div4).attr(\"id\",this._grid.get_GridInfo().GridId + \'_repeatFrozenUp\')');
                    eval('$(div6).attr(\"id\",this._grid.get_GridInfo().GridId + \'_repeatnewFrozenUp\')');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\").append($(div4))');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\").append($(div6))');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\").append($(div2))');
                    eval('function Rows2(){ this.' + this._grid.get_GridInfo().GridId.replace(new RegExp('[.|-]', 'gi'), '_') + '_rows=ko.observableArray(' + this._grid.get_GridInfo().KnockOutJsonDataPreviousRecords + ')}');
                    eval('ko.cleanNode(document.getElementById(\"' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\"))');
                    eval('this._grid.get_GridInfo().KnockoutScrollForCheckBoxFunction= new Rows2()');
                    eval('ko.applyBindings( this._grid.get_GridInfo().KnockoutScrollForCheckBoxFunction,document.getElementById(\"' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHiddenUp\"))');
                    eval('function Rows1(){ this.' + this._grid.get_GridInfo().GridId.replace(new RegExp('[.|-]', 'gi'), '_') + '_rows=ko.observableArray(' + this._grid.get_GridInfo().KnockOutJsonDataForScroll + ')}');
                    eval('ko.cleanNode(document.getElementById(\"' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\"))');
                    eval('this._grid.get_GridInfo().KnockoutScrollFunction = new Rows1()');
                    eval('ko.applyBindings( this._grid.get_GridInfo().KnockoutScrollFunction,document.getElementById(\"' + this._grid.get_GridInfo().GridId + '_EventsBodyDivHidden\"))');
                }
                else {
                    this._grid.isRefreshGridWithData = false;
                }
                eval('ko.cleanNode(document.getElementById(\"' + this._grid.get_GridInfo().GridId + '_EventsBodyDiv\"))');
                eval('this._grid.get_GridInfo().KnockoutScrollForFrozenFunction = new Rows()');
                eval('ko.applyBindings( this._grid.get_GridInfo().KnockoutScrollForFrozenFunction ,document.getElementById(\"' + this._grid.get_GridInfo().GridId + '_EventsBodyDiv\"))');
            }
            catch ($e1) {
                //  alert('Error');
            }
            if (this._grid.elementInfo.get_radExtrapopupDiv() != null && this._extraPopupHTML !== '') {
                this._grid.elementInfo.get_radExtrapopupDiv().innerHTML = this._extraPopupHTML;
                if (this._hasExtraINfo && Boolean.parse(eventArgs[2])) {
                    this._grid.elementInfo.get_radExtraPopupBtn().setAttribute('state', 'show');
                    this._grid.elementInfo.get_radExtrapopupDiv().style.display = '';
                }
            }
            if (this._grid.elementInfo.get_radbalancepopupDiv() != null) {
                if (Boolean.parse(eventArgs[3])) {
                    this._grid.upperHeader._showBalancePopup(null);
                }
            }
            if (_old != null && !doHeaderRecreation) {
                _headerInnerTable = this._grid.elementInfo.get_innerHeaderDiv();
                _headerInnerTable.parentNode.innerHTML = _old;
                _headerInnerTable = this._grid.elementInfo.get_innerHeaderDiv();
            }
            if (this._grid.get_RaiseGridRender() != null && this._grid.get_RaiseGridRender() !== '') {
                eval(this._grid.get_RaiseGridRender() + '(\'' + serviceInfo.eventType + '\');');
            }
            _headerInnerTable = null;
            _bodyInnerTable = null;
            if (this._grid.elementInfo.get_frozenHeaderDiv() != null && this._grid.elementInfo.get_frozenHeaderDiv().hasChildNodes()) {
                _headerInnerTable = this._grid.elementInfo.get_frozenHeaderDiv().firstChild;
            }
            if (this._grid.elementInfo.get_frozenBodyDiv() != null && this._grid.elementInfo.get_frozenBodyDiv().hasChildNodes()) {
                _bodyInnerTable = this._grid.elementInfo.get_frozenBodyDiv().firstChild;
            }
            if (_headerInnerTable == null || _bodyInnerTable == null) {
                if (this._grid.elementInfo.get_frozenHeaderDiv() != null) {
                    this._grid.elementInfo.get_frozenHeaderDiv().style.display = 'none';
                }
                if (this._grid.elementInfo.get_frozenBodyDiv() != null) {
                    this._grid.elementInfo.get_frozenBodyDiv().style.display = 'none';
                }
            }
            if (document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv') != null) {
                this._createClientSideFunctionalityHeader(document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv').firstChild, document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_newbodyDiv').firstChild, true, serviceInfo, true, true);
            }
            _headerInnerTable = this._grid.elementInfo.get_innerHeaderDiv();
            _bodyInnerTable = this._grid.elementInfo.get_bodyInnerTable();
            this._createClientSideFunctionalityHeader(_headerInnerTable, _bodyInnerTable, false, serviceInfo, (this._isHeaderRecreationRequired(eventArgs[1]) && !this._grid.isMethodRefereshFromClient) || _old == null, true);
            if (!doHeaderRecreation && _old != null && this._grid.group._dragDrop != null) {
                var toRemove = [];
                Array.forEach(this._grid.group._dragDrop.get_dragDropInfos(), Function.createDelegate(this, function (o) {
                    var info = o;
                    var newElement = document.getElementById(info.draggableObject.id);
                    if (newElement != null) {
                        info.draggableObject = newElement;
                        var containers = new Array(info.dropContainers.length);
                        Array.forEach(info.dropContainers, Function.createDelegate(this, function (o1, index, a) {
                            if (o1 != null) {
                                containers[index] = document.getElementById((o1).id);
                            }
                        }));
                        Array.clear(info.dropContainers);
                        Array.addRange(info.dropContainers, containers);
                    }
                    else {
                        Array.add(toRemove, info);
                    }
                }));
                Array.forEach(toRemove, Function.createDelegate(this, function (o) {
                    Array.remove(this._grid.group._dragDrop.get_dragDropInfos(), o);
                }));
                this._grid.group._dragDrop.endUpdate();
            }
        }
        if (this._grid.get_RaiseGridRenderComplete() != null && this._grid.get_RaiseGridRenderComplete() !== '') {
            eval(this._grid.get_RaiseGridRenderComplete() + '(\'' + serviceInfo.eventType + '\',\'' + this._grid.get_GridInfo().GridId + '\');');
        }
        this._manageServiceCompleted(serviceInfo);
        if (this._grid.sort != null) {
            for (var i = 0; i < this._grid.sort.sortedColumns.length; i++) {
                var sinfo = this._grid.sort.sortedColumns[i];
                if (!sinfo.IsGrouped) {
                    if (document.getElementById(this._grid.get_id() + '_' + sinfo.ColumnName.replace(new RegExp('[ ]', 'gi'), '_') + '_Sort') != null) {
                        document.getElementById(this._grid.get_id() + '_' + sinfo.ColumnName.replace(new RegExp('[ ]', 'gi'), '_') + '_Sort').style.display = '';
                    }
                }
            }
        }
    },

    _createSizeDiv: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_createSizeDiv() {
    },

    _createClientSideFunctionalityHeader: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_createClientSideFunctionalityHeader(_headerInnerTable, _bodyInnerTable, isFrozen, serviceInfo, recreate, initializeHeader) {
        /// <param name="_headerInnerTable" type="Object" domElement="true">
        /// </param>
        /// <param name="_bodyInnerTable" type="Object" domElement="true">
        /// </param>
        /// <param name="isFrozen" type="Boolean">
        /// </param>
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        /// <param name="recreate" type="Boolean">
        /// </param>
        /// <param name="initializeHeader" type="Boolean">
        /// </param>
        var headercollection = (_headerInnerTable.children[0]).children[0].children;
        if ((_headerInnerTable != null  && _headerInnerTable.hasChildNodes()  && _headerInnerTable.children[0].children.length > 0  && _headerInnerTable.children[0].children[0].hasChildNodes() ) && recreate) {
            if (initializeHeader && recreate && (this._grid.get_GridInfo().RequireGrouping || !this._grid.get_GridInfo().DoNotRearrangeColumn) && !isFrozen) {
                this._grid.group._dragDrop.set_dragDropInfos([]);
            }
            var add = 0;
            if (_bodyInnerTable.id === this._grid.get_id() + '_bodyDiv_Table') {
                add = this._grid.get_GridInfo().FrozenColumns.length + 1;
            }
            var length = headercollection.length;
            if (!isFrozen) {
                this._headerWidths = {};
            }
            for (var i = 0; i < length; i++) {
                if (initializeHeader && !Boolean.parse(headercollection[i].getAttribute('nofeatures').toString())) {
                    this._grid.manageHeader.initializeColumnHeader(headercollection[i]);
                }
                if (initializeHeader && ((!this._grid.get_GridInfo().RequireGrouping && this._grid.get_GridInfo().DoNotRearrangeColumn) || Boolean.parse(headercollection[i].getAttribute('nofeatures').toString())) && headercollection[i].getAttribute('columnName') != null) {
                    var args = new com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs(Number.parseInvariant(headercollection[i].getAttribute('index').toString()), headercollection[i].getAttribute('columnName').toString(), headercollection[i]);
                    var groupDiv = this._grid.group._createGroupDiv(args);
                    groupDiv.setAttribute('nofeatures', true);
                    args.get_TH().appendChild(groupDiv);
                    var resizingDiv = this._grid.elementHelper.get_divElement();
                    resizingDiv.innerHTML = '&nbsp;';
                    resizingDiv.className = 'xlneoresizingDiv';
                    if (!this._grid.get_GridInfo().RequireResizing) {
                        resizingDiv.style.width = '0px';
                    }
                    resizingDiv.id = this._grid.get_id() + '_' + args.get_columnIndex() + '_Resize';
                    args.get_TH().appendChild(resizingDiv);
                }
            }
        }
    },
    _CallBackForEditAuditGridSave: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_CallBackForEditAuditGridSave(data) {
        $(".xlResetRowIcon").remove();
        $("#RADAuditGridPopUp").remove();
        $("#" + this._grid.get_GridInfo().GridId)[0].style.opacity = 1;
        //document.getElementById(this._grid.get_GridInfo().GridId + '_btnEditableGrid').className = 'fa fa-pencil-square-o fa-lg';
        document.getElementById(this._grid.get_GridInfo().GridId + '_btnEditableGrid').className = 'fa fa-edit';
        eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EditCommitPopUP\").remove()');
        if (!this._grid.get_GridInfo().IsMasterChildGrid) {
            this._grid.editGrid.changedRowsInfo = data.EditedRowsInfo;
            this._grid.editGrid._isEditing = false;
            this._grid.editGrid.highlightEditableColumns();
        }
        eval(this._grid.get_RaiseOnEditCommitChange() + '(' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.editGrid.changedRowsInfo) + ');');
    },
    _CallBackForEditAuditGridForDone: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_CallBackForEditAuditGridForDone(data) {
        $(".xlResetRowIcon").remove();
        $("#RADAuditGridPopUp").remove();
        $("#" + this._grid.get_GridInfo().GridId)[0].style.opacity = 1;
        //document.getElementById(this._grid.get_GridInfo().GridId + '_btnEditableGrid').className = 'fa fa-pencil-square-o fa-lg';
        eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EditCommitPopUP\").remove()');
        if (!this._grid.get_GridInfo().IsMasterChildGrid) {
            this._grid.editGrid.changedRowsInfo = data.EditedRowsInfo;
            //this._grid.editGrid.highlightEditableColumns();
        }
        $find(this._grid.get_GridInfo().GridId).gridEngine.executeWCFProcess("SaveAuditGridData", Sys.Serialization.JavaScriptSerializer.serialize(this._grid.editGrid.changedRowsInfo), "SaveAuditGridData");
    },
    _CallBackForEditAuditGrid: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_CallBackForEditAuditGrid(flag,ChangedEditInfo) {
        $("#RADAuditGridPopUp").remove();
        $("#" + this._grid.get_GridInfo().GridId)[0].style.opacity = 1;
        if (flag) {
            for (var i = 0; i < ChangedEditInfo.length; i++) {
                var count = 0;
                for (var j = 0; j < ChangedEditInfo[i].CellInfo.length; j++) {
                    if (ChangedEditInfo[i].CellInfo[j].OldValue != ChangedEditInfo[i].CellInfo[j].NewValue) {
                        count++;
                        break;
                    }
                }
                if (count == 0) {
                    ChangedEditInfo.splice(i, 1);
                    --i;
                }
            }
            if (ChangedEditInfo.length > 0) {
                eval(this._grid.get_RaiseOnEditCommitChange() + '(' + Sys.Serialization.JavaScriptSerializer.serialize(ChangedEditInfo) + ');');
            }
            else {
                $(".xlResetRowIcon").remove();
            }
            document.getElementById(this._grid.get_GridInfo().GridId + '_btnEditableGrid').className = 'RADEditIcon fa fa-pencil-square-o fa-lg';
            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EditCommitPopUP\").remove()');
            if (!this._grid.get_GridInfo().IsMasterChildGrid) {
                Array.clear(this._grid.editGrid.changedRowsInfo);
                this._grid.editGrid.highlightEditableColumns();
            }
        }
    },
    _MakeEditAuditGird: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_MakeEditAuditGird(InfoForGrid) {
        var GridId = this._grid.get_id();
        $("#" + GridId)[0].style.opacity = .1;
        
        $("#" + GridId).parent().append("<div id = 'RADAuditGridPopUp'    style='width: 100%;height: 100%;position: absolute;top: 0px;left: 0px;'/>")
        var PubSubManager = {
            subscribers: [],

            subscribe: function (parent, callback) {
                this.subscribers.push({ parent: parent, callback: callback });
                
            },

            color: function (name) {
                // Notify subscribers of event.
                this.subscribers.forEach(function (subscriber) {
                    subscriber.callback(name, subscriber.parent);
                    //$find(GridId).editGrid.changedRowsInfo = subscriber.parent.state.data.EditedRowsInfo;
                });
            }

        };
        var data = {}
        data.HeaderInfo = InfoForGrid.EditAuditGridInfoList.AuditGridHeaderInfo;
        data.BodyInfo = InfoForGrid.EditAuditGridInfoList.AuditGridBodyInfo;
        data.EditedRowsInfo = InfoForGrid.ChangedRowInfoList;
        data.GridId = GridId;
        ReactDOM.render(React.createElement(App, { context: PubSubManager }), document.getElementById("RADAuditGridPopUp"));
        PubSubManager.color(data);
        $(".loading").hide();
        return null;
    },
    _isHeaderRecreationRequired: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_isHeaderRecreationRequired(eventType) {
        /// <param name="eventType" type="String">
        /// </param>
        /// <returns type="Boolean"></returns>
        if (eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT) {
            for (var i = 0; i < this._grid.sort.sortedColumns.length; i++) {
                var sinfo = this._grid.sort.sortedColumns[0];
                if (document.getElementById(this._grid.get_id() + '_' + sinfo.ColumnName.replace(new RegExp('[ ]', 'gi'), '_') + '_Sort') != null) {
                    document.getElementById(this._grid.get_id() + '_' + sinfo.ColumnName.replace(new RegExp('[ ]', 'gi'), '_') + '_Sort').style.display = '';
                }
            }
            return true;
        }
        switch (eventType) {
			case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RESET_TO_DEFAULT:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPAND_LEVEL:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_COLLAPSE_LEVEL:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_RANKING:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ADD_COLUMNS:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT:
			case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH:
			case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MAX_PAGE_SIZE_CHANGE_EVENT:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DO_NOTHING:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_COLUMN:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_REMOVE_COLUMN:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_REMOVE_COLUMN_ALL:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_HIDE_COLUMN:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_HIDE_COLUMN_MULTIPLE:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_DEFAULT_VIEW:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REARRANGE_COLUMN_DROP:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_COLUMNS:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_ALL_COLUMN:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_COLUMN:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_COLUMN_MULTIPLE:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DELETE_MY_VIEW:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_MY_VIEW:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPAND:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSE:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RESIZE_COLUMN:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RANKING_COLUMN_INFO:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPANDALL:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSEALL:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MULTIPLE_GROUPS:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP_REMOVE_ALL:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION_WITHOUT_LAYOUT:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_COFIGURATION_WITH_NEW_LAYOUT:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING:
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_MASKING:
	case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE:
			case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE_ALL:
                return true;
            default:
                return false;
        }
    },

    _manageScrolling: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_manageScrolling(dontSetDimension) {
        /// <param name="dontSetDimension" type="Boolean">
        /// </param>
        var _bodyInnerTable = this._grid.elementInfo.get_bodyInnerTable();
        var _scrollerMainHorizontal = this._grid.elementInfo.get_scrollerMainHorizontal();
        _scrollerMainHorizontal.setAttribute('isgridscroller', true);
        this._scrollerHorizontal = this._grid.elementInfo.get_scrollerHorizontal();
        this._scrollerHorizontal.setAttribute('isgridscroller', true);
        _bodyInnerTable = this._grid.elementInfo.get_bodyInnerTable();
        this._docW = _bodyInnerTable.offsetWidth;
        this._contW = _bodyInnerTable.parentNode.offsetWidth;
        this._scrollAreaW = this._contW - 20;
        this._scrollW = (this._contW * this._scrollAreaW) / this._docW;
        if (!isNaN(this._scrollW) && isFinite(this._scrollW)) {
            if (this._scrollW < this._scrollAreaW) {
                _scrollerMainHorizontal.style.visibility = 'visible';
                this._scrollerHorizontal.style.width = Math.round(this._scrollW) + 'px';
            }
            else {
                _scrollerMainHorizontal.style.visibility = 'hidden';
                this._scrollerHorizontal.style.width = Math.round(this._scrollAreaW) + 'px';
            }
            var scrollerHorizontal_left = this._grid.elementInfo.get_scrollerHorizontal_left();
            scrollerHorizontal_left.setAttribute('isgridscroller', true);
            var scrollerHorizontal_right = this._grid.elementInfo.get_scrollerHorizontal_right();
            scrollerHorizontal_right.setAttribute('isgridscroller', true);
            scrollerHorizontal_left.style.left = _bodyInnerTable.parentNode.offsetLeft + 'px';
            this._scrollerHorizontal.style.left = scrollerHorizontal_left.style.left;
        }
        this._grid.elementInfo.get_headerInnerDiv().parentNode.scrollLeft = this._lastBodyScrollLeft;
        this._grid.elementInfo.get_bodyInnerTable().parentNode.scrollLeft = this._lastBodyScrollLeft;
        if (this._lastScrollerScrollLeft !== 0) {
            this._scrollerHorizontal.style.left = this._lastScrollerScrollLeft + 'px';
        }
        this._grid.elementInfo.get_bodyInnerTable().parentNode.scrollTop = this._lastBodyScrollTop;
        this._grid.elementInfo.get_frozenBodyDiv().scrollTop = this._lastBodyScrollTop;
        if (this._lastScrollerScrollTop >= 0) {
            this._scrollerVertical.style.top = this._lastScrollerScrollTop + 'px';
        }
        if (this._grid.elementInfo.get_mathOpFooter() != null) {
            var left = this._lastBodyScrollLeft - this._grid.elementInfo.get_bodyInnerTable().offsetLeft;
            if (left === 0) {
                this._grid.elementInfo.get_mathOpFooter().style.left = this._grid.elementInfo.get_bodyInnerTable().parentNode.offsetLeft + 'px';
            }
            else {
                if (Sys.Browser.version < 8) {
                    this._grid.elementInfo.get_mathOpFooter().style.left = (-1 * left) + this._grid.elementInfo.get_bodyInnerTable().parentNode.offsetLeft + 'px';
                }
                else {
                    this._grid.elementInfo.get_mathOpFooter().style.left = (-1 * left) + 'px';
                }
            }
        }
    },

    _scrollerVertical: null,
    _scrollerHorizontal: null,
    _docH: 0,
    _contH: 0,
    _scrollAreaH: 0,
    _scrollH: 0,
    _docW: 0,
    _contW: 0,
    _scrollAreaW: 0,
    _scrollW: 0,

    _onScrollMain: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_onScrollMain(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._grid.elementInfo.get_headerInnerDiv().parentNode.scrollLeft = e.target.scrollLeft;
        this._lastBodyScrollLeft = e.target.scrollLeft;
    },

    _onScrollFreeze: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_onScrollFreeze(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._grid.elementInfo.get_bodyInnerTable().parentNode.scrollTop = e.target.scrollTop;
        this._lastBodyScrollTop = e.target.scrollTop;
    },

    _scrollVertical: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_scrollVertical(value, e) {
        /// <param name="value" type="Number" integer="true">
        /// </param>
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <returns type="Boolean"></returns>
        var _bodyDiv = this._grid.elementInfo.get_bodyInnerTable().parentNode;
        var delta = value;
        var deltaScroller = 0;
        delta = _bodyDiv.scrollTop + delta;
        deltaScroller = ((delta + this._contH) * this._scrollAreaH) / this._docH - this._scrollH;
        _bodyDiv.scrollTop = delta;
        this._grid.elementInfo.get_frozenBodyDiv().scrollTop = _bodyDiv.scrollTop;
        if (deltaScroller < 0) {
            deltaScroller = 0;
        }
        if (deltaScroller + Math.round(this._scrollH) > this._scrollAreaH) {
            deltaScroller = this._scrollAreaH - Math.round(this._scrollH);
        }
        this._scrollerVertical.style.top = deltaScroller + 'px';
        this._lastScrollerScrollTop = deltaScroller;
        this._lastBodyScrollTop = delta;
        var bounds = Sys.UI.DomElement.getBounds(this._scrollerVertical);
        if ((e.clientY > bounds.y) ? e.clientY - bounds.y < 0 : e.clientY - bounds.y > 0) {
            return false;
        }
        return true;
    },

    _onWheelMain: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_onWheelMain(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var _bodyDiv = this._grid.elementInfo.get_bodyInnerTable().parentNode;
        var delta = 100;
        var deltaScroller = 0;
        if (e.type.toLowerCase() === 'click' || e.type.toLowerCase() === 'mousedown') {
            if (e.target.id === this._grid.elementIDManager.get_scrollerVertical_upId()) {
                delta *= -1;
            }
            delta = _bodyDiv.scrollTop + delta;
            deltaScroller = ((delta + this._contH) * this._scrollAreaH) / this._docH - this._scrollH;
            var xmlhttp = new XMLHttpRequest();
            xmlhttp.open('get', 'IISHandler1.ashx?id=' + 1, true);
            xmlhttp.send(null);
            xmlhttp.onreadystatechange = Function.createDelegate(this, function () {
                if (xmlhttp.readyState === 4) {
                    if (xmlhttp.status >= 200 && xmlhttp.status < 300) {
                    }
                    else {
                    }
                }
            });
        }
        else if (e.type.toLowerCase() === 'mousemove') {
            var bounds = Sys.UI.DomElement.getBounds(this._grid.elementInfo.get_scrollerVertical_up());
            deltaScroller = e.clientY + document.documentElement.scrollTop - (bounds.y + bounds.height) - this._verticalScrollingStart;
            delta = ((deltaScroller + this._scrollH) * this._docH) / this._scrollAreaH - this._contH;
        }
        else {
            if (e.type.toLowerCase() === 'mousewheel') {
                delta = _bodyDiv.scrollTop - (e.rawEvent).wheelDelta;
            }
            else {
                delta = _bodyDiv.scrollTop - ((e.rawEvent).detail * -40);
            }
            deltaScroller = ((delta + this._contH) * this._scrollAreaH) / this._docH - this._scrollH;
        }
        _bodyDiv.scrollTop = delta;
        this._grid.elementInfo.get_frozenBodyDiv().scrollTop = _bodyDiv.scrollTop;
        if (deltaScroller < 0) {
            deltaScroller = 0;
        }
        if (deltaScroller + Math.round(this._scrollH) > this._scrollAreaH) {
            deltaScroller = this._scrollAreaH - Math.round(this._scrollH);
        }
        this._scrollerVertical.style.top = deltaScroller + 'px';
        this._lastScrollerScrollTop = deltaScroller;
        this._lastBodyScrollTop = delta;
    },

    _onWheelFreeze: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_onWheelFreeze(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var frozenDiv = this._grid.elementInfo.get_frozenBodyDiv();
        var delta = 0;
        if (e.type.toLowerCase() === 'mousewheel') {
            delta = frozenDiv.scrollTop - (e.rawEvent).wheelDelta;
        }
        else {
            delta = frozenDiv.scrollTop - ((e.rawEvent).detail * -40);
        }
        var deltaScroller = ((delta + this._contH) * this._scrollAreaH) / this._docH - this._scrollH;
        frozenDiv.scrollTop = delta;
        this._grid.elementInfo.get_bodyInnerTable().parentNode.scrollTop = frozenDiv.scrollTop;
        if (deltaScroller < 0) {
            deltaScroller = 0;
        }
        if (deltaScroller + Math.round(this._scrollH) > this._scrollAreaH) {
            deltaScroller = this._scrollAreaH - Math.round(this._scrollH);
        }
        this._scrollerVertical.style.top = deltaScroller + 'px';
        this._lastScrollerScrollTop = deltaScroller;
        this._lastBodyScrollTop = delta;
    },

    _onScrollMainHorizontal: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_onScrollMainHorizontal(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var _bodyDiv = this._grid.elementInfo.get_bodyInnerTable().parentNode;
        var delta = 100;
        var deltaScroller = 0;
        var scrollerHorizontal_left = this._grid.elementInfo.get_scrollerHorizontal_left();
        if (e.type.toLowerCase() === 'click' || e.type.toLowerCase() === 'mousedown') {
            if (e.target.id === this._grid.elementIDManager.get_scrollerHorizontal_leftId()) {
                delta *= -1;
            }
            delta = _bodyDiv.scrollLeft + delta;
            deltaScroller = ((delta + this._contW) * this._scrollAreaW) / this._docW - this._scrollW;
        }
        else if (e.type.toLowerCase() === 'mousemove') {
            var bounds = Sys.UI.DomElement.getBounds(scrollerHorizontal_left);
            deltaScroller = e.clientX + document.documentElement.scrollLeft - (bounds.x + bounds.width) - this._horizontalScrollingStart;
            delta = ((deltaScroller + this._scrollW) * this._docW) / this._scrollAreaW - this._contW;
        }
        _bodyDiv.scrollLeft = delta;
        if (delta === 0 || _bodyDiv.scrollLeft === 0) {
            this._grid.elementInfo.get_headerInnerDiv().parentNode.scrollLeft = delta;
            this._lastBodyScrollLeft = delta;
        }
        if (deltaScroller < 0) {
            deltaScroller = 0;
        }
        if (deltaScroller + Math.round(this._scrollW) > this._scrollAreaW) {
            deltaScroller = this._scrollAreaW - Math.round(this._scrollW);
        }
        this._scrollerHorizontal.style.left = (scrollerHorizontal_left.offsetLeft + deltaScroller) + 'px';
        this._lastScrollerScrollLeft = scrollerHorizontal_left.offsetLeft + deltaScroller;
        this._lastBodyScrollLeft = delta;
        if (this._grid.elementInfo.get_mathOpFooter() != null) {
            var left = _bodyDiv.scrollLeft - this._grid.elementInfo.get_bodyInnerTable().offsetLeft;
            if (left === 0) {
                this._grid.elementInfo.get_mathOpFooter().style.left = this._grid.elementInfo.get_bodyInnerTable().parentNode.offsetLeft + 'px';
            }
            else {
                if (Sys.Browser.version < 8) {
                    this._grid.elementInfo.get_mathOpFooter().style.left = (-1 * left) + this._grid.elementInfo.get_bodyInnerTable().parentNode.offsetLeft + 'px';
                }
                else {
                    this._grid.elementInfo.get_mathOpFooter().style.left = (-1 * left) + 'px';
                }
            }
        }
    },

    _scrollMouseDown: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_scrollMouseDown(ishorizontal, e) {
        /// <param name="ishorizontal" type="Boolean">
        /// </param>
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var _bounds = null;
        if (ishorizontal) {
            _bounds = Sys.UI.DomElement.getBounds(this._scrollerHorizontal);
            this._horizontalScrollingStart = e.clientX - _bounds.x + document.documentElement.scrollLeft;
        }
        else {
            _bounds = Sys.UI.DomElement.getBounds(this._scrollerVertical);
            this._verticalScrollingStart = e.clientY - _bounds.y + document.documentElement.scrollTop;
        }
    },

    _onFailure: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_onFailure(failure) {
        /// <param name="failure" type="Object">
        /// </param>
        this._grid.serviceInProgress = false;
        this._grid.elementInfo.get_loading().style.display = 'none';
        com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(false);
        var ex = failure;
        if (ex.get_message() != null) {
            if (ex.get_message().endsWith('cache expired')) {
                this._grid.elementInfo.get_cacheStatusSymbol().style.display = '';
            }
            this._grid.showFailureMessage('Grid Engine Failed : ' + ex.get_message());
        }
        else if (ex.get_errorObject() != null) {
            if (ex.get_errorObject().toString().indexOf('cache expired') > 0) {
                this._grid.elementInfo.get_cacheStatusSymbol().style.display = '';
            }
            this._grid.showFailureMessage('Grid Engine Failed : Error Code : ' + ex.get_statusCode() + ' : Unspecified Error Occured. Check the logs.');
        }
    },

    _manageServiceCompleted: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_manageServiceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        var handler = this._grid.eventHandlerManager.get_eventsList().getHandler(com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnServiceCompleted);
        if (handler != null) {
            handler(serviceInfo);
        }
    },

    _managePreviouslySelectedCheckBox: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_managePreviouslySelectedCheckBox(eventType) {
        /// <param name="eventType" type="String">
        /// </param>
    },

    _getServiceInfo: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_getServiceInfo(output, extraInfo, input, eventType) {
        /// <param name="output" type="String">
        /// </param>
        /// <param name="extraInfo" type="String">
        /// </param>
        /// <param name="input" type="String">
        /// </param>
        /// <param name="eventType" type="String">
        /// </param>
        /// <returns type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo"></returns>
        var serviceInfo = new com.ivp.rad.controls.neogrid.scripts.ServiceInfo();
        serviceInfo.eventType = eventType;
        serviceInfo.input = input;
        serviceInfo.output = output;
        serviceInfo.serializedInfo = Sys.Serialization.JavaScriptSerializer.deserialize(extraInfo);
        return serviceInfo;
    },

    _refreshWithCache: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_refreshWithCache() {
        if (this.cache['resultData'] == null || this.cache['eventArg'] == null) {
            return;
        }
        var eventArgs = this.cache['eventArg'].toString().split(com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD);
        if (eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_CHECKED_ROWS || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_EXCEL || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_PDF || eventArgs[1] === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_VISIBLE_TO_EXCEL) {
            return;
        }
        this._onSuccess(this.cache['resultData'], this.cache['eventArg']);
    },

    _onmousedown: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_onmousedown(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.button === Sys.UI.MouseButton.rightButton) {
            this._currentpage = Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value);
            this._previousmousepos = e.clientX;
            eval('window.donotShowContextMenu = false');
        }
    },

    _oncontextmenu: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_oncontextmenu(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        e.preventDefault();
    },

    _onmousemove: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_onmousemove(evt) {
        /// <param name="evt" type="Sys.UI.DomEvent">
        /// </param>
        if (evt.clientX > this._previousmousepos) {
            if ((evt.clientX - this._previousmousepos) >= 200) {
                this._previousmousepos = evt.clientX;
                this._grid.elementInfo.get_pageNumber().value = (this._currentpage + 1).toString();
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT, this._grid.elementInfo.get_pageNumber().value, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT);
            }
        }
        else {
            if ((this._previousmousepos - evt.clientX) >= 200) {
                this._previousmousepos = evt.clientX;
                if (Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value) > 1) {
                    this._grid.elementInfo.get_pageNumber().value = (this._currentpage - 1).toString();
                    this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT, this._grid.elementInfo.get_pageNumber().value, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT);
                }
            }
        }
    },

    _resetGridPosition: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_resetGridPosition(eventArgs) {
        /// <param name="eventArgs" type="String">
        /// </param>
        if (eventArgs === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT) {
            if (this._grid.get_GridInfo().RequireInfiniteScroll) {
                if (this._grid.get_ScrollDir() === com.ivp.rad.controls.neogrid.scripts.ScrollDirection.DOWN) {
                    eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollTop(' + this._grid.elementInfo.get_bodyInnerDiv().scrollHeight + ')');
                    eval('$(\"#' + this._grid.get_id() + '_frozen_newbodyDiv' + '\" ).scrollTop(' + this._grid.elementInfo.get_bodyInnerDiv().scrollHeight + ')');
                    eval('$(\"#' + this._grid.get_id() + '_frozen_bodyDiv' + '\" ).scrollTop(' + this._grid.elementInfo.get_bodyInnerDiv().scrollHeight + ')');
                }
                else if (this._grid.get_ScrollDir() === com.ivp.rad.controls.neogrid.scripts.ScrollDirection.UP) {
                    eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollTop(' + 3 + ')');
                    eval('$(\"#' + this._grid.get_id() + '_frozen_newbodyDiv' + '\" ).scrollTop(' + 3 + ')');
                    eval('$(\"#' + this._grid.get_id() + '_frozen_bodyDiv' + '\" ).scrollTop(' + 3 + ')');
                    this._grid.get_GridInfo().IsOnFrozenTop = true;
                    this._grid.get_GridInfo().IsOnTop = true;
                }
            }
        }
		$(".xlMathematialFooterBody").scrollLeft(this._grid.get_InnerBodyPosition());
        eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollLeft(' + this._grid.get_InnerBodyPosition() + ')');
        eval('$(\"#' + this._grid.get_id() + '_headerDiv' + '\" ).scrollLeft(' + this._grid.get_HeaderDivPosition() + ')');
        eval('$(\"#' + this._grid.get_id() + '_headerExtraTableDiv\").scrollLeft(' + this._grid.get_InnerBodyPosition() + ')');
        var innerTableWidth = 0;
        if (window.jQuery(this._grid.elementInfo.get_bodyInnerDiv().firstChild).find('DIV[class*=\"' + this._grid.get_GridInfo().CssAlternatingRow + '\"]').length > 0) {
            innerTableWidth = window.jQuery(this._grid.elementInfo.get_bodyInnerDiv().firstChild).find('DIV[class*=\"' + this._grid.get_GridInfo().CssAlternatingRow + '\"]')[0].offsetWidth;
        }
        else {
            if (document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv').children.length > 0) {
                innerTableWidth = document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv').firstChild.offsetWidth;
            }
        }
        if ((this._grid.elementInfo.get_bodyInnerTable().offsetHeight < this._grid.elementInfo.get_bodyInnerDiv().offsetHeight) || (innerTableWidth <= this._grid.elementInfo.get_bodyInnerDiv().offsetWidth)) {
            window.jQuery(this._grid.elementInfo.get_bodyInnerDiv().firstChild).find('DIV[id*=' + this._grid.get_id() + '_HorizontalScrollRow]').css('display', 'none');
            window.jQuery(document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_newbodyDiv')).find('DIV[id*=' + this._grid.get_id() + '_HorizontalScrollRow]').css('display', 'none');
            window.jQuery(this._grid.elementInfo.get_frozenBodyDiv().firstChild).find('DIV[id*=' + this._grid.get_id() + '_FrozenHorizontalScrollRow]').css('display', 'none');
        }
        if (this._grid.elementInfo.get_bodyInnerTable().offsetHeight > this._grid.elementInfo.get_bodyInnerDiv().offsetHeight) {
            var percentscroll = 0;
            if ((this._grid.get_VerticalScrollPosition() + this._grid.get_VerticalScrollHeight()) > eval('$(\'#' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').height()')) {
                this._grid.set_VerticalScrollPosition(eval('$(\'#' + this._grid.elementIDManager.get_bodyInnerDiv() + '\').height()') - this._grid.get_VerticalScrollHeight() - 5);
            }
            percentscroll = this._grid.get_VerticalScrollPosition() / (this._grid.elementInfo.get_bodyInnerDiv().offsetHeight - this._grid.get_VerticalScrollHeight());
            var scrollTop = 0;
            if (this._grid.elementInfo.get_bodyInnerTable().offsetHeight > this._grid.elementInfo.get_bodyInnerDiv().offsetHeight) {
                scrollTop = Math.floor(percentscroll * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight - this._grid.elementInfo.get_bodyInnerDiv().offsetHeight));
            }
            if (eventArgs === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT) {
                if (this._grid.get_ScrollDir() === com.ivp.rad.controls.neogrid.scripts.ScrollDirection.DOWN) {
                    eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollTop(' + (this._grid.get_GridInfo().lastScrollTop - 3) + ')');
                    if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                        eval('$(\"#' + this._grid.get_id() + '_frozen_bodyDiv' + '\" ).scrollTop(' + (this._grid.get_GridInfo().lastScrollTop - 3) + ')');
                    }
                    if (document.getElementById(this._grid.get_id() + '_frozen_newbodyDiv') != null) {
                        eval('$(\"#' + this._grid.get_id() + '_frozen_newbodyDiv' + '\" ).scrollTop(' + (this._grid.get_GridInfo().lastScrollTop - 3) + ')');
                    }
                }
                else if (this._grid.get_ScrollDir() === com.ivp.rad.controls.neogrid.scripts.ScrollDirection.UP) {
                    eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollTop(' + 3 + ')');
                    if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                        eval('$(\"#' + this._grid.get_id() + '_frozen_bodyDiv' + '\" ).scrollTop(' + 3 + ')');
                    }
                    if (document.getElementById(this._grid.get_id() + '_frozen_newbodyDiv') != null) {
                        eval('$(\"#' + this._grid.get_id() + '_frozen_newbodyDiv' + '\" ).scrollTop(' + 3 + ')');
                    }
                }
            }
            else {
                eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollTop(' + this._grid.get_GridInfo().lastScrollTop + ')');
                if (this._grid.get_GridInfo().CheckBoxInfo != null) {
                    eval('$(\"#' + this._grid.get_id() + '_frozen_bodyDiv' + '\" ).scrollTop(' + this._grid.get_GridInfo().lastScrollTop + ')');
                }
                if (document.getElementById(this._grid.get_id() + '_frozen_newbodyDiv') != null) {
                    eval('$(\"#' + this._grid.get_id() + '_frozen_newbodyDiv' + '\" ).scrollTop(' + this._grid.get_GridInfo().lastScrollTop + ')');
                }
            }
        }
    },

    _resetVerticalScrollPosition: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_resetVerticalScrollPosition() {
        /// <returns type="Number" integer="true"></returns>
        var scrollLeft = eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollTop()');
        var percentScroll = (scrollLeft / (this._grid.elementInfo.get_bodyInnerTable().offsetHeight - this._grid.elementInfo.get_bodyInnerDiv().offsetHeight));
        return Number.parseInvariant((percentScroll * (this._grid.elementInfo.get_bodyInnerDiv().offsetHeight - this._grid.get_VerticalScrollHeight())).toString());
    },

    _resetHorizontalScrollPosition: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_resetHorizontalScrollPosition() {
        /// <returns type="Number" integer="true"></returns>
        var scrollLeft = eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollLeft()');
        var percentScroll = (scrollLeft / (document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv').offsetWidth - this._grid.elementInfo.get_bodyInnerDiv().offsetWidth));
        var scrollWidth = eval('$(\'.horizonslimScrollBar' + this._grid.get_GridInfo().GridId + '_bodyDiv\').width()');
        return Number.parseInvariant((percentScroll * (this._grid.elementInfo.get_bodyInnerDiv().offsetWidth - scrollWidth)).toString());
    },

    _setVerticalScroll: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_setVerticalScroll() {
        if (this._grid.elementInfo.get_bodyInnerTable() != null) {
            if (this._grid.elementInfo.get_bodyInnerTable().offsetHeight > this._grid.elementInfo.get_bodyInnerDiv().offsetHeight) {
                var percentscroll = 0;
                if ((this._grid.get_VerticalScrollPosition() + this._grid.get_VerticalScrollHeight()) > this._grid.elementInfo.get_bodyInnerDiv().offsetHeight) {
                    this._grid.set_VerticalScrollPosition(this._grid.elementInfo.get_bodyInnerDiv().offsetHeight - this._grid.get_VerticalScrollHeight() - 5);
                }
                percentscroll = this._grid.get_VerticalScrollPosition() / (this._grid.elementInfo.get_bodyInnerDiv().offsetHeight - this._grid.get_VerticalScrollHeight());
                var scrollTop = 0;
                if (this._grid.elementInfo.get_bodyInnerTable().offsetHeight > this._grid.elementInfo.get_bodyInnerDiv().offsetHeight) {
                    scrollTop = Math.floor(percentscroll * (this._grid.elementInfo.get_bodyInnerTable().offsetHeight - this._grid.elementInfo.get_bodyInnerDiv().offsetHeight));
                }
                eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollTop(' + scrollTop + ')');
                if (this._grid.elementInfo.get_frozenBodyDiv() != null) {
                    eval('$(\"#' + this._grid.get_id() + '_frozen_bodyDiv' + '\" ).scrollTop(' + scrollTop + ')');
                }
            }
        }
    },

    _onmouseup: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_onmouseup(evt) {
        /// <param name="evt" type="Sys.UI.DomEvent">
        /// </param>
        var currentpagenumber = Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value);
        if (evt.button === Sys.UI.MouseButton.rightButton) {
            if (evt.clientX > this._previousmousepos) {
                if ((evt.clientX - this._previousmousepos) >= 100) {
                    if (Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value) < Math.ceil(this._grid.footer._apparentRecordCount / this._grid.get_GridInfo().PageSize)) {
                        this._previousmousepos = evt.clientX;
                        this._grid.set_PreviousStartIndex(currentpagenumber * this._grid.get_GridInfo().PageSize);
                        this._grid.elementInfo.get_pageNumber().value = (this._currentpage + 1).toString();
                        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT, this._grid.elementInfo.get_pageNumber().value, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT);
                    }
                }
                eval('window.donotShowContextMenu = true');
            }
            else {
                if ((this._previousmousepos - evt.clientX) >= 100) {
                    this._previousmousepos = evt.clientX;
                    if (Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value) > 1) {
                        this._grid.set_PreviousStartIndex((currentpagenumber - 2) * this._grid.get_GridInfo().PageSize);
                        this._grid.elementInfo.get_pageNumber().value = (this._currentpage - 1).toString();
                        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT, this._grid.elementInfo.get_pageNumber().value, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT);
                    }
                    eval('window.donotShowContextMenu = true');
                }
            }
        }
    },

    _removeContextMenuHandler: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_removeContextMenuHandler(evt) {
        /// <param name="evt" type="Sys.UI.DomEvent">
        /// </param>
        evt.preventDefault();
    },

    _onkeyup: function com_ivp_rad_controls_neogrid_scripts_GridEngine$_onkeyup(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var groupbycolname = document.getElementById('dv_grouping').innerHTML;
        if (e.keyCode === Sys.UI.Key.enter) {
            if (!Array.contains(this._groupedColumns, groupbycolname)) {
                Array.add(this._groupedColumns, groupbycolname);
            }
            if (!this._grid.get_GridInfo().RequireGrouping) {
                return;
            }
            var info;
            var entry = null;
            for (var i = 0; i < this._groupedColumns.length; i++) {
                var $dict1 = this._columnIndexAndNameMap;
                for (var $key2 in $dict1) {
                    var _entry = { key: $key2, value: $dict1[$key2] };
                    entry = _entry;
                    if (entry.value.toString() === this._groupedColumns[i].toString()) {
                        break;
                    }
                }
                info = new com.ivp.rad.controls.neogrid.scripts.info.SortInfo();
                info.ColumnName = entry.value.toString();
                info.IsGrouped = true;
                info.SortOrder = com.ivp.rad.controls.neogrid.scripts.info.Order.ASC;
                Array.add(this._sortInfoList, info);
            }
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP, Sys.Serialization.JavaScriptSerializer.serialize(this._sortInfoList), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo

com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo = function com_ivp_rad_controls_neogrid_scripts_EventHandlerInfo() {
    /// <field name="element" type="Object">
    /// </field>
    /// <field name="eventName" type="String">
    /// </field>
    /// <field name="eventHandler" type="Object">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo.prototype = {
    element: null,
    eventName: null,
    eventHandler: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ServiceInfo

com.ivp.rad.controls.neogrid.scripts.ServiceInfo = function com_ivp_rad_controls_neogrid_scripts_ServiceInfo() {
    /// <field name="eventType" type="String">
    /// </field>
    /// <field name="output" type="String">
    /// </field>
    /// <field name="input" type="String">
    /// </field>
    /// <field name="serializedInfo" type="com.ivp.rad.controls.neogrid.scripts.info.GridExtraInfo">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.ServiceInfo.prototype = {
    eventType: null,
    output: null,
    input: null,
    serializedInfo: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs

com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs = function com_ivp_rad_controls_neogrid_scripts_GridColumnHeaderCellEventArgs(columnIndex, columnName, th) {
    /// <param name="columnIndex" type="Number" integer="true">
    /// </param>
    /// <param name="columnName" type="String">
    /// </param>
    /// <param name="th" type="Object" domElement="true">
    /// </param>
    /// <field name="_th" type="Object" domElement="true">
    /// </field>
    /// <field name="_columnIndex" type="Number" integer="true">
    /// </field>
    /// <field name="_columnName" type="String">
    /// </field>
    this._columnIndex = columnIndex;
    this._columnName = columnName;
    this._th = th;
}
com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs.prototype = {
    _th: null,
    _columnIndex: 0,
    _columnName: null,

    get_TH: function com_ivp_rad_controls_neogrid_scripts_GridColumnHeaderCellEventArgs$get_TH() {
        /// <value type="Object" domElement="true"></value>
        return this._th;
    },

    get_columnIndex: function com_ivp_rad_controls_neogrid_scripts_GridColumnHeaderCellEventArgs$get_columnIndex() {
        /// <value type="Number" integer="true"></value>
        return this._columnIndex;
    },

    get_columnName: function com_ivp_rad_controls_neogrid_scripts_GridColumnHeaderCellEventArgs$get_columnName() {
        /// <value type="String"></value>
        return this._columnName;
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager

com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager = function com_ivp_rad_controls_neogrid_scripts_GridEventHandlerManager() {
    /// <field name="eventHandlerList" type="Array" static="true">
    /// </field>
    /// <field name="_eventsList" type="Sys.EventHandlerList">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.prototype = {
    _eventsList: null,

    get_eventsList: function com_ivp_rad_controls_neogrid_scripts_GridEventHandlerManager$get_eventsList() {
        /// <value type="Sys.EventHandlerList"></value>
        if (this._eventsList == null) {
            this._eventsList = new Sys.EventHandlerList();
            return this._eventsList;
        }
        return this._eventsList;
    },

    addHeaderCellIterated: function com_ivp_rad_controls_neogrid_scripts_GridEventHandlerManager$addHeaderCellIterated(handler) {
        /// <param name="handler" type="com.ivp.rad.controls.neogrid.scripts.HeaderCellIteratedEventHandler">
        /// </param>
        var info = new com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo();
        info.eventName = com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventHeaderCellCellCreated;
        info.eventHandler = handler;
        Array.add(com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList, info);
        this.get_eventsList().addHandler(com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventHeaderCellCellCreated, handler);
    },

    removeHeaderCellIterated: function com_ivp_rad_controls_neogrid_scripts_GridEventHandlerManager$removeHeaderCellIterated(handler) {
        /// <param name="handler" type="Sys.EventHandler">
        /// </param>
        var info = new com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo();
        info.eventName = com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventHeaderCellCellCreated;
        info.eventHandler = handler;
        Array.remove(com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList, info);
        this.get_eventsList().removeHandler(com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventHeaderCellCellCreated, handler);
    },

    addServiceCompletedEventHandler: function com_ivp_rad_controls_neogrid_scripts_GridEventHandlerManager$addServiceCompletedEventHandler(handler) {
        /// <param name="handler" type="com.ivp.rad.controls.neogrid.scripts.ServiceCompletedEventHandler">
        /// </param>
        var info = new com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo();
        info.eventName = com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnServiceCompleted;
        info.eventHandler = handler;
        Array.add(com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList, info);
        this.get_eventsList().addHandler(com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnServiceCompleted, handler);
    },

    addServiceCompletedEventNameHandler: function com_ivp_rad_controls_neogrid_scripts_GridEventHandlerManager$addServiceCompletedEventNameHandler(handler) {
        /// <param name="handler" type="com.ivp.rad.controls.neogrid.scripts.ServiceCompletedEventHandler">
        /// </param>
        var info = new com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo();
        info.eventName = com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnServiceCompleted;
        info.eventHandler = handler;
        Array.add(com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList, info);
        this.get_eventsList().addHandler(com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnEventFired, handler);
    },

    removeServiceCompletedEventNameHandler: function com_ivp_rad_controls_neogrid_scripts_GridEventHandlerManager$removeServiceCompletedEventNameHandler(handler) {
        /// <param name="handler" type="com.ivp.rad.controls.neogrid.scripts.ServiceCompletedEventHandler">
        /// </param>
        var info = new com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo();
        info.eventName = com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnServiceCompleted;
        info.eventHandler = handler;
        var index = -1;
        for (var i = 0; i < com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList.length; i++) {
            if ((com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList[i]).eventName === com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnEventFired) {
                index = i;
                break;
            }
        }
        if (index > -1) {
            Array.removeAt(com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList, index);
            this.get_eventsList().removeHandler(com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnEventFired, handler);
        }
    },

    removeServiceCompletedEventHandler: function com_ivp_rad_controls_neogrid_scripts_GridEventHandlerManager$removeServiceCompletedEventHandler(handler) {
        /// <param name="handler" type="com.ivp.rad.controls.neogrid.scripts.ServiceCompletedEventHandler">
        /// </param>
        var info = new com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo();
        info.eventName = com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnServiceCompleted;
        info.eventHandler = handler;
        Array.remove(com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList, info);
        this.get_eventsList().removeHandler(com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnServiceCompleted, handler);
    },

    clearAllCustomHandlers: function com_ivp_rad_controls_neogrid_scripts_GridEventHandlerManager$clearAllCustomHandlers() {
        for (var i = 0; i < com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList.length; i++) {
            var info = com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList[i];
            if (info.eventName === com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventHeaderCellCellCreated) {
                this.get_eventsList().removeHandler(info.eventName, info.eventHandler);
            }
            else if (info.eventName === com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnServiceCompleted) {
                this.get_eventsList().removeHandler(info.eventName, info.eventHandler);
            }
            Array.removeAt(com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList, i);
            i--;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.Group

com.ivp.rad.controls.neogrid.scripts.Group = function com_ivp_rad_controls_neogrid_scripts_Group(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_dragDrop" type="com.ivp.rad.controls.scripts.raddragdropscripts.DragDrop">
    /// </field>
    /// <field name="_groupedColumns" type="Array">
    /// </field>
    /// <field name="_sortInfoList" type="Array">
    /// </field>
    /// <field name="_columnIndexAndNameMap" type="Object">
    /// </field>
    /// <field name="groupingInformation" type="Object">
    /// </field>
    /// <field name="_tempDom" type="Object" domElement="true">
    /// </field>
    /// <field name="_dragStart" type="Boolean">
    /// </field>
    /// <field name="columnName" type="String">
    /// </field>
    /// <field name="groupedData" type="String">
    /// </field>
    /// <field name="childLevel" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="isFirstLevelGroup" type="Boolean" static="true">
    /// </field>
    /// <field name="_headerRowContextClicked" type="Object" domElement="true">
    /// </field>
    /// <field name="_tdColapseGroup" type="Object" domElement="true">
    /// </field>
    /// <field name="_tdExpandGroup" type="Object" domElement="true">
    /// </field>
    /// <field name="_tdColapseAllGroups" type="Object" domElement="true">
    /// </field>
    /// <field name="_tdExpandAllGroups" type="Object" domElement="true">
    /// </field>
    /// <field name="_tdExtendedContextMenuColumn" type="Object" domElement="true">
    /// </field>
    this._grid = grid;
    this._dragStart = false;
    this._tempDom = document.createElement('DIV');
    this._tempDom.style.display = 'none';
    this._groupedColumns = [];
    this._sortInfoList = [];
    this._columnIndexAndNameMap = {};
    if (!this._grid.get_GridInfo().DoNotRearrangeColumn || this._grid.get_GridInfo().RequireGrouping) {
        this._dragDrop = $find(this._grid.elementIDManager.get_dragDropHeaderComponent());
        if (this._dragDrop == null) {
            this._dragDrop = new com.ivp.rad.controls.scripts.raddragdropscripts.DragDrop(this._grid.elementIDManager.get_dragDropHeaderComponent());
        }
        if (this._dragDrop.get_dragDropPropertyChangedHandler() != null) {
            this._dragDrop.remove_propertyChanged(this._dragDrop.get_dragDropPropertyChangedHandler());
        }
        this._dragDrop.set_dragDropPropertyChangedHandler(Function.createDelegate(this, this._dragDropPropertyChanged));
        this._dragDrop.add_propertyChanged(this._dragDrop.get_dragDropPropertyChangedHandler());
        var cellEventHandler = Function.createDelegate(this, this._iterateOnHeaderCellsForFilter);
        this._grid.eventHandlerManager.addHeaderCellIterated(cellEventHandler);
        this._dragDrop.endUpdate();
        var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
        this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
    }
}
com.ivp.rad.controls.neogrid.scripts.Group.prototype = {
    _grid: null,
    _dragDrop: null,
    _groupedColumns: null,
    _sortInfoList: null,
    _columnIndexAndNameMap: null,
    groupingInformation: null,
    _tempDom: null,
    _dragStart: false,
    columnName: '',
    groupedData: '',

    _iterateOnHeaderCellsForFilter: function com_ivp_rad_controls_neogrid_scripts_Group$_iterateOnHeaderCellsForFilter(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs">
        /// </param>
        try {
            var defGroupFound = false;
            var isresizeable = (e.get_TH().getAttribute('isFrozen') == null) ? true : (e.get_TH().getAttribute('isFrozen').toString() === 'false');
            var info = null;
            var childGridLevelIndiocatorParent = this._grid.elementHelper.get_divElement();
            if (this._grid.get_GridInfo().GridTheme !== com.ivp.rad.controls.neogrid.scripts.info.Theme.masterChildGridTheme) {
                childGridLevelIndiocatorParent.className = 'xlChildGridLevelIndicator';
            }
            var childGridLevelIndiocator = this._grid.elementHelper.get_divElement();
            for (var i = 0; i < this._grid.get_GridInfo().GridChildLevel; i++) {
                childGridLevelIndiocator = this._grid.elementHelper.get_divElement();
                if (this._grid.get_GridInfo().GridTheme !== com.ivp.rad.controls.neogrid.scripts.info.Theme.masterChildGridTheme) {
                    childGridLevelIndiocator.className = 'xlChildGridLevelIndicatorChild';
                }
                childGridLevelIndiocator.style.left = (i * 5) + 2 + 'px';
                childGridLevelIndiocatorParent.appendChild(childGridLevelIndiocator);
            }
            if (document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv').children.length > 0 && this._grid.get_GridInfo().GridChildLevel > 0) {
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv').children[0].getAttribute('masterchildcolumnmap') != null) {
                    var title = document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv').children[0].getAttribute('masterchildcolumnmap').toString();
                    childGridLevelIndiocatorParent.title = title.split('||')[this._grid.get_GridInfo().GridChildLevel - 1].replace(new RegExp('[|]', 'gi'), ' , ').toString();
                }
            }
            var sortFilterDiv = this._grid.elementHelper.get_divElement();
            sortFilterDiv.className = 'xlneofilterSortDiv';
            var groupDiv = this._createGroupDiv(e);
            var resizingDiv = this._grid.elementHelper.get_divElement();
            resizingDiv.innerHTML = '&nbsp;';
            resizingDiv.className = 'xlneoresizingDiv';
            if (!this._grid.get_GridInfo().RequireResizing) {
                resizingDiv.style.width = '0px';
            }
            if (isresizeable) {
                resizingDiv.id = this._grid.get_id() + '_' + e.get_columnIndex() + '_Resize';
            }
            else {
                resizingDiv.style.cursor = 'pointer';
            }
            var customHeaderElement = document.createElement('DIV');
            var customHeaderMaskingElement = document.createElement('DIV');
            if (Array.contains(window.Object.keys(this._grid.get_GridInfo().CustomHeaderInfo), e.get_columnName())) {
                customHeaderElement.innerHTML = (this._grid.get_GridInfo().CustomHeaderInfo[e.get_columnName()]).AppendChild;
                customHeaderElement.className = 'xlneoCUstomElement';
                customHeaderElement.style.width = (this._grid.get_GridInfo().CustomHeaderInfo[e.get_columnName()]).ColumnWidth + 'px';
                e.get_TH().appendChild(customHeaderElement);
            }
           
            e.get_TH().appendChild(resizingDiv);
            e.get_TH().appendChild(sortFilterDiv);
            if (this._grid.get_GridInfo().DistributionSuggestion != null && this._grid.get_GridInfo().MaskingSuggestionInfo != null) {
                if (this._grid.get_GridInfo().MaskingSuggestionInfo.length > 0 && this._grid.get_GridInfo().DistributionSuggestion == true) {
                    for (var i = 0; i < this._grid.get_GridInfo().MaskingSuggestionInfo.length; i++) {
                        if (this._grid.get_GridInfo().MaskingSuggestionInfo[i].ColumnName == e.get_columnName()) {
                            //customHeaderMaskingElement.innerHTML = "M";
                            if (!Array.contains(window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping), e.get_columnName()))
                                customHeaderMaskingElement.className = 'xlneoMaskingElement xlneoRADHover';
                            else
                                customHeaderMaskingElement.className = 'xlneoMaskedElement xlneoRADHover';
                            customHeaderMaskingElement.title = "";
                            if (this._grid.get_GridInfo().MaskingSuggestionInfo[i].TypeOfMasking == 0) {
                                customHeaderMaskingElement.setAttribute("MaskingSuggestion", "Billions(B)");
                            }
                            else if (this._grid.get_GridInfo().MaskingSuggestionInfo[i].TypeOfMasking == 1) {
                                customHeaderMaskingElement.setAttribute("MaskingSuggestion", "Millions(M)");
                            }
                            else if (this._grid.get_GridInfo().MaskingSuggestionInfo[i].TypeOfMasking == 2) {
                                customHeaderMaskingElement.setAttribute("MaskingSuggestion", "Thousands(K)");
                            }

                            e.get_TH().appendChild(customHeaderMaskingElement);
                        }
                    }
                }
            }
            e.get_TH().appendChild(groupDiv);
            if(this._grid.get_GridInfo().AutoAdjust == 3)
            {
                if(groupDiv.offsetWidth < groupDiv.scrollWidth)
                    groupDiv.setAttribute("headercenter-ellipsis", $(groupDiv).text().substring($(groupDiv).text().length, $(groupDiv).text().length - 4));
                    //if (this._grid.get_GridInfo().AutoAdjust == 3)
                    //    if (e.offsetWidth < e.scrollWidth) {
                    //        {

                    //        }
                    //        groupDiv.setAttribute("headercenter-ellipsis", e.get_TH().innerHTML.substring(e.get_TH().innerHTML.length, e.get_TH().innerHTML.length - 3));
                    //        //ellipsisDivs = $("#" + this._grid.get_id() + "_headerDiv_Table").find(".xlneogroupDiv");
                    //        //this._generateDataTail(ellipsisDivs, GridExtraInfo);
            }
            if (this._grid.get_GridInfo().IsMasterChildGrid) {
                if (this._grid.get_GridInfo().GridChildLevel > 0) {
                    if (e.get_TH().previousSibling != null) {
                        if (e.get_TH().previousSibling.className === 'xlMaterChildGridColumn') {
                            e.get_TH().previousSibling.style.position = 'relative';
                            e.get_TH().previousSibling.appendChild(childGridLevelIndiocatorParent);
                        }
                    }
                    else {
                        if (e.get_TH().parentNode.className === 'xlMaterChildGridColumn') {
                            e.get_TH().parentNode.style.position = 'relative';
                            e.get_TH().parentNode.appendChild(childGridLevelIndiocatorParent);
                        }
                        else {
                            e.get_TH().appendChild(childGridLevelIndiocatorParent);
                        }
                    }
                }
            }
            if (this._grid.get_GridInfo().RightAlignHeaderForNumerics && (e.get_TH().getAttribute('dataType') != null && (e.get_TH().getAttribute('dataType').toString() === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal || e.get_TH().getAttribute('dataType').toString() === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int || e.get_TH().getAttribute('dataType').toString() === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double || e.get_TH().getAttribute('dataType').toString() === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime || e.get_TH().getAttribute('dataType').toString() === 'xs_long'))) {
                sortFilterDiv.style.styleFloat = 'left';
                customHeaderMaskingElement.style.styleFloat = 'left';
                sortFilterDiv.className = 'xlneofilterSortDivFloatLeft';
                groupDiv.style.textAlign = 'right';
            }
            this._columnIndexAndNameMap[e.get_columnIndex().toString()] = e.get_columnName();
            var dragDropInfo = new com.ivp.rad.controls.scripts.raddragdropscripts.DragDropInfo();
            dragDropInfo.draggableObject = groupDiv;
            if (e.get_TH().getAttribute('dataType') != null && (e.get_TH().getAttribute('dataType').toString() === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal || e.get_TH().getAttribute('dataType').toString() === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int || e.get_TH().getAttribute('dataType').toString() === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double || e.get_TH().getAttribute('dataType').toString() === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime)) {
                if (this._grid.elementInfo.get_sliderFilterDiv() != null) {
                    Array.add(dragDropInfo.dropContainers, this._grid.elementInfo.get_sliderFilterDiv());
                }
                Array.add(this._grid.sliderFilter._sliderFilterableColumns, e.get_columnName());
            }
            if (this._grid.get_GridInfo().RequireGrouping && document.getElementById(this._grid.elementIDManager.get_groupDropPanel()) != null) {
                Array.add(dragDropInfo.dropContainers, document.getElementById(this._grid.elementIDManager.get_groupDropPanel()));
            }
            if (!this._grid.get_GridInfo().DoNotRearrangeColumn) {
                if (document.getElementById(this._grid.elementIDManager.get_frozenHeaderDivID()) != null) {
                    Array.add(dragDropInfo.dropContainers, document.getElementById(this._grid.elementIDManager.get_frozenHeaderDivID()));
                }
                if (document.getElementById(this._grid.elementIDManager.get_fluidHeaderDivID()) != null) {
                    Array.add(dragDropInfo.dropContainers, document.getElementById(this._grid.elementIDManager.get_fluidHeaderDivID()));
                }
            }
            dragDropInfo.visualMovingElement = this._createVisualClue(groupDiv.innerHTML);
            dragDropInfo.index = e.get_columnName();
            for (var i = 0; i < this._grid.get_DefaultGroupedAndSortedColumns().length; i++) {
                info = this._grid.get_DefaultGroupedAndSortedColumns()[i];
                if ((info.IsGrouped) && info.ColumnName === e.get_columnName()) {
                    if (!Array.contains(this._groupedColumns, dragDropInfo.index)) {
                        Array.add(this._groupedColumns, dragDropInfo.index);
                    }
                    defGroupFound = true;
                    break;
                }
            }
            dragDropInfo.dragObjectType = com.ivp.rad.controls.scripts.raddragdropscripts.DragObjectType.dropableObject;
            Array.add(this._dragDrop.get_dragDropInfos(), dragDropInfo);
            this._dragDrop.endUpdate();
            if (defGroupFound) {
                this.recreateDropContainer(false);
            }
        }
        catch (ex) {
            throw ex;
        }
    },

    _createGroupDiv: function com_ivp_rad_controls_neogrid_scripts_Group$_createGroupDiv(e) {
        /// <param name="e" type="com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var groupDiv = this._grid.elementHelper.get_divElement();
        groupDiv.id = this._grid.get_id() + '_' + e.get_columnIndex() + '_Group';
        groupDiv.setAttribute('columnName', e.get_columnName());
        groupDiv.setAttribute('columnIndex', e.get_columnIndex());
        groupDiv.setAttribute('isgridheader', true);
        var width = 22;
        if (Array.contains(window.Object.keys(this._grid.get_GridInfo().CustomHeaderInfo), e.get_columnName())) {
            width += (this._grid.get_GridInfo().CustomHeaderInfo[e.get_columnName()]).ColumnWidth;
        }
        if (this._grid.get_GridInfo().DistributionSuggestion != null && this._grid.get_GridInfo().MaskingSuggestionInfo != null) {
            if (this._grid.get_GridInfo().MaskingSuggestionInfo.length > 0 && this._grid.get_GridInfo().DistributionSuggestion == true) {
                for (var i = 0; i < this._grid.get_GridInfo().MaskingSuggestionInfo.length; i++) {
                    if (this._grid.get_GridInfo().MaskingSuggestionInfo[i].ColumnName == e.get_columnName()) {
                        width += 22;
                    }
                }
            }
        }
        groupDiv.setAttribute('style', 'width:' + (Number.parseInvariant(e.get_TH().style.width.replace('px', '')) - width).toString() + 'px;');
        groupDiv.innerHTML = e.get_TH().innerHTML;
       
        e.get_TH().innerHTML = '';
       
        if (this._grid.get_GridInfo().IsMasterChildGrid) {
            if (this._grid.get_GridInfo().MasterGridId !== this._grid.get_GridInfo().GridId) {
                groupDiv.className = 'xlgroupDivChildGrid';
            }
            else {
                groupDiv.className = this._grid.get_GridInfo().CssGroupDiv;
            }
        }
        else {
            groupDiv.className = this._grid.get_GridInfo().CssGroupDiv;
        }
        return groupDiv;
    },

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_Group$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        var groupInfo = null;
        Array.clear(this._groupedColumns);
        Array.forEach(serviceInfo.serializedInfo.GroupedSortedColumns, Function.createDelegate(this, function (o) {
            groupInfo = o;
            var ColumnsToHideLinq = new LINQ(this._grid.get_GridInfo().ColumnsToHide);
            var clause = Function.createDelegate(this, function (o1, index) {
                var c = o1;
                return c.ColumnName === groupInfo.ColumnName;
            });
            if (ColumnsToHideLinq != null) {
                if (groupInfo.IsGrouped && !ColumnsToHideLinq.Any(clause)) {
                    Array.add(this._groupedColumns, groupInfo.ColumnName);
                }
            }
            else {
                if (groupInfo.IsGrouped && !ColumnsToHideLinq.Any(clause)) {
                    Array.add(this._groupedColumns, groupInfo.ColumnName);
                }
            }
        }));
        this.recreateDropContainer(false);
    },

    handleDrop: function com_ivp_rad_controls_neogrid_scripts_Group$handleDrop(dragDrop) {
        /// <param name="dragDrop" type="com.ivp.rad.controls.scripts.raddragdropscripts.DragDrop">
        /// </param>
        switch (dragDrop.get_dragObjectType()) {
            case com.ivp.rad.controls.scripts.raddragdropscripts.DragObjectType.dropableObject:
                if (dragDrop.get_targetRaisedEvent().id.startsWith(this._grid.elementIDManager.get_droppedDivID()) || dragDrop.get_targetRaisedEvent().id.startsWith(this._grid.elementIDManager.get_droppedDivSepID()) || dragDrop.get_targetRaisedEvent().id.startsWith('emptydiv' + this._grid.elementIDManager.get_droppedDivSepID())) {
                    if (dragDrop.get_index() != null && !Array.contains(this._groupedColumns, dragDrop.get_index())) {
                        var columnIndex = com.ivp.rad.controls.neogrid.scripts.GridUIHelper.getIndexById(dragDrop.get_targetRaisedEvent().id);
                        Array.insert(this._groupedColumns, Array.indexOf(this._groupedColumns, this._columnIndexAndNameMap[columnIndex.toString()]), dragDrop.get_index());
                    }
                    else {
                        return;
                    }
                }
                else {
                    if (dragDrop.get_targetRaisedEvent().id === this._grid.elementIDManager.get_sliderFilterDiv()) {
                        if (!Array.contains(this._grid.sliderFilter._sliderFilteredColumns, dragDrop.get_index())) {
                            this._grid.sliderFilter.createSlider(dragDrop);
                            return;
                        }
                    }
                    else {
                        if (dragDrop.get_index() != null && !Array.contains(this._groupedColumns, dragDrop.get_index())) {
                            Array.add(this._groupedColumns, dragDrop.get_index());
                        }
                        else {
                            return;
                        }
                    }
                }
                break;
            case com.ivp.rad.controls.scripts.raddragdropscripts.DragObjectType.droppedObject:
                if (dragDrop.get_targetRaisedEvent().id.startsWith(this._grid.elementIDManager.get_droppedDivID()) || dragDrop.get_targetRaisedEvent().id.startsWith(this._grid.elementIDManager.get_droppedDivSepID()) || dragDrop.get_targetRaisedEvent().id.startsWith('emptydiv' + this._grid.elementIDManager.get_droppedDivSepID())) {
                    /*var columnIndex = com.ivp.rad.controls.neogrid.scripts.GridUIHelper.getIndexById(dragDrop.get_targetRaisedEvent().id);
                    var previousColumnIndex = this._getPreviousColumnIndex(columnIndex);
                    Array.remove(this._groupedColumns, dragDrop.get_index());
                    var entry = null;
                    var $dict1 = this._columnIndexAndNameMap;
                    for (var $key2 in $dict1) {
                        var _entry = { key: $key2, value: $dict1[$key2] };
                        entry = _entry;
                        if (entry.value.toString() === dragDrop.get_index()) {
                            break;
                        }
                    }
                    if (previousColumnIndex === Number.parseInvariant(entry.key)) {
                        Array.insert(this._groupedColumns, Array.indexOf(this._groupedColumns, this._columnIndexAndNameMap[columnIndex.toString()]) + 1, dragDrop.get_index());
                    }
                    else {
                        Array.insert(this._groupedColumns, Array.indexOf(this._groupedColumns, this._columnIndexAndNameMap[columnIndex.toString()]), dragDrop.get_index());
                    }*/
                }
                else {
					var index = this._groupedColumns.indexOf(dragDrop.get_targetRaisedEvent().firstChild.getAttribute("columnname"));
                    Array.remove(this._groupedColumns, dragDrop.get_index());
                   //Array.add(this._groupedColumns, dragDrop.get_index());
				    if(index == -1)
						index = this._groupedColumns.length;
					this._groupedColumns.splice(index,0,dragDrop.get_index());
                }
                break;
        }
        var gro = this._groupedColumns.toString();
        this.recreateDropContainer(true);
    },

    _handleDropUnSuccess: function com_ivp_rad_controls_neogrid_scripts_Group$_handleDropUnSuccess(dragDrop) {
        /// <param name="dragDrop" type="com.ivp.rad.controls.scripts.raddragdropscripts.DragDrop">
        /// </param>
        if ((dragDrop.get_dragObjectType() === com.ivp.rad.controls.scripts.raddragdropscripts.DragObjectType.droppedObject) && (!Array.contains(this._grid.get_DefaultGroupedAndSortedColumns(), this._columnIndexAndNameMap[dragDrop.get_index()]))) {
            if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null) {
                com.ivp.rad.controls.neogrid.scripts.UpperHeader.createBootBoxPopUp();
            }
            else {
                Array.remove(this._groupedColumns, dragDrop.get_index());
            }
        }
        var gro = this._groupedColumns.toString();
        this.recreateDropContainer(true);
    },

    recreateDropContainer: function com_ivp_rad_controls_neogrid_scripts_Group$recreateDropContainer(callService) {
        /// <param name="callService" type="Boolean">
        /// </param>
        if (!this._grid.get_GridInfo().RequireGrouping) {
            return;
        }
        var info = null;
        this._sortInfoList = [];
        var expectedId = this._grid.elementIDManager.get_groupDropPanel();
        var dropContainer = document.getElementById(this._grid.elementIDManager.get_groupDropPanel());
        if (dropContainer != null) {
            for (var i = 0; i < dropContainer.childNodes.length; i++) {
                $clearHandlers(dropContainer.childNodes[i]);
                dropContainer.removeChild(dropContainer.childNodes[i]);
            }
            dropContainer.innerHTML = '';
            var entry = null;
            for (var j = 0; j < this._groupedColumns.length; j++) {
                entry = null;
                var $dict1 = this._columnIndexAndNameMap;
                for (var $key2 in $dict1) {
                    var _entry = { key: $key2, value: $dict1[$key2] };
                    if (_entry.value.toString() === this._groupedColumns[j].toString()) {
                        entry = _entry;
                        break;
                    }
                }
                if (entry != null) {
                    this._appendGroupSeprator(dropContainer, Number.parseLocale(entry.key));
                    dropContainer.appendChild(this._generateDropButton(Number.parseLocale(entry.key)));
                    info = new com.ivp.rad.controls.neogrid.scripts.info.SortInfo();
                    info.ColumnName = entry.value.toString();
                    info.IsGrouped = true;
                    info.SortOrder = com.ivp.rad.controls.neogrid.scripts.info.Order.ASC;
                    Array.add(this._sortInfoList, info);
                }
            }
            if (this._groupedColumns.length === 0) {
                this._grid.raddomElement.setInnerContent(dropContainer, 'Drag here to group.');
            }
            else {
            }
            if (callService) {
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP, Sys.Serialization.JavaScriptSerializer.serialize(this._sortInfoList), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP);
            }
        }
    },

    _getPreviousColumnIndex: function com_ivp_rad_controls_neogrid_scripts_Group$_getPreviousColumnIndex(currentColIndex) {
        /// <param name="currentColIndex" type="Number" integer="true">
        /// </param>
        /// <returns type="Number" integer="true"></returns>
        if (this._groupedColumns.length > 1) {
            if (Array.indexOf(this._groupedColumns, this._columnIndexAndNameMap[currentColIndex.toString()]) > 0) {
                return Number.parseLocale(this._groupedColumns[Array.indexOf(this._groupedColumns, this._columnIndexAndNameMap[currentColIndex.toString()]) - 1].toString());
            }
        }
        return -1;
    },

    _handleDragDroppedElStart: function com_ivp_rad_controls_neogrid_scripts_Group$_handleDragDroppedElStart(element, columnIndex) {
        /// <param name="element" type="Object" domElement="true">
        /// </param>
        /// <param name="columnIndex" type="Number" integer="true">
        /// </param>
        var _dragDropInfo = new com.ivp.rad.controls.scripts.raddragdropscripts.DragDropInfo();
        _dragDropInfo.draggableObject = element;
        _dragDropInfo.dragObjectType = com.ivp.rad.controls.scripts.raddragdropscripts.DragObjectType.droppedObject;
        Array.add(_dragDropInfo.dropContainers, this._grid.elementInfo.get_groupDropPanel());
        _dragDropInfo.visualMovingElement = this._createVisualClueForDroppedElement(element.children[0].innerHTML);
        _dragDropInfo.index = this._columnIndexAndNameMap[columnIndex.toString()].toLocaleString();
        Array.add(this._dragDrop.get_dragDropInfos(), _dragDropInfo);
        this._dragDrop.endUpdate();
    },

    _dragDropPropertyChanged: function com_ivp_rad_controls_neogrid_scripts_Group$_dragDropPropertyChanged(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="Sys.PropertyChangedEventArgs">
        /// </param>
        var dragDrop = sender;
        if (this._grid.editGrid != null) {
            this._grid.editGrid.lastSelectedCell = null;
        }
        if (e.get_propertyName() === 'DragStarted') {
            this._dragStart = true;
            dragDrop.set_createVisualClue(true);
        }
        if (dragDrop.get_dropContainer() != null && (dragDrop.get_dropContainer().id === this._grid.elementIDManager.get_frozenHeaderDivID() || dragDrop.get_dropContainer().id === this._grid.elementIDManager.get_fluidHeaderDivID())) {
            if (!this._grid.get_GridInfo().DoNotRearrangeColumn) {
                this._grid.manageColumns.rearrangeColumnHandler(dragDrop, e);
            }
            return;
        }
        if (e.get_propertyName() === 'DragEndSuccess') {
            if (dragDrop.get_targetRaisedEvent().className === 'crossInGroupDragButton' || dragDrop.get_targetRaisedEvent().className === 'sortInGroupDragButton' || dragDrop.get_targetRaisedEvent().className === 'DescSortInGroupDragButton' || dragDrop.get_targetRaisedEvent().className === 'xlneofilterIcon' || dragDrop.get_targetRaisedEvent().className === 'xlneofilterDropIcon') {
            }
            else {
                this.handleDrop(dragDrop);
                this._dragStart = false;
            }
        }
        else if (e.get_propertyName() === 'DragEndUnSuccess') {
            this._handleDropUnSuccess(dragDrop);
            this._dragStart = false;
        }
    },

    _createVisualClueForDroppedElement: function com_ivp_rad_controls_neogrid_scripts_Group$_createVisualClueForDroppedElement(el) {
        /// <param name="el" type="String">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var draggingDiv = document.createElement('DIV');
        var MainDiv = document.createElement('DIV');
        var CrossDiv = document.createElement('DIV');
        draggingDiv.style.border = '1px';
        this._grid.raddomElement.setInnerContent(draggingDiv, el);
        draggingDiv.id = '';
        draggingDiv.style.display = 'inline';
        draggingDiv.style.verticalAlign = 'middle';
        draggingDiv.style.paddingLeft = '5px';
        draggingDiv.style.zIndex = 10002;
        draggingDiv.className = 'neogroupDragButton';
        MainDiv.className = 'DraggedgroupDragButton';
        MainDiv.appendChild(draggingDiv);
        CrossDiv.className = 'crossInGroupDragButton';
        MainDiv.appendChild(CrossDiv);
        return MainDiv;
    },

    _createVisualClue: function com_ivp_rad_controls_neogrid_scripts_Group$_createVisualClue(columnName) {
        /// <param name="columnName" type="String">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var draggingDiv = document.createElement('DIV');
        draggingDiv.innerHTML = columnName;
        draggingDiv.style.height = '22px';
        draggingDiv.style.verticalAlign = 'middle';
        draggingDiv.style.paddingLeft = '5px';
        draggingDiv.className = 'DraggedgroupDragButtonStart';
        draggingDiv.style.zIndex = 10002;
        return draggingDiv;
    },

    _generateDropButton: function com_ivp_rad_controls_neogrid_scripts_Group$_generateDropButton(columnIndex) {
        /// <param name="columnIndex" type="Number" integer="true">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var elToBeDropped = document.createElement('DIV');
        var MainElToBeDropped = document.createElement('DIV');
        var SortElToBeDropped = document.createElement('DIV');
        var CrossElToBeDropped = document.createElement('DIV');
        var FilterElToBeDropped = document.createElement('DIV');
        elToBeDropped.id = this._grid.elementIDManager.get_droppedDivID() + columnIndex;
        var innerHtml = this._columnIndexAndNameMap[columnIndex.toString()].toString();
        elToBeDropped.setAttribute('columnname', innerHtml);
        if (this._grid.get_GridInfo().ColumnNameMapping[innerHtml] != null) {
            elToBeDropped.innerHTML = this._grid.get_GridInfo().ColumnNameMapping[innerHtml].toString();
        }
        else {
            elToBeDropped.innerHTML = innerHtml;
        }
        elToBeDropped.style.display = 'inline';
        elToBeDropped.className = 'neogroupDragButton';
        if (!this._grid.get_GridInfo().RequireMiniatureVersion) {
            MainElToBeDropped.className = 'maingroupDragButton';
        }
        else {
            MainElToBeDropped.className = 'maingroupDragButtonPnL';
        }
        CrossElToBeDropped.className = 'crossInGroupDragButton';
        CrossElToBeDropped.title = 'Click here to Ungroup';
        FilterElToBeDropped.id = 'Filter' + innerHtml + '_FilterListShow';
        FilterElToBeDropped.className = 'xlneofilterIcon';
        FilterElToBeDropped.setAttribute('columnname', innerHtml);
        FilterElToBeDropped.title = 'Click Here To Filter';
        FilterElToBeDropped.style.marginTop = '1px';
        FilterElToBeDropped.style.height = '20px';
        FilterElToBeDropped.style.width = '20px';
        FilterElToBeDropped.style.paddingTop = '0px';
        eval('$(FilterElToBeDropped).css({float: \'right\'})');
        FilterElToBeDropped.style.styleFloat = 'right  !important';
        SortElToBeDropped.title = 'Click here to Sort';
        for (var index = 0; index < this._grid.sort.sortedColumns.length; index++) {
            var s_info = this._grid.sort.sortedColumns[index];
            if (s_info.ColumnName === innerHtml) {
                switch (s_info.SortOrder) {
                    case com.ivp.rad.controls.neogrid.scripts.info.Order.ASC:
                        SortElToBeDropped.className = 'sortInGroupDragButton';
                        break;
                    case com.ivp.rad.controls.neogrid.scripts.info.Order.DESC:
                        SortElToBeDropped.className = 'DescSortInGroupDragButton';
                        break;
                    default:
                        SortElToBeDropped.className = 'sortInGroupDragButton';
                        break;
                }
                break;
            }
        }
        if (SortElToBeDropped.className === '') {
            SortElToBeDropped.className = 'sortInGroupDragButton';
        }
        MainElToBeDropped.appendChild(elToBeDropped);
        MainElToBeDropped.appendChild(SortElToBeDropped);
        MainElToBeDropped.appendChild(CrossElToBeDropped);
        MainElToBeDropped.appendChild(FilterElToBeDropped);
        this._handleDragDroppedElStart(MainElToBeDropped, columnIndex);
        return MainElToBeDropped;
    },

    _appendGroupSeprator: function com_ivp_rad_controls_neogrid_scripts_Group$_appendGroupSeprator(dropContainer, columnIndex) {
        /// <param name="dropContainer" type="Object" domElement="true">
        /// </param>
        /// <param name="columnIndex" type="Number" integer="true">
        /// </param>
        if (dropContainer.getElementsByTagName('DIV').length !== 0) {
            var elSep = document.createElement('DIV');
            elSep.id = this._grid.elementIDManager.get_droppedDivSepID() + columnIndex;
            elSep.className = 'groupDragButtonSeparator';
            elSep.innerHTML = '--&nbsp;';
            elSep.style.display = 'inline';
            dropContainer.appendChild(elSep);
        }
    },

    mouseMoveOnGroup: function com_ivp_rad_controls_neogrid_scripts_Group$mouseMoveOnGroup(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var TargetId = e.target.id;
        if (TargetId != null && TargetId.startsWith(this._grid.elementIDManager.get_droppedDivSepID()) && (this._dragStart)) {
            var emptyDiv = document.createElement('DIV');
            emptyDiv.id = 'emptydiv' + TargetId;
            emptyDiv.className = '.groupDragButtonSeparator';
            document.getElementById(this._grid.elementIDManager.get_groupDropPanel()).replaceChild(emptyDiv, e.target);
            this._tempDom.appendChild(e.target);
            var mouseOut = Function.createDelegate(this, this._mouseOutHandler);
            $addHandler(emptyDiv, 'mouseout', mouseOut);
        }
    },

    _mouseOutHandler: function com_ivp_rad_controls_neogrid_scripts_Group$_mouseOutHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        $clearHandlers(e.target);
        document.getElementById(this._grid.elementIDManager.get_groupDropPanel()).replaceChild(this._tempDom.children[0], e.target);
        this._tempDom.innerHTML = '';
    },

    _mouseOutHandler: function com_ivp_rad_controls_neogrid_scripts_Group$_mouseOutHandler() {
        if (document.getElementById(this._grid.elementIDManager.get_groupDropPanel()) != null) {
            document.getElementById(this._grid.elementIDManager.get_groupDropPanel()).className = 'xlneogroupDropPanel';
        }
        if (this._grid.get_GridInfo().RequireMiniatureVersion) {
            document.getElementById(this._grid.elementIDManager.get_groupDropPanel()).className = 'xlneogroupDropPanelPnLTheme';
        }
    },

    removeGrouping: function com_ivp_rad_controls_neogrid_scripts_Group$removeGrouping(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._grid.elementInfo.get_groupDropPanel().innerHTML = 'Drag here to group.';
        this._grid.elementInfo.get_groupDropPanel().style.backgroundColor = '';
        this._groupedColumns = [];
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP_REMOVE_ALL, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP_REMOVE_ALL);
    },

    manageExpandCollapse: function com_ivp_rad_controls_neogrid_scripts_Group$manageExpandCollapse(ele, e) {
        /// <param name="ele" type="Object" domElement="true">
        /// </param>
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var collInfo = new com.ivp.rad.controls.neogrid.scripts.Info.CollapseInfo();
        collInfo.groupRowId = ele.getAttribute('groupRowId').toString();
        collInfo.isCollpased = !Boolean.parse(ele.getAttribute('isCollapsed').toString());
        if (this._grid.groupCollapseExpand != null) {
            this._grid.groupCollapseExpand(ele);
        }
        if (collInfo.isCollpased) {
            if (e.target.className === 'neocollapseGroupButton fa fa-caret-down' || e.target.className === 'neoexpandGroupButton fa fa-caret-right') {
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSE, Sys.Serialization.JavaScriptSerializer.serialize(collInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSE);
            }
        }
        else {
            if (e.target.className === 'neocollapseGroupButton fa fa-caret-down' || e.target.className === 'neoexpandGroupButton fa fa-caret-right') {
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPAND, Sys.Serialization.JavaScriptSerializer.serialize(collInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPAND);
            }
        }
    },

    _headerRowContextClicked: null,

    onContextMenuGroupRow: function com_ivp_rad_controls_neogrid_scripts_Group$onContextMenuGroupRow(headerRow, e) {
        /// <param name="headerRow" type="Object" domElement="true">
        /// </param>
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._headerRowContextClicked = headerRow;
        var groupContextMenu = this._createGroupContextMenu(e);

        var documentHeight = document.documentElement.clientHeight;
        var documentWidth = document.documentElement.clientWidth;
        var locationX = e.clientX + document.documentElement.scrollLeft;
        var locationY = e.clientY + document.documentElement.scrollTop;
        var posLeft = (locationX + eval('parseInt($(groupContextMenu).width())') > documentWidth) ? (locationX + 5 - eval('parseInt($(groupContextMenu).width())')) : locationX;
        groupContextMenu.style.left = posLeft + 'px';
        var posTop = (locationY + eval('parseInt($(groupContextMenu).height())') > documentHeight) ? (locationY + 5 - eval('parseInt($(groupContextMenu).height())')) : locationY;
        groupContextMenu.style.top = posTop + 'px';
        var headerRowState = Boolean.parse(headerRow.getAttribute('isCollapsed').toString());
        if (!headerRowState) {
            if (this._tdColapseGroup != null && this._tdExpandGroup != null) {
                this._tdColapseGroup.parentNode.style.display = '';
                this._tdExpandGroup.parentNode.style.display = 'none';
            }
        }
        else {
            if (this._tdColapseGroup != null && this._tdExpandGroup != null) {
                this._tdExpandGroup.parentNode.style.display = '';
                this._tdColapseGroup.parentNode.style.display = 'none';
            }
        }
        if (groupContextMenu != null) {
            document.body.appendChild(groupContextMenu);
        }
        e.stopPropagation();
        e.preventDefault();
    },

    hideGroupContextMenu: function com_ivp_rad_controls_neogrid_scripts_Group$hideGroupContextMenu(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.elementInfo.get_groupContextMenu() != null && !this._grid.raddomElement.containsElement(this._grid.elementInfo.get_groupContextMenu(), e.target)) {
            this._grid.elementInfo.get_groupContextMenu().style.display = 'none';
        }
    },

    _tdColapseGroup: null,
    _tdExpandGroup: null,
    _tdColapseAllGroups: null,
    _tdExpandAllGroups: null,
    _tdExtendedContextMenuColumn: null,

    _createGroupContextMenu: function com_ivp_rad_controls_neogrid_scripts_Group$_createGroupContextMenu(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        this.groupingInformation = {};
        var groupContextMenu = this._grid.elementInfo.get_groupContextMenu();
        if (eval('$(e.target).closest(\"[columnname]\")') != null) {
            if (eval('$(e.target).closest(\"[columnname]\").attr(\"columnname\")') != null) {
                this.columnName = eval('$(e.target).closest(\"[columnname]\").attr(\"columnname\")').toString();
            }
            else {
                this.columnName = '';
            }
        }
        if (groupContextMenu != null) {
            document.body.removeChild(groupContextMenu);
            groupContextMenu = null;
        }
        if (groupContextMenu != null) {
            groupContextMenu.style.display = 'block';
            this.columnName = '';
            this.groupedData = '';
            com.ivp.rad.controls.neogrid.scripts.Group.childLevel = 1;
            if (eval('$(e.target).closest(\"[grouprowid]\")') != null && eval('$(e.target).closest(\"[grouprowid]\").attr(\"grouprowid\")') != null) {
                this.groupedData = eval('$(e.target).closest(\"[grouprowid]\").attr(\"grouprowid\")').toString();
            }
            if (eval('$(e.target).closest(\"[columnname]\")') != null) {
                if (eval('$(e.target).closest(\"[columnname]\").attr(\"columnname\")') != null) {
                    this.columnName = eval('$(e.target).closest(\"[columnname]\").attr(\"columnname\")').toString();
                }
                else {
                    this.columnName = '';
                }
            }
            eval('window.setTimeout(Function.createDelegate(this,  this._grid.group.hideGroupContextMenu), 3000,e)');
            return groupContextMenu;
        }
        var table = this._grid.elementHelper.get_table();
        groupContextMenu = document.createElement('DIV');
        var trColapseGroup = table.insertRow(0);
        this._tdColapseGroup = trColapseGroup.insertCell(0);
        var trExpandGroup = table.insertRow(1);
        this._tdExpandGroup = trExpandGroup.insertCell(0);
        var trColapseAllGroups = table.insertRow(2);
        this._tdColapseAllGroups = trColapseAllGroups.insertCell(0);
        var trExpandAllGroups = table.insertRow(3);
        this._tdExpandAllGroups = trExpandAllGroups.insertCell(0);
		var trCollapseAllLevels = table.insertRow(4);
        this._tdCollapseAllLevels = trCollapseAllLevels.insertCell(0);
        
        var trExpandAllLevels = table.insertRow(5);
        this._tdExpandAllLevels = trExpandAllLevels.insertCell(0);
        var trExtendedContextMenu = null;
        if (this.columnName !== '') {
            trExtendedContextMenu = table.insertRow(4);
            this._tdExtendedContextMenuColumn = trExtendedContextMenu.insertCell(0);
        }
        groupContextMenu.style.display = 'block';
        groupContextMenu.id = this._grid.elementIDManager.get_groupContextMenu();
        groupContextMenu.className = 'hideMenu ContextMenuIndicator';
        groupContextMenu.style.width = '130px';
        groupContextMenu.style.height = '181px';
        table.className = 'contextMenuHideColumns';
        table.removeAttribute('width');
        table.style.width = '135px';
        this._tdColapseGroup.id = 'ColapseGroup';
        this._grid.raddomElement.setInnerContent(this._tdColapseGroup, 'Collapse Group');
        this._tdColapseGroup.title = 'Collapse Group';
        this._tdColapseGroup.className = 'contextMenuHideColumnsItem';
        this._tdColapseGroup.noWrap = true;
        this._tdColapseGroup.style.paddingLeft = '5px';
        this._tdColapseGroup.style.paddingRight = '5px';
        trColapseGroup.setAttribute('eventtype', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSE);
        this._tdExpandGroup.id = 'ColapseGroup';
        this._grid.raddomElement.setInnerContent(this._tdExpandGroup, 'Expand Group');
        this._tdExpandGroup.title = 'Expand Group';
        this._tdExpandGroup.className = 'contextMenuHideColumnsItem';
        this._tdExpandGroup.noWrap = true;
        this._tdExpandGroup.style.paddingLeft = '5px';
        this._tdExpandGroup.style.paddingRight = '5px';
        trExpandGroup.setAttribute('eventtype', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPAND);
        this._tdColapseAllGroups.id = 'ColapseAllGroup';
        this._grid.raddomElement.setInnerContent(this._tdColapseAllGroups, 'Collapse All Groups');
        this._tdColapseAllGroups.title = 'Collapse All Groups';
        this._tdColapseAllGroups.className = 'contextMenuHideColumnsItem';
        this._tdColapseAllGroups.noWrap = true;
        this._tdColapseAllGroups.style.paddingLeft = '5px';
        this._tdColapseAllGroups.style.paddingRight = '5px';
        trColapseAllGroups.setAttribute('eventtype', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSEALL);
        this._tdExpandAllGroups.id = 'ExpandAllGroup';
        this._grid.raddomElement.setInnerContent(this._tdExpandAllGroups, 'Expand All Groups');
        this._tdExpandAllGroups.title = 'Expand All Groups';
        this._tdExpandAllGroups.className = 'contextMenuHideColumnsItem';
        this._tdExpandAllGroups.noWrap = true;
        this._tdExpandAllGroups.style.paddingLeft = '5px';
        this._tdExpandAllGroups.style.paddingRight = '5px';
        trExpandAllGroups.setAttribute('eventtype', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPANDALL);
		
		this._tdCollapseAllLevels.id = 'CollapseLevel';
        this._grid.raddomElement.setInnerContent(this._tdCollapseAllLevels, 'Collapse Level');
        this._tdCollapseAllLevels.title = 'Collapse Level';
        this._tdCollapseAllLevels.className = 'contextMenuHideColumnsItem';
        this._tdCollapseAllLevels.noWrap = true;
        this._tdCollapseAllLevels.style.paddingLeft = '5px';
        this._tdCollapseAllLevels.style.paddingRight = '5px';
        trCollapseAllLevels.setAttribute('eventtype', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_COLLAPSE_LEVEL);

        this._tdExpandAllLevels.id = 'ExpandLevel';
        this._grid.raddomElement.setInnerContent(this._tdExpandAllLevels, 'Expand Level');
        this._tdExpandAllLevels.title = 'Expand Level';
        this._tdExpandAllLevels.className = 'contextMenuHideColumnsItem';
        this._tdExpandAllLevels.noWrap = true;
        this._tdExpandAllLevels.style.paddingLeft = '5px';
        this._tdExpandAllLevels.style.paddingRight = '5px';
        trExpandAllLevels.setAttribute('eventtype', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPAND_LEVEL);
        if (this.columnName !== '') {
            this._tdExtendedContextMenuColumn.id = 'tdExtendedContextMenuColumn';
            this._tdExtendedContextMenuColumn.appendChild(this._createContextMenu(this._grid.get_GridInfo().GroupContextMenu, 1));
        }
        groupContextMenu.appendChild(table);
        this._tdExpandGroup.parentNode.style.display = 'none';
        this._tdExpandAllGroups.parentNode.style.display = '';
        this._tdColapseGroup.parentNode.style.display = 'none';
        this._tdColapseAllGroups.parentNode.style.display = '';

        this.groupedData = '';
        com.ivp.rad.controls.neogrid.scripts.Group.childLevel = 1;
        if (eval('$(e.target).closest(\"[grouprowid]\")') != null && eval('$(e.target).closest(\"[grouprowid]\").attr(\"grouprowid\")') != null) {
            this.groupedData = eval('$(e.target).closest(\"[grouprowid]\").attr(\"grouprowid\")').toString();
        }
        var groupcontextmenuhandler = Function.createDelegate(this, this._groupcontextmenuclickhandler);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(groupContextMenu, 'mouseover', Function.createDelegate(this, this._groupcontextmenunestinghandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(groupContextMenu, 'click', groupcontextmenuhandler);
        eval('window.setTimeout(Function.createDelegate(this, this._grid.group.hideGroupContextMenu), 3000, e)');
        return groupContextMenu;
    },

    _groupcontextmenunestinghandler: function com_ivp_rad_controls_neogrid_scripts_Group$_groupcontextmenunestinghandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.parentNode.className === 'ContextMenuToBeAppendedIndividual' || e.target.id === 'tdExtendedContextMenuColumn' || e.target.className === 'childContextMenu ContextMenuIndicator' || e.target.className === 'ContextMenuToBeAppendedIndividual') {
            var ChildContextMenu = null;
            var ChildContextMenuInfo = [];
            var Info = '';
            if (e.target.className !== 'childContextMenu ContextMenuIndicator') {
                if (eval('e.target.closest(\".ContextMenuToBeAppendedIndividual\").getAttribute(\"childmenu\")') != null) {
                    Info = eval('e.target.closest(\".ContextMenuToBeAppendedIndividual\").getAttribute(\"childmenu\")').toString();
                    ChildContextMenuInfo = Sys.Serialization.JavaScriptSerializer.deserialize(Info);
                }
            }
            else {
                if (eval('$(e.target).find(\".ContextMenuToBeAppendedIndividual\").attr(\"childmenu\")') != null) {
                    Info = eval('$(e.target).find(\".ContextMenuToBeAppendedIndividual\").attr(\"childmenu\")').toString();
                    ChildContextMenuInfo = Sys.Serialization.JavaScriptSerializer.deserialize(Info);
                }
            }
            if (eval('e.target.closest(\".ContextMenuToBeAppendedIndividual\")') != null) {
                if (eval('e.target.closest(\".ContextMenuToBeAppendedIndividual\").getAttribute(\"childLevel\")') != null) {
                    if (document.getElementById('ChildContextMenu' + eval('e.target.closest(\".ContextMenuToBeAppendedIndividual\").getAttribute(\"childLevel\")').toString()) == null) {
                        ChildContextMenu = document.createElement('DIV');
                        ChildContextMenu.id = 'ChildContextMenu' + eval('e.target.closest(\".ContextMenuToBeAppendedIndividual\").getAttribute(\"childLevel\")').toString();
                    }
                    else {
                        ChildContextMenu = document.getElementById('ChildContextMenu' + e.target.getAttribute('childLevel'));
                        if (ChildContextMenu != null) {
                            ChildContextMenu.innerHTML = '';
                        }
                    }
                }
            }
            if (ChildContextMenu != null) {
                ChildContextMenu.className = 'childContextMenu ContextMenuIndicator';
            }
            if (document.getElementById('ChildContextMenu' + e.target.getAttribute('childLevel')) != null) {
                document.getElementById('ChildContextMenu' + e.target.getAttribute('childLevel')).style.display = 'block';
            }
            if (ChildContextMenu != null) {
                if (this._createContextMenu(ChildContextMenuInfo, eval('parseInt(e.target.closest(\".ContextMenuToBeAppendedIndividual\").getAttribute(\"childLevel\"))') + 1).children.length > 0) {
                    ChildContextMenu.appendChild(this._createContextMenu(ChildContextMenuInfo, eval('parseInt(e.target.closest(\".ContextMenuToBeAppendedIndividual\").getAttribute(\"childLevel\"))') + 1));
                    eval('$(e.target).closest(\".ContextMenuIndicator\").append(ChildContextMenu)');
                }
            }
            var index = eval('$(e.target).closest(\".ContextMenuToBeAppendedIndividual\").index()');
            var topOffset = 0;
            if (eval('e.target.closest(\"tr\")') != null) {
                topOffset = eval('parseInt(e.target.closest(\"tr\").offsetTop)');
                topOffset = topOffset + (index * 30);
            }
            else {
                topOffset = eval('parseInt(e.target.closest(\".ContextMenuIndicator\").offsetTop)');
                topOffset = topOffset + (index * 30);
            }
            var totalTop = topOffset;
            var topPosition = totalTop + 'px';
            var width = eval('parseInt(' + document.getElementById(this._grid.elementIDManager.get_groupContextMenu()).style.width.substring(0, document.getElementById(this._grid.elementIDManager.get_groupContextMenu()).style.width.length - 2) + ')');
            var totalLeft = width;
            var leftPosition = totalLeft + 'px';
            var childWidth = eval('parseInt(' + document.getElementById(this._grid.elementIDManager.get_groupContextMenu()).style.width.substring(0, document.getElementById(this._grid.elementIDManager.get_groupContextMenu()).style.width.length - 2) + ')');
            var leftPos = eval('parseInt($(\".hideMenu\").css(\'left\'))');
            var totalLeftPos = 130 * com.ivp.rad.controls.neogrid.scripts.Group.childLevel;
            if (totalLeftPos + leftPos + childWidth > document.documentElement.clientWidth) {
                if (eval('e.target.closest(\".ContextMenuToBeAppendedIndividual\").getAttribute(\"childLevel\")').toString() === '1') {
                    if (ChildContextMenu != null) {
                        ChildContextMenu.style.right = document.getElementById(this._grid.elementIDManager.get_groupContextMenu()).style.width;
                        ChildContextMenu.style.top = topPosition;
                        ChildContextMenu.style.left = '';
                    }
                }
                else {
                    if (ChildContextMenu != null) {
                        ChildContextMenu.style.left = '';
                        ChildContextMenu.style.right = childWidth - 5 + 'px';
                        ChildContextMenu.style.top = '0px';
                    }
                }
            }
            else {
                if (eval('e.target.closest(\".ContextMenuToBeAppendedIndividual\").getAttribute(\"childLevel\")').toString() === '1') {
                    if (ChildContextMenu != null) {
                        ChildContextMenu.style.top = topPosition;
                        ChildContextMenu.style.left = leftPosition;
                        ChildContextMenu.style.right = '';
                    }
                }
                else {
                    if (ChildContextMenu != null) {
                        ChildContextMenu.style.left = totalLeft - 5 + 'px';
                        ChildContextMenu.style.right = '';
                        ChildContextMenu.style.top = '0px';
                    }
                }
            }
        }
        else {
            for (var i = 1; i <= com.ivp.rad.controls.neogrid.scripts.Group.childLevel; i++) {
                if (document.getElementById('ChildContextMenu' + i) != null) {
                    document.getElementById('ChildContextMenu' + i).style.display = 'none';
                }
            }
        }
        if (eval('$(e.target).closest(\".ContextMenuIndicator\").length') === 0) {
            document.getElementById(this._grid.get_id() + '_GroupContextMenu').style.display = 'none';
        }
    },

    _groupcontextmenunestinghandlerremove: function com_ivp_rad_controls_neogrid_scripts_Group$_groupcontextmenunestinghandlerremove(e, childLevel) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <param name="childLevel" type="Number" integer="true">
        /// </param>
        document.getElementById('ChildContextMenu').style.display = 'none';
    },

    _createContextMenu: function com_ivp_rad_controls_neogrid_scripts_Group$_createContextMenu(ContextMenuInfoList, childLevel) {
        /// <param name="ContextMenuInfoList" type="Array">
        /// </param>
        /// <param name="childLevel" type="Number" integer="true">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var ContextMenuToBeAppendedParent = document.createElement('DIV');
        for (var i = 0; i < ContextMenuInfoList.length; i++) {
            var ContextMenuToBeAppendedIndividual = document.createElement('DIV');
            ContextMenuToBeAppendedIndividual.innerHTML = (ContextMenuInfoList[i]).HtmlToBeVisible;
            ContextMenuToBeAppendedIndividual.className = 'ContextMenuToBeAppendedIndividual';
            if ((ContextMenuInfoList[i]).ChildContextMenu != null) {
                if ((ContextMenuInfoList[i]).ChildContextMenu.length > 0) {
                    ContextMenuToBeAppendedIndividual.setAttribute('childMenu', Sys.Serialization.JavaScriptSerializer.serialize((ContextMenuInfoList[i]).ChildContextMenu));
                }
            }
            ContextMenuToBeAppendedIndividual.setAttribute('childLevel', childLevel);
            ContextMenuToBeAppendedIndividual.setAttribute('keySelected', (ContextMenuInfoList[i]).KeySelected);
            ContextMenuToBeAppendedIndividual.setAttribute('eventTriggered', (ContextMenuInfoList[i]).EventTriggered);
            ContextMenuToBeAppendedParent.appendChild(ContextMenuToBeAppendedIndividual);
        }
        return ContextMenuToBeAppendedParent;
    },

    _getExpandCollapseEvent: function com_ivp_rad_controls_neogrid_scripts_Group$_getExpandCollapseEvent(td) {
        /// <param name="td" type="Object" domElement="true">
        /// </param>
        /// <returns type="String"></returns>
        return '';
    },

    _groupcontextmenuclickhandler: function com_ivp_rad_controls_neogrid_scripts_Group$_groupcontextmenuclickhandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.get_id() === '') {
            this._grid = eval('$find(\"' + this._grid.get_GridInfo().GridId + '\")');
        }
        var contextMenuRow = null;
        if ((contextMenuRow = this._checkContextClick(e)) != null) {
            this._grid.group.contextMenuEventHandler(contextMenuRow);
        }
        var columnName = this.columnName;
        var itemKey = '';
        var eventTriggered = '';
        if (e.target.className === 'ContextMenuToBeAppendedIndividual' || e.target.className === '') {
            if (e.target.className === 'ContextMenuToBeAppendedIndividual') {
                itemKey = e.target.getAttribute('keyselected').toString();
                eventTriggered = e.target.getAttribute('eventtriggered').toString();
            }
            else {
                itemKey = e.target.parentNode.getAttribute('keyselected').toString();
                eventTriggered = e.target.parentNode.getAttribute('eventtriggered').toString();
            }
            var totalGroupData = null;
            if (this.groupedData.indexOf('|||') > -1) {
                var index = this.groupedData.lastIndexOf('||');
                var lastColumn = this.groupedData.substring(index + 2, this.groupedData.length);
                var olderData = this.groupedData.substring(0, index);
                var eachOlderData = olderData.split('|');
                for (var i = 0, z = eachOlderData.length - 1; i < this._grid.group._groupedColumns.length - 1; i++, z--) {
                    if (i < eachOlderData.length) {
                        this.groupingInformation[this._grid.group._groupedColumns[i].toString()] = eachOlderData[z];
                    }
                }
                this.groupingInformation[this._grid.group._groupedColumns[eachOlderData.length].toString()] = lastColumn;
            }
            else {
                totalGroupData = this.groupedData.split('||');
                var olderData = totalGroupData[0];
                var eachOlderData = olderData.split('|');
                for (var i = 0, z = eachOlderData.length - 1; i < this._grid.group._groupedColumns.length - 1; i++, z--) {
                    if (i < eachOlderData.length) {
                        this.groupingInformation[this._grid.group._groupedColumns[i].toString()] = eachOlderData[z];
                    }
                }
                if (totalGroupData[1] != null) {
                    this.groupingInformation[this._grid.group._groupedColumns[eachOlderData.length].toString()] = totalGroupData[1];
                }
                else if (this._grid.group._groupedColumns.length == 1) {
                    this.groupingInformation[this._grid.group._groupedColumns[0]] = olderData.replace('|', '');
                }
            }
            document.getElementById(this._grid.elementIDManager.get_groupContextMenu()).style.display = 'none';
            eval(eventTriggered + '(\"' + itemKey + '\",\"' + columnName + '\",' + Sys.Serialization.JavaScriptSerializer.serialize(this.groupingInformation) + ')');
        }
    },

    _checkContextClick: function com_ivp_rad_controls_neogrid_scripts_Group$_checkContextClick(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var row = null;
        try {
            row = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'TR');
        }
        catch ($e1) {
        }
        if (row != null) {
            if (row.getAttribute('eventtype') != null) {
                return row;
            }
        }
        return null;
    },

    contextMenuEventHandler: function com_ivp_rad_controls_neogrid_scripts_Group$contextMenuEventHandler(clickedRowOnContext) {
        /// <param name="clickedRowOnContext" type="Object" domElement="true">
        /// </param>
        var eventType = clickedRowOnContext.getAttribute('eventtype').toString();
        var collInfo = new com.ivp.rad.controls.neogrid.scripts.Info.CollapseInfo();
        collInfo.groupRowId = this._headerRowContextClicked.getAttribute('groupRowId').toString();
        switch (eventType) {
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSE:
                collInfo.isCollpased = !Boolean.parse(this._headerRowContextClicked.getAttribute('isCollapsed').toString());
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSE, Sys.Serialization.JavaScriptSerializer.serialize(collInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSE);
                break;
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSEALL:
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSEALL, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSEALL);
                break;
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPANDALL:
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPANDALL, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPANDALL);
                break;
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPAND:
                collInfo.isCollpased = !Boolean.parse(this._headerRowContextClicked.getAttribute('isCollapsed').toString());
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPAND, Sys.Serialization.JavaScriptSerializer.serialize(collInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPAND);
                break;
		    case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_COLLAPSE_LEVEL:
                collInfo.groupRowId = this._headerRowContextClicked.getAttribute('groupRowId').toString();
                collInfo.groupLevel = parseInt(this._headerRowContextClicked.getAttribute('groupLevel').toString()) / 5
                collInfo.isCollpased = true;
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_COLLAPSE_LEVEL, Sys.Serialization.JavaScriptSerializer.serialize(collInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_COLLAPSE_LEVEL);
                break;
            case com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPAND_LEVEL:
                collInfo.groupRowId = this._headerRowContextClicked.getAttribute('groupRowId').toString();
                collInfo.groupLevel = parseInt(this._headerRowContextClicked.getAttribute('groupLevel').toString()) / 5
                collInfo.isCollpased = false;
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPAND_LEVEL, Sys.Serialization.JavaScriptSerializer.serialize(collInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPAND_LEVEL);
                break;
        }
        this._grid.elementInfo.get_groupContextMenu().style.display = 'none';
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.Grid

com.ivp.rad.controls.neogrid.scripts.Grid = function com_ivp_rad_controls_neogrid_scripts_Grid(element) {
    /// <param name="element" type="Object" domElement="true">
    /// </param>
    /// <field name="_cacheKey$2" type="String">
    /// </field>
    /// <field name="_gridInfo$2" type="com.ivp.rad.controls.neogrid.scripts.info.GridInfo">
    /// </field>
    /// <field name="_checkBoxSelectionMode$2" type="com.ivp.rad.controls.neogrid.scripts.info.CheckBoxSelectionMode">
    /// </field>
    /// <field name="_raiseClickEvent$2" type="String">
    /// </field>
    /// <field name="_raiseGridUpdated$2" type="String">
    /// </field>
    /// <field name="_raiseGridBeginUpdate$2" type="String">
    /// </field>
    /// <field name="_raiseGridRender$2" type="String">
    /// </field>
    /// <field name="_raiseGridRenderComplete$2" type="String">
    /// </field>
    /// <field name="_raiseGridStartRender$2" type="String">
    /// </field>
    /// <field name="_defaultGroupedAndSortedColumns$2" type="Array">
    /// </field>
    /// <field name="_raiseOnEditCommitChange$2" type="String">
    /// </field>
    /// <field name="_raiseOnExcelDataCommitChange$2" type="String">
    /// </field>
    /// <field name="_raiseOnColumnRemove$2" type="String">
    /// </field>
    /// <field name="_infinitescroll$2" type="Boolean">
    /// </field>
    /// <field name="_ajaxstart$2" type="Boolean">
    /// </field>
    /// <field name="_previousstartindex$2" type="Number" integer="true">
    /// </field>
    /// <field name="_scrolldir$2" type="com.ivp.rad.controls.neogrid.scripts.ScrollDirection">
    /// </field>
    /// <field name="_barposition$2" type="Number" integer="true">
    /// </field>
    /// <field name="_scrollposition$2" type="Number" integer="true">
    /// </field>
    /// <field name="_horizontalScrollPosition$2" type="Number" integer="true">
    /// </field>
    /// <field name="_previousBodyWidth$2" type="Number" integer="true">
    /// </field>
    /// <field name="_innerbodyposition$2" type="Number" integer="true">
    /// </field>
    /// <field name="_headerbodyposition$2" type="Number" integer="true">
    /// </field>
    /// <field name="serviceInProgress" type="Boolean">
    /// </field>
    /// <field name="_innerBodyTopScroll$2" type="Number" integer="true">
    /// </field>
    /// <field name="_verticalScrollPosition$2" type="Number" integer="true">
    /// </field>
    /// <field name="_verticalScrollHeight$2" type="Number" integer="true">
    /// </field>
    /// <field name="RaiseClickEventHandler" type="com.ivp.rad.controls.neogrid.scripts.GridClickHandler">
    /// </field>
    /// <field name="manageHeader" type="com.ivp.rad.controls.neogrid.scripts.ManageHeader">
    /// </field>
    /// <field name="eventHandlerManager" type="com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager">
    /// </field>
    /// <field name="elementInfo" type="com.ivp.rad.controls.neogrid.scripts.ElementInfo">
    /// </field>
    /// <field name="manageEvents" type="com.ivp.rad.controls.neogrid.scripts.ManageEvents">
    /// </field>
    /// <field name="filter" type="com.ivp.rad.controls.neogrid.scripts.Filter">
    /// </field>
    /// <field name="upperHeader" type="com.ivp.rad.controls.neogrid.scripts.UpperHeader">
    /// </field>
    /// <field name="raddomElement" type="com.ivp.rad.controls.scripts.RADBrowserScripts.RADDOMElement">
    /// </field>
    /// <field name="gridEngine" type="com.ivp.rad.controls.neogrid.scripts.GridEngine">
    /// </field>
    /// <field name="search" type="com.ivp.rad.controls.neogrid.scripts.Search">
    /// </field>
    /// <field name="body" type="com.ivp.rad.controls.neogrid.scripts.Body">
    /// </field>
    /// <field name="footer" type="com.ivp.rad.controls.neogrid.scripts.Footer">
    /// </field>
    /// <field name="group" type="com.ivp.rad.controls.neogrid.scripts.Group">
    /// </field>
    /// <field name="sort" type="com.ivp.rad.controls.neogrid.scripts.Sort">
    /// </field>
    /// <field name="elementIDManager" type="com.ivp.rad.controls.neogrid.scripts.ElementIDManager">
    /// </field>
    /// <field name="elementHelper" type="com.ivp.rad.controls.neogrid.scripts.GUIElementHelper">
    /// </field>
    /// <field name="clientDataController" type="com.ivp.rad.controls.neogrid.scripts.ClientDataController">
    /// </field>
    /// <field name="editGrid" type="com.ivp.rad.controls.neogrid.scripts.EditGrid">
    /// </field>
    /// <field name="managePopups" type="com.ivp.rad.controls.neogrid.scripts.ManagePopups">
    /// </field>
    /// <field name="exportToExcel" type="com.ivp.rad.controls.neogrid.scripts.ExportToExcel">
    /// </field>
    /// <field name="exportToPdf" type="com.ivp.rad.controls.neogrid.scripts.ExportToPdf">
    /// </field>
    /// <field name="pushData" type="com.ivp.rad.controls.neogrid.scripts.PushData">
    /// </field>
    /// <field name="manageLayouts" type="com.ivp.rad.controls.neogrid.scripts.ManageLayouts">
    /// </field>
    /// <field name="sliderFilter" type="com.ivp.rad.controls.neogrid.scripts.SliderFilter">
    /// </field>
    /// <field name="manageColumns" type="com.ivp.rad.controls.neogrid.scripts.ManageColumns">
    /// </field>
    /// <field name="ruleBasedColoring" type="com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring">
    /// </field>
    /// <field name="groupCollapseExpand" type="com.ivp.rad.controls.neogrid.scripts.GroupCollapseExpandHandler">
    /// </field>
    /// <field name="columnRearrange" type="com.ivp.rad.controls.neogrid.scripts.ColumnRearrangeHandler">
    /// </field>
    /// <field name="removeColumnHandle" type="com.ivp.rad.controls.neogrid.scripts.RemoveColumnHandler">
    /// </field>
    /// <field name="isMethodRefereshFromClient" type="Boolean">
    /// </field>
    /// <field name="isRefreshGridWithData" type="Boolean">
    /// </field>
    /// <field name="childGrid" type="com.ivp.rad.controls.neogrid.scripts.BindChildGrid">
    /// </field>
    /// <field name="eventBody" type="com.ivp.rad.controls.neogrid.scripts.EventsBody">
    /// </field>
    /// <field name="_splitteR_KEYWORD" type="String" static="true">
    /// </field>
    /// <field name="_isRendered" type="Boolean">
    /// </field>
    /// <field name="doHeaderRecreation" type="Boolean">
    /// </field>
    /// <field name="_isRefreshWithCache" type="Boolean">
    /// </field>
    com.ivp.rad.controls.neogrid.scripts.Grid.initializeBase(this, [element]);
    this.eventHandlerManager = new com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager();
    this.raddomElement = new com.ivp.rad.controls.scripts.RADBrowserScripts.RADDOMElement();
    this.elementHelper = new com.ivp.rad.controls.neogrid.scripts.GUIElementHelper();
}
com.ivp.rad.controls.neogrid.scripts.Grid.prototype = {
    _cacheKey$2: null,
    _gridInfo$2: null,
    _checkBoxSelectionMode$2: 0,
    _raiseClickEvent$2: null,
    _raiseGridUpdated$2: null,
    _raiseGridBeginUpdate$2: null,
    _raiseGridRender$2: null,
    _raiseGridRenderComplete$2: null,
    _raiseGridStartRender$2: null,
    _defaultGroupedAndSortedColumns$2: null,
    _raiseOnEditCommitChange$2: null,
    _raiseOnExcelDataCommitChange$2: null,
    _raiseOnColumnRemove$2: null,
    _infinitescroll$2: false,
    _ajaxstart$2: false,
    _previousstartindex$2: 0,
    _scrolldir$2: 0,
    _barposition$2: 0,
    _scrollposition$2: 0,
    _horizontalScrollPosition$2: 0,
    _previousBodyWidth$2: 0,
    _innerbodyposition$2: 0,
    _headerbodyposition$2: 0,
    serviceInProgress: false,

    get_CacheKey: function com_ivp_rad_controls_neogrid_scripts_Grid$get_CacheKey() {
        /// <value type="String"></value>
        return this._cacheKey$2;
    },
    set_CacheKey: function com_ivp_rad_controls_neogrid_scripts_Grid$set_CacheKey(value) {
        /// <value type="String"></value>
        this._cacheKey$2 = value;
        return value;
    },

    get_GridInfo: function com_ivp_rad_controls_neogrid_scripts_Grid$get_GridInfo() {
        /// <value type="com.ivp.rad.controls.neogrid.scripts.info.GridInfo"></value>
        return this._gridInfo$2;
    },
    set_GridInfo: function com_ivp_rad_controls_neogrid_scripts_Grid$set_GridInfo(value) {
        /// <value type="com.ivp.rad.controls.neogrid.scripts.info.GridInfo"></value>
        this._gridInfo$2 = value;
        return value;
    },

    get_DefaultGroupedAndSortedColumns: function com_ivp_rad_controls_neogrid_scripts_Grid$get_DefaultGroupedAndSortedColumns() {
        /// <value type="Array"></value>
        return this._defaultGroupedAndSortedColumns$2;
    },
    set_DefaultGroupedAndSortedColumns: function com_ivp_rad_controls_neogrid_scripts_Grid$set_DefaultGroupedAndSortedColumns(value) {
        /// <value type="Array"></value>
        this._defaultGroupedAndSortedColumns$2 = value;
        return value;
    },

    get_CheckBoxSelectionMode: function com_ivp_rad_controls_neogrid_scripts_Grid$get_CheckBoxSelectionMode() {
        /// <value type="com.ivp.rad.controls.neogrid.scripts.info.CheckBoxSelectionMode"></value>
        return this._checkBoxSelectionMode$2;
    },
    set_CheckBoxSelectionMode: function com_ivp_rad_controls_neogrid_scripts_Grid$set_CheckBoxSelectionMode(value) {
        /// <value type="com.ivp.rad.controls.neogrid.scripts.info.CheckBoxSelectionMode"></value>
        if (this.get_GridInfo().ClientSideGrid) {
              if(this.get_GridInfo().CheckBoxInfo != null) {
				this._checkBoxSelectionMode$2 = this.get_GridInfo().CheckBoxInfo.CheckBoxSelectionMode;
			  }
        }
        else {
            this._checkBoxSelectionMode$2 = value;
        }
        return value;
     
    },

    get_RaiseClickEvent: function com_ivp_rad_controls_neogrid_scripts_Grid$get_RaiseClickEvent() {
        /// <value type="String"></value>
        return this._raiseClickEvent$2;
    },
    set_RaiseClickEvent: function com_ivp_rad_controls_neogrid_scripts_Grid$set_RaiseClickEvent(value) {
        /// <value type="String"></value>
        if (this.get_GridInfo().ClientSideGrid) {
            this._raiseClickEvent$2 = this.get_GridInfo().RaiseClickEvent;
        }
        else {
            this._raiseClickEvent$2 = value;
        }
        return value;
    },

    get_RaiseGridUpdated: function com_ivp_rad_controls_neogrid_scripts_Grid$get_RaiseGridUpdated() {
        /// <value type="String"></value>
        return this._raiseGridUpdated$2;
    },
    set_RaiseGridUpdated: function com_ivp_rad_controls_neogrid_scripts_Grid$set_RaiseGridUpdated(value) {
        /// <value type="String"></value>
        if (this.get_GridInfo().ClientSideGrid) {
            this._raiseGridUpdated$2 = this.get_GridInfo().RaiseGridUpdated;
        }
        else {
            this._raiseGridUpdated$2 = value;
        }
        return value;
    },

    get_RaiseGridBeginUpdate: function com_ivp_rad_controls_neogrid_scripts_Grid$get_RaiseGridBeginUpdate() {
        /// <value type="String"></value>
        return this._raiseGridBeginUpdate$2;
    },
    set_RaiseGridBeginUpdate: function com_ivp_rad_controls_neogrid_scripts_Grid$set_RaiseGridBeginUpdate(value) {
        /// <value type="String"></value>
        if (this.get_GridInfo().ClientSideGrid) {
            this._raiseGridBeginUpdate$2 = this.get_GridInfo().RaiseGridBeginUpdate;
        }
        else {
            this._raiseGridBeginUpdate$2 = value;
        }
        return value;
    },

    get_RaiseGridRender: function com_ivp_rad_controls_neogrid_scripts_Grid$get_RaiseGridRender() {
        /// <value type="String"></value>
        return this._raiseGridRender$2;
    },
    set_RaiseGridRender: function com_ivp_rad_controls_neogrid_scripts_Grid$set_RaiseGridRender(value) {
        /// <value type="String"></value>
        if (this.get_GridInfo().ClientSideGrid) {
            this._raiseGridRender$2 = this.get_GridInfo().RaiseGridRender;
        }
        else {
            this._raiseGridRender$2 = value;
        }
        return value;
    },

    get_RaiseGridRenderComplete: function com_ivp_rad_controls_neogrid_scripts_Grid$get_RaiseGridRenderComplete() {
        /// <value type="String"></value>
        return this._raiseGridRenderComplete$2;
    },
    set_RaiseGridRenderComplete: function com_ivp_rad_controls_neogrid_scripts_Grid$set_RaiseGridRenderComplete(value) {
        /// <value type="String"></value>
        if (this.get_GridInfo().ClientSideGrid) {
            this._raiseGridRenderComplete$2 = this.get_GridInfo().RaiseGridRenderComplete;
        }
        else {
            this._raiseGridRenderComplete$2 = value;
        }
        return value;
    },

    get_RaiseGridStartRender: function com_ivp_rad_controls_neogrid_scripts_Grid$get_RaiseGridStartRender() {
        /// <value type="String"></value>
        return this._raiseGridStartRender$2;
    },
    set_RaiseGridStartRender: function com_ivp_rad_controls_neogrid_scripts_Grid$set_RaiseGridStartRender(value) {
        /// <value type="String"></value>
        if (this.get_GridInfo().ClientSideGrid) {
            this._raiseGridStartRender$2 = this.get_GridInfo().RaiseGridStartRender;
        }
        else {
            this._raiseGridStartRender$2 = value;
        }
        return value;
    },

    get_RaiseOnEditCommitChange: function com_ivp_rad_controls_neogrid_scripts_Grid$get_RaiseOnEditCommitChange() {
        /// <value type="String"></value>
        return this._raiseOnEditCommitChange$2;
    },
    set_RaiseOnEditCommitChange: function com_ivp_rad_controls_neogrid_scripts_Grid$set_RaiseOnEditCommitChange(value) {
        /// <value type="String"></value>
        if (this.get_GridInfo().ClientSideGrid) {
            this._raiseOnEditCommitChange$2 = this.get_GridInfo().RaiseOnEditCommitChange;
        }
        else {
            this._raiseOnEditCommitChange$2 = value;
        }
        return value;
    },

    get_RaiseOnExcelDataCommitChange: function com_ivp_rad_controls_neogrid_scripts_Grid$get_RaiseOnExcelDataCommitChange() {
        /// <value type="String"></value>
        return this._raiseOnExcelDataCommitChange$2;
    },
    set_RaiseOnExcelDataCommitChange: function com_ivp_rad_controls_neogrid_scripts_Grid$set_RaiseOnExcelDataCommitChange(value) {
        /// <value type="String"></value>
        this._raiseOnExcelDataCommitChange$2 = value;
        return value;
    },

    get_RaiseOnColumnRemove: function com_ivp_rad_controls_neogrid_scripts_Grid$get_RaiseOnColumnRemove() {
        /// <value type="String"></value>
        return this._raiseOnColumnRemove$2;
    },
    set_RaiseOnColumnRemove: function com_ivp_rad_controls_neogrid_scripts_Grid$set_RaiseOnColumnRemove(value) {
        /// <value type="String"></value>
        this._raiseOnColumnRemove$2 = value;
        return value;
    },

    get_InfiniteScroll: function com_ivp_rad_controls_neogrid_scripts_Grid$get_InfiniteScroll() {
        /// <value type="Boolean"></value>
        return this._infinitescroll$2;
    },
    set_InfiniteScroll: function com_ivp_rad_controls_neogrid_scripts_Grid$set_InfiniteScroll(value) {
        /// <value type="Boolean"></value>
        this._infinitescroll$2 = value;
        return value;
    },

    get_AjaxStart: function com_ivp_rad_controls_neogrid_scripts_Grid$get_AjaxStart() {
        /// <value type="Boolean"></value>
        return this._ajaxstart$2;
    },
    set_AjaxStart: function com_ivp_rad_controls_neogrid_scripts_Grid$set_AjaxStart(value) {
        /// <value type="Boolean"></value>
        this._ajaxstart$2 = value;
        return value;
    },

    get_PreviousStartIndex: function com_ivp_rad_controls_neogrid_scripts_Grid$get_PreviousStartIndex() {
        /// <value type="Number" integer="true"></value>
        return this._previousstartindex$2;
    },
    set_PreviousStartIndex: function com_ivp_rad_controls_neogrid_scripts_Grid$set_PreviousStartIndex(value) {
        /// <value type="Number" integer="true"></value>
        this._previousstartindex$2 = value;
        return value;
    },

    get_ScrollDir: function com_ivp_rad_controls_neogrid_scripts_Grid$get_ScrollDir() {
        /// <value type="com.ivp.rad.controls.neogrid.scripts.ScrollDirection"></value>
        return this._scrolldir$2;
    },
    set_ScrollDir: function com_ivp_rad_controls_neogrid_scripts_Grid$set_ScrollDir(value) {
        /// <value type="com.ivp.rad.controls.neogrid.scripts.ScrollDirection"></value>
        this._scrolldir$2 = value;
        return value;
    },

    get_BarPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$get_BarPosition() {
        /// <value type="Number" integer="true"></value>
        return this._barposition$2;
    },
    set_BarPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$set_BarPosition(value) {
        /// <value type="Number" integer="true"></value>
        this._barposition$2 = value;
        return value;
    },

    get_ScrollPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$get_ScrollPosition() {
        /// <value type="Number" integer="true"></value>
        return this._scrollposition$2;
    },
    set_ScrollPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$set_ScrollPosition(value) {
        /// <value type="Number" integer="true"></value>
        this._scrollposition$2 = value;
        return value;
    },

    get_InnerBodyPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$get_InnerBodyPosition() {
        /// <value type="Number" integer="true"></value>
        return this._innerbodyposition$2;
    },
    set_InnerBodyPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$set_InnerBodyPosition(value) {
        /// <value type="Number" integer="true"></value>
        this._innerbodyposition$2 = value;
        return value;
    },

    get_HeaderDivPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$get_HeaderDivPosition() {
        /// <value type="Number" integer="true"></value>
        return this._headerbodyposition$2;
    },
    set_HeaderDivPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$set_HeaderDivPosition(value) {
        /// <value type="Number" integer="true"></value>
        this._headerbodyposition$2 = value;
        return value;
    },

    get_HorizontalScrollPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$get_HorizontalScrollPosition() {
        /// <value type="Number" integer="true"></value>
        return this._horizontalScrollPosition$2;
    },
    set_HorizontalScrollPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$set_HorizontalScrollPosition(value) {
        /// <value type="Number" integer="true"></value>
        this._horizontalScrollPosition$2 = value;
        return value;
    },

    get_PreviousBodyWidth: function com_ivp_rad_controls_neogrid_scripts_Grid$get_PreviousBodyWidth() {
        /// <value type="Number" integer="true"></value>
        return this._previousBodyWidth$2;
    },
    set_PreviousBodyWidth: function com_ivp_rad_controls_neogrid_scripts_Grid$set_PreviousBodyWidth(value) {
        /// <value type="Number" integer="true"></value>
        this._previousBodyWidth$2 = value;
        return value;
    },

    _innerBodyTopScroll$2: 0,

    get_InnerBodyTopScroll: function com_ivp_rad_controls_neogrid_scripts_Grid$get_InnerBodyTopScroll() {
        /// <value type="Number" integer="true"></value>
        return this._innerBodyTopScroll$2;
    },
    set_InnerBodyTopScroll: function com_ivp_rad_controls_neogrid_scripts_Grid$set_InnerBodyTopScroll(value) {
        /// <value type="Number" integer="true"></value>
        this._innerBodyTopScroll$2 = value;
        return value;
    },

    _verticalScrollPosition$2: 0,

    get_VerticalScrollPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$get_VerticalScrollPosition() {
        /// <value type="Number" integer="true"></value>
        return this._verticalScrollPosition$2;
    },
    set_VerticalScrollPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$set_VerticalScrollPosition(value) {
        /// <value type="Number" integer="true"></value>
        this._verticalScrollPosition$2 = value;
        return value;
    },

    _verticalScrollHeight$2: 0,

    get_VerticalScrollHeight: function com_ivp_rad_controls_neogrid_scripts_Grid$get_VerticalScrollHeight() {
        /// <value type="Number" integer="true"></value>
        return this._verticalScrollHeight$2;
    },
    set_VerticalScrollHeight: function com_ivp_rad_controls_neogrid_scripts_Grid$set_VerticalScrollHeight(value) {
        /// <value type="Number" integer="true"></value>
        this._verticalScrollHeight$2 = value;
        return value;
    },


    RaiseClickEventHandler: null,
    manageHeader: null,
    eventHandlerManager: null,
    elementInfo: null,
    manageEvents: null,
    filter: null,
    upperHeader: null,
    raddomElement: null,
    gridEngine: null,
    search: null,
    body: null,
    footer: null,
    group: null,
    sort: null,
    elementIDManager: null,
    elementHelper: null,
    clientDataController: null,
    editGrid: null,
    managePopups: null,
    exportToExcel: null,
    exportToPdf: null,
    pushData: null,
    manageLayouts: null,
    sliderFilter: null,
    manageColumns: null,
    ruleBasedColoring: null,
    groupCollapseExpand: null,
    columnRearrange: null,
    removeColumnHandle: null,
    isMethodRefereshFromClient: false,
    isRefreshGridWithData: false,
    childGrid: null,
    eventBody: null,
    _isRendered: false,

    updated: function com_ivp_rad_controls_neogrid_scripts_Grid$updated() {
        this._isRendered = false;
        com.ivp.rad.controls.neogrid.scripts.Grid.callBaseMethod(this, 'updated');
        this.get_element().style.display = 'none';
        if (this._raiseGridBeginUpdate$2 != null && this._raiseGridBeginUpdate$2 !== '') {
            eval(this._raiseGridBeginUpdate$2);
        }
        this.elementIDManager = new com.ivp.rad.controls.neogrid.scripts.ElementIDManager(this.get_id());
        this.manageHeader = new com.ivp.rad.controls.neogrid.scripts.ManageHeader(this);
        this.elementInfo = new com.ivp.rad.controls.neogrid.scripts.ElementInfo(this.get_element());
        this.manageEvents = new com.ivp.rad.controls.neogrid.scripts.ManageEvents(this);
        this.sliderFilter = new com.ivp.rad.controls.neogrid.scripts.SliderFilter(this);
        this.group = new com.ivp.rad.controls.neogrid.scripts.Group(this);
        if (this.get_GridInfo().RequireSort) {
            this.sort = new com.ivp.rad.controls.neogrid.scripts.Sort(this);
        }
        if (this.get_GridInfo().RequireFilter) {
            this.filter = new com.ivp.rad.controls.neogrid.scripts.Filter(this);
        }
        this.gridEngine = new com.ivp.rad.controls.neogrid.scripts.GridEngine(this);
        this.search = new com.ivp.rad.controls.neogrid.scripts.Search(this);
        this.clientDataController = new com.ivp.rad.controls.neogrid.scripts.ClientDataController(this);
        this.eventBody = new com.ivp.rad.controls.neogrid.scripts.EventsBody(this);
        if (this.get_GridInfo().RequireLayouts) {
            this.manageLayouts = new com.ivp.rad.controls.neogrid.scripts.ManageLayouts(this);
        }
        this.upperHeader = new com.ivp.rad.controls.neogrid.scripts.UpperHeader(this);
        this.body = new com.ivp.rad.controls.neogrid.scripts.Body(this);
        this.footer = new com.ivp.rad.controls.neogrid.scripts.Footer(this);
        this.editGrid = new com.ivp.rad.controls.neogrid.scripts.EditGrid(this);
        this.managePopups = new com.ivp.rad.controls.neogrid.scripts.ManagePopups(this);
        if (this.get_GridInfo().RequireExportToExcel) {
            this.exportToExcel = new com.ivp.rad.controls.neogrid.scripts.ExportToExcel(this);
        }
        if (this.get_GridInfo().RequireExportToPdf) {
            this.exportToPdf = new com.ivp.rad.controls.neogrid.scripts.ExportToPdf(this);
        }
        this.manageColumns = new com.ivp.rad.controls.neogrid.scripts.ManageColumns(this);
        if (this.get_GridInfo().RequireRuleBasedColoring) {
            this.ruleBasedColoring = new com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring(this);
        }
        this.pushData = new com.ivp.rad.controls.neogrid.scripts.PushData(this);
        this.childGrid = new com.ivp.rad.controls.neogrid.scripts.BindChildGrid(this);
        this.manageEvents.addEvents();
        if (this._raiseGridUpdated$2 != null && this._raiseGridUpdated$2 !== '') {
            eval(this._raiseGridUpdated$2);
        }
        this.CommentInfoEngine = new com.ivp.rad.controls.neogrid.scripts.CommentEngine(this);
        
    },

    dispose: function com_ivp_rad_controls_neogrid_scripts_Grid$dispose() {
        this._clearHandlers$2();
        com.ivp.rad.controls.neogrid.scripts.Grid.callBaseMethod(this, 'dispose');
    },

    _clearHandlers$2: function com_ivp_rad_controls_neogrid_scripts_Grid$_clearHandlers$2() {
        this.eventHandlerManager.clearAllCustomHandlers();
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearAllHandlers(this.get_GridInfo().GridId);
    },
	refreshGridWithFilterValue: function com_ivp_rad_controls_neogrid_scripts_Grid$refreshGridWithFilterValue(value) {
        this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH, value.trim(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH);
    },

    refreshGrid: function com_ivp_rad_controls_neogrid_scripts_Grid$refreshGrid() {
        if (this.get_GridInfo().ClientSideGrid) {
            this.get_GridInfo().KnockoutJsonData = '';
            this.get_GridInfo().KnockOutJsonDataForScroll = '';
            if (this.get_GridInfo().RequireTagging) {
                this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING);
            }
            else {
                this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT);
            }
        }
        else {
            this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT);
        }
    },

    refreshGridWithoutClientSideBinding: function com_ivp_rad_controls_neogrid_scripts_Grid$refreshGridWithoutClientSideBinding() {
        if (this.get_GridInfo().ClientSideGrid) {
            this.get_GridInfo().KnockoutJsonData = '';
            this.get_GridInfo().KnockOutJsonDataForScroll = '';
            this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT);
        }
        else {
            this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT);
        }
    },

    getCheckedRowKeys: function com_ivp_rad_controls_neogrid_scripts_Grid$getCheckedRowKeys() {
        this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_CHECKED_ROWS, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_CHECKED_ROWS);
    },

    showSuccessMessage: function com_ivp_rad_controls_neogrid_scripts_Grid$showSuccessMessage(message) {
        /// <param name="message" type="String">
        /// </param>
        if (message != null && message !== '') {
            this.managePopups.showMessageBox(true, message, '', Number.NaN, Number.NaN);
        }
    },

    showFailureMessage: function com_ivp_rad_controls_neogrid_scripts_Grid$showFailureMessage(message) {
        /// <param name="message" type="String">
        /// </param>
        if (message != null && message !== '') {
            this.managePopups.showMessageBox(false, message, '', Number.NaN, Number.NaN);
        }
    },

    showInformationMessage: function com_ivp_rad_controls_neogrid_scripts_Grid$showInformationMessage(message, header) {
        /// <param name="message" type="String">
        /// </param>
        /// <param name="header" type="String">
        /// </param>
        if (message != null && message !== '') {
            this.managePopups.showMessageBox(true, message, header, Number.NaN, Number.NaN);
        }
    },

    showInformationMessageWithPosition: function com_ivp_rad_controls_neogrid_scripts_Grid$showInformationMessageWithPosition(message, header, top, left) {
        /// <param name="message" type="String">
        /// </param>
        /// <param name="header" type="String">
        /// </param>
        /// <param name="top" type="Number" integer="true">
        /// </param>
        /// <param name="left" type="Number" integer="true">
        /// </param>
        if (message != null && message !== '') {
            this.managePopups.showMessageBox(true, message, header, top, left);
        }
    },

    addColumns: function com_ivp_rad_controls_neogrid_scripts_Grid$addColumns(addRemoveColumnInfo, rowDataInfo) {
        /// <param name="addRemoveColumnInfo" type="Array">
        /// </param>
        /// <param name="rowDataInfo" type="Array">
        /// </param>
        this.manageColumns._addColumn(addRemoveColumnInfo, rowDataInfo);
    },

    addChildGrid: function com_ivp_rad_controls_neogrid_scripts_Grid$addChildGrid(idcolumnValue) {
        /// <param name="idcolumnValue" type="Number" integer="true">
        /// </param>
        var div = this.elementInfo.get_bodyInnerDiv();
        var currentRow = div.children[0].children[0].children[0].children[idcolumnValue];
        var childGridParent = this.elementHelper.get_divElement();
        var childGrid = this.elementHelper.get_divElement();
        childGrid.id = this.get_GridInfo().GridId + '_' + idcolumnValue + '_ChildRow';
        childGridParent.style.height = '350px';
        childGridParent.style.width = (currentRow.offsetWidth - 10) + 'px';
        childGridParent.appendChild(childGrid);
        currentRow.appendChild(childGridParent);
        currentRow.style.height = '372px';
        childGridParent.style.border = '1px solid';
        childGridParent.style.margin = '5px';
        childGridParent.style.position = 'relative';
        childGridParent.style.top = '22px';
        eval('ChildGrid(\'' + childGrid.id + '\');');
    },

    removeColumns: function com_ivp_rad_controls_neogrid_scripts_Grid$removeColumns(removeColumnInfo) {
        /// <param name="removeColumnInfo" type="Array">
        /// </param>
        this.manageColumns._removeColumns(removeColumnInfo);
    },

    updateRowDataInfoWithoutRefresh: function com_ivp_rad_controls_neogrid_scripts_Grid$updateRowDataInfoWithoutRefresh(rowDataInfo) {
        /// <param name="rowDataInfo" type="Array">
        /// </param>
        this.manageColumns.updateRowDataInfoWithoutRefresh(rowDataInfo);
    },

    updateRADBalancePopupDataSource: function com_ivp_rad_controls_neogrid_scripts_Grid$updateRADBalancePopupDataSource(xml) {
        /// <param name="xml" type="String">
        /// </param>
        this.clientDataController._updateRADBalancePopup(xml);
    },

    manageBusyLoadingImage: function com_ivp_rad_controls_neogrid_scripts_Grid$manageBusyLoadingImage(hide) {
        /// <param name="hide" type="Boolean">
        /// </param>
        this.elementInfo.get_loading().style.display = (hide) ? 'none' : '';
    },

    addGridExtraInfo: function com_ivp_rad_controls_neogrid_scripts_Grid$addGridExtraInfo(domeElements) {
        /// <param name="domeElements" type="Array">
        /// </param>
        var popupParent = this.elementInfo.get_radExtraInfoPopupTd();
        Array.forEach(domeElements, Function.createDelegate(this, function (o) {
            popupParent.parentNode.appendChild(o);
        }));
        this.gridEngine._hasExtraINfo = true;
    },

    removeGridExtraInfo: function com_ivp_rad_controls_neogrid_scripts_Grid$removeGridExtraInfo(ids) {
        /// <param name="ids" type="Array">
        /// </param>
        var popup = null;
        Array.forEach(ids, Function.createDelegate(this, function (o) {
            popup = document.getElementById(o.toString());
            popup.parentNode.removeChild(popup);
        }));
        if ((this.elementInfo.get_radExtrapopupDiv().firstChild).rows[0].children.length === 1 && this.elementInfo.get_radExtrapopupDiv().style.display === '') {
            ((this.elementInfo.get_upperHeaderDiv().firstChild).rows[0].children[1].firstChild).rows[0].children[14].children[0].setAttribute('state', 'hidden');
            this.elementInfo.get_bodyInnerDiv().style.height = (Number.parseInvariant(this.get_GridInfo().Height.substr(0, this.get_GridInfo().Height.length - 2)) + 109) + 'px';
            this.elementInfo.get_frozenBodyDiv().style.height = (Number.parseInvariant(this.get_GridInfo().Height.substr(0, this.get_GridInfo().Height.length - 2)) + 109) + 'px';
            this.get_GridInfo().Height = (Number.parseInvariant(this.get_GridInfo().Height.substr(0, this.get_GridInfo().Height.length - 2)) + 109) + 'px';
            this.elementInfo.get_radExtrapopupDiv().style.display = 'none';
        }
        if (popup.parentNode.childNodes.length === 1) {
            this.gridEngine._hasExtraINfo = false;
        }
    },

    removeAllExtraInfo: function com_ivp_rad_controls_neogrid_scripts_Grid$removeAllExtraInfo() {
        var popup = this.elementInfo.get_radExtraInfoPopupTd();
        var length = popup.parentNode.childNodes.length;
        for (var i = 1; i < length; i++) {
            popup.parentNode.removeChild(popup.parentNode.childNodes[1]);
        }
        this.elementInfo.get_radExtrapopupDiv().style.display = 'none';
        this.gridEngine._hasExtraINfo = false;
    },

    showCustomSuccessMessage: function com_ivp_rad_controls_neogrid_scripts_Grid$showCustomSuccessMessage(header, body, callBackmethod, okButtonText, clickBodyCallBack, cancelCallBack) {
        /// <param name="header" type="String">
        /// </param>
        /// <param name="body" type="String">
        /// </param>
        /// <param name="callBackmethod" type="String">
        /// </param>
        /// <param name="okButtonText" type="String">
        /// </param>
        /// <param name="clickBodyCallBack" type="String">
        /// </param>
        /// <param name="cancelCallBack" type="String">
        /// </param>
        if (body != null && body !== '') {
            this.managePopups._showCustomMessageBox(header, body, callBackmethod, okButtonText, clickBodyCallBack, cancelCallBack);
        }
    },

    filterData: function com_ivp_rad_controls_neogrid_scripts_Grid$filterData(filters) {
        /// <param name="filters" type="Array">
        /// </param>
        var filter = null;
        Array.forEach(filters, Function.createDelegate(this, function (o) {
            filter = o;
            Array.add(this.filter.filteredColumns, filter.ColumnName);
        }));
        this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_BULK, Sys.Serialization.JavaScriptSerializer.serialize(filters), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_BULK);
    },

    clearCache: function com_ivp_rad_controls_neogrid_scripts_Grid$clearCache(userID, gridID, currentPageID, viewKey, sessionIdentifier) {
        /// <param name="userID" type="String">
        /// </param>
        /// <param name="gridID" type="String">
        /// </param>
        /// <param name="currentPageID" type="String">
        /// </param>
        /// <param name="viewKey" type="String">
        /// </param>
        /// <param name="sessionIdentifier" type="String">
        /// </param>
        this.gridEngine._service.ClearCacheKey(userID, gridID, currentPageID, viewKey, sessionIdentifier);
    },

    manageScrolling: function com_ivp_rad_controls_neogrid_scripts_Grid$manageScrolling() {
    },

    doHeaderRecreation: false,

    refreshGridWithData: function com_ivp_rad_controls_neogrid_scripts_Grid$refreshGridWithData(output) {
        /// <param name="output" type="String">
        /// </param>
        this.isRefreshGridWithData = true;
        this.isMethodRefereshFromClient = !this.doHeaderRecreation;
        var state = null;
        var popupState = null;
        if (this.elementInfo.get_radExtraPopupBtn() != null) {
            state = this.elementInfo.get_radExtraPopupBtn().getAttribute('state');
        }
        var popupBtn = this.elementInfo.get_radBalancePopupBtn();
        if (popupBtn != null) {
            popupState = popupBtn.getAttribute('state');
        }
        this.clientDataController._previouslySelectedCheckBox = null;
        this.clientDataController._previouslyUnSelectedCheckBox = null;
        this.gridEngine._onSuccess(output, com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((state != null && state.toString() === 'show') ? true : false) + com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD + ((popupState != null && popupState.toString() === 'show') ? true : false));
        this.isMethodRefereshFromClient = false;
        this.doHeaderRecreation = false;
    },

    deleteRow: function com_ivp_rad_controls_neogrid_scripts_Grid$deleteRow(idColumnValues) {
        /// <param name="idColumnValues" type="Array">
        /// </param>
        this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_GRID_DELETE_ROW, Sys.Serialization.JavaScriptSerializer.serialize(idColumnValues), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_GRID_DELETE_ROW);
    },

    hideColumns: function com_ivp_rad_controls_neogrid_scripts_Grid$hideColumns(columns) {
        /// <param name="columns" type="Array">
        /// </param>
        this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_HIDE_COLUMN_MULTIPLE, columns.join(','), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_HIDE_COLUMN_MULTIPLE);
    },

    showColumns: function com_ivp_rad_controls_neogrid_scripts_Grid$showColumns(columns) {
        /// <param name="columns" type="Array">
        /// </param>
        this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_COLUMN_MULTIPLE, columns.join(','), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_COLUMN_MULTIPLE);
    },

    _isRefreshWithCache: false,

    refreshWithCache: function com_ivp_rad_controls_neogrid_scripts_Grid$refreshWithCache() {
        this._isRefreshWithCache = true;
        this.gridEngine._refreshWithCache();
        this._isRefreshWithCache = false;
    },

    checkIfNoRowIsChecked: function com_ivp_rad_controls_neogrid_scripts_Grid$checkIfNoRowIsChecked(rowUniqueId) {
        /// <param name="rowUniqueId" type="String">
        /// </param>
        this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CHECK_ROW_IF_NONE_CHECKED, rowUniqueId, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CHECK_ROW_IF_NONE_CHECKED);
    },

    checkRowsIfNoRowIsChecked: function com_ivp_rad_controls_neogrid_scripts_Grid$checkRowsIfNoRowIsChecked(rowUniqueId) {
        /// <param name="rowUniqueId" type="String">
        /// </param>
        this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CHECK_ROW_LIST_IF_NONE_CHECKED, rowUniqueId, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CHECK_ROW_LIST_IF_NONE_CHECKED);
    },

    unCheckRow: function com_ivp_rad_controls_neogrid_scripts_Grid$unCheckRow(rowIds) {
        /// <param name="rowIds" type="Array">
        /// </param>
        if (rowIds != null) {
            this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED, Sys.Serialization.JavaScriptSerializer.serialize(rowIds), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED);
        }
        else {
            this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED_ALL, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED_ALL);
        }
    },

    checkRows: function com_ivp_rad_controls_neogrid_scripts_Grid$checkRows(acrossAllPages) {
        /// <param name="acrossAllPages" type="Boolean">
        /// </param>
        this.clientDataController._checkUncheckAllRows(true);
        this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL, acrossAllPages.toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED);
    },

    filterDataDynamically: function com_ivp_rad_controls_neogrid_scripts_Grid$filterDataDynamically(condition) {
        /// <param name="condition" type="String">
        /// </param>
        this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_DATA, condition, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_DATA);
    },

    clearDynamicFilter: function com_ivp_rad_controls_neogrid_scripts_Grid$clearDynamicFilter() {
        this.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLEAR_FILTER_DATA, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_DATA);
    },

    updateData: function com_ivp_rad_controls_neogrid_scripts_Grid$updateData(pushInfo) {
        /// <param name="pushInfo" type="com.ivp.rad.controls.neogrid.scripts.info.PushResult">
        /// </param>
        var pushDataInfo = Sys.Serialization.JavaScriptSerializer.deserialize(pushInfo.Content);
        this.pushData._updateData(pushDataInfo);
        pushDataInfo = null;
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts._manageViews

com.ivp.rad.controls.neogrid.scripts._manageViews = function com_ivp_rad_controls_neogrid_scripts__manageViews(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_gridViewsCustomFormatting" type="Object">
    /// </field>
    /// <field name="_removeGridViewsCustomFormatting" type="Array">
    /// </field>
    /// <field name="_viewsColumnList" type="Array">
    /// </field>
    /// <field name="_viewsFormattedColumns" type="Array">
    /// </field>
    /// <field name="_viewFlag" type="Boolean">
    /// </field>
    this._grid = grid;
    this._gridViewsCustomFormatting = {};
    this._removeGridViewsCustomFormatting = [];
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._viewsColumnList = this._grid.get_GridInfo().ColumnList;
    this._viewsFormattedColumns = [];
}
com.ivp.rad.controls.neogrid.scripts._manageViews.prototype = {
    _grid: null,
    _gridViewsCustomFormatting: null,
    _removeGridViewsCustomFormatting: null,
    _viewsColumnList: null,
    _viewsFormattedColumns: null,
    _viewFlag: false,

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts__manageViews$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
    },

    _viewsCustomFormatter: function com_ivp_rad_controls_neogrid_scripts__manageViews$_viewsCustomFormatter(columnName, formatDetails) {
        /// <param name="columnName" type="String">
        /// </param>
        /// <param name="formatDetails" type="Object">
        /// </param>
        if (window.Object.keys(this._gridViewsCustomFormatting).length > 0) {
            this._viewsFormattedColumns = window.Object.keys(this._gridViewsCustomFormatting);
            this._removeGridViewsCustomFormatting = this._viewsFormattedColumns;
            if (!Array.contains(this._viewsFormattedColumns, columnName)) {
                this._gridViewsCustomFormatting[columnName] = formatDetails;
            }
            else {
                this._gridViewsCustomFormatting[columnName] = formatDetails;
            }
        }
        Array.add(this._viewsColumnList, columnName);
    },

    _getCallBackMethod: function com_ivp_rad_controls_neogrid_scripts__manageViews$_getCallBackMethod() {
        var formatDetails = new com.ivp.rad.controls.neogrid.scripts.CustomFormatter();
        formatDetails.DataType = com.ivp.rad.controls.neogrid.scripts.FormatterDataType.number;
        formatDetails.DecimalPlaces = 0;
        formatDetails.NegativeValue = com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLORED;
        formatDetails.Prefix = '$';
        formatDetails.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.thousands;
        this._gridViewsCustomFormatting['security_code'] = formatDetails;
        this._gridViewsCustomFormatting['security_code'] = com.ivp.rad.controls.neogrid.scripts.info.Justification.LEFT;
        if (this._viewsColumnList.length > 0) {
            for (var i = 0; i < this._viewsColumnList.length; i++) {
                if (!Array.contains(this._grid.get_GridInfo().ColumnList, this._viewsColumnList[i]) || this._viewsColumnList.length !== this._grid.get_GridInfo().ColumnList.length) {
                    this._viewFlag = true;
                    break;
                }
            }
        }
        if (this._viewFlag) {
            eval(this._grid.get_GridInfo().RaiseGridCallBackForViews + '(' + this._viewsColumnList + ')');
        }
        else {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MANAGE_VIEW, Sys.Serialization.JavaScriptSerializer.serialize(this._gridViewsCustomFormatting) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(''), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MANAGE_VIEW);
        }
    },

    _viewShowHideColumn: function com_ivp_rad_controls_neogrid_scripts__manageViews$_viewShowHideColumn(columName) {
        /// <param name="columName" type="String">
        /// </param>
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ManageColumns

com.ivp.rad.controls.neogrid.scripts.ManageColumns = function com_ivp_rad_controls_neogrid_scripts_ManageColumns(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_handlerColumnContextMenu" type="Sys.UI.DomEventHandler">
    /// </field>
    /// <field name="_onLeaveSubMenuColumns" type="Sys.UI.DomEventHandler">
    /// </field>
    /// <field name="_onLeaveSubMenuFreezeColumns" type="Sys.UI.DomEventHandler">
    /// </field>
    /// <field name="_hideMenuHeight" type="Number" integer="true">
    /// </field>
    /// <field name="_frozenColumnLinq" type="LINQ">
    /// </field>
    /// <field name="_columnsToHideLinq" type="LINQ">
    /// </field>
    /// <field name="_addColumnHTML" type="String">
    /// </field>
    this._grid = grid;
    this._frozenColumnLinq = new LINQ(this._grid.get_GridInfo().FrozenColumns);
    this._columnsToHideLinq = new LINQ(this._grid.get_GridInfo().ColumnsToHide);
    this._createAddColumnPopup();
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.ManageColumns.prototype = {
    _grid: null,
    _handlerColumnContextMenu: null,
    _onLeaveSubMenuColumns: null,
    _onLeaveSubMenuFreezeColumns: null,
    _hideMenuHeight: 0,
    _frozenColumnLinq: null,
    _columnsToHideLinq: null,

    iterateOnHeaderCellsForRemoveColumn: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$iterateOnHeaderCellsForRemoveColumn(header) {
        /// <param name="header" type="Object" domElement="true">
        /// </param>
        var columnName = header.getAttribute('columnName').toString();
        var columnRemoveDiv = this._grid.elementHelper.get_divElement();
        columnRemoveDiv.id = this._grid.get_id() + '_' + columnName.replace(new RegExp('[ ]', 'gi'), '_') + '_ColumnRemoveDiv';
        columnRemoveDiv.setAttribute('columnName', columnName);
        columnRemoveDiv.innerHTML = '&nbsp;';
        columnRemoveDiv.className = this._grid.get_GridInfo().CssRemoveColumn;
        columnRemoveDiv.setAttribute('isgridheader', true);
        header.appendChild(columnRemoveDiv);
    },

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        this._grid.get_GridInfo().ColumnsToHide = serviceInfo.serializedInfo.ColumnsToHide;
        this._grid.get_GridInfo().FrozenColumns = serviceInfo.serializedInfo.FrozenColumns;
        this._frozenColumnLinq = new LINQ(this._grid.get_GridInfo().FrozenColumns);
        this._columnsToHideLinq = new LINQ(this._grid.get_GridInfo().ColumnsToHide);
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REARRANGE_COLUMN_DROP) {
            if (this._grid.columnRearrange != null) {
                this._grid.columnRearrange(serviceInfo);
            }
        }
    },

    _addColumnHTML: '<div  class=\"speech\"><div class=\"Header\">   <span class=\"heading\"> Column Details </span> <div class=\"xlCloseAddColumnPopUp\" style=\"position:absolute; top:5px; right:5px; height:15px; width:15px;\" ></div> \t</div>    <div class=\"bodyColumn\">    <label style=\"font-size:12px; font-weight:bold;\">Column Name : </label>    <input id=\"{2}\" class=\"columnName\" style=\'\' value=\"\"></input></div>   <div class=\"footer\">  <input id =\"{0}\"  class=\"AddColumnOk\" style=\"position:relative; left:-5px; cursor:pointer;\" value=\"Ok\"></input><input id =\"{1}\" class=\"AddColumnCancel\" type=\"button\" style=\"cursor:pointer; position:relative; left:5px;\" value=\"Cancel\"></input>   </div>    </div>',

    _createAddColumnPopup: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_createAddColumnPopup() {
        var div = this._grid.elementHelper.get_divElement();
        div.id = this._grid.elementIDManager.get_addColumnDivID();
        div.innerHTML = String.format(this._addColumnHTML, div.id + '_Add', div.id + '_Close', div.id + '_columnName');
        this._grid.elementInfo.get_childGridDiv().appendChild(div);
        div.className = 'xlAddColumn';
        div.style.position = 'absolute';
        div.style.width = '20%';
        div.style.zIndex = 32767;
        div.style.minWidth = '250px';
        div.style.top = '30px';
        div.style.left = ((document.documentElement.offsetWidth / 2) - (div.offsetWidth / 2)) + 'px';
        div.style.display = 'none';
    },

    _removeColumn: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_removeColumn(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var column = new com.ivp.rad.controls.neogrid.scripts.info.ColumnInfo();
        column.ColumnName = e.target.getAttribute('columnName').toString();
        column.DataType = com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_anyType;
        var columns = [];
        Array.add(columns, column);
        var extraInfo = new com.ivp.rad.controls.neogrid.scripts.info.CellExtraChildExchangeInfo();
        if (this._grid.removeColumnHandle != null) {
            extraInfo = this._grid.removeColumnHandle(e);
        }
        if (extraInfo.IsValid) {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_COLUMNS, Sys.Serialization.JavaScriptSerializer.serialize(columns) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(extraInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_COLUMNS);
        }
    },

    _removeColumns: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_removeColumns(removeColumnInfo) {
        /// <param name="removeColumnInfo" type="Array">
        /// </param>
        var extraInfo = new com.ivp.rad.controls.neogrid.scripts.info.CellExtraChildExchangeInfo();
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_COLUMNS, Sys.Serialization.JavaScriptSerializer.serialize(removeColumnInfo) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(extraInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_COLUMNS);
    },

    _addColumn: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_addColumn(addRemoveColumnInfo, rowDataInfo) {
        /// <param name="addRemoveColumnInfo" type="Array">
        /// </param>
        /// <param name="rowDataInfo" type="Array">
        /// </param>
        if (addRemoveColumnInfo == null) {
            addRemoveColumnInfo = [];
        }
        if (rowDataInfo == null) {
            rowDataInfo = [];
        }
        this._grid.editGrid.lastSelectedCell = null;
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ADD_COLUMNS, Sys.Serialization.JavaScriptSerializer.serialize(addRemoveColumnInfo) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(rowDataInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ADD_COLUMNS);
    },

    updateRowDataInfoWithoutRefresh: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$updateRowDataInfoWithoutRefresh(rowDataInfo) {
        /// <param name="rowDataInfo" type="Array">
        /// </param>
        if (rowDataInfo == null) {
            rowDataInfo = [];
        }
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_ROW_DATA_INFO, Sys.Serialization.JavaScriptSerializer.serialize(rowDataInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_ROW_DATA_INFO);
    },

    rearrangeColumnHandler: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$rearrangeColumnHandler(sender, e) {
        /// <param name="sender" type="com.ivp.rad.controls.scripts.raddragdropscripts.DragDrop">
        /// </param>
        /// <param name="e" type="Sys.PropertyChangedEventArgs">
        /// </param>
        if (e.get_propertyName() === 'DragEndSuccess') {
            this._rearrangeColumns(sender, e);
        }
        else if (e.get_propertyName() === 'DragEndUnSuccess') {
        }
    },

    _rearrangeColumns: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_rearrangeColumns(sender, e) {
        /// <param name="sender" type="com.ivp.rad.controls.scripts.raddragdropscripts.DragDrop">
        /// </param>
        /// <param name="e" type="Sys.PropertyChangedEventArgs">
        /// </param>
        var columnNameToShift = '';
        var columnNameDropped = '';
        var collumnRearrangeInfo = '';
        columnNameDropped = sender.get_index();
        var columntoShift = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(sender.get_targetRaisedEvent(), 'DIV').parentNode;
        columnNameToShift = columntoShift.getAttribute('ColumnName').toString();
        if (Array.contains(this._grid.get_GridInfo().ColumnsWithoutClientSideFunctionality, columnNameToShift) && this._grid.get_GridInfo().RequireColumnSwap) {
            return;
        }
        if (sender.get_dropContainer().id === this._grid.elementIDManager.get_fluidHeaderDivID()) {
            collumnRearrangeInfo = columnNameDropped + '|' + columnNameToShift + '|unfreeze';
        }
        else if (sender.get_dropContainer().id === this._grid.elementIDManager.get_frozenHeaderDivID()) {
            collumnRearrangeInfo = columnNameDropped + '|' + columnNameToShift + '|freeze';
        }
        if (columnNameDropped !== columnNameToShift) {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REARRANGE_COLUMN_DROP, collumnRearrangeInfo, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REARRANGE_COLUMN_DROP);
        }
    },

    onContextMenuColumnRow: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$onContextMenuColumnRow(TH, e) {
        /// <param name="TH" type="Object" domElement="true">
        /// </param>
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var hideMenu = null;
        if (this._grid.get_GridInfo().RequireFreezeColumns || this._grid.get_GridInfo().RequireAbsoluteSort || (this._grid.get_GridInfo().RequireMathematicalOperations && !this._grid.get_GridInfo().ShowTotalRecordCount) || this._grid.get_GridInfo().RequireHideColumns) {
            hideMenu = this._createMenu(TH);
        }
        if (hideMenu != null) {
            var documentHeight = document.documentElement.clientHeight;
            var documentWidth = document.documentElement.clientWidth;
            var menuWidth = Number.parseInvariant(hideMenu.childNodes[0].style.width.substr(0, hideMenu.childNodes[0].style.width.indexOf('px')));
            var locationX = e.clientX;
            var locationY = e.clientY;
            if (locationX + menuWidth > documentWidth) {
                hideMenu.style.left = (locationX - menuWidth).toString() + 'px';
            }
            else {
                hideMenu.style.left = locationX.toString() + 'px';
            }
            if (locationY + this._hideMenuHeight > documentHeight) {
                hideMenu.style.top = (locationY - this._hideMenuHeight).toString() + 'px';
            }
            else {
                hideMenu.style.top = locationY.toString() + 'px';
            }
            document.body.appendChild(hideMenu);
        }
        e.preventDefault();
        e.stopPropagation();
    },

    _createMenu: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_createMenu(HeaderColumn) {
        /// <param name="HeaderColumn" type="Object" domElement="true">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var columnContextMenu = null;
        var columnName = HeaderColumn.getAttribute('columnName').toString();
        var ColumnDisplayName = eval('$(HeaderColumn).find(\".xlneogroupDiv\").html()').toString();
        var columnsNotToCreateMenuOn = [];
        columnsNotToCreateMenuOn.concat(this._grid.get_GridInfo().ColumnsWithoutClientSideFunctionality);
        try {
            columnContextMenu = document.getElementById(this._grid.elementIDManager.get_columnContextMenuID());
            columnContextMenu.parentNode.removeChild(columnContextMenu);
        }
        catch ($e1) {
        }
        columnContextMenu = document.createElement('DIV');
        columnContextMenu.style.display = '';
        columnContextMenu.id = this._grid.elementIDManager.get_columnContextMenuID();
        columnContextMenu.className = 'hideMenu';
        var objElementHelper = new com.ivp.rad.controls.neogrid.scripts.GUIElementHelper();
        var table = objElementHelper.get_table();
        columnContextMenu.appendChild(table);
        table.className = 'contextMenuHideColumns';
        table.removeAttribute('width');
        table.style.width = '135px';
        var trHeader = table.insertRow(table.rows.length);
        var tdHide = null;
        var handlerHideColumn = Function.createDelegate(this, this._hideColumn);
        var handlerShowHiddenColumns = Function.createDelegate(this, this._createShowColumnSubMenu);
        var handlerFreezeColumn = Function.createDelegate(this, this._freezeColumn);
        var handlerUnFreezeColumn = Function.createDelegate(this, this.unFreezeColumn);
        var handlerShowFrozenColumns = Function.createDelegate(this, this.createShowFrozenSubMenu);
        var handlerAbsoluteSortColumn = Function.createDelegate(this, this.absoluteSortColumn);
        var handlerGroupColumn = Function.createDelegate(this, this.groupColumn);
        this._onLeaveSubMenuColumns = Function.createDelegate(this, this._hideSubMenuColumns);
        this._onLeaveSubMenuFreezeColumns = Function.createDelegate(this, this._hideSubMenuFreezeColumns);
        var totalColumns;
        var frozenColumnCount;
        var fluidColumnCount;
        frozenColumnCount = (this._grid.elementInfo.get_frozenHeaderDiv() == null) ? 0 : (this._grid.elementInfo.get_frozenHeaderDiv().childNodes[0]).children[0].children[0].children.length - 1;
        fluidColumnCount = (this._grid.elementInfo.get_headerInnerDiv() == null) ? 0 : this._grid.elementInfo.get_headerInnerDiv().children[0].children[0].children[0].children.length;
        totalColumns = frozenColumnCount + fluidColumnCount;
        var ColumnsWithoutClientSideFunctionalityLinq = new LINQ(this._grid.get_GridInfo().ColumnsWithoutClientSideFunctionality);
        if (this._grid.get_GridInfo().RequireHideColumns) {
            if (!ColumnsWithoutClientSideFunctionalityLinq.Any(Function.createDelegate(this, function (o, i) {
                return ((o) === columnName);
            }))) {
                tdHide = trHeader.insertCell(trHeader.cells.length);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'click', handlerHideColumn);
                tdHide.id = this._grid.elementIDManager.get_columnContextMenuHeaderID() + columnName;
                tdHide.setAttribute('columnName', columnName);
                this._grid.raddomElement.setInnerContent(tdHide, 'Hide Column');
                tdHide.title = 'Hide - ' + ColumnDisplayName.trimEnd().trimStart();
                tdHide.className = 'contextMenuHideColumnsItem';
                tdHide.noWrap = true;
                tdHide.style.paddingLeft = '5px';
                tdHide.style.paddingRight = '5px';
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'mouseover', this._onLeaveSubMenuFreezeColumns);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'mouseover', this._onLeaveSubMenuColumns);
            }
            if (this._columnsToHideLinq.Count(Function.createDelegate(this, function (o, i) {
                return !(o).isDefault;
            })) > 0) {
                var tr = null;
                var td = null;
                tr = table.insertRow(table.rows.length);
                td = tr.insertCell(tr.cells.length);
                td.id = this._grid.elementIDManager.get_columnContextMenuIDBodyID() + columnName;
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(td, 'mouseover', this._onLeaveSubMenuFreezeColumns);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(td, 'mouseover', handlerShowHiddenColumns);
                this._grid.raddomElement.setInnerContent(td, 'Show Columns');
                td.className = 'contextMenuHideColumnsItem';
                td.noWrap = true;
                td.style.paddingLeft = '5px';
                td.style.paddingRight = '5px';
            }
        }
        if (this._grid.get_GridInfo().RequireFreezeColumns) {
            if (!ColumnsWithoutClientSideFunctionalityLinq.Any(Function.createDelegate(this, function (o, i) {
                return ((o) === columnName);
            })) && !this._frozenColumnLinq.Any(Function.createDelegate(this, function (o, i) {
                return ((o).ColumnName === columnName);
            }))) {
                trHeader = table.insertRow(table.rows.length);
                tdHide = trHeader.insertCell(trHeader.cells.length);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'click', handlerFreezeColumn);
                tdHide.id = this._grid.elementIDManager.get_columnContextMenuHeaderID() + columnName;
                tdHide.setAttribute('columnName', columnName);
                this._grid.raddomElement.setInnerContent(tdHide, 'Freeze Column');
                tdHide.title = 'Freeze - ' + ColumnDisplayName;
                tdHide.className = 'contextMenuHideColumnsItem';
                tdHide.noWrap = true;
                tdHide.style.paddingLeft = '5px';
                tdHide.style.paddingRight = '5px';
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'mouseover', this._onLeaveSubMenuFreezeColumns);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'mouseover', this._onLeaveSubMenuColumns);
            }
            if (this._frozenColumnLinq.Count(Function.createDelegate(this, function (o, i) {
                return !(o).isDefault;
            })) > 0) {
                var tr = null;
                var td = null;
                tr = table.insertRow(table.rows.length);
                td = tr.insertCell(tr.cells.length);
                td.id = this._grid.elementIDManager.get_columnContextMenuIDBodyID() + columnName;
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(td, 'mouseover', this._onLeaveSubMenuColumns);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(td, 'mouseover', handlerShowFrozenColumns);
                this._grid.raddomElement.setInnerContent(td, 'UnFreeze Columns');
                td.className = 'contextMenuHideColumnsItem';
                td.noWrap = true;
                td.style.paddingLeft = '5px';
                td.style.paddingRight = '5px';
                if (this._frozenColumnLinq.Any(Function.createDelegate(this, function (o, i) {
                    return ((o).ColumnName === columnName);
                }))) {
                    tr = table.insertRow(table.rows.length);
                    td = tr.insertCell(tr.cells.length);
                    td.id = this._grid.elementIDManager.get_columnContextMenuIDBodyID() + columnName;
                    td.setAttribute('columnName', columnName);
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(td, 'click', handlerUnFreezeColumn);
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(td, 'mouseover', this._onLeaveSubMenuFreezeColumns);
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(td, 'mouseover', this._onLeaveSubMenuColumns);
                    this._grid.raddomElement.setInnerContent(td, 'UnFreeze ' + ColumnDisplayName);
                    td.className = 'contextMenuHideColumnsItem';
                    td.noWrap = true;
                    td.style.paddingLeft = '5px';
                    td.style.paddingRight = '5px';
                }
            }
        }
        if (HeaderColumn.getAttribute('datatype').toString() === 'xs_int' || HeaderColumn.getAttribute('datatype').toString() === 'xs_decimal') {
            if (this._grid.get_GridInfo().RequireAbsoluteSort) {
                trHeader = table.insertRow(table.rows.length);
                tdHide = trHeader.insertCell(trHeader.cells.length);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'click', handlerAbsoluteSortColumn);
                tdHide.id = this._grid.elementIDManager.get_columnContextMenuAbsoluteSortId() + columnName;
                tdHide.setAttribute('columnname', columnName);
                this._grid.raddomElement.setInnerContent(tdHide, '');
                var sortInfo = null;
                for (var i = 0; i < this._grid.sort.sortedColumns.length; i++) {
                    sortInfo = this._grid.sort.sortedColumns[i];
                    if (sortInfo.ColumnName === columnName) {
                        if (sortInfo.IsAbsoluteSorted) {
                            this._grid.raddomElement.setInnerContent(tdHide, 'Clear Absolute Sort');
                            tdHide.title = 'Clear Absolute Sort - ' + ColumnDisplayName;
                        }
                        else {
                            this._grid.raddomElement.setInnerContent(tdHide, 'Absolute Sort');
                            tdHide.title = 'Absolute Sort - ' + ColumnDisplayName;
                        }
                        break;
                    }
                }
                if (this._grid.raddomElement.getInnerContent(tdHide) === '') {
                    this._grid.raddomElement.setInnerContent(tdHide, 'Absolute Sort');
                    tdHide.title = 'Absolute Sort - ' + ColumnDisplayName;
                }
                tdHide.className = 'contextMenuHideColumnsItem';
                tdHide.noWrap = true;
                tdHide.style.paddingLeft = '5px';
                tdHide.style.paddingRight = '5px';
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'mouseover', this._onLeaveSubMenuFreezeColumns);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'mouseover', this._onLeaveSubMenuColumns);
            }
            if (this._grid.get_GridInfo().RequireMathematicalOperations && !this._grid.get_GridInfo().ShowTotalRecordCount) {
                trHeader = table.insertRow(table.rows.length);
                tdHide = trHeader.insertCell(trHeader.cells.length);
                tdHide.setAttribute('ClickedColumn', columnName);
                this._grid.raddomElement.setInnerContent(tdHide, 'Weighted Average');
                tdHide.title = 'Weighted Average';
                tdHide.className = 'contextMenuHideColumnsItem';
                tdHide.noWrap = true;
                tdHide.style.paddingLeft = '5px';
                tdHide.style.paddingRight = '5px';
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'mouseover', this._onLeaveSubMenuFreezeColumns);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'mouseover', Function.createDelegate(this, this._showWghtAvgColumn));
            }
        }
        if (this._grid.get_GridInfo().RequireGrouping) {
            trHeader = table.insertRow(table.rows.length);
            tdHide = trHeader.insertCell(trHeader.cells.length);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdHide, 'click', handlerGroupColumn);
            tdHide.id = this._grid.elementIDManager.get_columnContextMenuGroupId() + columnName;
            tdHide.setAttribute('columnname', columnName);
            if (Array.contains(this._grid.group._groupedColumns, columnName)) {
                this._grid.raddomElement.setInnerContent(tdHide, 'Remove Group');
                tdHide.title = 'Remove Group - ' + columnName;
            }
            else {
                this._grid.raddomElement.setInnerContent(tdHide, 'Group');
                tdHide.title = 'Group - ' + columnName;
            }
            tdHide.className = 'contextMenuHideColumnsItem';
            tdHide.noWrap = true;
            tdHide.style.paddingLeft = '5px';
            tdHide.style.paddingRight = '5px';
        }
        this._handlerColumnContextMenu = Function.createDelegate(this, this._hideContextMenu);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.body, 'mouseover', this._handlerColumnContextMenu);
        return columnContextMenu;
    },

    _getDisplayName: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_getDisplayName(s) {
        /// <param name="s" type="String">
        /// </param>
        /// <returns type="String"></returns>
        if (this._grid.get_GridInfo().ColumnNameMapping != null) {
            if (this._grid.get_GridInfo().ColumnNameMapping[s] == null || this._grid.get_GridInfo().ColumnNameMapping[s].toString().trim() === '') {
                return s;
            }
            else {
                return this._grid.get_GridInfo().ColumnNameMapping[s].toString();
            }
        }
        return s;
    },

    _showWghtAvgColumn: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_showWghtAvgColumn(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var clickedColumnName = e.target.getAttribute('ClickedColumn').toString();
        var columnName = '';
        var fluidColumns = this._grid.elementInfo.get_headerInnerDiv().children[0].children[0].children;
        var objElementHelper = new com.ivp.rad.controls.neogrid.scripts.GUIElementHelper();
        var bodyTable = null;
        var menuBodyDiv = document.createElement('DIV');
        menuBodyDiv.id = this._grid.elementIDManager.get_columnContextMenuID() + '_ShowWghtAvgDiv';
        menuBodyDiv.style.display = 'inline';
        menuBodyDiv.className = 'hideMenu';
        bodyTable = objElementHelper.get_table();
        bodyTable.className = 'contextMenuHideColumns';
        var row = null;
        var cell = null;
        if (this._grid.elementInfo.get_frozenHeaderDiv() != null && this._grid.elementInfo.get_frozenHeaderDiv().hasChildNodes()) {
            var frozenColumns = (this._grid.elementInfo.get_frozenHeaderDiv().childNodes[0]).children[0].children[0].children;
            for (var i = 1; i < frozenColumns.length; i++) {
                columnName = frozenColumns[i].getAttribute('columnName').toString();
                if (columnName !== clickedColumnName && (frozenColumns[i].getAttribute('datatype').toString() === 'xs_int' || frozenColumns[i].getAttribute('datatype').toString() === 'xs_decimal')) {
                    row = bodyTable.insertRow(bodyTable.rows.length);
                    cell = row.insertCell(row.cells.length);
                    this._grid.raddomElement.setInnerContent(cell, this._getDisplayName(columnName));
                    cell.setAttribute('WghtColumn', columnName);
                    cell.setAttribute('FieldColumn', clickedColumnName);
                    cell.className = 'contextMenuHideColumnsItem';
                    cell.noWrap = true;
                    cell.style.paddingLeft = '5px';
                    cell.style.paddingRight = '5px';
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(cell, 'click', Function.createDelegate(this, this._wghtColumnSelected));
                }
            }
        }
        for (var i = 0; i < fluidColumns.length - 1; i++) {
            columnName = fluidColumns[i].getAttribute('columnName').toString();
            if (columnName !== clickedColumnName && (fluidColumns[i].getAttribute('datatype').toString() === 'xs_int' || fluidColumns[i].getAttribute('datatype').toString() === 'xs_decimal')) {
                row = bodyTable.insertRow(bodyTable.rows.length);
                cell = row.insertCell(row.cells.length);
                this._grid.raddomElement.setInnerContent(cell, this._getDisplayName(columnName));
                cell.setAttribute('WghtColumn', columnName);
                cell.setAttribute('FieldColumn', clickedColumnName);
                cell.className = 'contextMenuHideColumnsItem';
                cell.noWrap = true;
                cell.style.paddingLeft = '5px';
                cell.style.paddingRight = '5px';
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(cell, 'click', Function.createDelegate(this, this._wghtColumnSelected));
            }
        }
        if (menuBodyDiv != null) {
            var parentDiv = e.target.parentNode.parentNode.parentNode.parentNode;
            var parentTable = e.target.parentNode.parentNode.parentNode;
            menuBodyDiv.appendChild(bodyTable);
            menuBodyDiv.style.top = e.clientY.toString() + 'px';
            menuBodyDiv.style.left = (Number.parseInvariant(parentDiv.style.left.substr(0, parentDiv.style.left.length - 2)) + Number.parseInvariant(parentTable.style.width.substr(0, parentTable.style.width.length - 2)) - 1).toString() + 'px';
            document.body.appendChild(menuBodyDiv);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(menuBodyDiv, 'mouseleave', Function.createDelegate(this, this._hideWghtColumnsDiv));
        }
    },

    _wghtColumnSelected: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_wghtColumnSelected(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var el = e.target;
        var wghtInfoObj = new com.ivp.rad.controls.neogrid.scripts.info.RADGridWghtAvgInfo();
        wghtInfoObj.WghtColumnName = el.getAttribute('WghtColumn').toString();
        wghtInfoObj.FieldColumnName = el.getAttribute('FieldColumn').toString();
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_WGHTAVG_COLUMN_SELECTED, Sys.Serialization.JavaScriptSerializer.serialize(wghtInfoObj), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_WGHTAVG_COLUMN_SELECTED);
        this._hideWghtColumnsDiv(e);
        this._hideContextMenu(e);
    },

    _hideWghtColumnsDiv: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_hideWghtColumnsDiv(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var el = document.getElementById(this._grid.elementIDManager.get_columnContextMenuID() + '_ShowWghtAvgDiv');
        document.body.removeChild(el);
    },

    _hideContextMenu: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_hideContextMenu(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var ColumnContextSubMenu = document.getElementById(this._grid.elementIDManager.get_columnContextSubMenuId());
        var ColumnContextFrozenSubMenu = document.getElementById(this._grid.elementIDManager.get_columnContextFrozenSubMenuId());
        var ColumnContextMenu = document.getElementById(this._grid.elementIDManager.get_columnContextMenuID());
        var elWghtCollumnsDiv = document.getElementById(this._grid.elementIDManager.get_columnContextMenuID() + '_ShowWghtAvgDiv');
        var collection = null;
        if (ColumnContextSubMenu != null) {
            if (ColumnContextSubMenu !== e.target && !this._grid.raddomElement.containsElement(ColumnContextSubMenu, e.target) && ColumnContextMenu !== e.target && !this._grid.raddomElement.containsElement(ColumnContextMenu, e.target)) {
                collection = ColumnContextSubMenu.getElementsByTagName('TD');
                for (var i = 0; i < collection.length; i++) {
                    $clearHandlers(collection[i]);
                }
                ColumnContextSubMenu.parentNode.removeChild(ColumnContextSubMenu);
                ColumnContextMenu.parentNode.removeChild(ColumnContextMenu);
                if (this._handlerColumnContextMenu != null) {
                    $removeHandler(document.body, 'mouseover', this._handlerColumnContextMenu);
                }
            }
        }
        else if (ColumnContextFrozenSubMenu != null) {
            if (ColumnContextFrozenSubMenu !== e.target && !this._grid.raddomElement.containsElement(ColumnContextFrozenSubMenu, e.target) && ColumnContextMenu !== e.target && !this._grid.raddomElement.containsElement(ColumnContextMenu, e.target)) {
                collection = ColumnContextFrozenSubMenu.getElementsByTagName('TD');
                for (var i = 0; i < collection.length; i++) {
                    $clearHandlers(collection[i]);
                }
                ColumnContextFrozenSubMenu.parentNode.removeChild(ColumnContextFrozenSubMenu);
                ColumnContextMenu.parentNode.removeChild(ColumnContextMenu);
                if (this._handlerColumnContextMenu != null) {
                    $removeHandler(document.body, 'mouseover', this._handlerColumnContextMenu);
                }
            }
        }
        else if (elWghtCollumnsDiv != null) {
            if (this._grid.raddomElement.getInnerContent(e.target) !== 'Weighted Average' && !this._grid.raddomElement.containsElement(elWghtCollumnsDiv, e.target)) {
                collection = elWghtCollumnsDiv.getElementsByTagName('TD');
                for (var i = 0; i < collection.length; i++) {
                    $clearHandlers(collection[i]);
                }
                elWghtCollumnsDiv.parentNode.removeChild(elWghtCollumnsDiv);
            }
        }
        else {
            if (ColumnContextMenu != null && ColumnContextMenu !== e.target && !this._grid.raddomElement.containsElement(ColumnContextMenu, e.target)) {
                collection = ColumnContextMenu.getElementsByTagName('TD');
                for (var i = 0; i < collection.length; i++) {
                    $clearHandlers(collection[i]);
                }
                ColumnContextMenu.parentNode.removeChild(ColumnContextMenu);
                if (this._handlerColumnContextMenu != null) {
                    $removeHandler(document.body, 'mouseover', this._handlerColumnContextMenu);
                }
            }
        }
    },

    _hideColumn: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_hideColumn(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var columnName = e.target.getAttribute('columnName').toString();
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_HIDE_COLUMN, columnName, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_HIDE_COLUMN);
        this._hideColumnsSubMenu();
    },

    _hideColumnsSubMenu: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_hideColumnsSubMenu() {
        var hideMenu = document.getElementById(this._grid.elementIDManager.get_columnContextMenuID());
        if (this._handlerColumnContextMenu != null) {
            $removeHandler(document.body, 'mouseover', this._handlerColumnContextMenu);
        }
        this._hideSubMenuColumns(null);
        if (hideMenu != null) {
            hideMenu.parentNode.removeChild(hideMenu);
        }
    },

    _hideSubMenuColumns: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_hideSubMenuColumns(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var columnContextSubMenu = document.getElementById(this._grid.elementIDManager.get_columnContextSubMenuId());
        if (columnContextSubMenu != null) {
            columnContextSubMenu.parentNode.removeChild(columnContextSubMenu);
        }
    },

    _createShowColumnSubMenu: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_createShowColumnSubMenu(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var handlerUnhideAllColumns = Function.createDelegate(this, this._unHideAllColumns);
        var objElementHelper = new com.ivp.rad.controls.neogrid.scripts.GUIElementHelper();
        var bodyTable = null;
        var menuBodyDiv = document.createElement('DIV');
        menuBodyDiv.id = this._grid.elementIDManager.get_columnContextSubMenuId();
        menuBodyDiv.style.display = '';
        menuBodyDiv.className = 'hideMenu';
        bodyTable = objElementHelper.get_table();
        bodyTable.className = 'contextMenuHideColumns';
        var columnsToHideLength = this._columnsToHideLinq.Count(Function.createDelegate(this, function (o, i) {
            return (!(o).isDefault);
        }));
        switch (columnsToHideLength) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                bodyTable.style.width = '135px';
                menuBodyDiv.style.height = (20 * columnsToHideLength).toString() + 'px';
                break;
            default:
                menuBodyDiv.style.height = '140px !important';
                menuBodyDiv.style.overflowY = 'auto';
                menuBodyDiv.style.overflowX = 'hidden';
                bodyTable.style.width = '118px';
                break;
        }
        this._hideMenuHeight = menuBodyDiv.style.posHeight + 20;
        menuBodyDiv.appendChild(bodyTable);
        var trBody = null;
        var tdBody = null;
        trBody = bodyTable.insertRow(bodyTable.rows.length);
        tdBody = trBody.insertCell(trBody.cells.length);
        tdBody.className = 'contextMenuHideColumnsItem';
        tdBody.noWrap = true;
        tdBody.style.paddingLeft = '5px';
        tdBody.style.paddingRight = '5px';
        this._grid.raddomElement.setInnerContent(tdBody, 'Show All');
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdBody, 'click', handlerUnhideAllColumns);
        var innerText = '';
        for (var i = 0; i < this._grid.get_GridInfo().ColumnsToHide.length; i++) {
            if (!(this._grid.get_GridInfo().ColumnsToHide[i]).isDefault) {
                trBody = bodyTable.insertRow(bodyTable.rows.length);
                tdBody = trBody.insertCell(trBody.cells.length);
                tdBody.id = this._grid.elementIDManager.get_columnContextSubMenuId() + (this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName;
                tdBody.setAttribute('columnName', (this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName);
                tdBody.className = 'contextMenuHideColumnsItem';
                tdBody.noWrap = true;
                tdBody.style.paddingLeft = '5px';
                tdBody.style.paddingRight = '5px';
                innerText = this._getDisplayName((this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName);
                tdBody.setAttribute('title', innerText);
                this._grid.raddomElement.setInnerContent(tdBody, (innerText === '') ? '(Empty)' : innerText);
                var handlerUnhideColumn = Function.createDelegate(this, this._unHideColumn);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdBody, 'click', handlerUnhideColumn);
            }
        }
        if (menuBodyDiv != null) {
            var parentDiv = e.target.parentNode.parentNode.parentNode.parentNode;
            var parentTable = e.target.parentNode.parentNode.parentNode;
            var documentWidth = document.documentElement.clientWidth;
            menuBodyDiv.style.top = (Number.parseInvariant(parentDiv.style.top.substr(0, parentDiv.style.top.length - 2)) + 20).toString() + 'px';
            if (Sys.Browser.name === 'Microsoft Internet Explorer' || Sys.Browser.name === 'Netscape') {
                var subMenuLeft = Number.parseInvariant(parentDiv.style.left.substr(0, parentDiv.style.left.length - 2)) + Number.parseInvariant(parentTable.style.width.substr(0, parentTable.style.width.length - 2)) - 5;
                var menuWidth = Number.parseInvariant(menuBodyDiv.children[0].style.width.substr(0, menuBodyDiv.children[0].style.width.indexOf('px')));
                if ((subMenuLeft + menuWidth) > documentWidth) {
                    menuBodyDiv.style.left = (Number.parseInvariant(parentDiv.style.left.substr(0, parentDiv.style.left.length - 2)) - menuWidth + 5).toString() + 'px';
                }
                else {
                    menuBodyDiv.style.left = (Number.parseInvariant(parentDiv.style.left.substr(0, parentDiv.style.left.length - 2)) + Number.parseInvariant(parentTable.style.width.substr(0, parentTable.style.width.length - 2)) - 5).toString() + 'px';
                }
            }
            else {
                var subMenuLeft = Number.parseInvariant(parentDiv.style.left.substr(0, parentDiv.style.left.length - 2)) + Number.parseInvariant(parentTable.style.width.substr(0, parentTable.style.width.length - 2)) - 5;
                var menuWidth = Number.parseInvariant(menuBodyDiv.children[0].style.width.substr(0, menuBodyDiv.children[0].style.width.indexOf('px')));
                if ((subMenuLeft + menuWidth) > documentWidth) {
                    menuBodyDiv.style.left = (Number.parseInvariant(parentDiv.style.left.substr(0, parentDiv.style.left.length - 2)) - menuWidth + 2).toString() + 'px';
                }
                else {
                    menuBodyDiv.style.left = (Number.parseInvariant(parentDiv.style.left.substr(0, parentDiv.style.left.length - 2)) + Number.parseInvariant(parentTable.style.width.substr(0, parentTable.style.width.length - 2)) - 1).toString() + 'px';
                }
            }
            document.body.appendChild(menuBodyDiv);
        }
        this._onLeaveSubMenuColumns = Function.createDelegate(this, this._hideSubMenuColumns);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(menuBodyDiv, 'mouseleave', this._onLeaveSubMenuColumns);
    },

    _unHideAllColumns: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_unHideAllColumns(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_ALL_COLUMN, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_ALL_COLUMN);
        this._hideColumnsSubMenu();
    },

    _unHideColumn: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_unHideColumn(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var columnName = e.target.getAttribute('columnName').toString();
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_COLUMN, columnName, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_COLUMN);
        this._hideColumnsSubMenu();
    },

    _freezeColumn: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_freezeColumn(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var headerCellCollection = document.getElementById(this._grid.elementIDManager.get_fluidHeaderDivID()).children[0].children[0].children[0].children;
        var columnName = e.target.getAttribute('columnName').toString();
        var columnNameList = '';
        for (var i = 0; i < headerCellCollection.length; i++) {
            columnNameList += headerCellCollection[i].getAttribute('columnName').toString() + ',';
            if (headerCellCollection[i].getAttribute('columnName').toString() === columnName) {
                break;
            }
        }
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_COLUMN, columnNameList.substring(0, columnNameList.length - 1), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_COLUMN);
        this._hideSubMenuFreeze();
    },

    _hideSubMenuFreeze: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_hideSubMenuFreeze() {
        if (this._handlerColumnContextMenu != null) {
            $removeHandler(document.body, 'mouseover', this._handlerColumnContextMenu);
        }
        this._hideSubMenuFreezeColumns(null);
        var ColumnContextMenu = document.getElementById(this._grid.elementIDManager.get_columnContextMenuID());
        if (ColumnContextMenu != null) {
            ColumnContextMenu.parentNode.removeChild(ColumnContextMenu);
        }
    },

    _hideSubMenuFreezeColumns: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$_hideSubMenuFreezeColumns(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var hideFrozenSubMenu = document.getElementById(this._grid.elementIDManager.get_columnContextFrozenSubMenuId());
        if (hideFrozenSubMenu != null) {
            hideFrozenSubMenu.parentNode.removeChild(hideFrozenSubMenu);
        }
    },

    unFreezeColumn: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$unFreezeColumn(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var headerCellCollection = document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv').children[0].children[0].children[0].children;
        var columnNameList = '';
        var columnName = e.target.getAttribute('columnname').toString();
        for (var i = headerCellCollection.length - 1; i >= 0; i--) {
            columnNameList += headerCellCollection[i].getAttribute('columnname').toString() + ',';
            if (headerCellCollection[i].getAttribute('columnname').toString() === columnName) {
                break;
            }
        }
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_REMOVE_COLUMN, columnNameList.substring(0, columnNameList.length - 1), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_REMOVE_COLUMN);
        this._hideSubMenuFreeze();
    },

    unFreezeAllColumns: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$unFreezeAllColumns(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_REMOVE_COLUMN_ALL, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_REMOVE_COLUMN_ALL);
        this._hideSubMenuFreeze();
    },

    createShowFrozenSubMenu: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$createShowFrozenSubMenu(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var handlerUnfreezeAllColumns = Function.createDelegate(this, this.unFreezeAllColumns);
        var objElementHelper = new com.ivp.rad.controls.neogrid.scripts.GUIElementHelper();
        var bodyTable = null;
        var menuBodyDiv = document.createElement('DIV');
        var columnName = '';
        menuBodyDiv.id = this._grid.elementIDManager.get_columnContextFrozenSubMenuId();
        menuBodyDiv.style.display = '';
        menuBodyDiv.className = 'hideMenu';
        bodyTable = objElementHelper.get_table();
        bodyTable.className = 'contextMenuHideColumns';
        var columnsToFreezeLength = this._frozenColumnLinq.Count(Function.createDelegate(this, function (o, i) {
            return (!(o).isDefault);
        }));
        switch (columnsToFreezeLength) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                bodyTable.style.width = '135px';
                menuBodyDiv.style.height = (20 * columnsToFreezeLength).toString() + 'px';
                break;
            default:
                menuBodyDiv.style.height = '140px';
                menuBodyDiv.style.overflowY = 'auto';
                menuBodyDiv.style.overflowX = 'hidden';
                bodyTable.style.width = '118px';
                break;
        }
        this._hideMenuHeight = menuBodyDiv.style.posHeight + 20;
        menuBodyDiv.appendChild(bodyTable);
        var trBody = null;
        var tdBody = null;
        trBody = bodyTable.insertRow(bodyTable.rows.length);
        tdBody = trBody.insertCell(trBody.cells.length);
        tdBody.className = 'contextMenuHideColumnsItem';
        tdBody.noWrap = true;
        tdBody.style.paddingLeft = '5px';
        tdBody.style.paddingRight = '5px';
        this._grid.raddomElement.setInnerContent(tdBody, 'Unfreeze All');
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdBody, 'click', handlerUnfreezeAllColumns);
        var innerText = '';
        for (var i = 0; i < this._grid.get_GridInfo().FrozenColumns.length; i++) {
            columnName = (this._grid.get_GridInfo().FrozenColumns[i]).ColumnName;
            if (!(this._grid.get_GridInfo().FrozenColumns[i]).isDefault) {
                trBody = bodyTable.insertRow(bodyTable.rows.length);
                tdBody = trBody.insertCell(trBody.cells.length);
                tdBody.id = this._grid.elementIDManager.get_columnContextFrozenSubMenuId() + columnName;
                tdBody.setAttribute('columnName', columnName);
                tdBody.className = 'contextMenuHideColumnsItem';
                tdBody.noWrap = true;
                tdBody.style.paddingLeft = '5px';
                tdBody.style.paddingRight = '5px';
                this._grid.raddomElement.setInnerContent(tdBody, this._getDisplayName(columnName));
                innerText = this._getDisplayName(columnName);
                tdBody.setAttribute('title', innerText);
                var handlerUnFreezeColumn = Function.createDelegate(this, this.unFreezeColumn);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(tdBody, 'click', handlerUnFreezeColumn);
            }
        }
        if (menuBodyDiv != null) {
            var parentDiv = e.target.parentNode.parentNode.parentNode.parentNode;
            var parentTable = e.target.parentNode.parentNode.parentNode;
            var hiddenColumnLenth = this._columnsToHideLinq.Count(Function.createDelegate(this, function (o, i) {
                return (!(o).isDefault);
            }));
            if (hiddenColumnLenth > 0) {
            }
            else {
            }
            menuBodyDiv.style.top = Number.parseInvariant(parentDiv.style.top.substr(0, parentDiv.style.top.length - 2)).toString() + 'px';
            menuBodyDiv.style.left = (Number.parseInvariant(parentDiv.style.left.substr(0, parentDiv.style.left.length - 2)) + Number.parseInvariant(parentTable.style.width.substr(0, parentTable.style.width.length - 2)) - 1).toString() + 'px';
            document.body.appendChild(menuBodyDiv);
        }
        this._onLeaveSubMenuFreezeColumns = Function.createDelegate(this, this._hideSubMenuFreezeColumns);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(menuBodyDiv, 'mouseleave', this._onLeaveSubMenuFreezeColumns);
    },

    absoluteSortColumn: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$absoluteSortColumn(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var sortInfo = null;
        var columnName = e.target.getAttribute('columnname').toString();
        var doAbsoluteSort = true;
        for (var i = 0; i < this._grid.sort.sortedColumns.length; i++) {
            sortInfo = this._grid.sort.sortedColumns[i];
            if (sortInfo.ColumnName === columnName && sortInfo.IsAbsoluteSorted) {
                sortInfo.IsAbsoluteSorted = false;
                this._grid.raddomElement.setInnerContent(e.target, 'Absolute Sort');
                doAbsoluteSort = false;
            }
            else if (sortInfo.ColumnName === columnName) {
                sortInfo.IsAbsoluteSorted = true;
                this._grid.raddomElement.setInnerContent(e.target, 'Clear Absolute Sort');
                doAbsoluteSort = true;
            }
        }
        this._grid.sort.performAbsoluteSort(columnName, doAbsoluteSort);
        this._hideColumnsSubMenu();
    },

    groupColumn: function com_ivp_rad_controls_neogrid_scripts_ManageColumns$groupColumn(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var columnName = e.target.getAttribute('columnname').toString();
        if (Array.contains(this._grid.group._groupedColumns, columnName)) {
            Array.remove(this._grid.group._groupedColumns, columnName);
        }
        else {
            Array.add(this._grid.group._groupedColumns, columnName);
        }
        this._grid.group.recreateDropContainer(true);
        this._hideColumnsSubMenu();
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ManageEvents

com.ivp.rad.controls.neogrid.scripts.ManageEvents = function com_ivp_rad_controls_neogrid_scripts_ManageEvents(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_headerRow" type="Object" domElement="true">
    /// </field>
    /// <field name="_contextMenuRow" type="Object" domElement="true">
    /// </field>
    /// <field name="_dataRow" type="Object" domElement="true">
    /// </field>
    /// <field name="_startScrollingPopup" type="Boolean">
    /// </field>
    /// <field name="_shiftKeyPressed" type="Boolean">
    /// </field>
    /// <field name="_isDblClicked" type="Boolean">
    /// </field>
    /// <field name="_previouslyOpenedDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_resizingDone" type="Boolean">
    /// </field>
    /// <field name="_RowID" type="string">
    /// </field>
    /// <field name="_CoulmnName" type="string">
    /// </field>
    /// <field name="_selectStartEnabled" type="Boolean">
    /// </field>
    /// <field name="_e" type="Sys.UI.DomEvent">
    /// </field>
    /// <field name="_startCellHandled" type="Boolean">
    /// </field>
    /// <field name="_groupedColumns" type="Array">
    /// </field>
    /// <field name="_sortInfoList" type="Array">
    /// </field>
    /// <field name="_columnIndexAndNameMap" type="Object">
    /// </field>
    /// <field name="_dragCopyPasteDiv" type="Boolean">
    /// </field>
    /// <field name="_initialX" type="Number" integer="true">
    /// </field>
    /// <field name="_initialY" type="Number" integer="true">
    /// </field>
    /// <field name="_dragStartColumnNameIndex" type="Number" integer="true">
    /// </field>
    /// <field name="_dragStartIndex" type="Number" integer="true">
    /// </field>
    /// <field name="_dragEndIndex" type="Number" integer="true">
    /// </field>
    /// <field name="_initialDragHeight" type="Number" integer="true">
    /// </field>
    /// <field name="isInterOpInstalled" type="Boolean">
    /// </field>
    /// <field name="ruleEditorClientX" type="Number" integer="true">
    /// </field>
    /// <field name="ruleEditorClientY" type="Number" integer="true">
    /// </field>
    /// <field name="_linq" type="LINQ">
    /// </field>
    /// <field name="_isFrozen" type="Boolean">
    /// </field>
    this._groupedColumns = [];
    this._sortInfoList = [];
    this._grid = grid;
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.ManageEvents.prototype = {
    _grid: null,
    _headerRow: null,
    _contextMenuRow: null,
    _dataRow: null,
    _startScrollingPopup: false,
    _shiftKeyPressed: false,
    _isDblClicked: false,
    _previouslyOpenedDiv: null,
    _resizingDone: false,
    _selectStartEnabled: false,
    _e: null,
    _startCellHandled: true,
    _columnIndexAndNameMap: null,
    _dragCopyPasteDiv: false,
    _initialX: 0,
    _RowID: "",
    _CoulmnName: "",
    _initialY: 0,
    _dragStartColumnNameIndex: 0,
    _dragStartIndex: 0,
    _dragEndIndex: 0,
    _initialDragHeight: 22,
    isInterOpInstalled: false,
    ruleEditorClientX: 0,
    ruleEditorClientY: 0,
    _linq: null,
    _isFrozen: false,


    mouseHover: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$mouseHover() {
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv'), 'mouseenter', Function.createDelegate(this, this.mouseOverHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_newbodyDiv'), 'mouseenter', Function.createDelegate(this, this.mouseOverHandler));
        //com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_bodyDiv'), 'mouseenter', Function.createDelegate(this, this.mouseOverHandler));
    },
    mouseOverHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$mouseOverHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.id === this._grid.get_GridInfo().GridId + '_frozen_newbodyDiv') {
            this._grid.get_GridInfo().UnfrozenFlag = false;
            this._grid.get_GridInfo().FrozenFlag = true;
            //this._grid.get_GridInfo().CheckBoxFrozenFlag = false;
        }
        else if (e.target.id === this._grid.get_GridInfo().GridId + '_bodyDiv') {
            this._grid.get_GridInfo().UnfrozenFlag = true;
            this._grid.get_GridInfo().FrozenFlag = false;
            //this._grid.get_GridInfo().CheckBoxFrozenFlag = false;
        }
        /* else if (e.target.id === this._grid.get_GridInfo().GridId + '_frozen_bodyDiv') {
             this._grid.get_GridInfo().CheckBoxFrozenFlag = true;
             this._grid.get_GridInfo().FrozenFlag = false;
             this._grid.get_GridInfo().UnfrozenFlag = false;
         }*/
    },

    forVerticalScroll: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$forVerticalScroll() {
        //GridId = this._grid.get_GridInfo().GridId;
        this._grid.get_GridInfo().IsOnTop = false;
       
        $('#' + this._grid.get_GridInfo().GridId + '_bodyDiv').scroll(function (e) {
            $(".RADCommentPapaContainer").remove();
            $(".RADTooltipEdge").remove();
            var GridId = $(e.target).attr('id').substr(0, $(e.target).attr('id').indexOf('_bodyDiv'));
            //console.log('Scroll Triggered ' + $('#' + GridId + '_bodyDiv').scrollLeft())
            if (($find(GridId).get_GridInfo().UnfrozenFlag && !$find(GridId).get_GridInfo().FrozenFlag && !$find(GridId).get_GridInfo().CheckBoxFrozenFlag)) { // && !$find(GridId).get_GridInfo().IsOnTop) {
                $find(GridId).get_GridInfo().NewScrollLeft = $('#' + GridId + '_bodyDiv').scrollLeft();
                $find(GridId).get_GridInfo().NewScrollTop = $('#' + GridId + '_bodyDiv').scrollTop();
                //                console.log('Last Scroll Left ' + $find(GridId).get_GridInfo().lastScrollLeft);
                //                console.log('New Scroll Left ' + NewScrollLeft)
                if ($find(GridId).get_GridInfo().lastScrollLeft != $find(GridId).get_GridInfo().NewScrollLeft) {
                    $('#' + GridId + '_headerDiv').scrollLeft($find(GridId).get_GridInfo().NewScrollLeft);
                    $('#' + GridId + '_mathOpFooter').parent().scrollLeft($find(GridId).get_GridInfo().NewScrollLeft);
                    if($(".xlResetRowIcon").length > 0)
                    {
                       $(".xlResetRowIcon").css('left', (parseInt($(".xlResetRowIcon")[0].style.left.substring(0, $(".xlResetRowIcon")[0].style.left.length - 2)) + $find(GridId).get_GridInfo().NewScrollLeft - $find(GridId).get_GridInfo().lastScrollLeft) + "px");
                    }
                    $find(GridId).get_GridInfo().lastScrollLeft = $find(GridId).get_GridInfo().NewScrollLeft;
                    
                    //console.log('Header Div Scroll Left ' + $('#' + GridId + '_headerDiv').scrollLeft())
                    //console.log('Body Div Scroll Left ' + $('#' + GridId + '_bodyDiv').scrollLeft())
                }
                if ($find(GridId).get_GridInfo().lastScrollTop != $find(GridId).get_GridInfo().NewScrollTop) {
                    $('#' + GridId + '_frozen_bodyDiv').scrollTop($find(GridId).get_GridInfo().NewScrollTop);
                    $('#' + GridId + '_frozen_newbodyDiv').scrollTop($find(GridId).get_GridInfo().NewScrollTop);
                    //Expense Issue Scroll Stops after midway
                    if ($('#' + GridId + '_frozen_newbodyDiv').scrollTop() > 0 && $find(GridId).get_GridInfo().FrozenColumns.length > 0)
                        $('#' + GridId + '_bodyDiv').scrollTop($('#' + GridId + '_frozen_newbodyDiv').scrollTop());

                    if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
                        $find(GridId).set_ScrollDir(2);
                    }
                    else if ($(this).scrollTop() == 0) {
                        $find(GridId).set_ScrollDir(1);
                    }

                    if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight || $(this).scrollTop() == 0) {
                        if ($find(GridId).get_GridInfo().RequireInfiniteScroll && !$find(GridId).get_GridInfo().RequirePaging) {
                            $find(GridId).set_InfiniteScroll(true);
                            $find(GridId).footer._doPaging(null);
                            if ($(this).scrollTop() == 0) {
                                $find(GridId).get_GridInfo().IsOnTop = true;
                                $(this).scrollTop(3);
                                $('#' + GridId + '_frozen_bodyDiv').scrollTop(3);
                                $('#' + GridId + '_frozen_newbodyDiv').scrollTop(3);
                                $find(GridId).get_GridInfo().NewScrollTop = 3;
                            }
                        }
                    }
                    $find(GridId).get_GridInfo().lastScrollTop = $find(GridId).get_GridInfo().NewScrollTop;
                }
            }
            else {
                //console.log('hi');
                //                console.log('Else Part');
                //                console.log('Header Div Scroll Left ' + $('#' + GridId + '_headerDiv').scrollLeft())
                //                //                console.log('Body Div Scroll Left ' + $('#' + GridId + '_bodyDiv').scrollLeft())
                //                $find(GridId).get_GridInfo().IsOnFrozenTop = false;
                //                $find(GridId).get_GridInfo().IsOnTop = false;
                //                $find(GridId).get_GridInfo().IsOnCheckBoxTop = false;
                ////                $find(GridId).get_GridInfo().UnfrozenFlag = false;
                ////                $find(GridId).get_GridInfo().FrozenFlag = false;
                ////                $find(GridId).get_GridInfo().CheckBoxFrozenFlag = false;
                //                $(this).scrollTop($('#' + GridId + '_bodyDiv').scrollTop());
                //                $($('#' + GridId + '_headerDiv')).scrollLeft($(this).scrollLeft());
            }


            e.stopPropagation();
            e.stopImmediatePropagation();
            e.preventDefault();
            //if(!$find(GridId).get_GridInfo().RequirePaging) {
            if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
                $(this).scrollTop($(this)[0].scrollHeight - $(this).innerHeight())
                $('#' + $find(GridId).get_GridInfo().GridId + '_frozen_newbodyDiv').scrollTop($(this)[0].scrollHeight - $(this).innerHeight())
            }
            //}
        });
    },

    frozenScrollPart: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$frozenScrollPart() {
        //GridId = this._grid.get_GridInfo().GridId;
        this._grid.get_GridInfo().IsOnFrozenTop = false;
        
        $('#' + this._grid.get_GridInfo().GridId + '_frozen_newbodyDiv').scroll(function (e) {
            $(".RADCommentPapaContainer").remove();
            $(".RADTooltipEdge").remove();
            var GridId = $(e.target).attr('id').substr(0, $(e.target).attr('id').indexOf('_frozen_newbodyDiv'));
            if (($find(GridId).get_GridInfo().FrozenFlag && !$find(GridId).get_GridInfo().UnfrozenFlag)) { //&& !$find(GridId).get_GridInfo().CheckBoxFrozenFlag)) {// && !$find(GridId).get_GridInfo().IsOnFrozenTop) {
                $find(GridId).get_GridInfo().NewScrollLeft = $('#' + GridId + '_frozen_newbodyDiv').scrollLeft();
                $find(GridId).get_GridInfo().NewScrollTop = $('#' + GridId + '_frozen_newbodyDiv').scrollTop();
                if ($find(GridId).get_GridInfo().lastScrollLeftForFrozenNewDiv != $find(GridId).get_GridInfo().NewScrollLeft) {
                    $('#' + GridId + '_frozen_new_headerDiv').scrollLeft($find(GridId).get_GridInfo().NewScrollLeft);
					$('#' + GridId + '_FrozenNewMathOpFooter').parent().scrollLeft($find(GridId).get_GridInfo().NewScrollLeft);
                    $find(GridId).get_GridInfo().lastScrollLeftForFrozenNewDiv = $find(GridId).get_GridInfo().NewScrollLeft;
                }
                if ($find(GridId).get_GridInfo().lastScrollTop != $find(GridId).get_GridInfo().NewScrollTop) {
                    $('#' + GridId + '_frozen_bodyDiv').scrollTop($find(GridId).get_GridInfo().NewScrollTop);
                    $('#' + GridId + '_bodyDiv').scrollTop($find(GridId).get_GridInfo().NewScrollTop);
                    if ($find(GridId).get_GridInfo().NewScrollTop > $find(GridId).get_GridInfo().lastScrollTop) {
                        $find(GridId).set_ScrollDir(2);
                    }
                    else if ($(this).scrollTop() == 0) {
                        $find(GridId).set_ScrollDir(1);
                    }

                    if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight || $(this).scrollTop() == 0) {
                        if ($find(GridId).get_GridInfo().RequireInfiniteScroll && !$find(GridId).get_GridInfo().RequirePaging) {
                            $find(GridId).set_InfiniteScroll(true);
                            $find(GridId).footer._doPaging(null);
                            if ($(this).scrollTop() == 0) {
                                $find(GridId).get_GridInfo().IsOnFrozenTop = true;
                                $(this).scrollTop(3);
                                $('#' + GridId + '_bodyDiv').scrollTop(3);
                                $('#' + GridId + '_frozen_bodyDiv').scrollTop(3);
                                $find(GridId).get_GridInfo().NewScrollTop = 3;
                            }
                        }
                    }
                    $find(GridId).get_GridInfo().lastScrollTop = $find(GridId).get_GridInfo().NewScrollTop;
                }
                $(this).scrollTop($('#' + GridId + '_bodyDiv').scrollTop());
            }
            else {
                //                $find(GridId).get_GridInfo().IsOnFrozenTop = false;
                //                $find(GridId).get_GridInfo().IsOnTop = false;
                //                $find(GridId).get_GridInfo().IsOnCheckBoxTop = false;
                //                $(this).scrollTop($('#' + GridId + '_bodyDiv').scrollTop());
                //                $($('#' + GridId + '_frozen_new_headerDiv')).scrollLeft($(this).scrollLeft());
            }
            e.stopPropagation();
            //           e.stopImmediatePropagation();
            e.preventDefault();
			if($find(GridId).get_GridInfo().FrozenColumns.length > 0){
				if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
					$(this).scrollTop($(this)[0].scrollHeight - $(this).innerHeight())
					$('#' + $find(GridId).get_GridInfo().GridId + '_bodyDiv').scrollTop($(this)[0].scrollHeight - $(this).innerHeight())
				}
			}
        });
    },
     checkBoxScrollPart: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$checkBoxScrollPart() {
        //GridId = this._grid.get_GridInfo().GridId;
        this._grid.get_GridInfo().IsOnCheckBoxTop = false;
        console.log("$('#' + $find(GridId).get_GridInfo().GridId + '_bodyDiv').scrollTop" + $('#' + this._grid.get_GridInfo().GridId + '_bodyDiv').scrollTop())
        console.log("$('#' + $find(GridId).get_GridInfo().GridId + '_bodyDiv').scrollTop" + $('#' + this._grid.get_GridInfo().GridId + '_frozen_newbodyDiv').scrollTop())
        console.log("$('#' + $find(GridId).get_GridInfo().GridId + '_bodyDiv').scrollTop" + $('#' + this._grid.get_GridInfo().GridId + '_frozen_bodyDiv').scrollTop())
        //$('#' + this._grid.get_GridInfo().GridId + '_frozen_bodyDiv').scroll(function (e) {
        return false;
        /*var GridId = $(e.target).attr('id').substr(0, $(e.target).attr('id').indexOf('_frozen_bodyDiv'));
        if (($find(GridId).get_GridInfo().CheckBoxFrozenFlag && !$find(GridId).get_GridInfo().FrozenFlag && !$find(GridId).get_GridInfo().UnfrozenFlag)) {// && !$find(GridId).get_GridInfo().IsOnCheckBoxTop) {
            //                var NewScrollLeft = $('#' + GridId + '_frozen_newbodyDiv').scrollLeft();
            $find(GridId).get_GridInfo().NewScrollTop = $('#' + GridId + '_frozen_bodyDiv').scrollTop();
            //                if ($find(GridId).get_GridInfo().lastScrollLeftForFrozenNewDiv != NewScrollLeft) {
            //                    $('#' + GridId + '_frozen_new_headerDiv').scrollLeft(NewScrollLeft);
            //                    $find(GridId).get_GridInfo().lastScrollLeftForFrozenNewDiv = NewScrollLeft;
            //                }
            if ($find(GridId).get_GridInfo().lastScrollTop != $find(GridId).get_GridInfo().NewScrollTop) {
                $('#' + GridId + '_frozen_newbodyDiv').scrollTop($find(GridId).get_GridInfo().NewScrollTop);
                $('#' + GridId + '_bodyDiv').scrollTop($find(GridId).get_GridInfo().NewScrollTop);
                if ($find(GridId).get_GridInfo().NewScrollTop > $find(GridId).get_GridInfo().lastScrollTop) {
                    $find(GridId).set_ScrollDir(2);
                }
                else if ($(this).scrollTop() == 0) {
                    $find(GridId).set_ScrollDir(1);
                }

                if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight || $(this).scrollTop() == 0) {
                    $find(GridId).set_InfiniteScroll(true);
                    $find(GridId).footer._doPaging(null);
                    if ($(this).scrollTop() == 0) {
                        $find(GridId).get_GridInfo().IsOnFrozenTop = true;
                        $(this).scrollTop(3);
                        $('#' + GridId + '_bodyDiv').scrollTop(3);
                        $('#' + GridId + '_frozen_newbodyDiv').scrollTop(3);
                        $find(GridId).get_GridInfo().NewScrollTop = 3;
                    }
                }
                $find(GridId).get_GridInfo().lastScrollTop = $find(GridId).get_GridInfo().NewScrollTop;
            }
            $(this).scrollTop($('#' + GridId + '_bodyDiv').scrollTop());
        }
        else {
            //                $find(GridId).get_GridInfo().IsOnFrozenTop = false;
            //                $find(GridId).get_GridInfo().IsOnTop = false;
            //                $find(GridId).get_GridInfo().IsOnCheckBoxTop = false;
            //                $(this).scrollTop($('#' + GridId + '_bodyDiv').scrollTop());
            //                $($('#' + GridId + '_frozen_headerDiv')).scrollLeft($(this).scrollLeft());
        }
        e.stopPropagation();
        //           e.stopImmediatePropagation();
        e.preventDefault();*/
        //});
    },
    addEvents: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$addEvents() {
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.elementInfo.get_element(), 'click', Function.createDelegate(this, this.fireClickHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.elementInfo.get_element(), 'keyup', Function.createDelegate(this, this.fireKeyUpHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.elementInfo.get_element(), 'keydown', Function.createDelegate(this, this.fireKeyDownHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.elementInfo.get_element(), 'mousedown', Function.createDelegate(this, this.fireMouseDownHanndler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.body, 'mousemove', Function.createDelegate(this, this._fireMouseMoveHanndler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.elementInfo.get_element(), 'mouseup', Function.createDelegate(this, this.fireMouseUpHanndler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.elementInfo.get_element(), 'contextmenu', Function.createDelegate(this, this.fireContextMenuHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.elementInfo.get_element(), 'mouseleave', Function.createDelegate(this, this.fireMouseLeaveHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.elementInfo.get_element(), 'dblclick', Function.createDelegate(this, this.fireDoubleClickHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._grid.elementInfo.get_element(), 'selectstart', Function.createDelegate(this, this.preventDefault));
        this._columnIndexAndNameMap = this._grid.group._columnIndexAndNameMap;
        if (Sys.Browser.name === 'Microsoft Internet Explorer' && Sys.Browser.version === 8) {
            eval('document.body.onresize = function() { if($find(\'' + this._grid.get_id() + '\') !=' + null + '){$find(\'' + this._grid.get_id() + '\').manageEvents._onResize();}}; ');
        }
        else {
            window.jQuery(window.self).resize(Function.createDelegate(this, this._onResize));
        }
    },

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        try {
            if (!serviceInfo.serializedInfo.IsInterOpInstalled) {
                this.isInterOpInstalled = false;
            }
            else {
                this.isInterOpInstalled = true;
            }
        }
        catch (ex) {
            this._grid.showFailureMessage(ex.message);
            throw ex;
        }
    },

    addEventHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$addEventHandler(gridid) {
        /// <param name="gridid" type="String">
        /// </param>
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(eval('$find(\'' + gridid + '\').elementInfo.get_element()'), 'click', Function.createDelegate(eval('$find(\'' + gridid + '\').manageEvents'), eval('$find(\'' + gridid + '\').manageEvents.fireClickHandler')));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(eval('$find(\'' + gridid + '\').elementInfo.get_element()'), 'keyup', Function.createDelegate(eval('$find(\'' + gridid + '\').manageEvents'), eval('$find(\'' + gridid + '\').manageEvents.fireKeyUpHandler')));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(eval('$find(\'' + gridid + '\').elementInfo.get_element()'), 'keydown', Function.createDelegate(eval('$find(\'' + gridid + '\').manageEvents'), eval('$find(\'' + gridid + '\').manageEvents.fireKeyDownHandler')));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(eval('$find(\'' + gridid + '\').elementInfo.get_element()'), 'mousedown', Function.createDelegate(eval('$find(\'' + gridid + '\').manageEvents'), eval('$find(\'' + gridid + '\').manageEvents.fireMouseDownHanndler')));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(eval('$find(\'' + gridid + '\').elementInfo.get_element()'), 'mouseup', Function.createDelegate(eval('$find(\'' + gridid + '\').manageEvents'), eval('$find(\'' + gridid + '\').manageEvents.fireMouseUpHanndler')));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(eval('$find(\'' + gridid + '\').elementInfo.get_element()'), 'contextmenu', Function.createDelegate(eval('$find(\'' + gridid + '\').manageEvents'), eval('$find(\'' + gridid + '\').manageEvents.fireContextMenuHandler')));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(eval('$find(\'' + gridid + '\').elementInfo.get_element()'), 'mouseleave', Function.createDelegate(eval('$find(\'' + gridid + '\').manageEvents'), eval('$find(\'' + gridid + '\').manageEvents.fireMouseLeaveHandler')));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(eval('$find(\'' + gridid + '\').elementInfo.get_element()'), 'dblclick', Function.createDelegate(eval('$find(\'' + gridid + '\').manageEvents'), eval('$find(\'' + gridid + '\').manageEvents.fireDoubleClickHandler')));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(eval('$find(\'' + gridid + '\').elementInfo.get_element()'), 'selectstart', Function.createDelegate(eval('$find(\'' + gridid + '\').manageEvents'), eval('$find(\'' + gridid + '\').manageEvents.preventDefault')));

    },

    _removeEventHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_removeEventHandler(gridid) {
        /// <param name="gridid" type="String">
        /// </param>
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + gridid + '\').elementInfo.get_element()'));
    },

    _fireMouseoutHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_fireMouseoutHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.raddomElement.containsElement(this._grid.get_element(), e.target)) {
            if (e.target.getAttribute('columnname') != null || e.target.parentNode.getAttribute('columnname') != null) {
                var row = (eval('$(e.target).closest(\'div[columnname]\')[0]')).parentNode;
                if (row.className === this._grid.get_GridInfo().CssAlternatingRow || row.className === this._grid.get_GridInfo().CssNormalRow) {
                    row.style.backgroundColor = '#fdfdfd';
                }
            }
        }
    },

    _fireMouseOverHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_fireMouseOverHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.raddomElement.containsElement(this._grid.get_element(), e.target)) {
            if (e.target.getAttribute('columnname') != null || e.target.parentNode.getAttribute('columnname') != null) {
                var currentrow = (eval('$(e.target).closest(\'div[columnname]\')[0]')).parentNode;
                if (currentrow.className === this._grid.get_GridInfo().CssAlternatingRow || currentrow.className === this._grid.get_GridInfo().CssNormalRow) {
                    currentrow.style.backgroundColor = 'red';
                }
            }
        }
    },

    _hideColumnFromMenu: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_hideColumnFromMenu(columnName) {
        /// <param name="columnName" type="String">
        /// </param>
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_HIDE_COLUMN, columnName, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_HIDE_COLUMN);
        this.hideShowHideColumnsSubMenu();
    },

    _unHideColumnFromMenu: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_unHideColumnFromMenu(columnName) {
        /// <param name="columnName" type="String">
        /// </param>
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_COLUMN, columnName, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_COLUMN);
        this.hideShowHideColumnsSubMenu();
    },

    hideShowHideColumnsSubMenu: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$hideShowHideColumnsSubMenu() {
        var showHideColumnMenu = document.getElementById(this._grid.get_GridInfo().GridId + '_showhideColumnsMenuDiv');
        if (showHideColumnMenu != null) {
            this._grid.get_element().parentNode.removeChild(showHideColumnMenu);
        }
    },

    fireClickHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$fireClickHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if ($(e.target).hasClass("RADAuditGridPopUpHeaderSave") || $(e.target).hasClass("RADAuditGridPopUpHeaderClose") || $(e.target).hasClass("RADAuditGridPopUpHeaderCallFunction"))
        {
            return null;
        }
        if ($(e.target).hasClass("RAD_Edit_Grid_Audit"))
        {
            this._DoEditAuditFunction();
        }
		if (this._grid.get_GridInfo().IsMasterChildGrid) {
			if (e.target.className.indexOf('xlMasterGridColumnClass fa fa-plus') > -1 || e.target.className.indexOf('xlMasterGridColumnClass fa fa-minus') > -1) {
				var id = e.target.className.split("xlMaterChildGridColumn")[0];
				this._grid = $find(id);
			}
		}
		if ($(e.target).closest(".xlEditRowBackground").length > 0) {
		    if ($(e.target).hasClass("xlEditGridTextBox") && $($(e.target).parent()).hasClass("TextAreaParent")) {
		        $(".TextAreaParent").css('width','auto');
		        $(".TextAreaParent").css('height','auto');
		        $(".TextAreaParent").find(".xlEditGridTextBox").css('width','100%');
		        $(".TextAreaParent").find(".xlEditGridTextBox").css('height','22px');
		        $($(e.target).parent())[0].style.width = '350px';
		        $($(e.target).parent())[0].style.height = '100px';
		        $(e.target)[0].style.width = '330px';
		        $(e.target)[0].style.height = '80px';
		        //$($($(e.target).parent()).parent())[0].style.position = 'static';
		    }
		    else
		    {
		        for (var i = 0; i < $(".TextAreaParent").length; i++) {
		            //if ($(".TextAreaParent")[i].style.width != 'auto') {
		                $(".TextAreaParent")[i].style.width = 'auto';
		                $(".TextAreaParent")[i].style.height = 'auto';
		                $($(".TextAreaParent").find(".xlEditGridTextBox"))[i].style.width = '100%';
		                $($(".TextAreaParent").find(".xlEditGridTextBox"))[i].style.height = '22px';
		                break;
		            //}
		        }
		        //$($($(e.target).parent()).parent())[0].style.position = 'relative';
		    }
		}
        if (this._grid.get_GridInfo().CommentProperty)
        {
            $(".RADCommentPapaContainer").remove();
            $(".RADTooltipEdge").remove();
        }
        if ($(e.target).hasClass("DataInsightParent") || $(e.target).hasClass("Image") || $(e.target).hasClass("DataInsightsElement"))
        {
            //e.target.className == 'DataInsights InsightsAdded';
            //e.target.innerHTML = "DataInsights";
            $("#" + this._grid.get_GridInfo().GridId).css({ "width": $("#" + this._grid.get_GridInfo().GridId).parent().width() - 354});
            //$("#" + this._grid.get_GridInfo().GridId).parent().append('<div class="datasourceClass"id ="datasourceId" style="width:350px;height:' + $("#" +this._grid.get_GridInfo().GridId).height() +'px;right:0px;border:1px solid lightgray;position: fixed;z - index: 1001;top: 80px;background - color: #f6f6f6;color: #777777;box - shadow: 2px 32px 9px 3px rgb(179, 168, 168);"></div>)');
            $("#datasourceId").show();
            //$("#datasourceId").data("custom-Insights")._BindCharts();
            $(".DataInsightTd").hide();
        }
        if (e.target.className !== 'selectAllRowsInnerDiv' && e.target.className !== 'selectAllRowsCancel') {
            this._grid.elementInfo.get_selectAllOptionDiv().style.display = 'none';
        }
        if (e.target.className === 'arrow fa fa-arrow-circle-right arrowLeft') {
            if (e.target.previousSibling.className === 'inner innerwidth') {
                e.target.previousSibling.className = 'inner';
            }
            else if (e.target.previousSibling.className === 'inner') {
                e.target.previousSibling.className = 'inner innerwidth';
            }
        }
        if (e.target.className === 'xlshowHideColumns' || e.target.className === 'xlshowhideColumnDropDown' || e.target.className === 'xlarrowinShowHide fa fa-caret-down') {
            if (document.getElementById(this._grid.get_GridInfo().GridId + '_showhideColumnsMenuDiv') != null) {
                this._grid.get_element().parentNode.removeChild(document.getElementById(this._grid.get_GridInfo().GridId + '_showhideColumnsMenuDiv'));
            }
            else {
                this._createShowHideMenuDiv();
            }
        }
        if (e.target.className === 'xlshowhidemathsopfooter') {
            if (e.target.parentNode.className === 'xlmathematicalopsfooter xlmathematicalopsfooterhidden') {
                e.target.parentNode.className = 'xlmathematicalopsfooter xlmathematicalopsfootervisible';
            }
            else {
                e.target.parentNode.className = 'xlmathematicalopsfooter xlmathematicalopsfooterhidden';
            }
        }
        if (!this._grid.get_GridInfo().IsMasterChildGrid) {
        }
        else {
            com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + this._grid.get_GridInfo().GridId + '\').elementInfo.get_element()'));
            eval('$find(\'' + this._grid.get_GridInfo().GridId + '\').manageEvents.addEventHandler(\'' + this._grid.get_GridInfo().GridId + '\');');
            var currentparentid = this._grid.get_GridInfo().ParentGridId;
            while (currentparentid !== '' && currentparentid != null) {
                com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + currentparentid + '\').elementInfo.get_element()'));
                eval('$find(\'' + currentparentid + '\').manageEvents.addEventHandler(\'' + currentparentid + '\');');
                currentparentid = eval('$find(\'' + currentparentid + '\').get_GridInfo().ParentGridId');
            }
        }
        if (e.target.id === this._grid.get_id() + '_btnClearFunctionality') {
            var ClearFunctionalityDiv = document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv');
            if (ClearFunctionalityDiv.style.display === 'none') {
                var offsettop = 0;
                var offsetleft = 0;
                var parent = document.getElementById(this._grid.get_GridInfo().GridId);
                while (parent != null && parent.offsetParent != null) {
                    if ((parent.offsetParent.style.position !== '' && parent.offsetParent.style.position.toString().toLowerCase() !== 'static') || (eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== '' && eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== 'static')) {
                        offsettop += parent.offsetParent.offsetTop;
                        offsetleft += parent.offsetParent.offsetLeft;
                        parent = parent.offsetParent;
                    }
                    else {
                        parent = parent.offsetParent;
                    }
                }
                var locationY = eval('$(\"#' + this._grid.get_GridInfo().GridId + '\").position().top') + 32;
                var locationX = e.clientX + document.documentElement.scrollLeft - 200 - offsetleft;
                ClearFunctionalityDiv.style.display = '';
                ClearFunctionalityDiv.style.top = locationY.toString() + 'px';
                ClearFunctionalityDiv.style.left = locationX.toString() + 'px';
                this.createClearFunctionalityDiv();
            }
            else {
                ClearFunctionalityDiv.style.display = 'none';
            }
        }
        if (e.target.id === this._grid.get_id() + '_configutation') {
            var settingsDiv = document.getElementById(this._grid.get_id() + '_ConfigurationSettings');
            if (settingsDiv.style.display === 'none') {
                var offsettop = 0;
                var offsetleft = 0;
                var parent = document.getElementById(this._grid.get_GridInfo().GridId);
                while (parent != null && parent.offsetParent != null) {
                    if ((parent.offsetParent.style.position !== '' && parent.offsetParent.style.position.toString().toLowerCase() !== 'static') || (eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== '' && eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== 'static')) {
                        offsettop += parent.offsetParent.offsetTop;
                        offsetleft += parent.offsetParent.offsetLeft;
                        parent = parent.offsetParent;
                    }
                    else {
                        parent = parent.offsetParent;
                    }
                }
                var locationY = e.clientY + document.documentElement.scrollTop + 5 - offsettop;
                var locationX = e.clientX + document.documentElement.scrollLeft - offsetleft;
                var left = 0;
                if (document.getElementById(this._grid.get_id() + '_configutation') != null) {
                    left = document.getElementById(this._grid.get_id() + '_configutation').offsetWidth;
                }
                settingsDiv.style.display = '';
                settingsDiv.style.top = (locationY.toString() + 'px');
                settingsDiv.style.left = locationX.toString() + 'px';
                if (document.getElementById(this._grid.get_id()) != null) {
                    var className = document.getElementById(this._grid.get_id()).className;
                    if (document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className.toString().indexOf('xlOpacityForGrid') === -1) {
                        document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = 'xlOpacityForGrid';
                        document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').className = 'xlOpacityForGrid';
                        document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = 'xlOpacityForGrid';
                    }
                }
            }
            else {
                settingsDiv.style.display = 'none';
                if (document.getElementById(this._grid.get_id()) != null) {
                    if (document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className.toString().indexOf('xlOpacityForGrid') !== -1) {
                        document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = '';
                        document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').className = '';
                        document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = '';
                    }
                }
            }
        }
        if (this._resizingDone) {
            this._resizingDone = false;
        }
        if (this._selectStartEnabled) {
            this._selectStartEnabled = false;
        }
        if (e.target.id.endsWith('_FilterListShow')) {
            if (e.target.getAttribute('columnName').toString().trimStart().trimEnd() !== this._grid.get_GridInfo().CurrentFilteredColumn) {
                this._grid.filter.showFilterList(e);
            }
            else {
                this._grid.filter._hideFilterList(e);
                this._grid.get_GridInfo().CurrentFilteredColumn = '';
            }
            e.stopPropagation();
        }
        else if (e.target.className === 'MasterChildGrid') {
            this._grid.addChildGrid(0);
        }
        else if (e.target.className === this._grid.get_GridInfo().GridId + 'xlMaterChildGridColumn xlMasterGridColumnClass fa fa-plus') {
            e.target.parentNode.style.fontWeight = 'bold';
            e.target.parentNode.style.color = '#343434';
            if (this._grid.get_GridInfo().GridTheme !== com.ivp.rad.controls.neogrid.scripts.info.Theme.masterChildGridTheme) {
                var verticalLine = this._grid.elementHelper.get_divElement();
                var id = e.target.parentNode.getAttribute('idcolumnvalue').toString().replace(new RegExp('[.|-]', 'gi'), '_');
                id = id.replace(new RegExp('[ ]', 'gi'), '_');
                id = id.replace(new RegExp('[.]', 'gi'), '_');
                verticalLine.id = this._grid.get_GridInfo().GridId + id + 'xlGridChildVerticalLine';
                verticalLine.className = 'xlGridChildVerticalLine';
                var horizontalLine = this._grid.elementHelper.get_divElement();
                horizontalLine.id = this._grid.get_GridInfo().GridId + id + 'xlGridChildHorizontalLine';
                horizontalLine.className = 'xlGridChildHorizontalLine';
                e.target.appendChild(verticalLine);
                e.target.appendChild(horizontalLine);
            }
            this._grid.childGrid._getChildGridData(eval('$(\"#' + e.target.parentNode.id + '\").index()'), e.target.parentNode.getAttribute('id').toString(), e.target.parentNode.getAttribute('idcolumnvalue').toString());
            e.stopPropagation();
        }
       else if (e.target.className.indexOf('xlMasterGridColumnClass fa fa-minus') > -1) {
            e.target.parentNode.style.fontWeight = 'inherit';
            e.target.parentNode.style.color = '#1a1919';
            var id1 = e.target.parentNode.getAttribute('idcolumnvalue').toString().replace(new RegExp('[.|-]', 'gi'), '_');
            id1 = id1.replace(new RegExp('[ ]', 'gi'), '_');
            id1 = id1.replace(new RegExp('[.]', 'gi'), '_');
            if (document.getElementById(this._grid.get_GridInfo().GridId + "_" + id1 + 'xlGridChildVerticalLine') != null) {
                e.target.removeChild(document.getElementById(this._grid.get_GridInfo().GridId + "_" + id1 + 'xlGridChildVerticalLine'));
                e.target.removeChild(document.getElementById(this._grid.get_GridInfo().GridId + "_" + id1 + 'xlGridChildHorizontalLine'));
            }
            e.target.style.borderRight = '0px';
            var height = 0;
            var id = e.target.parentNode.getAttribute('idcolumnvalue').toString().replace(new RegExp('[.|-]', 'gi'), '_');
            id = id.replace(new RegExp('[ ]', 'gi'), '_');
            id = id.replace(new RegExp('[.]', 'gi'), '_');
            var ChildGridId = this._grid.get_GridInfo().GridId + '_' + id + '_ChildRow';
            height = eval('$(\"#' + ChildGridId + '\").height()');
            var currentgridparentid = this._grid.get_GridInfo().ParentGridId;
            var currentGridID = this._grid.get_GridInfo().GridId;
            e.target.parentNode.style.height = '22px';
			var index = eval('$(e.target.parentNode).index()');
            eval('$($(\"#' + this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv\").children()[index]).css({\"height\":\"\"})');
            if (currentgridparentid !== '' && currentgridparentid != null) {
                while (currentgridparentid !== '' &&currentgridparentid !== null) {
                    var currentRowID = eval('$find(\'' + currentGridID + '\').get_GridInfo().CurrentRowId');
                    height = eval('$(\"#' + ChildGridId + '\").height()');
                    //var gridheight = eval('$(\"#' + currentRowID + '\").height()') - height + 20;
					var gridheight = eval('$("#" + this._grid.get_GridInfo().MasterGridId + "_bodyDiv").find("#" + currentRowID).height()') - height + 20;
                    //eval('$(\"#' + currentRowID + '\").height(' + gridheight + ')');
					eval('$("#" + this._grid.get_GridInfo().MasterGridId + "_bodyDiv").find("#" + currentRowID).height(gridheight)')
                    eval('$(document.getElementById(currentGridID)).closest(\'.' + this._grid.get_GridInfo().xlneochildgridParent + '\').height(' + (gridheight - 22) + ')');
                    document.getElementById(currentGridID + '_headerDiv').style.width = eval('$(\'#' + currentGridID + '_bodyDiv' + '\').width()') + 'px';
                    currentGridID = currentgridparentid;
                    currentgridparentid = eval('$find(\'' + currentGridID + '\').get_GridInfo().ParentGridId');
                    document.getElementById(currentGridID + '_headerDiv').style.width = eval('$(\'#' + currentGridID + '_bodyDiv' + '\').width()') + 'px';
                }
            }
            if (currentgridparentid !== '' && currentgridparentid != null) {
            }
            id = e.target.parentNode.getAttribute('idcolumnvalue').toString().replace(new RegExp('[.|-]', 'gi'), '_');
            id = id.replace(new RegExp('[ ]', 'gi'), '_');
            id = id.replace(new RegExp('[.]', 'gi'), '_');
            ChildGridId = this._grid.get_GridInfo().GridId + '_' + id + '_ChildRow';
            var className = e.target.className.toString();
            e.target.className = className.replace('fa fa-minus', 'fa fa-plus');
            Array.remove(this._grid.get_GridInfo().ChildGridsToOpen, e.target.parentNode.getAttribute('idcolumnvalue').toString());
            com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._grid.elementInfo.get_element());
            var currentparentid = this._grid.get_GridInfo().ParentGridId;
            while (currentparentid !== '' && currentparentid != null) {
                com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + currentparentid + '\').elementInfo.get_element()'));
                eval('$find(\'' + currentparentid + '\').manageEvents.addEventHandler(\'' + currentparentid + '\');');
                currentparentid = eval('$find(\'' + currentparentid + '\').get_GridInfo().ParentGridId');
            }
            var MasterGridId = this._grid.get_GridInfo().MasterGridId;
            if (MasterGridId !== '') {
                com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + MasterGridId + '\').elementInfo.get_element()'));
                eval('$find(\'' + MasterGridId + '\').manageEvents.addEventHandler(\'' + MasterGridId + '\');');
            }
            eval('ClearComponent(\'' + ChildGridId + '\');');
        }
        else if (e.target.id.endsWith('_ColumnRemoveDiv')) {
            this._grid.manageColumns._removeColumn(e);
        }
        else if (this._grid.get_GridInfo().RequireSort && (((e.target.tagName.toUpperCase() === 'TH' || e.target.tagName.toUpperCase() === 'DIV') && e.target.getAttribute('columnName') != null && e.target.getAttribute('isgridheader') != null) || e.target.id.endsWith('_Sort'))) {
            if (e.target.id.endsWith('_Sort')) {
                this._grid.editGrid.lastSelectedCell = null;
                this._grid.sort.performSorting(e);
                e.stopPropagation();
            }
            else if (e.target.className === 'xlneogroupDiv') {
                this._grid.editGrid.lastSelectedCell = null;
                this._grid.sort.performSorting(e);
                e.stopPropagation();
            }
        }
        else if (e.target.id === this._grid.elementIDManager.get_clearSortID()) {
            if (this._grid.editGrid != null) {
                this._grid.editGrid.lastSelectedCell = null;
            }
            this._grid.sort.clearSort(e);
            e.stopPropagation();
        }
        else if (e.target.className === 'crossInGroupDragButton') {
            var _closeelement = e.target;
            if (!Array.contains(this._grid.get_DefaultGroupedAndSortedColumns(), this._columnIndexAndNameMap[e.target.previousSibling.previousSibling.innerText])) {
                if (this._grid.get_GridInfo().RankingColumnInfo != null) {
                    if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null) {
                        com.ivp.rad.controls.neogrid.scripts.UpperHeader.createBootBoxPopUp();
                    }
                    else {
                        Array.remove(this._grid.group._groupedColumns, e.target.previousSibling.previousSibling.getAttribute('columnname').toString());
                        var gro = this._grid.group._groupedColumns.toString();
                        this._grid.group.recreateDropContainer(true);
                    }
                }
            }
        }
        else if (e.target.className === 'neogroupDragButton') {
            var columnName = e.target.innerText;
        }
        else if (e.target.className === 'sortInGroupDragButton' || e.target.className === 'DescSortInGroupDragButton') {
            this._linq = new LINQ(this._grid.sort.sortedColumns);
            this._linq = this._linq.Where(Function.createDelegate(this, function (o, i) {
                return (o).ColumnName === e.target.previousSibling.getAttribute('columnname').toString();
            }));
            var columnName = e.target.previousSibling.innerText.replace(new RegExp('[ ]', 'gi'), '_');
            if (this._linq.Count(null) > 0) {
                var sort = this._linq.First(null);
                if (sort.SortOrder === com.ivp.rad.controls.neogrid.scripts.info.Order.ASC) {
                    sort.SortOrder = com.ivp.rad.controls.neogrid.scripts.info.Order.DESC;
                    e.target.className = 'DescSortInGroupDragButton';
                }
                else if (sort.SortOrder === com.ivp.rad.controls.neogrid.scripts.info.Order.DESC) {
                    sort.SortOrder = com.ivp.rad.controls.neogrid.scripts.info.Order.ASC;
                    e.target.className = 'sortInGroupDragButton';
                }
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT, Sys.Serialization.JavaScriptSerializer.serialize(sort) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT);
            }
        }
        else if (e.target.id === this._grid.elementIDManager.get_filterListFilter()) {
            this._grid.filter.filterData(e);
        }
        else if (e.target.id === this._grid.elementIDManager.get_filterListCancel()) {
            this._grid.filter._hideFilterList(e);
            this._grid.get_GridInfo().CurrentFilteredColumn = '';
        }
        else if (e.target.id === this._grid.elementIDManager.get_filterListReset()) {
            this._grid.filter._resetFilterList(e);
        }
        else if (e.target.id.endsWith('_FilterList')) {
            this._grid.filter._manageFilterList(e);
        }
        else if (e.target.id === this._grid.elementIDManager.get_clearFilterID()) {
            this._grid.filter.clearAllfilters(e);
        }
        else if (e.target.id === this._grid.elementIDManager.get_exportToExcelID() || e.target.className === 'xlNeoExcelDownLoadPopUp') {
            if (e.target.className === 'xlNeoExcelDownLoadPopUp') {
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_downLoadPopUp') != null) {
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_downLoadPopUp' + '\").remove();');
                }
            }
            this._grid.exportToExcel.showExportToExcelOptions();
			if (this._grid.get_GridInfo().CheckBoxInfo == null) {
                $("#exportselected").closest("tr").hide()
            }
            //            if (!this.isInterOpInstalled) {
            //                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_EXCEL, 'true|' + Math.round(Math.random() * 10000).toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_EXCEL);
            //            }
            //            else {
            //                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_PIVOT_ROWS, 'true|' + Math.round(Math.random() * 10000).toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_PIVOT_ROWS);
            //            }

        }
        else if (e.target.id === this._grid.elementIDManager.get_exportToPdfID()) {
        }
        else if (e.target.id === this._grid.elementIDManager.get_manageLayoutId()) {
            this._grid.elementInfo.get_manageLayoutDiv().style.left = ((this._grid.elementInfo.get_manageLayoutDiv().parentNode.offsetWidth / 2) - ((0.4 * this._grid.elementInfo.get_manageLayoutDiv().parentNode.offsetWidth) / 2)) + 'px';
            this._grid.manageLayouts._manageLayout();
        }
        else if ((((e.target).nodeName.toLowerCase() === 'input' && (e.target).type.toLowerCase() === 'checkbox') || (((e.target).nodeName.toLowerCase() === 'a') && (document.getElementById(this._grid.elementIDManager.get_ruleDivID()) == null || (document.getElementById(this._grid.elementIDManager.get_ruleDivID()) != null && (document.getElementById(this._grid.elementIDManager.get_ruleDivID()).style.display === 'none'))))) && e.target.id !== 'addRuleCloseBtn') {
            this._grid.clientDataController.checkRow(e);
        }
        else if (e.target.id === this._grid.elementIDManager.get_clearGroupID()) {
            if (this._grid.editGrid != null) {
                this._grid.editGrid.lastSelectedCell = null;
            }
            this._grid.group.removeGrouping(e);
        }
        else if (this._grid.get_GridInfo().RequireRuleBasedColoring && e.target.id === this._grid.elementIDManager.get_createColorRuleID()) {
            this._grid.ruleBasedColoring.openRuleWindow();
        }
        else if (e.target.id.endsWith('Paging')) {
            this._grid.footer._doPaging(e);
        }
        else if ((this._headerRow = this._checkIfHeaderRow(e)) != null && this._grid.get_GridInfo().RequireGroupExpandCollapse) {
            if (this._grid.editGrid != null) {
                this._grid.editGrid.lastSelectedCell = null;
            }
            if (!this._grid.get_GridInfo().RequireExpandCollapseGrouping) {
                this._grid.group.manageExpandCollapse(this._headerRow, e);
            }
        }
        else if (this._grid.get_GridInfo().RequireEditGrid && e.target === this._grid.elementInfo.get_editGrid()) {
            if (!e.altKey) {
                this._grid.editGrid.startEditing(e);
                this._grid.editGrid._stopPasting();
            }
        }
        else if ((this._contextMenuRow = this._checkContextClick(e)) != null) {
            this._grid.group.contextMenuEventHandler(this._contextMenuRow);
        }
        else if (e.target.id === this._grid.elementIDManager.get_showSliderID()) {
            this._grid.sliderFilter.showHideSlider(e);
        }
        else if ((e.shiftKey) && ((this._dataRow = this._checkDataRowClicked(e)) != null)) {
            this._grid.clientDataController.selectRow(this._dataRow);
        }
        else if (e.ctrlKey) {
            this._checkDataCellClick(e);
        }
        else if (e.target.id === this._grid.elementIDManager.get_addColumnDiv()) {
            document.getElementById(this._grid.elementIDManager.get_addColumnDivID()).style.display = '';
            document.getElementById(this._grid.elementIDManager.get_addColumnDivID()).style.left = ((document.getElementById(this._grid.elementIDManager.get_addColumnDivID()).parentNode.offsetWidth / 2) - ((0.3 * document.getElementById(this._grid.elementIDManager.get_addColumnDivID()).parentNode.offsetWidth) / 2)) + 'px';
        }
        else if (e.target.id === this._grid.elementIDManager.get_addColumnDivID() + '_Add') {
            var addColumnInfo = [];
            var columnInfo = new com.ivp.rad.controls.neogrid.scripts.info.AddRemoveColumnInfo();
            var column = new com.ivp.rad.controls.neogrid.scripts.info.ColumnInfo();
            column.ColumnName = (document.getElementById(this._grid.elementIDManager.get_addColumnDivID() + '_columnName')).value;
            column.DataType = com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_anyType;
            column.index = -1;
            column.isComputed = true;
            columnInfo.Column = column;
            columnInfo.HasClientSideFunctionality = true;
            columnInfo.IsDeletable = true;
            Array.add(addColumnInfo, columnInfo);
            this._grid.addColumns(addColumnInfo, null);
            document.getElementById(this._grid.elementIDManager.get_addColumnDivID()).style.display = 'none';
            (document.getElementById(this._grid.elementIDManager.get_addColumnDivID() + '_columnName')).value = '';
        }
        else if (e.target.id === this._grid.elementIDManager.get_addColumnDivID() + '_Close' || e.target.className === 'xlCloseAddColumnPopUp') {
            document.getElementById(this._grid.elementIDManager.get_addColumnDivID()).style.display = 'none';
        }
        else if (e.target.id === this._grid.elementIDManager.get_fullScreenID()) {
            this._grid.upperHeader._fullScreen(e);
        }
        else if (e.target.id === this._grid.elementIDManager.get_clearSelectionID()) {
            this._grid.clientDataController._unselectAllRowsCells();
        }
        else if (e.target.id === this._grid.elementIDManager.get_radBalancePopupId()) {
            this._grid.upperHeader._showBalancePopup(e);
        }
        else if (e.target.id === this._grid.elementIDManager.get_radExtraPopupId()) {
            this._grid.upperHeader._showExtraPopup(e);
        }
        else if (e.target.id === this._grid.elementIDManager.get_pasteExcelDataID() && e.target.className === 'xlneoSavePastedData') {
            if (document.getElementById(this._grid.elementIDManager.get_invalidDataDivID()).style.display !== '') {
                document.getElementById(this._grid.elementIDManager.get_pasteExcelDataDivID()).style.left = ((this._grid.elementInfo.get_pasteExcelDataDiv().parentNode.offsetWidth / 2) - ((0.25 * this._grid.elementInfo.get_pasteExcelDataDiv().parentNode.offsetWidth) / 2)) + 'px';
                this._grid.elementInfo.get_pasteExcelDataDiv().style.display = '';
            }
        }
        else if (e.target.id === this._grid.elementIDManager.get_pasteExcelDataDivID() + '_SaveExcelData' && document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className === 'xlneoSavePastedData') {
            this._grid.editGrid._savePastedData(e);
        }
        else if (e.target.id === this._grid.elementIDManager.get_pasteExcelDataDivID() + '_CancelUpdate' && document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className === 'xlneoSavePastedData') {
            this._grid.elementInfo.get_pasteExcelDataDiv().style.display = 'none';
            document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className = 'xlneoCopyDataFromExcel';
            document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).title = 'Enable Copy Data From Excel';
            this._grid.refreshGrid();
        }
        else if (e.target.id === this._grid.elementIDManager.get_invalidDataDivID() + '_SaveExcelData' && document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className === 'xlneoSavePastedData') {
            document.getElementById(this._grid.elementIDManager.get_invalidDataDivID()).style.display = 'none';
        }
        else if (e.target.id === this._grid.elementIDManager.get_invalidDataDivID() + '_SaveExcelData' && document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className === 'xlneoCancelCopyDataFromExcel') {
            document.getElementById(this._grid.elementIDManager.get_invalidDataDivID()).style.display = 'none';
        }
        else if (e.target.id === this._grid.get_GridInfo().GridId + '_btnFullScreenGrid') {
            if (!this._grid.get_GridInfo().IsFullScreen) {
                this._grid.get_GridInfo().Height = (document.documentElement.offsetHeight - 150) + 'px';
                this._grid.get_GridInfo().HeightInNormalView = this._grid.elementInfo.get_bodyInnerDiv().offsetHeight;
                this._grid.elementInfo.get_bodyInnerDiv().style.height = (document.documentElement.offsetHeight - 150) + 'px';
                this._grid.elementInfo.get_frozenBodyDiv().style.height = (document.documentElement.offsetHeight - 150) + 'px';
                this._grid.get_GridInfo().IsFullScreen = true;
                eval('FullScreen(' + this._grid.get_GridInfo().GridId + ');');
            }
            else {
                eval('$(\"#' + this._grid.get_GridInfo().GridId + '_dialog' + '\").dialog(\"close\");');
            }
        }
        else if (this._grid.raddomElement.containsElement(this._grid.elementInfo.get_radbalancepopupDiv(), e.target)) {
            if (e.target.getAttribute('type') != null && (e.target.getAttribute('type').toString() === 'leftNavigationPopup' || e.target.getAttribute('type').toString() === 'rightNavigationPopup')) {
                return;
            }
            var parentDiv = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target.parentNode, 'DIV');
            if (e.target.getAttribute('isCloseButton') != null) {
                parentDiv.style.display = 'none';
            }
            else {
                var enlargedDiv = parentDiv.childNodes[1];
                if (parentDiv.className === 'balancePopupDiv' && enlargedDiv != null) {
                    if (this._previouslyOpenedDiv != null) {
                        this._previouslyOpenedDiv.style.display = 'none';
                    }
                    this._previouslyOpenedDiv = enlargedDiv;
                    enlargedDiv.style.display = '';
                    enlargedDiv.style.top = e.clientY - this._grid.elementInfo.get_element().offsetTop + 'px';
                    if (e.clientX + enlargedDiv.offsetWidth < this._grid.elementInfo.get_element().offsetLeft + this._grid.elementInfo.get_element().offsetWidth) {
                        enlargedDiv.style.left = e.clientX + 'px';
                    }
                    else {
                        enlargedDiv.style.left = (e.clientX - enlargedDiv.offsetWidth) + 'px';
                    }
                }
            }
        }
        if (this._grid.get_GridInfo().RequireBodyClickClearSelection && (this._grid.raddomElement.containsElement(this._grid.elementInfo.get_bodyInnerTable(), e.target) || this._grid.raddomElement.containsElement(this._grid.elementInfo.get_frozenBodyDiv(), e.target)) && !this._grid.raddomElement.containsElement(this._grid.elementInfo.get_mathOpFooter(), e.target) && !this._grid.raddomElement.containsElement(this._grid.elementInfo.get_frozenMathOpFooter(), e.target)) {
            if (!this._grid.editGrid._pasteStarted && !e.altKey && !e.ctrlKey && !e.shiftKey && e.target.nodeName.toUpperCase() === 'TD') {
                this._grid.clientDataController._unselectAllRowsCells();
            }
        }
        if (this._grid.get_GridInfo().RequireEditGrid && e.target.className !== 'xlResetRowIcon') {
            if (!e.altKey) {
                this.ruleEditorClientX = e.clientX;
                this.ruleEditorClientY = e.clientY;
                this._hideRuleEditor(e);
                var cell = null;
                if (this._grid.get_GridInfo().RequireEditableRow) {
                    if (e.target.getAttribute('columnname') != null) {
                        cell = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
                    }
                    else {
                        cell = eval('$(e.target).closest(\'div[columnname]\')[0]');
                    }
                    this._grid.editGrid._editGridRowData(cell, false, null);
                    if (e.target.id != this._grid.get_GridInfo().GridId + '_btnEditableGrid') {
                        if (this._grid.get_GridInfo().EditableColumnsInfo.find(x => x.ColumnName == $(e.target).attr("columnname")) != null) {
                            if (this._grid.get_GridInfo().EditableColumnsInfo.find(x => x.ColumnName == $(e.target).attr("columnname")).EditColumnMode == 2) {
                                $($(e.target).find(".TextAreaParent").find(".xlEditGridTextBox"))[0].style.width = '330px';
                                $($(e.target).find(".TextAreaParent").find(".xlEditGridTextBox"))[0].style.height = '80px';
                                //$($(e.target).find(".TextAreaParent").find(".xlEditGridTextBox"))[0].focus();
                            }
                        }
                    }
                }
                else {
                    if (e.target.getAttribute('columnname') != null) {
                        cell = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
                    }
                    else {
                        cell = eval('$(e.target).closest(\'div[columnname]\')[0]');
                    }
                    this._grid.editGrid._editGridData(cell);
                }
                $(".xlResetRowIcon").each(function () {
                    $(this)[0].style.top = $(this).parent().position().top + 'px';
                    $(this)[0].style.display = 'none';
                })
            }
        }
        if (e.target.tagName === 'TD' && this._grid.get_GridInfo().RequirePastingDataOnDataFromExcel && !this._grid.editGrid.get_isEditing() && (document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className === 'xlneoSavePastedData' || document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className === 'xlCancelCopyDataFromExcel')) {
            var row = this._checkDataRowClicked(e);
            if (row != null) {
                this._grid.editGrid._startPasting(e, row);
                return;
            }
        }
        if (e.target.id === this._grid.elementIDManager.get_pasteExcelDataID() && e.target.className === 'xlneoCopyDataFromExcel') {
            e.target.className = 'xlneoCancelCopyDataFromExcel';
            e.target.title = 'Disable Copy Data From Excel';
        }
        else if (e.target.id === this._grid.elementIDManager.get_pasteExcelDataID() && e.target.className === 'xlneoCancelCopyDataFromExcel') {
            e.target.className = 'xlneoCopyDataFromExcel';
            e.target.title = 'Enable Copy Data From Excel';
            this.fireKeyDownHandler(e);
            this._grid.editGrid._stopPasting();
        }
        else if (e.target.className === 'xlDeleteRowButton') {
            e.target.parentNode.setAttribute('isNewRow', 'false');
            eval('$(e.target.parentNode).hide(\'drop\',\'slow\')');
            var rowid = e.target.parentNode.getAttribute('id').toString();
            var currentRowId = '';
            for (var i = 0; i < this._grid.editGrid.changedRowsInfo.length; i++) {
                currentRowId = (this._grid.editGrid.changedRowsInfo[i]).RowID;
                if (eval('$(\"#' + rowid + '\").index()') < eval('$(\"#' + currentRowId + '\").index()')) {
                    if (e.target.parentNode.getAttribute('id').toString() !== (this._grid.editGrid.changedRowsInfo[i]).RowID) {
                        var element = document.getElementById((this._grid.editGrid.changedRowsInfo[i]).RowID);
                        if (element.lastChild.className === 'xlDeleteRowButton') {
                            element.lastChild.style.top = Number.parseInvariant(element.lastChild.style.top.substring(0, element.lastChild.style.top.indexOf('px'))) - 22 + 'px';
                            element.lastChild.previousSibling.style.top = Number.parseInvariant(element.lastChild.previousSibling.style.top.substring(0, element.lastChild.previousSibling.style.top.indexOf('px'))) + 22 + 'px';
                        }
                        else if (element.lastChild.className === 'xlResetRowButton') {
                            element.lastChild.style.top = Number.parseInvariant(element.lastChild.style.top.substring(0, element.lastChild.style.top.indexOf('px'))) - 22 + 'px';
                        }
                    }
                }
            }
        }
        else if (e.target.className === 'xlResetRowIcon') {
            if (e.target.parentNode != null) {
                if (e.target.parentNode.getAttribute('inEditMode') != null) {
                    var rowid = e.target.parentNode.getAttribute('id').toString();
                    this._grid.editGrid.resetChangesForSingleRowInEditMode(rowid);
                }
                else {
                    var rowid = e.target.parentNode.getAttribute('id').toString();
                    this._grid.editGrid.resetChangesForSingleRow(rowid);
                    var row = e.target.parentNode;
                    row.removeChild(e.target.previousSibling);
                    row.removeChild(e.target);
                }
            }
        }
        this._grid.managePopups.hidePopup();
        if (this._grid.get_RaiseClickEvent() != null && this._grid.get_RaiseClickEvent() !== '') {
            if (e.target.parentNode.className !== 'selectAllRowsOuterDiv') {
                eval(this._grid.get_RaiseClickEvent() + '(e)');
            }
        }
        if (this._grid.RaiseClickEventHandler != null) {
            this._grid.RaiseClickEventHandler(e);
        }
        else if (e.target.className === 'xlNeoDownloadIcon') {
            this._grid.upperHeader.createDownLoadPopup();
            document.getElementById(this._grid.get_GridInfo().GridId + '_downLoadPopUp').style.right = '135px';
            document.getElementById(this._grid.get_GridInfo().GridId + '_downLoadPopUp').style.top = '170px';
        }
        else if (e.target.className === 'xlNeoExcelDownLoadPopUp') {
        }
        else if (e.target.className === 'xlNeoPDFDownLoadPopUp') {
            var parent = e.target.parentNode;
            parent.removeChild(e.target.previousSibling);
            parent.removeChild(e.target);
            this._grid.upperHeader.createPDFExportPopUp('_downLoadPopUp');
            eval('$(parent).animate({width: \'500px\'})');
        }
        if (!e.target.id.endsWith('_FilterListShow')) {
            if (eval('$(e.target).closest(\'.filterSelectList\').length == 0')) {
                if (document.getElementById(this._grid.get_GridInfo().GridId + 'filterSelectList') != null) {
                    document.getElementById(this._grid.get_GridInfo().GridId + 'filterSelectList').style.display = 'none';
                    this._grid.get_GridInfo().CurrentFilteredColumn = '';
                }
            }
        }
        if (e.target.className === 'selectAllRowsInnerDiv' || e.target.className === 'selectAllRowsCancel') {
            e.preventDefault();
            e.stopPropagation();
        }
        if (this._grid.get_GridInfo().IsMasterChildGrid) {
            if (this._grid.get_GridInfo().MasterGridId !== this._grid.get_GridInfo().GridId) {
                e.preventDefault();
                e.stopPropagation();
            }
        }
    },
    _DoEditAuditFunction: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_DoEditAuditFunction() {
        if(this._grid.editGrid.changedRowsInfo.length == 0)
        {
            this._createNoEditGridPopUp();
        }
        else {
            var count = 0;
            for (var i = 0; i < this._grid.editGrid.changedRowsInfo.length; i++) {
                for (var j = 0; j < this._grid.editGrid.changedRowsInfo[i].CellInfo.length; j++) {
                    if (this._grid.editGrid.changedRowsInfo[i].CellInfo[j].OldValue != this._grid.editGrid.changedRowsInfo[i].CellInfo[j].NewValue) {
                        count++;
                        break;
                    }
                }
            }
            if(count == 0)
            {
                this._createNoEditGridPopUp();
            }
            else
            {
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_EDIT_AUDIT,"", com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_EDIT_AUDIT)
            }
        }
    },
    _createNoEditGridPopUp: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_createNoEditGridPopUp() {
        eval('bootbox.dialog({  message: \"There is no Edited Cells. Please Edit First.\"' + ', title: \'No Edited Cells\'  })');
    },
    _createShowHideMenuDiv: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_createShowHideMenuDiv() {
        var SearchInput = document.createElement('INPUT');
        SearchInput.id = this._grid.get_GridInfo().GridId + '_SearchInShowHideMenuDiv';
        SearchInput.type = 'text';
        SearchInput.className = 'form-control SearchInGroupDiv';
        SearchInput.style.height = '20px';
        var showHideMenuDiv = document.createElement('DIV');
        showHideMenuDiv.className = 'MainDivClassInGroupBy';
        showHideMenuDiv.id = this._grid.get_GridInfo().GridId + '_showhideColumnsMenuDiv';
        showHideMenuDiv.appendChild(SearchInput);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(SearchInput, 'keyup', Function.createDelegate(this, this._searchShowHideMenuDiv));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(showHideMenuDiv, 'click', Function.createDelegate(this, this._showHideColumnMenuClickHandler));
        var HideColumnsDiv = document.createElement('DIV');
        var ShowColumnsDiv = document.createElement('DIV');
        var childDivInDropDown = null;
        for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
            if (!Array.contains(this._grid.get_GridInfo().ColumnsToHide, this._grid.get_GridInfo().ColumnList[i].toString())) {
                childDivInDropDown = document.createElement('DIV');
                childDivInDropDown.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                childDivInDropDown.className = 'DivInGroupByDropDown hidecolumn';
                HideColumnsDiv.appendChild(childDivInDropDown);
            }
        }
        for (var i = 0; i < this._grid.get_GridInfo().ColumnsToHide.length; i++) {
            childDivInDropDown = document.createElement('DIV');
            childDivInDropDown.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
            childDivInDropDown.className = 'DivInGroupByDropDown showcolumn';
            ShowColumnsDiv.appendChild(childDivInDropDown);
        }
        showHideMenuDiv.appendChild(ShowColumnsDiv);
        showHideMenuDiv.appendChild(HideColumnsDiv);
        this._grid.get_element().parentNode.appendChild(showHideMenuDiv);
        showHideMenuDiv.style.top = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_showHideColumnDiv\').offset().top -45') + 'px';
        showHideMenuDiv.style.left = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_showHideColumnDiv\').offset().left + 10') + 'px';
    },

    _searchShowHideMenuDiv: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_searchShowHideMenuDiv(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var text = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_SearchInShowHideMenuDiv\').val()');
        var showColumnDivs = document.getElementById(this._grid.get_GridInfo().GridId + '_showhideColumnsMenuDiv').children[1].children;
        var HideColumnDivs = document.getElementById(this._grid.get_GridInfo().GridId + '_showhideColumnsMenuDiv').children[2].children;
        for (var i = 0; i < showColumnDivs.length; i++) {
            if (!(showColumnDivs[i].innerText.toString().toLowerCase().indexOf(text.toLowerCase()) !== -1)) {
                showColumnDivs[i].style.display = 'none';
            }
            else {
                showColumnDivs[i].style.display = '';
            }
        }
        for (var i = 0; i < HideColumnDivs.length; i++) {
            if (!(HideColumnDivs[i].innerText.toString().toLowerCase().indexOf(text.toLowerCase()) !== -1)) {
                HideColumnDivs[i].style.display = 'none';
            }
            else {
                HideColumnDivs[i].style.display = '';
            }
        }
    },

    _showHideColumnMenuClickHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_showHideColumnMenuClickHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'DivInGroupByDropDown hidecolumn') {
            this._hideColumnFromMenu((e.target).innerText);
        }
        if (e.target.className === 'DivInGroupByDropDown showcolumn') {
            this._unHideColumnFromMenu((e.target).innerText);
        }
    },

    _checkDataCellClick: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_checkDataCellClick(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var cell = null;
        try {
            cell = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
        }
        catch ($e1) {
        }
        var row = this._checkDataRowClicked(e);
        if (row != null) {
            this._grid.clientDataController._cellSelectClick(cell, row);
        }
    },

    _checkDataCell: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_checkDataCell(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var cell = null;
        try {
            cell = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
        }
        catch ($e1) {
        }
        var row = this._checkDataRowClicked(e);
        if (row != null) {
            return cell;
        }
        return null;
    },

    _checkDataRowClicked: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_checkDataRowClicked(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var cell = null;
        var row = null;
        var parentDiv = null;
        try {
            if (eval('$(e.target).closest(\'div[columnname]\')') != null) {
                cell = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
            }
            else {
                if (eval('$(e.target).closest(\'div[columnname]\').length') > 0) {
                    cell = eval('$(e.target).closest(\'div[columnname]\')[0]');
                }
            }
        }
        catch ($e1) {
        }
        if (cell == null) {
            return null;
        }
        if (eval('cell.getAttribute == null')) {
            return null;
        }
        try {
            row = cell.parentNode;
        }
        catch ($e2) {
        }
        if (row == null) {
            return null;
        }
        parentDiv = row.parentNode.parentNode.parentNode;
        if (row.getAttribute('isGroupHeader') != null && Boolean.parse(row.getAttribute('isGroupHeader').toString())) {
            return null;
        }
        if (row.getAttribute('isGroupFooter') != null && Boolean.parse(row.getAttribute('isGroupFooter').toString())) {
            return null;
        }
        if (parentDiv.id === this._grid.elementIDManager.get_bodyDivID()) {
            if (cell.getAttribute('rowid') == null) {
                return null;
            }
            return row;
        }
        if (parentDiv.id === this._grid.elementIDManager.get_frozenBodyDivID()) {
            return this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[com.ivp.rad.controls.neogrid.scripts.GridUIHelper.rowIndex(row)];
        }
        return row;
    },

    _checkIfHeaderRow: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_checkIfHeaderRow(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var row = null;
        if (eval('$(e.target).closest(\'div[iscollapsed]\')') != null) {
            try {
                row = eval('$(e.target).closest(\'div[iscollapsed]\')[0]');
                return row;
            }
            catch ($e1) {
            }
        }
        return null;
    },

    _checkIfColumnHeaderClicked: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_checkIfColumnHeaderClicked(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var row = null;
        var TH = null;
        try {
            row = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV').parentNode.parentNode;
        }
        catch ($e1) {
        }
        if (row != null) {
            if (row.parentNode.parentNode.parentNode.id === this._grid.elementIDManager.get_frozenHeaderDivID() || row.parentNode.parentNode.parentNode.id === this._grid.elementIDManager.get_fluidHeaderDivID() || row.parentNode.parentNode.parentNode.id === this._grid.get_GridInfo().GridId + '_frozen_new_headerDiv') {
                if (e.target.children.length === 0) {
                    TH = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV').parentNode;
                }
                else {
                    TH = e.target;
                }
            }
        }
        return TH;
    },

    _checkContextClick: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_checkContextClick(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var row = null;
        try {
            row = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'TR');
        }
        catch ($e1) {
        }
        if (row != null) {
            if (row.getAttribute('eventtype') != null) {
                return row;
            }
        }
        return null;
    },

    fireKeyUpHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$fireKeyUpHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._shiftKeyPressed = e.shiftKey;
        if (e.target.id === this._grid.elementIDManager.get_search()) {
            this._grid.search.keyUpEvent(e);
        }
        else if (e.target.id === this._grid.elementIDManager.get_pageNumberId()) {
            this._grid.footer._doPaging(e);
        }
        else if (e.target.tagName.toUpperCase() === 'INPUT' && e.target.getAttribute('isFilterFilter') != null) {
            this._grid.filter._filterFilterList(e);
        }
    },

    _hideRuleEditor: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_hideRuleEditor(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor') != null) {
            if (e.target.className !== 'ruleEditorInput' && e.target.className !== 'xlNewRuleRight' && e.target.className !== 'xlRuleIntellisenseCellfocussed' && e.target.className !== 'slimScrollDivNew' && e.target.className !== 'slimScrollBar' && e.target.className !== 'slimScrollRail') {
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').style.display === '') {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').style.display = 'none';
                    document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.display = 'none';
                    document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').parentNode.style.display = '';
                    (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value = '';
                    this._grid.editGrid.previousToken = null;
                    this._grid.editGrid.matchedTokenRuleList = null;
                }
            }
        }
    },

    fireKeyDownHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$fireKeyDownHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._shiftKeyPressed = e.shiftKey;
        if (e.keyCode === Sys.UI.Key.esc) {
            if (document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').style.display === '') {
                document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').style.display = 'none';
                document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.display = 'none';
                document.getElementById(this._grid.get_GridInfo().GridId + '_xlAddRule').parentNode.style.display = '';
                (document.getElementById(this._grid.get_GridInfo().GridId + '_ruleEditorInput')).value = '';
                this._grid.editGrid.previousToken = null;
                this._grid.editGrid.matchedTokenRuleList = null;
            }
            else {
            }
        }
        if (e.ctrlKey && e.keyCode === com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.z) {
            if (this._grid.editGrid.isInvalidDataFlag) {
                this._grid.editGrid.isInvalidDataFlag = false;
            }
            this._clearLastPastedData();
        }
    },

    _clearLastPastedData: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_clearLastPastedData() {
        var dataToClear = [];
        if (this._grid.editGrid.changedRowInfoList.length > 0) {
            dataToClear = this._grid.editGrid.changedRowInfoList[this._grid.editGrid.changedRowInfoList.length - 1];
            var currentRow = this._grid.editGrid.pastedRowandCellIndex[this._grid.editGrid.pastedRowandCellIndex.length - 1];
            var startRowIndex = Number.parseInvariant(window.Object.keys(currentRow)[0].toString());
            var startCellIndex = Number.parseInvariant(currentRow[window.Object.keys(currentRow)[0].toString()].toString());
            for (var i = 0; i < dataToClear.length; i++) {
                startCellIndex = Number.parseInvariant(currentRow[window.Object.keys(currentRow)[0].toString()].toString());
                for (var j = 0; j < (dataToClear[i]).CellInfo.length; j++) {
                    var cell = (this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children[startRowIndex]).children[startCellIndex];
                    cell.innerHTML = ((dataToClear[i]).CellInfo[j]).OldValue;
                    cell.style.backgroundColor = ((dataToClear[i]).CellInfo[j]).OldColor;
                    startCellIndex++;
                }
                startRowIndex++;
            }
            Array.removeAt(this._grid.editGrid.changedRowInfoList, this._grid.editGrid.changedRowInfoList.length - 1);
            Array.removeAt(this._grid.editGrid.pastedDataList, this._grid.editGrid.pastedDataList.length - 1);
            Array.removeAt(this._grid.editGrid.keyValuePairList, this._grid.editGrid.keyValuePairList.length - 1);
            Array.removeAt(this._grid.editGrid.pastedRowandCellIndex, this._grid.editGrid.pastedRowandCellIndex.length - 1);
        }
        else {
            document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).className = 'xlneoCopyDataFromExcel';
            document.getElementById(this._grid.elementIDManager.get_pasteExcelDataID()).title = 'Enable Copy Data From Excel';
            this._grid.editGrid._stopPasting();
        }
        this._grid.editGrid._stopPasting();
    },

    _fireMouseMoveHanndler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_fireMouseMoveHanndler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        document.body.style.cursor = '';
        if (this._grid.raddomElement.containsElement(this._grid.get_element(), e.target)) {
            this._shiftKeyPressed = e.shiftKey;
            if (this._grid.gridEngine._verticalScrollingStart >= 0) {
                this._grid.gridEngine._onWheelMain(e);
                eval('var target = document.getElementById(\"' + this._grid.get_element().id + '\"); if(target.style.MozUserSelect!=\"undefined\") target.style.MozUserSelect=\"none\";');
                return;
            }
            if (this._grid.gridEngine._horizontalScrollingStart >= 0) {
                this._grid.gridEngine._onScrollMainHorizontal(e);
                eval('var target = document.getElementById(\"' + this._grid.get_element().id + '\"); if(target.style.MozUserSelect!=\"undefined\") target.style.MozUserSelect=\"none\";');
                return;
            }
            eval('var target = document.getElementById(\"' + this._grid.get_element().id + '\"); if(target.style.MozUserSelect!=\"undefined\") target.style.MozUserSelect=\"\";');
            var cellElement;
            if (this._grid.raddomElement.containsElement(this._grid.elementInfo.get_groupDropPanel(), e.target)) {
                this._grid.group.mouseMoveOnGroup(e);
            }
            try {
                if (e.target.getAttribute('columnname') != null) {
                    cellElement = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
                }
                else {
                    cellElement = eval('$(e.target).closest(\'div[columnname]\')');
                }
                cellElement = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
            }
            catch ($e1) {
                return;
            }
            var row = this._checkDataRowClicked(e);
            var _startedCell = (this._e == null) ? null : com.ivp.rad.rscriptutils.RSCommonScripts.findControl(this._e.target, 'DIV');
            if (e.ctrlKey && e.target !== _startedCell && e.button === Sys.UI.MouseButton.leftButton) {
                if (!this._startCellHandled) {
                    this._startCellHandled = true;
                    this._grid.clientDataController._cellMultipleSelectUnSelect(_startedCell, this._checkDataRowClicked(this._e));
                }
                this._grid.clientDataController._cellMultipleSelectUnSelect(cellElement, row);
            }
            if (this._grid.filter != null) {
                this._grid.filter._resizeFilterList(e);
            }
            this._grid.manageHeader._doResizing(e);
            if (this._dragCopyPasteDiv) {
                var _newHeight = this._initialDragHeight + e.clientY - this._initialY;
                document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv').style.height = _newHeight + 'px';
            }
        }
        else {
            this.fireMouseLeaveHandler(e);
        }
    },

    fireMouseDownHanndler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$fireMouseDownHanndler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.filter != null) {
            this._grid.filter._startFilterListResize(e);
        }
        this._shiftKeyPressed = e.shiftKey;
        this._e = e;
        this._startCellHandled = !e.ctrlKey;
        if (e.target.getAttribute('type') != null && e.target.getAttribute('type').toString() === 'rightNavigationPopup') {
            var interval = 0;
            interval = window.setInterval(Function.createDelegate(this, function () {
                if (this._startScrollingPopup) {
                    e.target.previousSibling.scrollLeft = e.target.previousSibling.scrollLeft + 10;
                }
                else {
                    window.clearInterval(interval);
                }
            }), 10);
            this._startScrollingPopup = true;
            return;
        }
        if (e.target.getAttribute('type') != null && e.target.getAttribute('type').toString() === 'leftNavigationPopup') {
            var interval = 0;
            interval = window.setInterval(Function.createDelegate(this, function () {
                if (this._startScrollingPopup) {
                    if (e.target.nextSibling.scrollLeft > 10) {
                        e.target.nextSibling.scrollLeft = e.target.nextSibling.scrollLeft - 10;
                    }
                    else {
                        e.target.nextSibling.scrollLeft = 0;
                    }
                }
                else {
                    window.clearInterval(interval);
                }
            }), 10);
            this._startScrollingPopup = true;
            return;
        }
        var cell = null;
        try {
            cell = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
        }
        catch ($e1) {
        }
        var row = this._checkDataRowClicked(e);
        if (row != null) {
            this._grid.clientDataController._cellSelectStart(cell, row, e);
        }
        var th = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'DIV');
        if (e.target.id.endsWith('_Resize')) {
            this._grid.manageHeader._startResizing(e, th);
        }
        if (e.target.className === 'xlneoPasteLikeExcelDiv') {
            this._dragCopyPasteDiv = true;
            this._initialX = e.clientX;
            this._initialY = e.clientY;
        }
    },

    fireMouseUpHanndler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$fireMouseUpHanndler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.filter != null) {
            this._grid.filter._endFilterListResize(e);
        }
        this._shiftKeyPressed = e.shiftKey;
        if (this._grid.manageHeader._isResizing) {
            this._resizingDone = true;
        }
        this._grid.manageHeader._endResizing(e);
        this._grid.gridEngine._verticalScrollingStart = -1;
        this._grid.gridEngine._horizontalScrollingStart = -1;
        this._startScrollingPopup = false;
        if (e.altKey && e.target.tagName === 'DIV') {
            if (this._grid.editGrid.get_isEditing()) {
                if (e.target.className.indexOf('GridColumnClass') !== -1) {
                    if (Array.contains(this._grid.get_GridInfo().EditableColumns, e.target.getAttribute('columnName'))) {
                        var frozenColumnCollection = [];
                        for (var k = 0; k < this._grid.get_GridInfo().FrozenColumns.length; k++) {
                            Array.add(frozenColumnCollection, (this._grid.get_GridInfo().FrozenColumns[k]).ColumnName);
                        }
                        if (Array.contains(frozenColumnCollection, e.target.getAttribute('columnName'))) {
                            this._isFrozen = true;
                        }
                        else {
                            this._isFrozen = false;
                        }
                        this._dragStartIndex = eval('$(e.target.parentNode).index()');
                        this._dragStartColumnNameIndex = eval('$(e.target).index()');
                        var childCount = document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv').children.length;
                        e.target.style.position = 'relative';
                        var element = document.createElement('DIV');
                        element.className = 'xlneoPasteLikeExcelDiv';
                        var elementToResize = document.createElement('DIV');
                        elementToResize.className = 'xlneoPasteLikeExcelDivResize';
                        elementToResize.style.width = e.target.style.width;
                        elementToResize.style.height = '22px';
                        elementToResize.style.maxHeight = ((childCount - this._dragEndIndex) * 22) + 'px';
                        elementToResize.style.maxWidth = e.target.style.width;
                        elementToResize.id = this._grid.get_GridInfo().GridId + '_resizeExcelDiv';
                        elementToResize.appendChild(element);
                        if (this._isFrozen) {
                            if (document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv') != null) {
                                document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_bodyDiv').removeChild(document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv'));
                            }
                            document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_bodyDiv').appendChild(elementToResize);
                        }
                        else {
                            if (document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv') != null) {
                                document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv').removeChild(document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv'));
                            }
                            document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv').appendChild(elementToResize);
                        }
                        var top = eval('$(e.target).position().top');
                        var left = eval('$(e.target).position().left');
                        elementToResize.style.left = left + 'px';
                        elementToResize.style.top = top + 'px';
                    }
                }
            }
        }
        else if (e.keyCode === com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.TAB) {
            if (this._grid.editGrid.get_isEditing()) {
                if (e.target.className.indexOf('GridColumnClass') !== -1) {
                    e.target.style.position = 'relative';
                    var element = document.createElement('DIV');
                    element.className = 'xlneoPasteLikeExcelDiv';
                    var elementToResize = document.createElement('DIV');
                    elementToResize.className = 'xlneoPasteLikeExcelDivResize';
                    elementToResize.style.width = e.target.style.width;
                    elementToResize.style.height = '22px';
                    elementToResize.style.maxWidth = e.target.style.width;
                    elementToResize.id = this._grid.get_GridInfo().GridId + '_resizeExcelDiv';
                    elementToResize.appendChild(element);
                    document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv').appendChild(elementToResize);
                    var top = eval('$(e.target).position().top');
                    var left = eval('$(e.target).position().left');
                    elementToResize.style.left = left + 'px';
                    elementToResize.style.top = top + 'px';
                }
            }
        }
        else if (this._dragCopyPasteDiv) {
            var top = Number.parseInvariant(document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv').style.height.substr(0, document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv').style.height.indexOf('px')));
            var divisor = (top / 22);
            document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv').style.height = Math.ceil(divisor) * 22 + 'px';
            this._dragCopyPasteDiv = false;
            this._dragEndIndex = Math.ceil(divisor) + this._dragStartIndex;
            this._pasteCopiedDatainDraggedColumns(this._isFrozen);
            this._initialDragHeight = document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv').clientHeight;
            if (this._isFrozen) {
                document.getElementById(this._grid.get_GridInfo().GridId + '_frozen_bodyDiv').removeChild(document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv'));
            }
            else {
                document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv').removeChild(document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv'));
            }
            this._initialDragHeight = 22;
        }
        if (this._grid.clientDataController.isReadyToHighlight) {
            this._grid.clientDataController._cellSelectEnd(e);
        }
    },

    _mouseMoveHandlerDrag: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_mouseMoveHandlerDrag(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._dragCopyPasteDiv) {
            var _newHeight = this._initialDragHeight + e.clientY - this._initialY;
            document.getElementById(this._grid.get_GridInfo().GridId + '_resizeExcelDiv').style.height = _newHeight + 'px';
        }
    },

    _pasteCopiedDatainDraggedColumns: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_pasteCopiedDatainDraggedColumns(isFrozen) {
        /// <param name="isFrozen" type="Boolean">
        /// </param>
        var repeatedBodyDiv = null;
        if (isFrozen) {
            repeatedBodyDiv = document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedFrozenDiv');
        }
        else {
            repeatedBodyDiv = document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv');
        }
        var valueToCopy = repeatedBodyDiv.children[this._dragEndIndex].children[this._dragStartColumnNameIndex].innerText;
        for (var j = this._dragStartIndex; j < this._dragEndIndex; j++) {
            var existingValue = repeatedBodyDiv.children[j].children[this._dragStartColumnNameIndex].innerText;
            var rowInfo = null;
            var rowID = repeatedBodyDiv.children[j].children[this._dragStartColumnNameIndex].getAttribute('rowid').toString();
            for (var i = 0; i < this._grid.editGrid.changedRowsInfo.length; i++) {
                var rowI = this._grid.editGrid.changedRowsInfo[i];
                if (rowI.RowID === rowID) {
                    rowInfo = rowI;
                    break;
                }
            }
            if (rowInfo == null) {
                rowInfo = new com.ivp.rad.controls.neogrid.scripts.info.ChangedRowInfo();
                rowInfo.RowID = rowID;
                rowInfo._row = repeatedBodyDiv.children[j];
                Array.add(this._grid.editGrid.changedRowsInfo, rowInfo);
            }
            var cellInfo = null;
            for (var i = 0; i < rowInfo.CellInfo.length; i++) {
                var cellI = rowInfo.CellInfo[i];
                if (cellI.ColumnName === repeatedBodyDiv.children[j].children[this._dragStartColumnNameIndex].getAttribute('columnname').toString()) {
                    cellInfo = cellI;
                    break;
                }
            }
            if (cellInfo == null) {
                cellInfo = new com.ivp.rad.controls.neogrid.scripts.info.ChangedCellInfo();
                cellInfo.ColumnName = repeatedBodyDiv.children[j].children[this._dragStartColumnNameIndex].getAttribute('columnname').toString();
                cellInfo.OldValue = existingValue;
                cellInfo.NewValue = valueToCopy;
                Array.add(rowInfo.CellInfo, cellInfo);
            }
            repeatedBodyDiv.children[j].children[this._dragStartColumnNameIndex].innerText = valueToCopy;
        }
    },

    _fireMouseOutHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_fireMouseOutHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._grid.group._mouseOutHandler();
    },

    fireMouseLeaveHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$fireMouseLeaveHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
    },

    fireContextMenuHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$fireContextMenuHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.getAttribute('rowid') != null) {
            var rowid = e.target.getAttribute('rowid').toString();
            var gridid = rowid.substr(0, rowid.lastIndexOf('_'));
            while (gridid !== '' && gridid != null) {
                com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(eval('$find(\'' + gridid + '\').elementInfo.get_element()'));
                eval('$find(\'' + gridid + '\').manageEvents.addEventHandler(\'' + gridid + '\');');
                gridid = eval('$find(\'' + gridid + '\').get_GridInfo().ParentGridId');
            }
        }
        if ((this._headerRow = this._checkIfHeaderRow(e)) != null && this._grid.get_GridInfo().RequireGroupExpandCollapse) {
            this._grid.group.onContextMenuGroupRow(this._headerRow, e);
        }
        else if ((this._headerRow = this._checkIfColumnHeaderClicked(e)) != null) {
            this._grid.manageColumns.onContextMenuColumnRow(this._headerRow, e);
        }
    },

    preventDefault: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$preventDefault(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._selectStartEnabled = false;
        if (this._grid.manageHeader._isResizing || this._grid.gridEngine._verticalScrollingStart >= 0 || this._grid.gridEngine._horizontalScrollingStart >= 0 || e.ctrlKey || (this._grid.filter != null && this._grid.filter._filterListResizeStart)) {
            if (!this._shiftKeyPressed) {
                e.preventDefault();
            }
        }
        else {
            if (this._shiftKeyPressed) {
                e.preventDefault();
            }
            this._selectStartEnabled = true;
        }
    },

    fireDoubleClickHandler: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$fireDoubleClickHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._isDblClicked = true;
        if (this._grid.get_GridInfo().CommentProperty == true && ($(e.target).hasClass("GridColumnClass") || $(e.target).closest(".GridColumnClass")[0].hasAttribute("columnname")))
        {
            var data = new com.ivp.rad.controls.neogrid.scripts.CommentInfoDetails();
            var ActualCommentData = new com.ivp.rad.controls.neogrid.scripts.CoomenTInfoDetails();
            if ($(e.target).hasClass("GridColumnClass"))
            {
                data.ColumnName = $(e.target).attr("columnname");
            }
            else if ($(e.target).closest(".GridColumnClass")[0].hasAttribute("columnname"))
            {
                data.ColumnName = $(e.target).closest(".GridColumnClass").attr("columnname");
            }
            if ($(e.target).hasClass("GridColumnClass")) {
                data.RowId = $(e.target).parent()[0].getAttribute("idcolumnvalue");
            }
            else if ($(e.target).closest(".GridColumnClass")[0].hasAttribute("columnname")) {
                data.RowId = $(e.target).closest(".GridColumnClass").parent()[0].getAttribute("idcolumnvalue");
            }
            
            data.Grid_Marker = this._grid.get_GridInfo().GridId + this._grid.get_GridInfo().CurrentPageId + this._grid.get_GridInfo().ViewKey;
            ActualCommentData.Comment = "";
            ActualCommentData.UserId = "";
            ActualCommentData.UpdatedDate = "";
            ActualCommentData.ID = $(event.target).closest(".RADCommentWrapper").attr("key");
            data.CoomenTInfo = [];
            data.CoomenTInfo.push(ActualCommentData);
            this._grid.manageEvents._RowID = $(e.target).parent()[0].getAttribute("idcolumnvalue")
            this._grid.manageEvents._CoulmnName = e.target.getAttribute("columnname");
            this._grid.manageEvents.TOP = e.target.offsetTop + $("#" + this._grid.get_GridInfo().GridId).offset().top + 28 - $("#" + this._grid.get_GridInfo().GridId + "_bodyDiv").scrollTop();
            this._grid.manageEvents.RIGHT = e.target.offsetLeft + e.target.offsetWidth + $("#" + this._grid.get_GridInfo().GridId).offset().left - $("#" + this._grid.get_GridInfo().GridId + "_bodyDiv").scrollLeft();
            this._grid.manageEvents.LEFT = e.target.offsetLeft + $("#" + this._grid.get_GridInfo().GridId).offset().left - $("#" + this._grid.get_GridInfo().GridId + "_bodyDiv").scrollLeft();
            $("#RADCommentPapaContainer").remove();
            $(".RADTooltipEdge").remove();
            var div = document.createElement('div');
            div.className = "RADTooltipEdge";
            div.id = "RADTooltipEdge";
            $("body").append(div);
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_COLUMNHTML, Sys.Serialization.JavaScriptSerializer.serialize(data), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_COLUMNHTML)
        }
    },

    _onResize: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_onResize(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.elementInfo.get_bodyInnerDiv() != null) {
            this._grid.elementInfo.get_bodyInnerDiv().style.height = this._grid.get_GridInfo().Height;
            if (this._grid.elementInfo.get_frozenBodyDiv() != null) {
                this._grid.elementInfo.get_frozenBodyDiv().style.height = this._grid.get_GridInfo().Height;
            }
            var scrollBarValue = (((this._grid.get_HorizontalScrollPosition() / this._grid.get_PreviousBodyWidth()) * 100) * this._grid.elementInfo.get_bodyInnerDiv().offsetWidth) / 100;
            var scrollValue = (scrollBarValue / (this._grid.elementInfo.get_bodyInnerDiv().offsetWidth - ((this._grid.elementInfo.get_bodyInnerDiv().offsetWidth / this._grid.elementInfo.get_bodyInnerDiv().scrollWidth) * this._grid.elementInfo.get_bodyInnerDiv().offsetWidth))) * (this._grid.elementInfo.get_bodyInnerDiv().scrollWidth - this._grid.elementInfo.get_bodyInnerDiv().offsetWidth);
            this._grid.gridEngine._setVerticalScroll();
            eval('$(\"#' + this._grid.get_id() + '_bodyDiv' + '\" ).scrollLeft(' + Math.round(scrollValue) + ')');
            eval('$(\"#' + this._grid.get_id() + '_headerDiv' + '\" ).scrollLeft(' + Math.round(scrollValue) + ')');
            this._grid.set_PreviousBodyWidth(this._grid.elementInfo.get_bodyInnerDiv().offsetWidth);
            if (!(this._grid.elementInfo.get_bodyInnerDiv().offsetWidth < this._grid.elementInfo.get_bodyInnerTable().offsetWidth)) {
                this._grid.set_HorizontalScrollPosition(0);
            }
            document.getElementById(this._grid.get_GridInfo().GridId + '_gridRuleEditor').style.width = this._grid.elementInfo.get_bodyInnerDiv().offsetWidth * 0.4 + 'px';
            document.getElementById(this._grid.get_GridInfo().GridId + '_RuleIntellisense').style.width = this._grid.elementInfo.get_bodyInnerDiv().offsetWidth * 0.1 + 'px';
            if (this._grid._isRendered && this._grid.elementInfo.get_scrollerMainVertical() != null && this._grid.elementInfo.get_scrollerMainHorizontal() != null) {
                this._grid.gridEngine._manageScrolling(true);
            }
        }
    },

    _getRealColumnnName: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$_getRealColumnnName(columnNAme) {
        /// <param name="columnNAme" type="String">
        /// </param>
        /// <returns type="String"></returns>
        var $dict1 = this._grid.get_GridInfo().ColumnNameMapping;
        for (var $key2 in $dict1) {
            var entry = { key: $key2, value: $dict1[$key2] };
            if (entry.value.toString() === columnNAme) {
                return entry.key;
            }
        }
        return columnNAme;
    },

    createClearFunctionalityDiv: function com_ivp_rad_controls_neogrid_scripts_ManageEvents$createClearFunctionalityDiv() {
        var clearFilterDiv = document.getElementById(this._grid.get_id() + '_ClearFilterDiv');
        clearFilterDiv.innerHTML = '';
        document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv').style.border = '0px';
        var filterItemDiv = null;
        var filterText = null;
        var deleteImage = null;
        filterItemDiv = document.createElement('DIV');
        filterText = document.createElement('DIV');
        deleteImage = document.createElement('DIV');
        var columnNameMap = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
        if (this._grid.filter.filteredColumns.length > 0) {
            filterText.innerText = 'Filter';
            deleteImage.innerText = 'Clear All';
            filterItemDiv.appendChild(filterText);
            filterItemDiv.appendChild(deleteImage);
            clearFilterDiv.appendChild(filterItemDiv);
            filterItemDiv.className = 'xlClearFilterItemHeader';
            deleteImage.className = 'xlRemoveCurrentFilterHeader';
            filterText.className = 'xlClearFilterHeader';
            var filterBody = document.createElement('DIV');
            filterBody.id = this._grid.get_id() + '_clearFilterBody';
            clearFilterDiv.appendChild(filterBody);
            for (var i = 0; i < this._grid.filter.filteredColumns.length; i++) {
                filterItemDiv = document.createElement('DIV');
                filterItemDiv.className = 'xlClearFilterItem';
                filterText = document.createElement('DIV');
                if (Array.contains(columnNameMap, this._grid.filter.filteredColumns[i].toString())) {
                    filterText.innerText = this._grid.get_GridInfo().ColumnNameMapping[this._grid.filter.filteredColumns[i].toString()].toString();
                    filterText.title = this._grid.get_GridInfo().ColumnNameMapping[this._grid.filter.filteredColumns[i].toString()].toString();
                }
                else {
                    filterText.innerText = this._grid.filter.filteredColumns[i].toString();
                    filterText.title = this._grid.filter.filteredColumns[i].toString();
                }
                filterText.setAttribute('ColumnName', this._grid.filter.filteredColumns[i].toString());
                filterText.className = 'xlClearFilterText';
                deleteImage = document.createElement('DIV');
                deleteImage.className = 'xlRemoveCurrentFilter fa fa-minus-circle';
                filterItemDiv.appendChild(filterText);
                filterItemDiv.appendChild(deleteImage);
                filterBody.appendChild(filterItemDiv);
            }
            if (this._grid.filter.filteredColumns.length > 4) {
                eval('$(\"#' + this._grid.get_id() + '_clearFilterBody' + '\").slimscrollNew({height : \'' + 88 + 'px\', size:\'4px\' })');
            }
            document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv').style.border = '1px solid #DBDBDB';
        }
        var clearSortDiv = document.getElementById(this._grid.get_id() + '_ClearSortDiv');
        clearSortDiv.innerHTML = '';
        filterItemDiv = null;
        filterText = null;
        deleteImage = null;
        filterItemDiv = document.createElement('DIV');
        filterText = document.createElement('DIV');
        deleteImage = document.createElement('DIV');
        if (this._grid.sort != null) {
            if (this._grid.sort.sortedColumns.length > 0) {
                filterText.innerText = 'Sort';
                deleteImage.innerText = 'Clear All';
                filterItemDiv.appendChild(filterText);
                filterItemDiv.appendChild(deleteImage);
                clearSortDiv.appendChild(filterItemDiv);
                filterItemDiv.className = 'xlClearFilterItemHeader';
                deleteImage.className = 'xlRemoveCurrentSortHeader';
                filterText.className = 'xlClearFilterHeader';
                var sortBody = document.createElement('DIV');
                sortBody.id = this._grid.get_id() + '_clearSortBody';
                clearSortDiv.appendChild(sortBody);
                if (this._grid.sort != null) {
                    for (var i = 0; i < this._grid.sort.sortedColumns.length; i++) {
                        var sinfo = this._grid.sort.sortedColumns[i];
                        filterItemDiv = document.createElement('DIV');
                        filterItemDiv.className = 'xlClearFilterItem';
                        filterText = document.createElement('DIV');
                        if (Array.contains(columnNameMap, sinfo.ColumnName)) {
                            filterText.innerText = this._grid.get_GridInfo().ColumnNameMapping[sinfo.ColumnName].toString();
                            filterText.title = this._grid.get_GridInfo().ColumnNameMapping[sinfo.ColumnName].toString();
                        }
                        else {
                            filterText.innerText = sinfo.ColumnName;
                            filterText.title = sinfo.ColumnName;
                        }
                        filterText.setAttribute('ColumnName', sinfo.ColumnName);
                        deleteImage = document.createElement('DIV');
                        deleteImage.className = 'xlRemoveCurrentFilter fa fa-minus-circle';
                        filterText.className = 'xlClearFilterText';
                        filterItemDiv.appendChild(filterText);
                        filterItemDiv.appendChild(deleteImage);
                        sortBody.appendChild(filterItemDiv);
                    }
                }
                if (this._grid.sort.sortedColumns.length > 4) {
                    eval('$(\"#' + this._grid.get_id() + '_clearSortBody' + '\").slimscrollNew({height : \'' + 88 + 'px\', size:\'4px\' })');
                }
                document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv').style.border = '1px solid #DBDBDB';
            }
        }
        var clearRankingDiv = document.getElementById(this._grid.get_id() + '_ClearRankingDiv');
        clearRankingDiv.innerHTML = '';
        filterItemDiv = null;
        filterText = null;
        deleteImage = null;
        filterItemDiv = document.createElement('DIV');
        filterText = document.createElement('DIV');
        deleteImage = document.createElement('DIV');
        if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null) {
            filterText.innerText = 'Rank';
            deleteImage.innerText = 'Clear All';
            filterItemDiv.appendChild(filterText);
            filterItemDiv.appendChild(deleteImage);
            clearRankingDiv.appendChild(filterItemDiv);
            filterItemDiv.className = 'xlClearFilterItemHeader';
            deleteImage.className = 'xlRemoveCurrentRankHeader';
            filterText.className = 'xlClearFilterHeader';
            var rankBody = document.createElement('DIV');
            rankBody.id = this._grid.get_id() + '_clearRankBody';
            clearRankingDiv.appendChild(rankBody);
            var rank = this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo;
            filterItemDiv = document.createElement('DIV');
            filterItemDiv.className = 'xlClearFilterItem';
            filterText = document.createElement('DIV');
            filterText.innerText = rank;
            filterText.title = rank;
            deleteImage = document.createElement('DIV');
            deleteImage.className = 'xlRemoveCurrentFilter fa fa-minus-circle';
            filterText.className = 'xlClearFilterText';
            filterItemDiv.appendChild(filterText);
            filterItemDiv.appendChild(deleteImage);
            rankBody.appendChild(filterItemDiv);
            document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv').style.border = '1px solid #DBDBDB';
        }
        var clearGroupDiv = document.getElementById(this._grid.get_id() + '_ClearGroupDiv');
        clearGroupDiv.innerHTML = '';
        filterItemDiv = null;
        filterText = null;
        deleteImage = null;
        filterItemDiv = document.createElement('DIV');
        filterText = document.createElement('DIV');
        deleteImage = document.createElement('DIV');
        if (this._grid.group._groupedColumns.length > 0) {
            filterText.innerText = 'Group';
            deleteImage.innerText = 'Clear All';
            filterItemDiv.appendChild(filterText);
            filterItemDiv.appendChild(deleteImage);
            clearGroupDiv.appendChild(filterItemDiv);
            filterItemDiv.className = 'xlClearFilterItemHeader';
            deleteImage.className = 'xlRemoveCurrentGroupHeader';
            filterText.className = 'xlClearFilterHeader';
            var GroupBody = document.createElement('DIV');
            GroupBody.id = this._grid.get_id() + '_clearGroupBody';
            clearGroupDiv.appendChild(GroupBody);
            for (var i = 0; i < this._grid.group._groupedColumns.length; i++) {
                filterItemDiv = document.createElement('DIV');
                filterItemDiv.className = 'xlClearFilterItem';
                filterText = document.createElement('DIV');
                if (Array.contains(columnNameMap, this._grid.group._groupedColumns[i].toString())) {
                    filterText.innerText = this._grid.get_GridInfo().ColumnNameMapping[this._grid.group._groupedColumns[i].toString()].toString();
                    filterText.title = this._grid.get_GridInfo().ColumnNameMapping[this._grid.group._groupedColumns[i].toString()].toString();
                }
                else {
                    filterText.innerText = this._grid.group._groupedColumns[i].toString();
                    filterText.title = this._grid.group._groupedColumns[i].toString();
                }
                filterText.setAttribute('ColumnName', this._grid.group._groupedColumns[i].toString());
                deleteImage = document.createElement('DIV');
                deleteImage.className = 'xlRemoveCurrentFilter fa fa-minus-circle';
                filterText.className = 'xlClearFilterText';
                filterItemDiv.appendChild(filterText);
                filterItemDiv.appendChild(deleteImage);
                GroupBody.appendChild(filterItemDiv);
            }
            if (this._grid.group._groupedColumns.length > 4) {
                eval('$(\"#' + this._grid.get_id() + '_clearGroupBody' + '\").slimscrollNew({height : \'' + 88 + 'px\', size:\'4px\' })');
            }
            document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv').style.border = '1px solid #DBDBDB';
        }
        var clearGroupDivDefault = document.getElementById(this._grid.get_id() + '_ClearGroupDivDefault');
        clearGroupDivDefault.innerHTML = '';
        filterItemDiv = null;
        filterText = null;
        filterItemDiv = document.createElement('DIV');
        filterText = document.createElement('DIV');
        if (this._grid.get_DefaultGroupedAndSortedColumns().length > 0) {
            filterText.innerText = 'Default Group';
            filterItemDiv.appendChild(filterText);
            filterItemDiv.appendChild(deleteImage);
            clearGroupDivDefault.appendChild(filterItemDiv);
            filterItemDiv.className = 'xlClearFilterItemHeader';
            filterText.className = 'xlClearFilterHeader';
            var GroupBodyDefault = document.createElement('DIV');
            GroupBodyDefault.id = this._grid.get_id() + '_clearGroupBodyDefault';
            clearGroupDivDefault.appendChild(GroupBodyDefault);
            for (var i = 0; i < this._grid.get_DefaultGroupedAndSortedColumns().length; i++) {
                filterItemDiv = document.createElement('DIV');
                filterItemDiv.className = 'xlClearFilterItem';
                filterText = document.createElement('DIV');
                if (Array.contains(columnNameMap, this._grid.get_DefaultGroupedAndSortedColumns()[i].toString())) {
                    filterText.innerText = this._grid.get_GridInfo().ColumnNameMapping[(this._grid.get_DefaultGroupedAndSortedColumns()[i]).ColumnName.toString()].toString();
                    filterText.title = this._grid.get_GridInfo().ColumnNameMapping[(this._grid.get_DefaultGroupedAndSortedColumns()[i]).ColumnName.toString()].toString();
                }
                else {
                    filterText.innerText = (this._grid.get_DefaultGroupedAndSortedColumns()[i]).ColumnName.toString();
                    filterText.title = (this._grid.get_DefaultGroupedAndSortedColumns()[i]).ColumnName.toString();
                }
                filterText.setAttribute('ColumnName', this._grid.get_DefaultGroupedAndSortedColumns()[i].toString());
                filterText.className = 'xlClearFilterText';
                filterItemDiv.appendChild(filterText);
                GroupBodyDefault.appendChild(filterItemDiv);
            }
            if (this._grid.get_DefaultGroupedAndSortedColumns().length > 4) {
                eval('$(\"#' + this._grid.get_id() + '_clearGroupBodyDefault' + '\").slimscrollNew({height : \'' + 88 + 'px\', size:\'4px\' })');
            }
            document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv').style.border = '1px solid #DBDBDB';
        }
        if (this._grid.filter.filteredColumns.length > 0 || this._grid.group._groupedColumns.length > 0 || this._grid.sort.sortedColumns.length > 0 || (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null && this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo.length > 0)) {
            if (document.getElementById(this._grid.get_id() + '_resetDiv') == null) {
                var resetDiv = document.createElement('DIV');
                resetDiv.className = 'xlResetToDefault';
                resetDiv.innerText = 'Reset';
                resetDiv.id = this._grid.get_id() + '_resetDiv';
                document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv').appendChild(resetDiv);
            }
            else {
                document.getElementById(this._grid.get_id() + '_resetDiv').style.display = '';
            }
        }
        else {
            if (document.getElementById(this._grid.get_id() + '_resetDiv') != null) {
                document.getElementById(this._grid.get_id() + '_resetDiv').style.display = 'none';
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ManageHeader

com.ivp.rad.controls.neogrid.scripts.ManageHeader = function com_ivp_rad_controls_neogrid_scripts_ManageHeader(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_isResizing" type="Boolean">
    /// </field>
    /// <field name="_isResized" type="Boolean">
    /// </field>
    /// <field name="_resized" type="Boolean">
    /// </field>
    /// <field name="_initialPosition" type="Number" integer="true">
    /// </field>
    /// <field name="_targetHeader" type="Object" domElement="true">
    /// </field>
    /// <field name="_resizing" type="Object" domElement="true">
    /// </field>
    this._grid = grid;
}
com.ivp.rad.controls.neogrid.scripts.ManageHeader.prototype = {
    _grid: null,

    initializeColumnHeader: function com_ivp_rad_controls_neogrid_scripts_ManageHeader$initializeColumnHeader(headerCell) {
        /// <param name="headerCell" type="Object" domElement="true">
        /// </param>
        var args = new com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs(Number.parseInvariant(headerCell.getAttribute('index').toString()), headerCell.getAttribute('columnName').toString(), headerCell);
        this._generateHeaderCellHandler(args);
    },

    _generateHeaderCellHandler: function com_ivp_rad_controls_neogrid_scripts_ManageHeader$_generateHeaderCellHandler(args) {
        /// <param name="args" type="com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs">
        /// </param>
        var handler = this._grid.eventHandlerManager.get_eventsList().getHandler(com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventHeaderCellCellCreated);
        if (handler != null) {
            handler(this, args);
        }
    },

    _isResizing: false,
    _isResized: false,
    _resized: false,
    _initialPosition: 0,
    _targetHeader: null,
    _resizing: null,

    _startResizing: function com_ivp_rad_controls_neogrid_scripts_ManageHeader$_startResizing(e, header) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <param name="header" type="Object" domElement="true">
        /// </param>
        this._isResizing = true;
        var left = e.clientX + document.documentElement.scrollLeft - this._grid.filter._getElementX(document.getElementById(this._grid.get_id()));
        this._initialPosition = left;
        this._targetHeader = eval('$(header).closest(\'div[columnname]\')[0]');
        this._resizing = document.createElement('DIV');
        this._resizing.className = 'resizingMovingDiv';
        this._grid.get_element().appendChild(this._resizing);
        this._resizing.style.height = this._grid.get_element().clientHeight + 'px';
    },

    _doResizing: function com_ivp_rad_controls_neogrid_scripts_ManageHeader$_doResizing(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._isResizing) {
            var left = e.clientX + document.documentElement.scrollLeft - this._grid.filter._getElementX(document.getElementById(this._grid.get_id()));
            this._resizing.style.left = left + 'px';
            document.body.style.cursor = 'e-resize !important';
            eval('var target = document.getElementById(\"' + this._grid.get_element().id + '\"); if(target.style.MozUserSelect!=\"undefined\") target.style.MozUserSelect=\"none\";');
        }
    },

    _endResizing: function com_ivp_rad_controls_neogrid_scripts_ManageHeader$_endResizing(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._isResizing) {
            this._grid.elementInfo.get_loading().style.display = '';
            com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(true);
            if (this._resizing != null) {
                this._grid.get_element().removeChild(this._resizing);
            }
            var left = e.clientX + document.documentElement.scrollLeft - this._grid.filter._getElementX(document.getElementById(this._grid.get_id()));
            var widthDiff = this._initialPosition - left;
            var currentWidth = this._targetHeader.clientWidth;
            if (this._targetHeader.style.width !== '') {
                var regEx = new RegExp('[0-9]+', 'gi');
                currentWidth = Number.parseInvariant(this._targetHeader.style.width.match(regEx)[0]);
            }
            if (currentWidth - widthDiff < 45) {
                widthDiff = 45;
            }
            else {
                widthDiff = currentWidth - widthDiff;
            }
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RESIZE_COLUMN, widthDiff + '|' + this._targetHeader.getAttribute('columnName').toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RESIZE_COLUMN);
        }
        this._isResizing = false;
        this._initialPosition = 0;
        this._targetHeader = null;
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ManageLayouts

com.ivp.rad.controls.neogrid.scripts.ManageLayouts = function com_ivp_rad_controls_neogrid_scripts_ManageLayouts(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_info" type="com.ivp.rad.controls.neogrid.scripts.info.LayoutInfo">
    /// </field>
    /// <field name="_existingLayouts" type="Array">
    /// </field>
    /// <field name="_existingLayoutsName" type="Array">
    /// </field>
    /// <field name="_layouts" type="Array">
    /// </field>
    /// <field name="_defaultdivcounter" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_shareddivcounter" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="layoutNotPresent" type="Boolean">
    /// </field>
    /// <field name="_popupHTML" type="String">
    /// </field>
    /// <field name="_popupLayoutHTML" type="String">
    /// </field>
    this._existingLayoutsName = [];
    this._layouts = [];
    this._grid = grid;
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
    this._info = new com.ivp.rad.controls.neogrid.scripts.info.LayoutInfo();
}
com.ivp.rad.controls.neogrid.scripts.ManageLayouts.prototype = {
    _grid: null,
    _info: null,
    _existingLayouts: null,
    layoutNotPresent: false,

    clearLayoutDiv: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$clearLayoutDiv(layoutDiv) {
        /// <param name="layoutDiv" type="Object" domElement="true">
        /// </param>
        layoutDiv.innerHTML = '';
    },

    _clearDropDown: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_clearDropDown(dropDown) {
        /// <param name="dropDown" type="Object" domElement="true">
        /// </param>
        var childCount = dropDown.childNodes.length;
        for (var i = 0; i < childCount; i++) {
            dropDown.removeChild(dropDown.options[0]);
        }
    },

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        this._createLayoutPopup();
        if (serviceInfo.serializedInfo.LayoutInfo.AllLayouts.length > 0)
        {
            $("#DefaultViewDiv").removeClass("RADHidden");
        }
        //$("#addNewLayoutParent").style.display = 'none';
        com.ivp.rad.controls.neogrid.scripts.ManageLayouts._defaultdivcounter = 0;
        com.ivp.rad.controls.neogrid.scripts.ManageLayouts._shareddivcounter = 0;
        var defaultFlag = false;
        this._clearDropDown(this._grid.elementInfo.get_manageLayoutDropDown());
        this._grid.elementInfo.get_manageLayoutDropDown().style.display = 'none';
        document.getElementById('existingDefaultLayout').innerHTML = '<div id=\"xlDefaultLayout\" class=\"xlDefaultLayout\" style=\"display:block;\">Default</div>';
        document.getElementById('existingSharedLayout').innerHTML = '';
        var hiddenLayoutFieldsForPopUp = '';
        var option = this._grid.elementHelper.get_optionElement();
        option.value = '';
        option.text = '-- Select One --';
        this._grid.raddomElement.addOptionElement(this._grid.elementInfo.get_manageLayoutDropDown(), option);
        var layout = null;
        this._existingLayouts = serviceInfo.serializedInfo.LayoutInfo.AllLayouts;
        if (this._existingLayouts != null) {
            Array.forEach(serviceInfo.serializedInfo.LayoutInfo.AllLayouts, Function.createDelegate(this, function (o) {
                layout = o;
                option = this._grid.elementHelper.get_optionElement();
                option.value = layout.UserName + ' : ' + layout.Name;
                option.text = layout.UserName + ' : ' + layout.Name;
                option.selected = layout.IsSelected;
                var existingLayout = this._grid.elementHelper.get_divElement();
                existingLayout.style.cursor = 'pointer';
                var rightArrow = this._grid.elementHelper.get_divElement();
                existingLayout.style.backgroundColor = '#FDFDFD';
                var existingLayoutText = this._grid.elementHelper.get_divElement();
                existingLayoutText.id = this._grid.elementIDManager.get_manageLayoutDivId() + '_existingLayout';
                existingLayoutText.innerText = layout.Name;
                existingLayoutText.title = layout.Name;
                existingLayout.id = layout.UserName + ' : ' + layout.Name;
                var deleteLayout = this._grid.elementHelper.get_divElement();
                var saveApplyLayout = this._grid.elementHelper.get_divElement();
                var checkBoxesParent = this._grid.elementHelper.get_divElement();
                checkBoxesParent.style.display = 'none';
                var defaultCheckBoxLabel = this._grid.elementHelper.get_divElement();
                defaultCheckBoxLabel.innerText = 'Default';
                var defaultCheckBox = null;
                defaultCheckBox = this._grid.elementHelper.get_inputButtonElement();
                ++com.ivp.rad.controls.neogrid.scripts.ManageLayouts._defaultdivcounter;
                ++com.ivp.rad.controls.neogrid.scripts.ManageLayouts._shareddivcounter;
                defaultCheckBox.id = this._grid.elementIDManager.get_manageLayoutDivId() + '_defaultCheckBoxExpand' + '_' + com.ivp.rad.controls.neogrid.scripts.ManageLayouts._defaultdivcounter;
                defaultCheckBox.setAttribute('type', 'checkbox');
                defaultCheckBox.setAttribute('data-toggle', 'toggle');
                defaultCheckBox.setAttribute('data-size', 'mini');
                defaultCheckBox.setAttribute('data-onstyle', 'info');
                var sharedCheckBoxLabel = this._grid.elementHelper.get_divElement();
                sharedCheckBoxLabel.innerText = 'Shared';
                var sharedCheckBox = this._grid.elementHelper.get_inputButtonElement();
                sharedCheckBox.id = this._grid.elementIDManager.get_manageLayoutDivId() + '_sharedCheckBoxExpand' + '_' + com.ivp.rad.controls.neogrid.scripts.ManageLayouts._shareddivcounter;
                sharedCheckBox.setAttribute('type', 'checkbox');
                sharedCheckBox.setAttribute('data-toggle', 'toggle');
                sharedCheckBox.setAttribute('data-size', 'mini');
                sharedCheckBox.setAttribute('data-onstyle', 'info');
                saveApplyLayout.id = this._grid.elementIDManager.get_manageLayoutDivId() + '_btnSaveLayout';
                existingLayout.className = 'existingLayoutApplyTexture';
                document.getElementById('existingSharedLayout').appendChild(existingLayout);
                option.setAttribute('isdefault', false);
                if (layout.IsDefault) {
                    existingLayout.className = 'existingLayoutApplyTexture existingLayoutAppend';
                    existingLayout.style.borderBottom = '1px solid #EEEEEE';
                    checkBoxesParent.className = 'xlgridcheckBoxesParentExpandDefault';
					if(o.UserName == this._grid.get_GridInfo().UserId)
						defaultFlag = true;
                    checkBoxesParent.style.paddingLeft = '42px';
                    defaultCheckBoxLabel.className = 'xlgriddefaultviewdefaultCheckBoxLabelExpand';
                    defaultCheckBox.style.top = '0px';
					if(o.UserName == this._grid.get_GridInfo().UserId)
						defaultCheckBox.className = 'xlgriddefaultviewdDefaultCheckBoxExpand fa fa-check';
					else
						defaultCheckBox.className = 'xlgriddefaultviewdDefaultCheckBoxExpand';
                    sharedCheckBoxLabel.className = 'xlgriddefaultviewdsharedCheckBoxLabelExpand';
                    sharedCheckBox.className = 'xlgriddefaultviewdSharedCheckBoxExpand';
                    sharedCheckBox.style.top = '3px';
                    checkBoxesParent.appendChild(defaultCheckBoxLabel);
                    checkBoxesParent.appendChild(defaultCheckBox);
                    checkBoxesParent.appendChild(sharedCheckBoxLabel);
                    checkBoxesParent.appendChild(sharedCheckBox);
                    checkBoxesParent.style.top = '-35px';
                    existingLayout.appendChild(rightArrow);
                    deleteLayout.className = 'xlgriddefaultlayoutdeleteicon fa fa-trash-o';
                    saveApplyLayout.className = 'xlgridDefaultLayoutSave';
                    existingLayout.appendChild(saveApplyLayout);
                    existingLayout.appendChild(deleteLayout);
                    existingLayoutText.className = 'existingDefaultLayoutsIndividual defaultLayout';
                    existingLayout.appendChild(existingLayoutText);
                    existingLayout.appendChild(checkBoxesParent);
                    existingLayout.style.marginLeft = '-10px';
                    existingLayout.style.marginTop = '0px ! important';
                    if (layout.IsSelected) {
                        document.getElementById('existingDefaultLayout').style.backgroundColor = '#F5F4F4';
                        existingLayout.style.backgroundColor = '#F5F4F4';
                        saveApplyLayout.innerText = 'Save';
                        existingLayout.style.color = '#32BDE8';
                        existingLayoutText.style.color = '#32BDE8';
                        rightArrow.className = 'xlgridlayoutDefaultArrow fa fa-caret-down';
                        if (existingLayout.lastChild.style.display === 'none') {
                            existingLayout.lastChild.style.display = '';
                        }
                        else {
                            existingLayout.lastChild.style.display = 'none';
                        }
                    }
                    else {
                        document.getElementById('existingDefaultLayout').style.backgroundColor = '#FDFDFD';
                        rightArrow.className = 'xlgridlayoutDefaultArrow fa fa-caret-right';
                        existingLayout.lastChild.style.display = 'none';
                        existingLayoutText.style.color = '#5E5E5E';
                        saveApplyLayout.innerText = 'Apply';
                        existingLayout.style.color = '#5E5E5E';
                    }
                    existingLayout.style.padding = '5px 0px';
                    option.style.backgroundColor = '#c6dff7';
					if(o.UserName == this._grid.get_GridInfo().UserId)
						option.setAttribute('isdefault', true);
					else
						option.setAttribute('isdefault', false);
                    hiddenLayoutFieldsForPopUp += layout.Name + ',';
					if(o.UserName == this._grid.get_GridInfo().UserId){
						document.getElementById('existingDefaultLayout').appendChild(existingLayout);
						document.getElementById('existingDefaultLayout').style.marginTop = '0px ! important';
						eval('$(\'#' + this._grid.elementIDManager.get_manageLayoutDivId() + '_defaultCheckBoxExpand_' + com.ivp.rad.controls.neogrid.scripts.ManageLayouts._defaultdivcounter + '\'' + ').bootstrapToggle(\'on\');');
					}
					else{
						eval('$(\'#' + this._grid.elementIDManager.get_manageLayoutDivId() + '_defaultCheckBoxExpand_' + com.ivp.rad.controls.neogrid.scripts.ManageLayouts._defaultdivcounter + '\'' + ').bootstrapToggle(\'off\');');
					}
					
                    
                    if (!layout.IsShared) {
                        eval('$(\'#' + this._grid.elementIDManager.get_manageLayoutDivId() + '_sharedCheckBoxExpand_' + com.ivp.rad.controls.neogrid.scripts.ManageLayouts._defaultdivcounter + '\'' + ').bootstrapToggle(\'off\');');
                    }
                    else {
                        eval('$(\'#' + this._grid.elementIDManager.get_manageLayoutDivId() + '_sharedCheckBoxExpand_' + com.ivp.rad.controls.neogrid.scripts.ManageLayouts._defaultdivcounter + '\'' + ').bootstrapToggle(\'on\');');
                    }
                }
                else {
                    checkBoxesParent.className = 'xlgridcheckBoxesParentExpand';
                    existingLayout.style.marginBottom = '5px';
                    existingLayout.style.marginTop = '5px';
                    existingLayout.style.borderTop = '1px solid #EEEEEE';
                    existingLayout.style.borderBottom = '1px solid #EEEEEE';
                    existingLayout.style.paddingTop = '10px';
                    existingLayout.style.paddingBottom = '15px';
                    checkBoxesParent.style.paddingLeft = '28px';
                    defaultCheckBoxLabel.className = 'xlgriddefaultCheckBoxLabelExpand';
                    defaultCheckBox.className = 'xlgridDefaultCheckBoxExpand';
                    sharedCheckBoxLabel.className = 'xlgridsharedCheckBoxLabelExpand';
                    checkBoxesParent.appendChild(defaultCheckBoxLabel);
                    checkBoxesParent.appendChild(defaultCheckBox);
                    checkBoxesParent.appendChild(sharedCheckBoxLabel);
                    checkBoxesParent.appendChild(sharedCheckBox);
                    checkBoxesParent.style.top = '-30px';
                    existingLayout.appendChild(rightArrow);
                    deleteLayout.className = 'xlgridlayoutdeleteicon fa fa-trash-o';
                    saveApplyLayout.className = 'xlgridLayoutSave';
                    existingLayout.appendChild(saveApplyLayout);
                    existingLayout.appendChild(deleteLayout);
                    existingLayoutText.className = 'existingLayoutsIndividual sharedLayout';
                    existingLayout.appendChild(existingLayoutText);
                    existingLayout.appendChild(checkBoxesParent);
                    if (layout.IsShared) {
                        sharedCheckBox.className = 'xlgridSharedCheckBoxExpand fa fa-check';
                        sharedCheckBox.style.top = '0px';
                        eval('$(\'#' + this._grid.elementIDManager.get_manageLayoutDivId() + '_defaultCheckBoxExpand_' + com.ivp.rad.controls.neogrid.scripts.ManageLayouts._defaultdivcounter + '\'' + ').bootstrapToggle(\'off\');');
                        eval('$(\'#' + this._grid.elementIDManager.get_manageLayoutDivId() + '_sharedCheckBoxExpand_' + com.ivp.rad.controls.neogrid.scripts.ManageLayouts._shareddivcounter + '\'' + ').bootstrapToggle(\'on\');');
                    }
                    else {
                        sharedCheckBox.className = 'xlgridSharedCheckBoxExpand';
                        sharedCheckBox.style.top = '3px';
                        eval('$(\'#' + this._grid.elementIDManager.get_manageLayoutDivId() + '_defaultCheckBoxExpand_' + com.ivp.rad.controls.neogrid.scripts.ManageLayouts._defaultdivcounter + '\'' + ').bootstrapToggle(\'off\');');
                        eval('$(\'#' + this._grid.elementIDManager.get_manageLayoutDivId() + '_sharedCheckBoxExpand_' + com.ivp.rad.controls.neogrid.scripts.ManageLayouts._shareddivcounter + '\'' + ').bootstrapToggle(\'off\');');
                    }
                    if (layout.IsSelected) {
                        existingLayoutText.style.color = '#32BDE8';
                        existingLayout.style.backgroundColor = '#F5F4F4';
                        rightArrow.className = 'xlgridlayoutSharedArrow fa fa-caret-down';
                        if (existingLayout.lastChild.style.display === 'none') {
                            existingLayout.lastChild.style.display = '';
                        }
                        else {
                            existingLayout.lastChild.style.display = 'none';
                        }
                        saveApplyLayout.innerText = 'Save';
                        existingLayout.style.color = '#32BDE8';
                    }
                    else {
                        existingLayoutText.style.color = '#5E5E5E';
                        rightArrow.className = 'xlgridlayoutSharedArrow fa fa-caret-right';
                        existingLayout.lastChild.style.display = 'none';
                        saveApplyLayout.innerText = 'Apply';
                        existingLayout.style.color = 'black';
                    }
                    existingLayout.style.paddingBottom = '5px';
                    if (layout.IsSelected) {
                        eval('$(\'#existingSharedLayout\').prepend(existingLayout)');
                    }
                    else {
                        document.getElementById('existingSharedLayout').appendChild(existingLayout);
                    }
                    option.setAttribute('isdefault', false);
                }
                this._grid.raddomElement.addOptionElement(this._grid.elementInfo.get_manageLayoutDropDown(), option);
                if(layout.IsShared)
                {
                    if(layout.UserName.toString() != this._grid.get_GridInfo().UserId.toString())
                    {
                        $(sharedCheckBox.parentElement).css("pointer-events","none");
                        $(defaultCheckBox.parentElement).css("pointer-events", "none");
                        if (saveApplyLayout.innerText == "Save") {
                            $(saveApplyLayout).attr("IsShared", "true");
                        }
                    }
                  
                }
                if (saveApplyLayout.innerText == "Save") {
                    $($(saveApplyLayout).siblings()[0]).css("display","none");
                }
            }));
            if (!defaultFlag) {
                document.getElementById('existingDefaultLayout').style.display = 'none';
            }
            if (serviceInfo.serializedInfo.LayoutInfo.ViewName == null || serviceInfo.serializedInfo.LayoutInfo.ViewName === '') {
                this._grid.elementInfo.get_manageLayoutDropDown().value = '';
            }
            this._info = serviceInfo.serializedInfo.LayoutInfo;
            if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_MY_VIEW) {
                var message = '';
                switch (this._info.Action) {
                    case com.ivp.rad.controls.neogrid.scripts.info.Action.Add:
                        message = 'Layout Added successfully.';
                        break;
                    case com.ivp.rad.controls.neogrid.scripts.info.Action.Delete:
                        for (var i = 0; i < serviceInfo.serializedInfo.LayoutInfo.AllLayouts.length; i++) {
                            if ((serviceInfo.serializedInfo.LayoutInfo.AllLayouts[i]).Name === serviceInfo.serializedInfo.LayoutInfo.ViewName) {
                                if (this._grid.get_GridInfo().UserId === (serviceInfo.serializedInfo.LayoutInfo.AllLayouts[i]).UserName) {
                                    message = 'Layout Deleted successfully.';
                                }
                                else {
                                    message = 'Layout Can\'t Be Deleted.';
                                }
                            }
                        }
                        message = 'Layout Deleted successfully.';
                        this._grid.refreshGrid();
                        break;
                    case com.ivp.rad.controls.neogrid.scripts.info.Action.Import:
                        message = 'Layout Imported successfully.';
                        break;
                    case com.ivp.rad.controls.neogrid.scripts.info.Action.Update:
                        message = 'Layout Updated successfully.';
                        break;
                }
                this._grid.showSuccessMessage(message);
            }
            else if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW) {
                this._grid.showSuccessMessage('View ' + this._info.ViewName + ' Loaded successfully');
            }
        }
        eval('$(\'#defaultCheckBoxInputNew\').bootstrapToggle(\'destroy\');');
        eval('$(\'#sharedCheckBoxInputNew\').bootstrapToggle(\'destroy\');');
        eval('$(\'#defaultCheckBoxInputNew\').bootstrapToggle(\'off\');');
        eval('$(\'#sharedCheckBoxInputNew\').bootstrapToggle(\'off\');');
    },

    _popupHTML: '<table class=\"\" style=\"width: 100%; \" border=\"0\" cellspacing=\"0\"cellpadding=\"0\" align=\"center\"><tbody><tr><td class=\"panelContent\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"100%\" align=\"center\"><tbody><tr><td class=\"panelHead\" colspan=\"3\"><span id=\"{0}_lblHeader\">Add</span> User Layout</td></tr><tr><td class=\"panelCells\"><div style=\"padding:2px;\"><input id=\"{0}_rdAdd\" style=\"width:70px;\" value=\"Add\" class=\"btn btn-default btn-xs xllayoutbuttons\" type=\"button\" /></div><div style=\"padding:2px;\"><input id=\"{0}_rdUpdate\" style=\"width:70px;\" value=\"Update\" class=\"btn btn-default btn-xs xllayoutbuttons\" type=\"button\" /></div><div style=\"padding:2px;\"><input id=\"{0}_rdDelete\" style=\"width:70px;\" value=\"Delete\" class=\"btn btn-default btn-xs xllayoutbuttons\" type=\"button\" /></div><div style=\"padding:2px;\"><input id=\"{0}_rdImport\" style=\"width:70px;\" value=\"Import\" class=\"btn btn-default btn-xs xllayoutbuttons\" type=\"button\" /></div></td><td valign=\"top\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"100%\" align=\"center\" style=\"padding-top: 10px; \"><tr style=\"display: none; \"><td class=\"panelCells\" style=\"padding-top:10px;width:127px;font-family: \'Istok Web\', sans-serif;\">Layout To Import :</td><td class=\"panelCells\" style=\"padding-top:10px;\"><select style=\"width: 200px; \" id=\"{0}_ddlSharedViews\" class=\"input\"></select></td></tr><tr><td class=\"panelCells\" style=\"width:110px;padding-top:10px;font-family: \'Istok Web\', sans-serif;\">Layout Name :</td><td class=\"panelCells\" style=\"padding-top:10px;\"><input id=\"{0}_txtViewName\" style=\"width:101px; height:18px; padding-top:2px; padding-bottom:2px; font-size:12px;\" maxlength=\"100\" class=\"form-control\" name=\"{0}_txtViewName\" /><select style=\"width: 200px; display: none\" id=\"{0}_ddlSavedViews\" class=\"input\"></select></td></tr><tr><td class=\"panelCells\" style=\"padding-top:10px;\"><input id=\"{0}_chkIsDefaultView\" type=\"checkbox\" name=\"{0}_chkIsDefaultView\" value=\"false\" checked=\"checked\" /><label for=\"{0}_chkIsDefaultView\" id=\"{0}_lbl_chkIsDefaultView\" style=\"font-weight: normal;vertical-align: middle;line-height: 12px;padding-left: 2px;padding-bottom: 0px;font-family: \'Istok Web\', sans-serif;\" title=\"Select to mark this layout as default.\">DefaultLayout</label></td><td class=\"panelCells\" style=\"padding-top:10px;\"><input id=\"{0}_chkIsSharedView\" type=\"checkbox\" value=\"false\" name=\"{0}_chkIsSharedView\" /><label for=\"{0}_chkIsSharedView\" id=\"{0}_lbl_chkIsSharedView\" title=\"Select to mark this layout as shared.\" style=\"font-weight: normal;vertical-align: middle;line-height: 12px;padding-left: 2px;padding-bottom: 0px;font-family: \'Istok Web\', sans-serif;\">SharedLayout</label></td></tr><tr style=\"padding-top:10px;width:300px;\"><td colspan=\"2\" class=\"errorDiv\" style=\"padding-top:10px;\"><ul class=\"errorDiv\" style=\"text-align: left;width:325px;border-radius:4px;margin-left:0px;border:1px solid #e2a7a7;background-color:#ecd5d5; color: #ff0000\"><i class=\"fa fa-times\" style=\"float: left; padding-right: 10px;padding-top: 2px;padding-left:10px;\"></i><li id=\"{0}_lblErrorSaveView\">hi</li></ul></td></tr></table></td></tr><tr><td style=\"text-align: center\" class=\"panelFoot\" colspan=\"3\"><input id=\"{0}_btnSaveLayout\" class=\"btn btn-default btn-xs xllayoutbuttons\" value=\" Ok \" type=\"button\"name=\"{0}_btnSaveLayout\" /><input id=\"{0}_btnCancel\" style=\"position:relative; left:10px;\" class=\"btn btn-default btn-xs xllayoutbuttons\"value=\"Cancel\" type=\"button\" name=\"{0}_btnCancel\" /></td></tr></tbody></table></td></tr></tbody></table>',

    _createLayoutPopup_bak: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_createLayoutPopup_bak() {
        var divLayout = this._grid.elementHelper.get_divElement();
        divLayout.id = this._grid.elementIDManager.get_manageLayoutDivId();
        divLayout.innerHTML = String.format(this._popupHTML, divLayout.id);
        this._grid.elementInfo.get_childGridDiv().appendChild(divLayout);
        divLayout.style.position = 'absolute';
        divLayout.style.width = '30%';
        divLayout.style.zIndex = 32760;
        divLayout.className = 'xlManageLayout';
        divLayout.style.top = divLayout.offsetHeight + 'px';
        divLayout.style.left = ((document.documentElement.offsetWidth / 2) - (divLayout.offsetWidth / 2)) + 'px';
        divLayout.style.display = 'none';
    },

    _popupLayoutHTML: '<div class=\"classForShowHide xlLayoutHeader\"><div class=\"xlLayoutPopUpHeading\">Layout</div><div id=\"{0}_btnCancel\" class=\"xlLayoutClose fa fa-times\"></div></div><div id =\"AddNDefaultParent\"><div id=\"addNewLayout\" class=\"xlsaveCurrentLayout\">Create New Layout</div><div id=\"DefaultViewDiv\" class=\"RADDefaultViewDiv RADHidden\">Default View</div></div><div id=\"addNewLayoutParent\" style="display:none !important;" class=\"xlgridaddnewlayoutparent\"><div id=\"addLayoutHeading\" class=\"xlgridlayoutHeading\">Layout Name</div><div id=\"layoutNameText\" contenteditable=true class=\"xlgridLayoutNameText\"></div><div id=\"defaultsharedhiddenparent\" class=\"defaultsharedhiddenparent\"><div id=\"defaultCheckboxLabel\" class=\"xlgriddefaultCheckBoxLabel\">Default</div><input id=\"defaultCheckBoxInputNew\" type=\"checkbox\" class=\"xlgriddefaultCheckBox\"></input><div id=\"sharedCheckboxLabel\" class=\"xlgridsharedCheckBoxLabel\">Shared</div><input id=\"sharedCheckBoxInputNew\" type=\"checkbox\" class=\"xlgridsharedCheckBox\"></input></div><div id=\"saveNewLayout\" class=\"xlgridsaveNewLayout\">Save</div><div id=\"cancelNewLayout\" class=\"xlgridcancelNewLayout\">Cancel</div></div><div id=\"layoutParent\" style=\"max-height:350px;overflow-y:auto;border-top:1px solid #EEEEEE;margin-top:15px !important;\"><div id=\"existingDefaultLayout\" style=\"margin-top:0px !important;\"class=\"existingDefaultLayout\"><div id=\"xlDefaultLayout\" class=\"xlDefaultLayout\" style=\"display:block;\">Default</div></div><div id=\"existingSharedLayout\" class=\"existingSharedLayout\"></div></div>',

    _createLayoutPopup: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_createLayoutPopup() {
        var maindivLayout = null;
        if (document.getElementById(this._grid.elementIDManager.get_manageLayoutDivId() + '_maindivLayout') == null) {
            maindivLayout = this._grid.elementHelper.get_divElement();
            maindivLayout.id = this._grid.elementIDManager.get_manageLayoutDivId() + '_maindivLayout';
        }
        else {
            maindivLayout = document.getElementById(this._grid.elementIDManager.get_manageLayoutDivId() + '_maindivLayout');
        }
        var divLayout = null;
        if (document.getElementById(this._grid.elementIDManager.get_manageLayoutDivId()) == null) {
            divLayout = this._grid.elementHelper.get_divElement();
            divLayout.id = this._grid.elementIDManager.get_manageLayoutDivId();
            maindivLayout.appendChild(divLayout);
        }
        else {
            divLayout = document.getElementById(this._grid.elementIDManager.get_manageLayoutDivId());
        }
        divLayout.innerHTML = String.format(this._popupLayoutHTML, divLayout.id);
        this._grid.elementInfo.get_childGridDiv().appendChild(maindivLayout);
        document.getElementById('defaultCheckBoxInputNew').setAttribute('data-toggle', 'toggle');
        document.getElementById('defaultCheckBoxInputNew').setAttribute('data-size', 'mini');
        document.getElementById('defaultCheckBoxInputNew').setAttribute('data-onstyle', 'info');
        document.getElementById('sharedCheckBoxInputNew').setAttribute('data-toggle', 'toggle');
        document.getElementById('sharedCheckBoxInputNew').setAttribute('data-size', 'mini');
        document.getElementById('sharedCheckBoxInputNew').setAttribute('data-onstyle', 'info');
        maindivLayout.style.position = 'absolute';
        maindivLayout.style.backgroundColor = '#FCFCFC';
        maindivLayout.style.zIndex = 32760;
        maindivLayout.style.top = '30px';
        maindivLayout.style.width = '300px';
        divLayout.style.zIndex = 32760;
        divLayout.className = 'xlManageLayoutNew';
        divLayout.style.display = 'none';
        divLayout.style.top = '60px';
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(maindivLayout);
        
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(maindivLayout, 'click', Function.createDelegate(this, this._layoutDivHandler));
    },

    _layoutDivHandler: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_layoutDivHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var className = document.getElementById(this._grid.get_id()).className;
        if ((document.getElementById(this._grid.get_id()).className.toString().indexOf('xlOpacityForGrid') === -1)) {
            document.getElementById(this._grid.get_id()).className = className + 'xlOpacityForGrid';
        }
        if (e.target.className === 'xlgridlayoutSharedArrow fa fa-caret-right' || e.target.className === 'xlgridlayoutDefaultArrow fa fa-caret-right') {
        }
        if (e.target.className === 'xlgridLayoutSave' || e.target.className === 'xlgridDefaultLayoutSave') {
            if (e.target.innerText !== 'Apply') {
                this._info.Action = com.ivp.rad.controls.neogrid.scripts.info.Action.Update;
                if (eval('$(\'#' + e.target.parentNode.lastChild.childNodes[1].childNodes[0].id + '\'' + ').prop(\"checked\")') && !eval('$(\'#' + e.target.parentNode.lastChild.childNodes[3].childNodes[0].id + '\'' + ').prop(\"checked\")')) {
                    this._info.IsDefault = true;
                    this._info.IsShared = false;
                }
                if (!eval('$(\'#' + e.target.parentNode.lastChild.childNodes[1].childNodes[0].id + '\'' + ').prop(\"checked\")') && eval('$(\'#' + e.target.parentNode.lastChild.childNodes[3].childNodes[0].id + '\'' + ').prop(\"checked\")')) {
                    this._info.IsDefault = false;
                    this._info.IsShared = true;
                }
                if (eval('$(\'#' + e.target.parentNode.lastChild.childNodes[1].childNodes[0].id + '\'' + ').prop(\"checked\")') && eval('$(\'#' + e.target.parentNode.lastChild.childNodes[3].childNodes[0].id + '\'' + ').prop(\"checked\")')) {
                    this._info.IsDefault = true;
                    this._info.IsShared = true;
                }
                if (!eval('$(\'#' + e.target.parentNode.lastChild.childNodes[1].childNodes[0].id + '\'' + ').prop(\"checked\")') && !eval('$(\'#' + e.target.parentNode.lastChild.childNodes[3].childNodes[0].id + '\'' + ').prop(\"checked\")')) {
                    this._info.IsDefault = false;
                    this._info.IsShared = false;
                }
                if ($(e.target).attr("IsShared") == null)
                {
                    this._updateLayout(e);
                }
                else {
                    return;
                }
                
            }
            else {
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW, e.target.parentNode.id, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW);
            }
            document.getElementById(this._grid.get_id() + '_manageLayoutDivId').style.display = 'none';
            document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = '';
            document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').className = '';
            document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = '';
        }
        if (e.target.className === 'xlgridlayoutSharedArrow fa fa-caret-right') {
        }
        if (e.target.id === this._grid.elementIDManager.get_manageLayoutDivId() + '_btnCancel') {
            document.getElementById('addNewLayoutParent').style.display = 'none';
            document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = '';
            document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').className = '';
            document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = '';
            document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv_Table').className = '';
            document.getElementById('layoutParent').style.maxHeight = '350px';
            this._hideLayout(e);
        }
        if (e.target.className === 'xlgridlayoutdeleteicon fa fa-trash-o' || e.target.className === 'xlgriddefaultlayoutdeleteicon fa fa-trash-o') {
            this._info.Action = com.ivp.rad.controls.neogrid.scripts.info.Action.Delete;
            this._info.ViewName = e.target.parentNode.lastChild.previousSibling.innerText;
            var count = 0;
            for (var i = 0; i < this._existingLayouts.length; i++) {
               if ((' ' + (this._existingLayouts[i]).Name) === e.target.parentNode.id.split(':')[1]) {
                   this._info.IsShared = (this._existingLayouts[i]).IsShared;
                   this._info.IsDefault = (this._existingLayouts[i]).IsDefault;
                   if(this._grid.get_GridInfo().UserId == this._existingLayouts[i].UserName )
                   {
                       count++;
                   }
               }
           }
           if(count > 0)
               this._updateLayout(e);
        }
        if (e.target.id === 'addNewLayout') {
            this._info.Action = com.ivp.rad.controls.neogrid.scripts.info.Action.Add;
            document.getElementById('addNewLayoutParent').style.display = '';
            document.getElementById('addNewLayout').style.backgroundColor = '#F6F6F6';
            document.getElementById('addNewLayout').style.color = 'gray';
            document.getElementById('layoutNameText').innerText = '';
            eval('$(\'#defaultCheckBoxInputNew\').bootstrapToggle(\'off\');');
            eval('$(\'#sharedCheckBoxInputNew\').bootstrapToggle(\'off\');');
        }
        if (e.target.className === 'xlgridlayoutSharedArrow fa fa-caret-right' || e.target.className === 'xlgridlayoutDefaultArrow fa fa-caret-right' || e.target.className === 'xlgridlayoutSharedArrow fa fa-caret-down' || e.target.className === 'xlgridlayoutDefaultArrow fa fa-caret-down') {
            if ($(e.target).parent().find('#' + this._grid.get_id() + '_manageLayoutDivId_existingLayout').attr("title") != this._info.ViewName) {
                e.target.parentNode.lastChild.childNodes[1].childNodes[0].setAttribute('disabled', 'true');
                e.target.parentNode.lastChild.childNodes[3].childNodes[0].setAttribute('disabled', 'true');
            }
            if (e.target.className === 'xlgridlayoutSharedArrow fa fa-caret-right') {
                e.target.className = 'xlgridlayoutSharedArrow fa fa-caret-down';
                e.target.parentNode.lastChild.style.display = '';
            }
            else if (e.target.className === 'xlgridlayoutDefaultArrow fa fa-caret-right') {
                e.target.className = 'xlgridlayoutDefaultArrow fa fa-caret-down';
                e.target.parentNode.lastChild.style.display = '';
            }
            else if (e.target.className === 'xlgridlayoutSharedArrow fa fa-caret-down') {
                e.target.className = 'xlgridlayoutSharedArrow fa fa-caret-right';
                e.target.parentNode.lastChild.style.display = 'none';
            }
            else if (e.target.className === 'xlgridlayoutDefaultArrow fa fa-caret-down') {
                e.target.className = 'xlgridlayoutDefaultArrow fa fa-caret-right';
                e.target.parentNode.lastChild.style.display = 'none';
            }
        }
        if (e.target.className === 'existingLayoutApplyTexture' || e.target.className === 'existingLayoutApplyTexture existingLayoutAppend') {
             if (e.target.lastChild.style.display === 'none') {
               if ($(e.target).parent().find('#' + this._grid.get_id() + '_manageLayoutDivId_existingLayout').attr("title") != this._info.ViewName) {
                    e.target.lastChild.childNodes[1].childNodes[0].setAttribute('disabled', 'true');
                    e.target.lastChild.childNodes[3].childNodes[0].setAttribute('disabled', 'true');
                }
                e.target.lastChild.style.display = '';
				if($( e.target.firstChild).hasClass('fa-caret-right'))
				{
					$( e.target.firstChild).removeClass('fa-caret-right')
					$( e.target.firstChild).addClass('fa-caret-down')
				}
            }
            else {
                e.target.lastChild.style.display = 'none';
				if($( e.target.firstChild).hasClass('fa-caret-down'))
				{
					$( e.target.firstChild).removeClass('fa-caret-down')
					$( e.target.firstChild).addClass('fa-caret-right')
				}
            }
        }
        if (e.target.id === 'cancelNewLayout') {
            document.getElementById('addNewLayoutParent').style.display = 'none';
            document.getElementById('layoutParent').style.maxHeight = '350px';
            document.getElementById('addNewLayout').style.backgroundColor = '#40D3C0';
            document.getElementById('addNewLayout').style.color = 'white';
        }
        if (e.target.id === 'saveNewLayout') {
            this._info.Action = com.ivp.rad.controls.neogrid.scripts.info.Action.Add;
            this._info.ViewName = document.getElementById('layoutNameText').innerText;
            if (eval('$(\'#' + e.target.parentNode.childNodes[2].childNodes[1].childNodes[0].id + '\'' + ').prop(\"checked\")') && !eval('$(\'#' + e.target.parentNode.childNodes[2].childNodes[3].childNodes[0].id + '\'' + ').prop(\"checked\")')) {
                this._info.IsDefault = true;
                this._info.IsShared = false;
            }
            if (!eval('$(\'#' + e.target.parentNode.childNodes[2].childNodes[1].childNodes[0].id + '\'' + ').prop(\"checked\")') && !eval('$(\'#' + e.target.parentNode.childNodes[2].childNodes[3].childNodes[0].id + '\'' + ').prop(\"checked\")')) {
                this._info.IsDefault = false;
                this._info.IsShared = false;
            }
            if (eval('$(\'#' + e.target.parentNode.childNodes[2].childNodes[1].childNodes[0].id + '\'' + ').prop(\"checked\")') && eval('$(\'#' + e.target.parentNode.childNodes[2].childNodes[3].childNodes[0].id + '\'' + ').prop(\"checked\")')) {
                this._info.IsDefault = true;
                this._info.IsShared = true;
            }
            if (!eval('$(\'#' + e.target.parentNode.childNodes[2].childNodes[1].childNodes[0].id + '\'' + ').prop(\"checked\")') && eval('$(\'#' + e.target.parentNode.childNodes[2].childNodes[3].childNodes[0].id + '\'' + ').prop(\"checked\")')) {
                this._info.IsDefault = false;
                this._info.IsShared = true;
            }
            this._saveLayout(e, this._info.ViewName);
            document.getElementById('addNewLayoutParent').style.display = 'none';
            this._hideLayout(e);
            if (document.getElementById(this._grid.get_id() + '_mainParentMergedViewNew') != null) {
                eval('$(\"#' + this._grid.get_id() + '_mainParentMergedViewNew\").remove()');
            }
            if (document.getElementById(this._grid.get_id() + '_mergerParentDiv') != null) {
                eval('$(\"#' + this._grid.get_id() + '_mergerParentDiv\").remove()');
            }
        }
        if (e.target.id === 'defaultCheckBox') {
            if (e.target.className === 'xlgriddefaultCheckBox fa fa-check') {
                e.target.className = 'xlgriddefaultCheckBox';
            }
            else {
                e.target.className = 'xlgriddefaultCheckBox fa fa-check';
                this._info.IsDefault = true;
            }
        }
        if (e.target.id === 'sharedCheckBox') {
            if (e.target.className === 'xlgridsharedCheckBox fa fa-check') {
                e.target.className = 'xlgridsharedCheckBox';
            }
            else {
                e.target.className = 'xlgridsharedCheckBox fa fa-check';
                this._info.IsShared = true;
            }
        }
        if ($(e.target).hasClass("RADDefaultViewDiv"))
        {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW, "", com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW);
        }
        if (e.target.id === this._grid.elementIDManager.get_manageLayoutDivId() + '_sharedCheckBoxExpand') {
            if (e.target.className === 'xlgridSharedCheckBoxExpand fa fa-check') {
                e.target.className = 'xlgridSharedCheckBoxExpand';
                this._info.IsShared = false;
                e.target.style.top = '3px';
            }
            else if (e.target.className === 'xlgridSharedCheckBoxExpand') {
                e.target.className = 'xlgridSharedCheckBoxExpand fa fa-check';
                this._info.IsShared = true;
                e.target.style.top = '0px';
            }
            else if (e.target.className === 'xlgriddefaultviewdSharedCheckBoxExpand') {
                e.target.className = 'xlgriddefaultviewdSharedCheckBoxExpand fa fa-check';
                this._info.IsShared = true;
                e.target.style.top = '0px';
            }
            else if (e.target.className === 'xlgriddefaultviewdSharedCheckBoxExpand fa fa-check') {
                e.target.className = 'xlgriddefaultviewdSharedCheckBoxExpand';
                this._info.IsShared = false;
                e.target.style.top = '0px';
            }
        }
        if (e.target.id === this._grid.elementIDManager.get_manageLayoutDivId() + '_defaultCheckBoxExpand') {
            if (e.target.className === 'xlgridDefaultCheckBoxExpand fa fa-check') {
                e.target.className = 'xlgridDefaultCheckBoxExpand';
                this._info.IsDefault = false;
                e.target.style.top = '3px';
            }
            else if (e.target.className === 'xlgridDefaultCheckBoxExpand') {
                e.target.className = 'xlgridDefaultCheckBoxExpand fa fa-check';
                this._info.IsDefault = true;
                e.target.style.top = '0px';
            }
            else if (e.target.className === 'xlgriddefaultviewdDefaultCheckBoxExpand fa fa-check') {
                e.target.className = 'xlgriddefaultviewdDefaultCheckBoxExpand';
                this._info.IsDefault = false;
                e.target.style.top = '3px';
            }
            else if (e.target.className === 'xlgriddefaultviewdDefaultCheckBoxExpand') {
                e.target.className = 'xlgriddefaultviewdDefaultCheckBoxExpand fa fa-check';
                this._info.IsDefault = true;
                e.target.style.top = '0px';
            }
        }
    },

    _updateLayout: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_updateLayout(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_MY_VIEW, Sys.Serialization.JavaScriptSerializer.serialize(this._info), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_MY_VIEW);
        this._hideLayout(e);
    },

    _saveLayout_bak: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_saveLayout_bak(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var isValid = '';
        this._info.IsDefault = this._grid.elementInfo.get_chkIsDefaultView().checked;
        this._info.IsShared = this._grid.elementInfo.get_chkIsSharedView().checked;
        var regEx = new RegExp('^([\\w\\s]*)$');
        this._info.ViewName = this._grid.elementInfo.get_txtViewName().value;
        if (this._info.Action === com.ivp.rad.controls.neogrid.scripts.info.Action.Import) {
            this._info.ViewName = this._grid.elementInfo.get_ddlSharedLayout().value;
            this._info.NewViewName = this._grid.elementInfo.get_txtViewName().value;
            if (this._info.ViewName === '') {
                isValid = 'Select a Shared Layout to import.';
            }
        }
        else if (this._info.Action === com.ivp.rad.controls.neogrid.scripts.info.Action.Update || this._info.Action === com.ivp.rad.controls.neogrid.scripts.info.Action.Delete) {
            this._info.ViewName = this._grid.elementInfo.get_ddlSavedViews().value;
            if (this._info.ViewName === '') {
                isValid = 'Select a Layout to ' + ((this._info.Action === com.ivp.rad.controls.neogrid.scripts.info.Action.Delete) ? 'Delete.' : 'Update.');
            }
        }
        else if (this._info.ViewName !== '' && !regEx.test(this._info.ViewName)) {
            isValid = 'Please enter only alphanumeric characters.';
        }
        else if (this._info.NewViewName !== '' && !regEx.test(this._info.NewViewName)) {
            isValid = 'Please enter only alphanumeric characters.';
        }
        else {
            if (this._info.ViewName === '') {
                isValid = 'View Name cannot be left empty.';
            }
            else {
                if (Array.contains(this._layouts, this._info.ViewName)) {
                    isValid = 'A View with this name exists.';
                }
            }
        }
        if (isValid === '') {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_MY_VIEW, Sys.Serialization.JavaScriptSerializer.serialize(this._info), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_MY_VIEW);
            this._hideLayout(e);
        }
        else {
            this._grid.elementInfo.get_lblErrorSaveView().innerHTML = isValid;
            this._grid.elementInfo.get_lblErrorSaveView().parentNode.parentNode.style.display = '';
        }
    },

    _saveLayout: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_saveLayout(e, newLayout) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <param name="newLayout" type="String">
        /// </param>
        var isValid = '';
        Array.clear(this._layouts);
        for (var i = 0; i < this._existingLayouts.length; i++) {
            Array.add(this._layouts, (this._existingLayouts[i]).Name);
        }
        var regEx = new RegExp('^([\\w\\s]*)$');
        this._info.ViewName = e.target.parentNode.childNodes[1].innerText;
        if (this._info.ViewName !== '' && !regEx.test(this._info.ViewName)) {
            isValid = 'Please enter only alphanumeric characters.';
        }
        else if (this._info.NewViewName !== '' && !regEx.test(this._info.NewViewName)) {
            isValid = 'Please enter only alphanumeric characters.';
        }
        else {
            if (this._info.ViewName === '') {
                isValid = 'View Name cannot be left empty.';
            }
            else {
                if (this._layouts != null) {
                    if (Array.contains(this._layouts, this._info.ViewName)) {
                        isValid = 'A View with this name exists.';
                    }
                }
            }
        }
        if (isValid !== '') {
            this._grid.showFailureMessage(isValid);
            var className = document.getElementById(this._grid.get_id()).className;
            if ((document.getElementById(this._grid.get_id()).className.toString().indexOf('xlOpacityForGrid') !== -1)) {
                document.getElementById(this._grid.get_id()).className = '';
            }
            e.stopPropagation();
            e.preventDefault();
        }
        else if (isValid === '' && !com.ivp.rad.controls.neogrid.scripts.UpperHeader.isLayoutFromView) {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_MY_VIEW, Sys.Serialization.JavaScriptSerializer.serialize(this._info), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_MY_VIEW);
            this._hideLayout(e);
        }
        else {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_COFIGURATION_WITH_NEW_LAYOUT, Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsSequenceForLayouts) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsHiddenForLayouts) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsVisibleForLayouts) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsCustomFormatMappingForLayouts) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._info) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_COFIGURATION_WITH_NEW_LAYOUT);
            if (this._grid.upperHeader.newColumnsAdded) {
                eval(this._grid.get_GridInfo().RaiseGridCallBackForViews + '(\'' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.upperHeader.columnSequence) + '\',\'' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.upperHeader.columnsToBeHidden) + '\',\'' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.upperHeader.gridCustomFormatMapping) + '\',\'' + Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList) + '\')');
            }
            this._hideLayout(e);
        }
    },

    _manageLayout: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_manageLayout() {
        document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = 'xlOpacityForGrid';
        document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').className = 'xlOpacityForGrid';
        document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = 'xlOpacityForGrid';
        this._grid.elementInfo.get_manageLayoutDiv().style.display = '';
        if (document.getElementById('existingDefaultLayout').children.length > 0) {
            document.getElementById('existingDefaultLayout').style.display = '';
            document.getElementById('xlDefaultLayout').style.display = '';
        }
        document.getElementById('existingSharedLayout').style.display = '';
    },

    _loadLayout: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_loadLayout(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if ($(e.target).hasClass("RADDefaultViewDiv")) {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW, "", com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW);
        }
        else {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW, (e.target).value, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW);
        }
    },

    _showLayoutInAddMode_bak: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_showLayoutInAddMode_bak() {
        this._layouts = [];
        var data = null;
        for (var i = 0; i < this._grid.elementInfo.get_manageLayoutDropDown().options.length; i++) {
            data = (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).value.split(':');
            if (data[0].trim() === this._grid.get_GridInfo().UserId) {
                Array.add(this._layouts, data[1].trim());
            }
        }
        this._info.Action = com.ivp.rad.controls.neogrid.scripts.info.Action.Add;
        this._grid.elementInfo.get_ddlSharedLayout().parentNode.parentNode.style.display = 'none';
        this._grid.elementInfo.get_ddlSavedViews().style.display = 'none';
        this._grid.elementInfo.get_txtViewName().style.display = '';
        this._grid.elementInfo.get_chkIsDefaultView().checked = true;
        this._grid.elementInfo.get_chkIsSharedView().checked = false;
        this._grid.elementInfo.get_chkIsDefaultView().parentNode.parentNode.style.display = '';
        this._grid.elementInfo.get_txtViewName().value = '';
        this._grid.elementInfo.get_lblHeader().innerHTML = 'Add';
        this._clearDropDown(this._grid.elementInfo.get_ddlSharedLayout());
        this._clearDropDown(this._grid.elementInfo.get_ddlSavedViews());
    },

    _showLayoutInAddMode: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_showLayoutInAddMode() {
    },

    _showLayoutInUpdateMode: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_showLayoutInUpdateMode() {
        this._info.Action = com.ivp.rad.controls.neogrid.scripts.info.Action.Update;
        this._grid.elementInfo.get_ddlSharedLayout().parentNode.parentNode.style.display = 'none';
        this._grid.elementInfo.get_ddlSavedViews().style.display = '';
        this._grid.elementInfo.get_txtViewName().style.display = 'none';
        this._clearDropDown(this._grid.elementInfo.get_ddlSharedLayout());
        this._clearDropDown(this._grid.elementInfo.get_ddlSavedViews());
        this._grid.elementInfo.get_txtViewName().value = '';
        this._grid.elementInfo.get_chkIsDefaultView().checked = this._info.IsDefault;
        this._grid.elementInfo.get_chkIsSharedView().checked = this._info.IsShared;
        this._grid.elementInfo.get_chkIsDefaultView().parentNode.parentNode.style.display = '';
        this._grid.elementInfo.get_lblHeader().innerHTML = 'Update';
        var option;
        for (var i = 0; i < this._grid.elementInfo.get_manageLayoutDropDown().options.length; i++) {
            if ((this._grid.elementInfo.get_manageLayoutDropDown().options[i]).value.startsWith(this._grid.get_GridInfo().UserId) || (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).value === '') {
                option = this._grid.elementHelper.get_optionElement();
                option.value = (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).value;
                option.text = (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).text;
                option.selected = (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).selected;
                option.setAttribute('isdefault', (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).getAttribute('isdefault'));
                this._grid.raddomElement.addOptionElement(this._grid.elementInfo.get_ddlSavedViews(), option);
            }
        }
        var changeHandler = Function.createDelegate(this, this._layoutChangeEvent);
        $clearHandlers(this._grid.elementInfo.get_ddlSavedViews());
        $addHandler(this._grid.elementInfo.get_ddlSavedViews(), 'change', changeHandler);
    },

    _layoutChangeEvent: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_layoutChangeEvent(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.elementInfo.get_ddlSavedViews().options.length === 0) {
            return;
        }
        var selectedOption = this._grid.elementInfo.get_ddlSavedViews().options[this._grid.elementInfo.get_ddlSavedViews().selectedIndex];
        if (selectedOption.getAttribute('isdefault').toString() !== 'null') {
            this._grid.elementInfo.get_chkIsDefaultView().checked = Boolean.parse(selectedOption.getAttribute('isdefault').toString());
        }
        else {
            this._grid.elementInfo.get_chkIsDefaultView().checked = false;
        }
    },

    _showLayoutInDeleteMode: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_showLayoutInDeleteMode() {
        this._info.Action = com.ivp.rad.controls.neogrid.scripts.info.Action.Delete;
        this._grid.elementInfo.get_ddlSharedLayout().parentNode.parentNode.style.display = 'none';
        this._grid.elementInfo.get_ddlSavedViews().style.display = '';
        this._grid.elementInfo.get_txtViewName().style.display = 'none';
        this._clearDropDown(this._grid.elementInfo.get_ddlSharedLayout());
        this._clearDropDown(this._grid.elementInfo.get_ddlSavedViews());
        this._grid.elementInfo.get_txtViewName().value = '';
        this._grid.elementInfo.get_chkIsDefaultView().parentNode.parentNode.style.display = 'none';
        this._grid.elementInfo.get_lblHeader().innerHTML = 'Delete';
        this._grid.elementInfo.get_chkIsDefaultView().checked = this._info.IsDefault;
        var option;
        for (var i = 0; i < this._grid.elementInfo.get_manageLayoutDropDown().options.length; i++) {
            if ((this._grid.elementInfo.get_manageLayoutDropDown().options[i]).value.startsWith(this._grid.get_GridInfo().UserId) || (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).value === '') {
                option = this._grid.elementHelper.get_optionElement();
                option.value = (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).value;
                option.text = (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).text;
                option.selected = (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).selected;
                option.setAttribute('isdefault', (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).getAttribute('isdefault'));
                this._grid.raddomElement.addOptionElement(this._grid.elementInfo.get_ddlSavedViews(), option);
            }
        }
    },

    _showLayoutInImportMode: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_showLayoutInImportMode() {
        this._info.Action = com.ivp.rad.controls.neogrid.scripts.info.Action.Import;
        this._grid.elementInfo.get_ddlSharedLayout().parentNode.parentNode.style.display = '';
        this._grid.elementInfo.get_ddlSavedViews().style.display = 'none';
        this._grid.elementInfo.get_txtViewName().style.display = '';
        this._clearDropDown(this._grid.elementInfo.get_ddlSharedLayout());
        this._clearDropDown(this._grid.elementInfo.get_ddlSavedViews());
        this._grid.elementInfo.get_txtViewName().value = '';
        this._grid.elementInfo.get_chkIsDefaultView().parentNode.parentNode.style.display = '';
        this._grid.elementInfo.get_chkIsDefaultView().checked = true;
        this._grid.elementInfo.get_chkIsSharedView().checked = false;
        this._grid.elementInfo.get_lblHeader().innerHTML = 'Import';
        var option;
        for (var i = 0; i < this._grid.elementInfo.get_manageLayoutDropDown().options.length; i++) {
            if (!(this._grid.elementInfo.get_manageLayoutDropDown().options[i]).value.startsWith(this._grid.get_GridInfo().UserId)) {
                option = this._grid.elementHelper.get_optionElement();
                option.value = (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).value;
                option.text = (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).text;
                option.selected = (this._grid.elementInfo.get_manageLayoutDropDown().options[i]).selected;
                this._grid.raddomElement.addOptionElement(this._grid.elementInfo.get_ddlSharedLayout(), option);
            }
        }
    },

    _hideLayout: function com_ivp_rad_controls_neogrid_scripts_ManageLayouts$_hideLayout(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._grid.elementInfo.get_manageLayoutDiv().style.display = 'none';
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.ManagePopups

com.ivp.rad.controls.neogrid.scripts.ManagePopups = function com_ivp_rad_controls_neogrid_scripts_ManagePopups(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_messageBoxInnerHTML" type="String">
    /// </field>
    /// <field name="_script" type="String">
    /// </field>
    /// <field name="_cusomtMessageBoxInnerHTML" type="String">
    /// </field>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="messageBox" type="Object" domElement="true">
    /// </field>
    /// <field name="customMessageBox" type="Object" domElement="true">
    /// </field>
    /// <field name="_isPopUpVisisble" type="Boolean">
    /// </field>
    this._grid = grid;
    this.messageBox = this._grid.elementHelper.get_divElement();
    this.messageBox.id = this._grid.elementIDManager.get_messageBoxID();
    this.messageBox.style.position = 'absolute';
    this.messageBox.style.zIndex = 32767;
    var upperHeaderSuccessPopUpDiv = document.createElement('DIV');
    upperHeaderSuccessPopUpDiv.className = 'neogridsuccesspopupupperheaderdiv';
    this.messageBox.appendChild(upperHeaderSuccessPopUpDiv);
    var SuccessPopUpInternalDivWrapper = document.createElement('DIV');
    SuccessPopUpInternalDivWrapper.style.minWidth = '100%';
    var SuccessPopUpImage = document.createElement('DIV');
    var SuccessPopUpRightDiv = document.createElement('DIV');
    SuccessPopUpRightDiv.className = 'neogridSuccessPopUpRightDiv';
    var SuccessPopUpRightDivHeading = document.createElement('DIV');
    SuccessPopUpRightDivHeading.className = 'neogridSuccessPopUpRightDivHeading';
    SuccessPopUpRightDiv.appendChild(SuccessPopUpRightDivHeading);
    var SuccessPopUpRightDivMessage = document.createElement('DIV');
    SuccessPopUpRightDivMessage.className = 'neogridSuccessPopUpRightDivMessage';
    SuccessPopUpRightDiv.appendChild(SuccessPopUpRightDivMessage);
    SuccessPopUpInternalDivWrapper.appendChild(SuccessPopUpImage);
    SuccessPopUpInternalDivWrapper.appendChild(SuccessPopUpRightDiv);
    this.messageBox.appendChild(SuccessPopUpInternalDivWrapper);
    this._grid.elementInfo.get_childGridDiv().appendChild(this.messageBox);
    this.customMessageBox = this._grid.elementHelper.get_divElement();
    this.customMessageBox.id = this._grid.elementIDManager.get_customMessageBoxID();
    this.customMessageBox.style.position = 'absolute';
    this.customMessageBox.style.top = '30%';
    this.customMessageBox.style.left = '40%';
    this.customMessageBox.style.zIndex = 32767;
    this.customMessageBox.className = 'xlCustomMessageBox';
    document.body.appendChild(this.customMessageBox);
    this._isPopUpVisisble = false;
    eval('var target = document.getElementById(\"' + this._grid.elementIDManager.get_customMessageBoxID() + '\"); if(target.style.MozUserSelect!=\"undefined\") target.style.MozUserSelect=\"none\";');
    com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this.customMessageBox, 'selectstart', Function.createDelegate(this, function (e) {
        e.preventDefault();
    }));
}
com.ivp.rad.controls.neogrid.scripts.ManagePopups.prototype = {
    _messageBoxInnerHTML: '<table onclick=\"{5}\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr><td class=\"{0}\" style=\"box-shadow:none;\"><table  border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr><td class=\"{1}\">{2}</td></tr><tr><td class=\"alertMessage\"><table  border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr><td><div style=\"overflow:auto;\">{3}</div></td></tr><tr><td class=\"alertclose12345\"><input type=\"button\" value=\" OK \" style=\"display:{4};\" onclick=\"{5}\" class=\"button\"></input></td></tr><tr style=\"display:{6}\"><td style=\"text-align:right;font-family:\'Open sans\',sans-serif;\"></td></tr></table></td></tr></table></td></tr></table>',
    _script: ' function a_grid_hidelayout(){ var messageBoxID = window.document.body.getAttribute(\'MessageBoxID\'); if(messageBoxID == undefined || messageBoxID == \'\') return; var messageBox = $get(messageBoxID); if(messageBox == null) return; if(messageBox.getAttribute(\'timer\') != null) { window.clearInterval(Number.parseInvariant(messageBox.getAttribute(\'timer\').toString())); } messageBox.style.visibility =\'hidden\'; messageBox.removeAttribute(\'timer\'); } a_grid_hidelayout();',
    _cusomtMessageBoxInnerHTML: '<table width=\"30%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr><td class=\"{0}\"><table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr><td class=\"{1}\" id=\"{8}\">{2}</td></tr><tr><td class=\"alertMessage\"><table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr><td id=\"{3}\" colspan=\"2\"></td></tr><tr><td style=\"padding-right:10px;text-align:right;padding-bottom:4px;padding-bottom:15px;padding-top:8px;\" class=\"alertclose12345\"><input type=\"button\" value=\" {7} \" style=\"display:{4};\" id=\"{5}\" class=\"btn btn-default btn-xs\" /></td><td class=\"alertclose123451234512345\" style=\"padding-left:10px;text-align:left;padding-bottom:15px;padding-top:8px;\"><input type=\"button\" value=\" Cancel \" style=\"display:{4};\" id=\"{6}\" class=\"btn btn-default btn-xs\"/></td></tr></table></td></tr></table></td></tr></table>',
    _grid: null,
    messageBox: null,
    customMessageBox: null,
    _isPopUpVisisble: false,

    get_isPopUpVisible: function com_ivp_rad_controls_neogrid_scripts_ManagePopups$get_isPopUpVisible() {
        /// <value type="Boolean"></value>
        return this._isPopUpVisisble;
    },

    showMessageBox: function com_ivp_rad_controls_neogrid_scripts_ManagePopups$showMessageBox(isSucess, message, informationHeader, top, left) {
        /// <param name="isSucess" type="Boolean">
        /// </param>
        /// <param name="message" type="String">
        /// </param>
        /// <param name="informationHeader" type="String">
        /// </param>
        /// <param name="top" type="Number" integer="true">
        /// </param>
        /// <param name="left" type="Number" integer="true">
        /// </param>
        if (this._grid.get_GridInfo().MessageBoxHandler != null && this._grid.get_GridInfo().MessageBoxHandler !== '') {
            eval(this._grid.get_GridInfo().MessageBoxHandler + '(' + isSucess + ', \" ' + message.replace('\"', '\'') + ' \")');
            return;
        }
        window.document.body.setAttribute('MessageBoxID', this._grid.elementIDManager.get_messageBoxID());
        if (this.messageBox == null) {
            return;
        }
        this._isPopUpVisisble = true;
        if (informationHeader === '') {
            if (isSucess) {
                this.messageBox.childNodes[0].style.backgroundColor = '#B5D773';
                this.messageBox.childNodes[1].childNodes[0].className = 'neogridSuccessPopUpImage';
                this.messageBox.childNodes[1].childNodes[1].childNodes[0].innerText = 'Success';
                this.messageBox.childNodes[1].childNodes[1].childNodes[0].style.color = '#B5D773';
                this.messageBox.childNodes[1].childNodes[1].childNodes[1].innerText = message;
                this.messageBox.style.visibility = 'visible';
            }
            else {
                this.messageBox.childNodes[0].style.backgroundColor = '#D68A8C';
                this.messageBox.childNodes[1].childNodes[0].className = 'neogridFailurePopUpImage';
                this.messageBox.childNodes[1].childNodes[1].childNodes[0].innerText = 'Failure';
                this.messageBox.childNodes[1].childNodes[1].childNodes[0].style.color = '#D68A8C';
                this.messageBox.childNodes[1].childNodes[1].childNodes[1].innerText = message;
                this.messageBox.style.visibility = 'visible';
            }
        }
        else {
            this.messageBox.innerHTML = String.format(this._messageBoxInnerHTML, 'alertSuccess', 'successHeadCustom', informationHeader, message, 'none', this._script, '');
        }
        if (isNaN(left)) {
            this.messageBox.style.left = ((document.documentElement.offsetWidth / 2) - (this.messageBox.offsetWidth / 2)) + 'px';
        }
        else {
            this.messageBox.style.left = left + 'px';
        }
        this.messageBox.style.top = '0px';
        if (isNaN(top)) {
            eval('$(\'#' + this._grid.get_id() + '_MessageBoxID\').animate({ \'top\':\'' + this.messageBox.offsetHeight + '\'}, \"slow\" )');
        }
        else {
            eval('$(\'#' + this._grid.get_id() + '_MessageBoxID\').animate({ \'top\':\'' + top + '\'}, \"slow\" )');
        }
        this.messageBox.style.visibility = 'visible';
        eval('$(\'#' + this._grid.get_id() + '_MessageBoxID\').animate({ \'top\':\'' + '\"0px\"' + '\'}, \"slow\" )');
        window.setTimeout(Function.createDelegate(this, this.hidePopup), 3000);
    },

    hidePopup: function com_ivp_rad_controls_neogrid_scripts_ManagePopups$hidePopup() {
        this._isPopUpVisisble = false;
        this.messageBox.style.visibility = 'hidden';
    },

    _showCustomMessageBox: function com_ivp_rad_controls_neogrid_scripts_ManagePopups$_showCustomMessageBox(header, body, callBackmethod, okButtonText, clickBodyCallBack, cancelCallBack) {
        /// <param name="header" type="String">
        /// </param>
        /// <param name="body" type="String">
        /// </param>
        /// <param name="callBackmethod" type="String">
        /// </param>
        /// <param name="okButtonText" type="String">
        /// </param>
        /// <param name="clickBodyCallBack" type="String">
        /// </param>
        /// <param name="cancelCallBack" type="String">
        /// </param>
        if (this.customMessageBox == null) {
            return;
        }
        window.document.body.setAttribute('MessageBoxID', this.customMessageBox.id);
        this.customMessageBox.innerHTML = String.format(this._cusomtMessageBoxInnerHTML, 'alertSuccess', 'successHeadCustom', header, this.customMessageBox.id + '_body', '', this.customMessageBox.id + '_ok', this.customMessageBox.id + '_cancel', (okButtonText == null || okButtonText.trim() === '') ? 'Ok' : okButtonText, this.customMessageBox.id + '_header');
        var bodyTD = document.getElementById(this.customMessageBox.id + '_body');
        bodyTD.innerHTML = body;
        this.customMessageBox.style.visibility = 'visible';
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(bodyTD, 'click', Function.createDelegate(this, function (e) {
            if (clickBodyCallBack != null && clickBodyCallBack.trim() !== '') {
                eval(clickBodyCallBack + '(\'' + e.target.id + '\');');
            }
        }));
        var closeButton = document.getElementById(this.customMessageBox.id + '_ok');
        var handler = Function.createDelegate(this, function (e) {
            var returnValue = null;
            if (callBackmethod != null && callBackmethod.trim() !== '') {
                returnValue = eval(callBackmethod + '();');
            }
            try {
                if (Boolean.parse(returnValue.toString())) {
                    this.customMessageBox.style.visibility = 'hidden';
                    com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(false);
                    this.customMessageBox.innerHTML = '';
                }
                else {
                    this.customMessageBox.style.visibility = 'visible';
                    com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(true);
                }
                try {
                    var coleletion = this.customMessageBox.getElementsByTagName('INPUT');
                    if (coleletion.length > 0) {
                        coleletion[0].focus();
                    }
                }
                catch ($e1) {
                }
            }
            catch ($e2) {
                this.customMessageBox.style.visibility = 'hidden';
                com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(false);
                this.customMessageBox.innerHTML = '';
            }
        });
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(closeButton, 'click', handler);
        var cancelButton = document.getElementById(this.customMessageBox.id + '_cancel');
        handler = Function.createDelegate(this, function (e) {
            com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(false);
            this.customMessageBox.style.visibility = 'hidden';
            this.customMessageBox.innerHTML = '';
            if (cancelCallBack != null && cancelCallBack !== '') {
                eval(cancelCallBack + '();');
            }
        });
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(cancelButton, 'click', handler);
        var headerElement = document.getElementById(this.customMessageBox.id + '_header');
        this._makePopupMovable(this.customMessageBox, headerElement);
        com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(true);
    },

    _makePopupMovable: function com_ivp_rad_controls_neogrid_scripts_ManagePopups$_makePopupMovable(popup, header) {
        /// <param name="popup" type="Object" domElement="true">
        /// </param>
        /// <param name="header" type="Object" domElement="true">
        /// </param>
        var canMove = false;
        var oClientX = -1;
        var oClientY = -1;
        if (header != null) {
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(header, 'mousedown', Function.createDelegate(this, function (e) {
                canMove = true;
                oClientX = e.clientX;
                oClientY = e.clientY;
                com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(true);
            }));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.body, 'mouseup', Function.createDelegate(this, function (e) {
                canMove = false;
            }));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(header, 'mouseleave', Function.createDelegate(this, function (e) {
                canMove = false;
            }));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(header, 'mouseout', Function.createDelegate(this, function (e) {
                canMove = false;
            }));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.body, 'mousemove', Function.createDelegate(this, function (e) {
                if (canMove) {
                    popup.style.left = popup.offsetLeft + e.clientX - oClientX + 'px';
                    popup.style.top = popup.offsetTop + e.clientY - oClientY + 'px';
                    oClientX = e.clientX;
                    oClientY = e.clientY;
                }
            }));
        }
        else {
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring

com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring = function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_divRule" type="Object" domElement="true">
    /// </field>
    /// <field name="_divAddRule" type="Object" domElement="true">
    /// </field>
    /// <field name="_divColors" type="Object" domElement="true">
    /// </field>
    /// <field name="_ddlColumns" type="Object" domElement="true">
    /// </field>
    /// <field name="_ddlOperations" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnCloseDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnApplyRule" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnPickColor" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnAddRules" type="Object" domElement="true">
    /// </field>
    /// <field name="_btnCancelUpdate" type="Object" domElement="true">
    /// </field>
    /// <field name="_divCancelUpdate" type="Object" domElement="true">
    /// </field>
    /// <field name="_txtUserInput" type="Object" domElement="true">
    /// </field>
    /// <field name="_txtRuleColor" type="Object" domElement="true">
    /// </field>
    /// <field name="_arrOperations" type="Array">
    /// </field>
    /// <field name="_outerTable" type="Object" domElement="true">
    /// </field>
    /// <field name="_tblRuleList" type="Object" domElement="true">
    /// </field>
    /// <field name="ruleList" type="Array" static="true">
    /// </field>
    /// <field name="tempRuleList" type="Array">
    /// </field>
    /// <field name="ruleListToPersistInfo" type="Array" static="true">
    /// </field>
    /// <field name="_coloringInfo" type="com.ivp.rad.controls.neogrid.scripts.info.RuleBasedColoringInfo">
    /// </field>
    /// <field name="_divMsg" type="Object" domElement="true">
    /// </field>
    /// <field name="_updateStatus" type="Boolean">
    /// </field>
    /// <field name="_updatedRowIndex" type="Number" integer="true">
    /// </field>
    /// <field name="_columnDisplayNameList" type="Array">
    /// </field>
    /// <field name="listColumnNames" type="Object" static="true">
    /// </field>
    /// <field name="_dateControlObj" type="com.ivp.rad.controls.raddateinput.scripts.DateInputScripts">
    /// </field>
    /// <field name="_rulePopUptoBeHidden" type="Object" domElement="true">
    /// </field>
    /// <field name="rulesExist" type="Boolean" static="true">
    /// </field>
    /// <field name="cntrToMaintainindexruleList" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="cntToMaintainIndex" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="_rowColor" type="Boolean">
    /// </field>
    /// <field name="regex" type="RegExp">
    /// </field>
    /// <field name="_ruleCount" type="Number" integer="true">
    /// </field>
    this._arrOperations = [];
    this.tempRuleList = [];
    this.regex = new RegExp(',', 'g');
    this._grid = grid;
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.prototype = {
    _grid: null,
    _divRule: null,
    _divAddRule: null,
    _divColors: null,
    _ddlColumns: null,
    _ddlOperations: null,
    _btnCloseDiv: null,
    _btnApplyRule: null,
    _btnPickColor: null,
    _btnAddRules: null,
    _btnCancelUpdate: null,
    _divCancelUpdate: null,
    _txtUserInput: null,
    _txtRuleColor: null,
    _outerTable: null,
    _tblRuleList: null,
    _coloringInfo: null,
    _divMsg: null,
    _updateStatus: false,
    _updatedRowIndex: 0,
    _columnDisplayNameList: null,
    _dateControlObj: null,
    _rulePopUptoBeHidden: null,
    _rowColor: false,

    get_ruleList: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$get_ruleList() {
        /// <value type="Array"></value>
        return com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList;
    },
    set_ruleList: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$set_ruleList(value) {
        /// <value type="Array"></value>
        com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList = value;
        return value;
    },

    _ruleCount: 0,

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.cntrToMaintainindexruleList = 0;
        this._rowColor = false;
        com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList = serviceInfo.serializedInfo.RuleBasedColoringRules;
        com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleListToPersistInfo = serviceInfo.serializedInfo.RuleBasedColoringRules;
        if (com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length > 0) {
            com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.rulesExist = true;
        }
        com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.cntrToMaintainindexruleList = com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length;
        com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.cntToMaintainIndex = com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length;
        this._getColumnList();
    },

    _createRuleWindow_bk: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_createRuleWindow_bk() {
        var cell = null;
        var row = null;
        var _div = null;
        this._divRule = document.getElementById(this._grid.elementIDManager.get_ruleDivID());
        this._divRule.className = 'addRuleCanvas';
        this._outerTable = this._grid.elementHelper.get_table();
        var rowTitle = this._outerTable.insertRow(this._outerTable.rows.length);
        rowTitle.className = 'addRuleTitleBar';
        var cellTitle = rowTitle.insertCell(rowTitle.cells.length);
        cellTitle.colSpan = 3;
        var divTitle = document.createElement('DIV');
        this._grid.raddomElement.setInnerContent(divTitle, 'CreateRule');
        divTitle.className = 'addRuleTitleText';
        cellTitle.appendChild(divTitle);
        var cellbtnClose = rowTitle.insertCell(rowTitle.cells.length);
        cellbtnClose.className = 'addRuleTitleBtn';
        this._btnCloseDiv = document.createElement('A');
        this._btnCloseDiv.className = 'addRuleCloseBtn';
        this._btnCloseDiv.id = 'addRuleCloseBtn';
        cellbtnClose.appendChild(this._btnCloseDiv);
        row = this._outerTable.insertRow(this._outerTable.rows.length);
        row.className = 'addRuleControlPanel';
        var cellRulePanel = row.insertCell(row.cells.length);
        cellRulePanel.colSpan = 4;
        var _divRulePanel = document.createElement('DIV');
        _divRulePanel.className = 'addRuleFormPanel';
        cellRulePanel.appendChild(_divRulePanel);
        var panelTable = this._grid.elementHelper.get_table();
        panelTable.className = 'addRuleFormFields';
        _divRulePanel.appendChild(panelTable);
        row = panelTable.insertRow(panelTable.rows.length);
        cell = row.insertCell(row.cells.length);
        this._grid.raddomElement.setInnerContent(cell, 'Column Name');
        cell.style.width = '25%';
        cell = row.insertCell(row.cells.length);
        this._grid.raddomElement.setInnerContent(cell, 'Operator');
        cell.style.width = '15%';
        cell = row.insertCell(row.cells.length);
        this._grid.raddomElement.setInnerContent(cell, 'Value');
        cell.style.width = '15%';
        cell = row.insertCell(row.cells.length);
        this._grid.raddomElement.setInnerContent(cell, '');
        cell.style.width = '10%';
        cell = row.insertCell(row.cells.length);
        this._grid.raddomElement.setInnerContent(cell, '');
        cell = row.insertCell(row.cells.length);
        row = panelTable.insertRow(panelTable.rows.length);
        cell = row.insertCell(row.cells.length);
        this._ddlColumns = this._grid.elementHelper.get_divElement();
        this._ddlColumns.id = this._grid.get_id() + '_ddlRuleColumns';
        this._ddlColumns.className = 'input';
        cell.appendChild(this._ddlColumns);
        var cellOperations = row.insertCell(row.cells.length);
        this._ddlOperations = this._grid.elementHelper.get_divElement();
        this._ddlOperations.id = this._grid.get_id() + '_ddlRuleOperations';
        this._ddlOperations.className = 'input';
        cellOperations.appendChild(this._ddlOperations);
        var cellTextBox = row.insertCell(row.cells.length);
        this._txtUserInput = this._grid.elementHelper.get_textElement();
        this._txtUserInput.id = this._grid.get_id() + '_txtUserInputText';
        this._txtUserInput.className = 'input';
        this._txtUserInput.style.width = '70px';
        cellTextBox.appendChild(this._txtUserInput);
        var hiddenFieldForDateInput = document.createElement('DIV');
        hiddenFieldForDateInput.id = this._txtUserInput.id + '_HdnErrorMessage';
        hiddenFieldForDateInput.style.display = 'none';
        cellTextBox.appendChild(hiddenFieldForDateInput);
        var cellpickColor = row.insertCell(row.cells.length);
        this._btnPickColor = this._grid.elementHelper.get_buttonElement();
        this._btnPickColor.id = this._grid.get_id() + '_btnPickColor';
        this._btnPickColor.className = 'addPickColorBtn';
        this._txtRuleColor = this._grid.elementHelper.get_textElement();
        this._txtRuleColor.id = this._grid + '_txtColorSelected';
        this._txtRuleColor.style.width = '0px';
        this._txtRuleColor.style.height = '0px';
        this._txtRuleColor.style.display = 'none';
        cellpickColor.appendChild(this._btnPickColor);
        cellpickColor.appendChild(this._txtRuleColor);
        cell = row.insertCell(row.cells.length);
        _div = document.createElement('DIV');
        _div.style.display = 'inline';
        cell.appendChild(_div);
        this._btnAddRules = this._grid.elementHelper.get_buttonElement();
        this._btnAddRules.id = this._grid.get_id() + '_btnAddRules';
        this._btnAddRules.className = 'addRuleAddBtn';
        this._grid.raddomElement.setInnerContent(this._btnAddRules, 'Add');
        _div.appendChild(this._btnAddRules);
        this._divCancelUpdate = document.createElement('DIV');
        this._divCancelUpdate.style.display = 'inline';
        cell.appendChild(this._divCancelUpdate);
        this._btnCancelUpdate = this._grid.elementHelper.get_buttonElement();
        this._btnCancelUpdate.id = this._grid.get_id() + '_btnCancelUpdtate';
        this._grid.raddomElement.setInnerContent(this._btnCancelUpdate, 'Clear');
        this._btnCancelUpdate.className = 'addRuleClearBtn';
        this._divCancelUpdate.appendChild(this._btnCancelUpdate);
        this._divAddRule = document.createElement('DIV');
        this._divAddRule.id = this._grid.get_id() + '_divAddRule';
        this._divAddRule.className = 'addRuleGridPanel';
        this._divAddRule.style.display = 'none';
        var rowAddRule = this._outerTable.insertRow(this._outerTable.rows.length);
        var cellRule = rowAddRule.insertCell(rowAddRule.cells.length);
        cellRule.colSpan = 4;
        this._tblRuleList = this._grid.elementHelper.get_table();
        this._tblRuleList.className = 'addRuleGrid';
        var tHead = null;
        var tHeader = document.createElement('THEAD');
        this._tblRuleList.appendChild(tHeader);
        var headerRow = document.createElement('TR');
        tHeader.appendChild(headerRow);
        tHead = document.createElement('TH');
        this._grid.raddomElement.setInnerContent(tHead, 'Column Name');
        headerRow.appendChild(tHead);
        tHead = document.createElement('TH');
        this._grid.raddomElement.setInnerContent(tHead, 'Operator');
        headerRow.appendChild(tHead);
        tHead = document.createElement('TH');
        this._grid.raddomElement.setInnerContent(tHead, 'Value');
        headerRow.appendChild(tHead);
        tHead = document.createElement('TH');
        this._grid.raddomElement.setInnerContent(tHead, 'Color');
        tHead.style.textAlign = 'center';
        headerRow.appendChild(tHead);
        tHead = document.createElement('TH');
        tHead.style.textAlign = 'center';
        this._grid.raddomElement.setInnerContent(tHead, 'Edit');
        headerRow.appendChild(tHead);
        tHead = document.createElement('TH');
        tHead.style.textAlign = 'center';
        this._grid.raddomElement.setInnerContent(tHead, 'Remove');
        headerRow.appendChild(tHead);
        cellRule.appendChild(this._divAddRule);
        this._divAddRule.appendChild(this._tblRuleList);
        var rowApplyRule = this._outerTable.insertRow(this._outerTable.rows.length);
        rowApplyRule.className = 'statusBar';
        var cellApplyRule = rowApplyRule.insertCell(rowApplyRule.cells.length);
        cellApplyRule.colSpan = 6;
        cellApplyRule.style.textAlign = 'right';
        cellApplyRule.style.paddingRight = '10px';
        this._btnApplyRule = this._grid.elementHelper.get_buttonElement();
        this._btnApplyRule.id = this._grid.get_id() + '_btnApplyRule';
        this._btnApplyRule.className = 'addRuleApplyBtn';
        this._grid.raddomElement.setInnerContent(this._btnApplyRule, 'Apply');
        cellApplyRule.appendChild(this._btnApplyRule);
        this._btnApplyRule.style.display = 'none';
        var rowErrMsg = this._outerTable.insertRow(this._outerTable.rows.length);
        var cellErrMsg = rowErrMsg.insertCell(rowErrMsg.cells.length);
        cellErrMsg.colSpan = 4;
        this._divMsg = document.createElement('DIV');
        this._divMsg.id = this._grid.get_id() + '_divRuleErrMsg';
        cellErrMsg.appendChild(this._divMsg);
        this._createColorDiv();
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._btnCloseDiv, 'click', Function.createDelegate(this, this._closeDiv));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._ddlColumns, 'click', Function.createDelegate(this, this._onSelectChnaged));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._btnApplyRule, 'click', Function.createDelegate(this, this._applyRules));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._btnPickColor, 'click', Function.createDelegate(this, this._pickColor));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._btnCancelUpdate, 'click', Function.createDelegate(this, this._cancelUpdate));
        this._divRule.appendChild(this._outerTable);
    },

    _createRuleWindow: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_createRuleWindow(e, listColumnNames) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <param name="listColumnNames" type="Object">
        /// </param>
        if (document.getElementById(this._grid.get_id() + '_divAddRule') == null) {
            this._divAddRule = document.createElement('DIV');
        }
        else {
            this._divAddRule = document.getElementById(this._grid.get_id() + '_divAddRule');
        }
        this._divAddRule.id = this._grid.get_id() + '_divAddRule';
        this._divAddRule.setAttribute('tabIndex', '2');
        this._divAddRule.className = 'addRuleGridPanelNew';
        this._divAddRule.style.display = '';
        if (eval('$(\"#mainRuleColorParent' + '\").find(\".addRuleGridPanelNew\").length') === 0) {
            document.getElementById('mainRuleColorParent').appendChild(this._divAddRule);
        }
        if (eval('$(\".mainColorRuleParent' + '\").find(\".ruleColoringPopUpNewParent\").length') === 0) {
            this._divRule = this._grid.elementHelper.get_divElement();
            this._divRule.id = this._grid.elementIDManager.get_ruleDivID();
            if (document.getElementById(this._grid.get_id() + '_divAddRule') != null) {
                document.getElementById('mainRuleColorParent').insertBefore(this._divRule, document.getElementById(this._grid.get_id() + '_divAddRule'));
            }
        }
        else {
            this._divRule = document.getElementById(this._grid.elementIDManager.get_ruleDivID());
            this._divRule.style.display = 'block';
        }
        this._divRule.className = 'ruleColoringPopUpNewParent';
        var ruleColorHeaderParent = this._grid.elementHelper.get_divElement();
        ruleColorHeaderParent.className = 'ruleColorHeaderParent';
        var cancelRulePopUp = this._grid.elementHelper.get_divElement();
        cancelRulePopUp.id = 'cancelRulePopUp';
        cancelRulePopUp.className = 'cancelRulePopUp';
        if (e == null && listColumnNames == null) {
            cancelRulePopUp.style.display = 'none';
        }
        else {
            cancelRulePopUp.style.display = 'block';
        }
        var addRuleParent = this._grid.elementHelper.get_divElement();
        addRuleParent.id = 'addNewRuleParent';
        addRuleParent.className = 'addNewRuleParent';
        var addRuleLabel = this._grid.elementHelper.get_divElement();
        addRuleLabel.id = 'addRuleLabel';
        addRuleLabel.className = 'addRuleLabel';
        addRuleLabel.innerText = 'Add Color Rule';
        var addRuleIcon = this._grid.elementHelper.get_divElement();
        addRuleIcon.id = 'addRuleIcon';
        addRuleIcon.className = 'addRuleIcon fa fa-plus-circle';
        addRuleParent.appendChild(addRuleIcon);
        addRuleParent.appendChild(addRuleLabel);
        var addNewRulePopUpParent = this._grid.elementHelper.get_divElement();
        addNewRulePopUpParent.id = 'addNewRulePopUpParent';
        addNewRulePopUpParent.className = 'addNewRulePopUpParent';
        var ruleColorPopUpDropDowns = this._grid.elementHelper.get_divElement();
        ruleColorPopUpDropDowns.id = 'ruleColorPopUpDropDowns';
        ruleColorPopUpDropDowns.className = 'ruleColorPopUpDropDowns';
        this._ddlColumns = this._grid.elementHelper.get_divElement();
        this._ddlColumns.id = this._grid.get_id() + '_ddlColumns';
        this._ddlColumns.className = 'existingColumnNames';
        this._ddlColumns.style.overflow = 'hidden';
        this._ddlColumns.setAttribute('placeholder', 'Column Name');
        this._ddlColumns.setAttribute('value', '-1');
        this._ddlColumns.innerHTML = '<div id=\"firstColumnDiv\"class=\"firstColumnDiv\" value=\"-1\">Column Name</div><div class=\"fa fa-caret-down downarrowdropdown\"></div>';
        var columnOptions = this._grid.elementHelper.get_divElement();
        this._ddlOperations = this._grid.elementHelper.get_divElement();
        this._ddlOperations.id = this._grid.get_id() + '_ddlRuleOperations';
        this._ddlOperations.className = 'existingOperators';
        this._ddlOperations.setAttribute('placeholder', 'Operator');
        this._ddlOperations.innerHTML = '<div id=\"firstOperationDiv\"class=\"firstOperationDiv\">Operator</div><div class=\"fa fa-caret-down dropdownoperations\"></div>';
        this._ddlOperations.setAttribute('value', '-1');
        this._txtUserInput = this._grid.elementHelper.get_textElement();
        this._txtUserInput.id = this._grid.get_id() + '_txtUserInput';
        this._txtUserInput.className = 'columnNameText';
        this._txtUserInput.setAttribute('placeholder', 'Enter Value');
        var colorPalleteIcon = this._grid.elementHelper.get_divElement();
        colorPalleteIcon.className = 'colorPalleteIcon';
        colorPalleteIcon.id = 'colorPalleteIcon';
        colorPalleteIcon.innerText = 'color';
        var columnRowColorparent = this._grid.elementHelper.get_divElement();
        columnRowColorparent.className = 'columnRowColorParent';
        columnRowColorparent.id = 'columnRowColorparent';
        var columnColor = this._grid.elementHelper.get_divElement();
        columnColor.id = 'columnColor';
        columnColor.className = 'columnColor';
        columnColor.innerText = 'CELL COLOR';
        var rowColor = this._grid.elementHelper.get_divElement();
        rowColor.id = 'rowColor';
        rowColor.className = 'rowColor';
        rowColor.innerText = 'ROW COLOR';
        var saveCancelParent = this._grid.elementHelper.get_divElement();
        saveCancelParent.id = 'saveCancelParent';
        saveCancelParent.className = 'saveCancelParent';
        var saveRuleBasedColor = this._grid.elementHelper.get_divElement();
        saveRuleBasedColor.id = 'saveRuleBasedColor';
        saveRuleBasedColor.className = 'saveRuleBasedColor';
        saveRuleBasedColor.innerText = 'Save';
        saveCancelParent.appendChild(saveRuleBasedColor);
        var cancelRuleBasedColor = this._grid.elementHelper.get_divElement();
        cancelRuleBasedColor.id = 'cancelRuleBasedColor';
        cancelRuleBasedColor.className = 'cancelRuleBasedColor';
        cancelRuleBasedColor.innerText = 'Cancel';
        saveCancelParent.appendChild(cancelRuleBasedColor);
        columnRowColorparent.appendChild(columnColor);
        columnRowColorparent.appendChild(rowColor);
        this._divMsg = document.createElement('DIV');
        this._divMsg.id = this._grid.get_id() + '_divRuleErrMsg';
        ruleColorPopUpDropDowns.appendChild(this._ddlColumns);
        ruleColorPopUpDropDowns.appendChild(this._ddlOperations);
        addRuleParent.style.display = 'block';
        if (document.getElementById('cancelRulePopUp') == null) {
            document.getElementById('mergerColorRule').appendChild(cancelRulePopUp);
        }
        else {
            if (e == null && listColumnNames == null) {
                cancelRulePopUp.style.display = 'none';
            }
            else {
                cancelRulePopUp.style.display = 'block';
            }
        }
        if (document.getElementById('addNewRuleParent') == null) {
            this._divRule.appendChild(addRuleParent);
        }
        else {
            document.getElementById('addNewRuleParent').style.display = 'block';
        }
        if (document.getElementById('rulePopUptoBeHidden') == null) {
            this._rulePopUptoBeHidden = this._grid.elementHelper.get_divElement();
            this._divRule.appendChild(this._rulePopUptoBeHidden);
            this._rulePopUptoBeHidden.appendChild(ruleColorPopUpDropDowns);
            this._rulePopUptoBeHidden.appendChild(this._txtUserInput);
            this._rulePopUptoBeHidden.appendChild(colorPalleteIcon);
            this._rulePopUptoBeHidden.appendChild(columnRowColorparent);
            this._rulePopUptoBeHidden.appendChild(saveCancelParent);
            this._rulePopUptoBeHidden.appendChild(this._divMsg);
        }
        else {
            this._rulePopUptoBeHidden = document.getElementById('rulePopUptoBeHidden');
        }
        this._rulePopUptoBeHidden.style.display = 'none';
        this._rulePopUptoBeHidden.className = 'rulePopUptoBeHidden';
        this._rulePopUptoBeHidden.id = 'rulePopUptoBeHidden';
        this._rulePopUptoBeHidden.setAttribute('InEditMode', 'false');
        document.getElementById('mainRuleColorParent').style.display = 'inline-block';
        this._divRule.setAttribute('tabIndex', '1');
        if (com.ivp.rad.controls.neogrid.scripts.UpperHeader.isRuleBasedColorFromView) {
            document.getElementById(this._grid.get_id() + '_RuleDivID').style.display = 'block';
        }
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._ddlColumns, 'click', Function.createDelegate(this, this._onSelectChnaged));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._ddlOperations, 'click', Function.createDelegate(this, this._onOperationChnaged));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._divRule);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._divRule, 'click', Function.createDelegate(this, this._ruleBasedColoringDivHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._divRule, 'keyup', Function.createDelegate(this, this._ruleBasedColoringDivKeyDownHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_id() + '_divAddRule'), 'keyup', Function.createDelegate(this, this._ruleBasedColoringDivKeyDownHandler));
        if (eval('$(\".addRuleGridPanelNew' + '\").children().length') === 1 || (eval('$(\".addRuleGridPanelNew' + '\").children().length') === 0)) {
            eval('$(\".eachAddRule' + '\").parent().css({\'width\':\'47%\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'float\':\'left\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-left\':\'145px\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-right\':\'0px\'})');
        }
        if (eval('$(\".addRuleGridPanelNew' + '\").children().length') > 1) {
            eval('$(\".eachAddRule' + '\").parent().css({\'width\':\'47%\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'float\':\'left\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-left\':\'14px\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-right\':\'0px\'})');
        }
    },

    _createRuleWindowInEditMode: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_createRuleWindowInEditMode() {
        this._rulePopUptoBeHidden = document.getElementById('rulePopUptoBeHidden');
        if (this._rulePopUptoBeHidden == null) {
            this._rulePopUptoBeHidden.className = 'rulePopUptoBeHidden';
            this._rulePopUptoBeHidden.id = 'rulePopUptoBeHidden';
        }
        this._rulePopUptoBeHidden.style.display = '';
        this._rulePopUptoBeHidden.setAttribute('InEditMode', 'false');
        var ruleColorPopUpDropDowns = this._grid.elementHelper.get_divElement();
        ruleColorPopUpDropDowns.id = 'ruleColorPopUpDropDowns';
        ruleColorPopUpDropDowns.className = 'ruleColorPopUpDropDowns';
        this._ddlColumns = this._grid.elementHelper.get_divElement();
        this._ddlColumns.id = this._grid.get_id() + '_ddlColumns';
        this._ddlColumns.className = 'existingColumnNames';
        this._ddlColumns.setAttribute('placeholder', 'Column Name');
        this._ddlColumns.setAttribute('value', '-1');
        this._ddlColumns.innerHTML = '<div id=\"firstColumnDiv\"class=\"firstColumnDiv\" value=\"-1\">Column Name</div>';
        var columnOptions = this._grid.elementHelper.get_divElement();
        this._ddlOperations = this._grid.elementHelper.get_divElement();
        this._ddlOperations.id = this._grid.get_id() + '_ddlRuleOperations';
        this._ddlOperations.className = 'existingOperators';
        this._ddlOperations.setAttribute('placeholder', 'Operator');
        this._ddlOperations.innerHTML = '<div id=\"firstOperationDiv\"class=\"firstOperationDiv\">Operator</div>';
        this._ddlOperations.setAttribute('value', '-1');
        var $dict1 = com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.listColumnNames;
        for (var $key2 in $dict1) {
            var entry = { key: $key2, value: $dict1[$key2] };
            var columnOptionsNames = this._grid.elementHelper.get_divElement();
            columnOptionsNames.innerText = entry.key.trim();
            columnOptionsNames.setAttribute('value', entry.value.toString());
        }
        this._txtUserInput = this._grid.elementHelper.get_textElement();
        this._txtUserInput.id = this._grid.get_id() + '_txtUserInput';
        this._txtUserInput.className = 'columnNameText';
        this._txtUserInput.setAttribute('placeholder', 'Enter Value');
        var colorPalleteIcon = this._grid.elementHelper.get_divElement();
        colorPalleteIcon.className = 'colorPalleteIcon';
        colorPalleteIcon.id = 'colorPalleteIcon';
        colorPalleteIcon.innerText = 'color';
        var columnRowColorparent = this._grid.elementHelper.get_divElement();
        columnRowColorparent.className = 'columnRowColorParent';
        columnRowColorparent.id = 'columnRowColorparent';
        var columnColor = this._grid.elementHelper.get_divElement();
        columnColor.id = 'columnColor';
        columnColor.className = 'columnColor';
        columnColor.innerText = 'CELL COLOR';
        var rowColor = this._grid.elementHelper.get_divElement();
        rowColor.id = 'rowColor';
        rowColor.className = 'rowColor';
        rowColor.innerText = 'ROW COLOR';
        var saveCancelParent = this._grid.elementHelper.get_divElement();
        saveCancelParent.id = 'saveCancelParent';
        saveCancelParent.className = 'saveCancelParent';
        var saveRuleBasedColor = this._grid.elementHelper.get_divElement();
        saveRuleBasedColor.id = 'saveRuleBasedColor';
        saveRuleBasedColor.className = 'saveRuleBasedColor';
        saveRuleBasedColor.innerText = 'Save';
        saveCancelParent.appendChild(saveRuleBasedColor);
        var cancelRuleBasedColor = this._grid.elementHelper.get_divElement();
        cancelRuleBasedColor.id = 'cancelRuleBasedColor';
        cancelRuleBasedColor.className = 'cancelRuleBasedColor';
        cancelRuleBasedColor.innerText = 'Cancel';
        saveCancelParent.appendChild(cancelRuleBasedColor);
        columnRowColorparent.appendChild(columnColor);
        columnRowColorparent.appendChild(rowColor);
        this._divMsg = document.createElement('DIV');
        this._divMsg.id = this._grid.get_id() + '_divRuleErrMsg';
        this._divAddRule = document.getElementById(this._grid.get_GridInfo().GridId + '_divAddRule');
        this._divAddRule.style.display = '';
        ruleColorPopUpDropDowns.appendChild(this._ddlColumns);
        ruleColorPopUpDropDowns.appendChild(this._ddlOperations);
        this._rulePopUptoBeHidden.appendChild(ruleColorPopUpDropDowns);
        this._rulePopUptoBeHidden.appendChild(this._txtUserInput);
        this._rulePopUptoBeHidden.appendChild(colorPalleteIcon);
        this._rulePopUptoBeHidden.appendChild(columnRowColorparent);
        this._rulePopUptoBeHidden.appendChild(saveCancelParent);
        this._rulePopUptoBeHidden.appendChild(this._divMsg);
        this._divRule.insertBefore(this._rulePopUptoBeHidden, this._divAddRule);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._ddlColumns, 'change', Function.createDelegate(this, this._onSelectChnaged));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._divRule);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._divRule, 'click', Function.createDelegate(this, this._ruleBasedColoringDivHandler));
    },

    _ruleColorWindow: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_ruleColorWindow(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var obj = new com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring(this._grid);
        if (document.getElementById('addNewRuleParent') != null) {
            eval('$(\".customizeColumnsIndividual\").css({\"padding-left\":\"50px\"})');
        }
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerCustomizeColumn\").animate({\"width\":\"23.5%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainCustomizeColumnsParent\").animate({\"width\":\"23.5%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerColorRule\").animate({\"width\":\"53%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainColorRuleParent\").animate({\"width\":\"53%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerGrouping\").animate({\"width\":\"23.5%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainGroupingParent\").animate({\"width\":\"23.5%\"})');
        document.getElementById('cancelRulePopUp').style.display = 'block';
        obj._createRuleWindow(e, com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.listColumnNames);
        if (eval('$(\".editDeleteRuleParent' + '\").length') > 0) {
            eval('$(\".editDeleteRuleParent' + '\").css({\'display\':\'inline-block\'})');
        }
        document.getElementById('rulePopUptoBeHidden').style.display = 'block';
        document.getElementById('rulePopUptoBeHidden').style.border = '0px';
    },

    _ruleBasedColoringDivKeyDownHandler: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_ruleBasedColoringDivKeyDownHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'columnNameText') {
            var columnName = document.getElementById(this._grid.get_id() + '_txtUserInput').previousSibling.children[0].children[0].getAttribute('value').toString();
            if (columnName.split('|')[1].toString() === 'xs_decimal' || columnName.split('|')[1].toString() === 'xs_double') {
                var x = eval('$(e.target).val()');
                eval('$(e.target).val(x.toString().replace(/,/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"));');
            }
        }
    },

    _ruleBasedColoringDivHandler: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_ruleBasedColoringDivHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'cancelRuleBasedColor') {
            eval('$(\"#' + this._grid.get_id() + '_txtUserInput' + '\").val(\"\")');
            document.getElementById('rulePopUptoBeHidden').style.display = 'none';
            if (document.getElementById('rulePopUptoBeHidden').getAttribute('InEditMode')) {
                document.getElementById('rulePopUptoBeHidden').parentNode.children[0].style.display = '';
            }
        }
        if (e.target.id === 'columnColor') {
            if (e.target.className === 'columnColor') {
                e.target.className = 'rowColor';
                e.target.parentNode.childNodes[1].className = 'columnColor';
                this._rowColor = true;
            }
            if (e.target.className === 'rowColor') {
                e.target.className = 'columnColor';
                e.target.parentNode.childNodes[1].className = 'rowColor';
                this._rowColor = false;
            }
        }
        if (e.target.id === 'rowColor') {
            if (e.target.className === 'columnColor') {
                e.target.className = 'rowColor';
                e.target.parentNode.childNodes[0].className = 'columnColor';
                this._rowColor = false;
            }
            if (e.target.className === 'rowColor') {
                e.target.className = 'columnColor';
                e.target.parentNode.childNodes[0].className = 'rowColor';
                this._rowColor = true;
            }
        }
        if (e.target.id === 'addRuleIcon' || e.target.id === 'addRuleLabel') {
            if (e.target.parentNode.getAttribute('frommainview') != null) {
                e.target.parentNode.removeAttribute('frommainview');
                this._ruleColorWindow(e);
            }
            if (document.getElementById(this._grid.get_id() + 'divRuleErrMsg') != null) {
                if (document.getElementById(this._grid.get_id() + 'divRuleErrMsg').style.display === 'block') {
                    document.getElementById(this._grid.get_id() + 'divRuleErrMsg').style.display = 'none';
                }
            }
            document.getElementById('rulePopUptoBeHidden').setAttribute('InEditMode', 'false');
            document.getElementById('firstColumnDiv').innerText = 'Column Name';
            document.getElementById('firstOperationDiv').innerText = 'Operator';
            document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput').setAttribute('placeholder', 'Enter Value');
            document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput').style.backgroundColor = '#F7F2DC';
            if (eval('$(\".addRuleLabel' + '\").parent().next(\".rulePopUptoBeHidden\").length') !== 0) {
                document.getElementById('rulePopUptoBeHidden').style.display = 'block';
                document.getElementById('rulePopUptoBeHidden').style.border = '0px';
            }
            else {
                document.getElementById('rulePopUptoBeHidden').parentNode.childNodes[0].style.display = 'block';
                var newPopUp = eval('$(\".ruleColoringPopUpNewParent' + '\")');
                eval('newPopUp.append(document.getElementById(\'rulePopUptoBeHidden\'))');
                document.getElementById('rulePopUptoBeHidden').style.display = 'block';
                document.getElementById('rulePopUptoBeHidden').style.border = '0px';
            }
        }
        if (e.target.id === 'colorPalleteIcon') {
            if (document.getElementById(this._grid.get_id() + '_ColorPaletteDivID').style.display === 'none') {
                this._createColorDiv();
            }
            else {
                document.getElementById(this._grid.get_id() + '_ColorPaletteDivID').style.display = 'none';
            }
            var offsettop = 0;
            var offsetleft = 0;
            var parent = document.getElementById(this._grid.get_GridInfo().GridId);
            while (parent != null && parent.offsetParent != null) {
                if ((parent.offsetParent.style.position !== '' && parent.offsetParent.style.position.toString().toLowerCase() !== 'static') || (eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== '' && eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== 'static')) {
                    offsettop += parent.offsetParent.offsetTop;
                    offsetleft += parent.offsetParent.offsetLeft;
                    parent = parent.offsetParent;
                }
                else {
                    parent = parent.offsetParent;
                }
            }
            var locationX = e.clientX + document.documentElement.scrollLeft + -offsetleft;
            var locationY = e.clientY + document.documentElement.scrollTop + 5 - offsettop;
            document.getElementById(this._grid.get_id() + '_ColorPaletteDivID').style.top = locationY + 'px';
            document.getElementById(this._grid.get_id() + '_ColorPaletteDivID').style.left = locationX + 'px';
        }
        if (e.target.id === 'saveRuleBasedColor') {
            if (e.target.parentNode.parentNode.getAttribute('InEditMode').toString() === 'true') {
                if (this._validateRule(this._updatedRowIndex)) {
                    this._updateRule();
                }
            }
            else {
                if (this._validateRule(-1)) {
                    this._coloringInfo = new com.ivp.rad.controls.neogrid.scripts.info.RuleBasedColoringInfo();
                    var ruleText = document.getElementById('firstColumnDiv').innerText + '  ' + document.getElementById('firstOperationDiv').innerText + '  ' + (document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value.replace(this.regex, '');
                    var ruleColor = $(document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).css("background-color");
                    var dataType = document.getElementById('firstColumnDiv').getAttribute('value').toString().split('|')[1];
                    if (dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime) {
                        this._coloringInfo.RightOperand = Date.parseInvariant((document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value, this._grid.get_GridInfo().DateFormat).format('yyyyMMdd');
                    }
                    else {
                        this._coloringInfo.RightOperand = (document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value.replace(this.regex, '');
                    }
                    this._coloringInfo.ColorCode = ruleColor;
                    this._coloringInfo.ColumnName = document.getElementById('firstColumnDiv').getAttribute('value').toString().split('|')[0];
                    this._coloringInfo.Operator = document.getElementById('firstOperationDiv').innerText;
                    this._coloringInfo.OpType = com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType.insertRule;
                    this._coloringInfo.RuleId = -1;
                    this._coloringInfo.RuleText = ruleText;
                    this._coloringInfo.DataType = dataType;
                    this._coloringInfo.RowColor = this._rowColor;
                    Array.add(this.tempRuleList, this._coloringInfo);
                    this._coloringInfo = null;
                    this._applyRules(e);
                }
            }
        }
        if (e.target.id === this._grid.get_id() + '_btnDeleteRule') {
            this._deleteExistingRule(e);
        }
        if (e.target.id === this._grid.get_id() + '_btnEditRule') {
            for (var i = 0; i < e.target.parentNode.parentNode.parentNode.parentNode.childNodes.length; i++) {
                if (e.target.parentNode.parentNode.parentNode.parentNode.childNodes[i].childNodes.length > 1) {
                    if (e.target.parentNode.parentNode.parentNode.parentNode.childNodes[i].childNodes[1].getAttribute('InEditMode') != null) {
                        if (e.target.parentNode.parentNode.parentNode.parentNode.childNodes[i].childNodes[1].getAttribute('InEditMode').toString() === 'true') {
                            e.target.parentNode.parentNode.parentNode.parentNode.childNodes[i].childNodes[0].style.display = '';
                            e.target.parentNode.parentNode.parentNode.parentNode.childNodes[i].childNodes[1].style.display = 'none';
                            e.target.parentNode.parentNode.parentNode.parentNode.childNodes[i].childNodes[1].setAttribute('InEditMode', false);
                        }
                    }
                }
            }
            this._editExistingRule(e);
        }
    },

    _editExistingRule: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_editExistingRule(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerCustomizeColumn\").animate({\"width\":\"23.5%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainCustomizeColumnsParent\").animate({\"width\":\"23.5%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerColorRule\").animate({\"width\":\"53%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainColorRuleParent\").animate({\"width\":\"53%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerGrouping\").animate({\"width\":\"23.5%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainGroupingParent\").animate({\"width\":\"23.5%\"})');
        document.getElementById('cancelRulePopUp').style.display = 'block';
        document.getElementById('addNewRuleParent').removeAttribute('frommainview');
        if (eval('$(\".addRuleGridPanelNew' + '\").children().length') === 1 || (eval('$(\".addRuleGridPanelNew' + '\").children().length') === 0)) {
            eval('$(\".eachAddRule' + '\").parent().css({\'width\':\'47%\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'float\':\'left\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-left\':\'145px\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-right\':\'0px\'})');
        }
        if (eval('$(\".addRuleGridPanelNew' + '\").children().length') > 1) {
            eval('$(\".eachAddRule' + '\").parent().css({\'width\':\'47%\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'float\':\'left\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-left\':\'14px\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-right\':\'0px\'})');
        }
        var index = 0;
        var indexStr = '';
        indexStr = e.target.getAttribute('counter').toString();
        index = eval('parseInt(' + indexStr + ')') - 1;
        var oInfo = this.get_ruleList()[index];
        document.getElementById('firstColumnDiv').setAttribute('value', oInfo.ColumnName + '|' + oInfo.DataType);
        var $dict1 = this._grid.get_GridInfo().ColumnNameMapping;
        for (var $key2 in $dict1) {
            var item = { key: $key2, value: $dict1[$key2] };
            if (item.key === oInfo.ColumnName) {
                oInfo.ColumnName = item.value.toString();
                break;
            }
        }
        document.getElementById('firstColumnDiv').innerText = oInfo.ColumnName;
        var oper = oInfo.Operator;
        var dataType = oInfo.DataType;
        this._ddlOperations = document.getElementById(this._grid.get_id() + '_ddlRuleOperations');
        this._ddlColumns = document.getElementById(this._grid.get_id() + '_ddlColumns');
        this._txtUserInput = document.getElementById(this._grid.get_id() + '_txtUserInput');
        this._grid.raddomElement.setInnerContent(this._ddlOperations, '');
        Array.clear(this._arrOperations);
        this._bindOperations(dataType);
        document.getElementById('firstOperationDiv').innerText = oper;
        if (dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime) {
            this._getDateInputControl();
            this._dateControlObj.set_date(Date.parseInvariant(oInfo.RightOperand, 'yyyyMMdd').format(this._dateControlObj.get_dateFormat()));
            this._txtUserInput.value = this._dateControlObj.get_date();
        }
        else {
            eval('$(\"#' + this._grid.get_id() + '_txtUserInput' + '\").val(oInfo.RightOperand)');
        }
        if (oInfo.RowColor) {
            document.getElementById('rowColor').className = 'columnColor';
            document.getElementById('columnColor').className = 'rowColor';
        }
        document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput').style.backgroundColor = oInfo.ColorCode;
        this._updateStatus = true;
        this._updatedRowIndex = index;
        var eachRulePopUp = document.getElementById('rulePopUptoBeHidden');
        var parent = e.target.parentNode.parentNode;
        var actualParent = e.target.parentNode.parentNode.parentNode;
        parent.style.display = 'none';
        eachRulePopUp.setAttribute('InEditMode', 'true');
        actualParent.appendChild(eachRulePopUp);
        eachRulePopUp.style.border = '1px solid #EBEBEB';
        eachRulePopUp.style.display = '';
    },

    _createEditPopUp: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_createEditPopUp(columnName, oper, value) {
        /// <param name="columnName" type="String">
        /// </param>
        /// <param name="oper" type="String">
        /// </param>
        /// <param name="value" type="String">
        /// </param>
    },

    _pickColor: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_pickColor(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var bounds = Sys.UI.DomElement.getBounds(this._divRule);
        this._divColors.style.left = '60%';
        this._divColors.style.top = '25%';
        this._divColors.style.display = '';
        e.preventDefault();
    },

    _createColorDiv: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_createColorDiv() {
        this._divColors = document.getElementById(this._grid.get_id() + '_ColorPaletteDivID');
        this._divColors.style.display = 'none';
        this._divColors.className = 'colorPaletteDiv';
        this._divColors.innerHTML = '';
        var tblcolorPicker = this._grid.elementHelper.get_table();
        tblcolorPicker.setAttribute('cellPadding', '1');
        tblcolorPicker.setAttribute('border', '1');
        tblcolorPicker.style.border = '1px solid #EEEEEE';
        var row = null;
        var cellColor = null;
        var str = ['f6f2dc', 'f3ddf8', 'dcfbfb', 'f0f2d7', 'ccc1e3', 'cbdccc', 'c97f7f', 'b1c7dd', 'abdb8b', 'd3db8b', 'ad993c', '758fa9'];
        var j = 0;
        for (var i = 0; i < 12; i++) {
            if ((i % 6) === 0) {
                row = tblcolorPicker.insertRow(tblcolorPicker.rows.length);
            }
            cellColor = row.insertCell(row.cells.length);
            j = i * 200;
            cellColor.style.backgroundColor = '#' + str[i];
            cellColor.style.width = '5px';
            cellColor.style.height = '18px';
            cellColor.innerHTML = '&nbsp;';
        }
        if (this._divColors.style.display === 'none') {
            this._divColors.appendChild(tblcolorPicker);
            this._divColors.style.display = '';
        }
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._divColors);
        $addHandler(this._divColors, 'click', Function.createDelegate(this, this._selectColor));
    },

    _selectColor: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_selectColor(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        e.preventDefault();
        if (e.target.tagName.toUpperCase() === 'TD') {
            this._divColors.style.display = 'none';
            document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput').style.backgroundColor = e.target.style.backgroundColor;
        }
    },

    openRuleWindow: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$openRuleWindow() {
        com.ivp.rad.controls.neogrid.scripts.GridUIHelper.manageBackGround(true);
        this._divRule = document.getElementById(this._grid.get_id() + '_RuleDivID');
        if (this._divRule.style.display === 'none') {
            this._divRule.style.display = '';
        }
    },

    _clearRuleWindow: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_clearRuleWindow() {
        this._ddlColumns.setAttribute('value', '-1');
        this._grid.raddomElement.setInnerContent(this._ddlOperations, '');
    },

    _updateRule: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_updateRule() {
        var realValue = '';
        var ruleText = document.getElementById('firstColumnDiv').innerText + '  ' + document.getElementById('firstOperationDiv').innerText + '  ' + (document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value.replace(',', '');
        var coloringInfo = com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList[this._updatedRowIndex];
        coloringInfo.ColorCode = $(document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).css("background-color");//document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput').style.backgroundColor;
        coloringInfo.ColumnName = document.getElementById('firstColumnDiv').getAttribute('value').toString().split('|')[0];
        coloringInfo.Operator = document.getElementById('firstOperationDiv').innerText;
        var dataType = document.getElementById('firstColumnDiv').getAttribute('value').toString().split('|')[1];
        if (dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime) {
            if ((document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value !== '') {
                if (this._dateControlObj != null) {
                    coloringInfo.RightOperand = Date.parseInvariant((document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value, this._dateControlObj.get_dateFormat()).format('yyyyMMdd');
                }
                else {
                    coloringInfo.RightOperand = Date.parseInvariant((document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value, this._grid.get_GridInfo().DateFormat).format('yyyyMMdd');
                }
            }
            else {
                if (this._dateControlObj != null) {
                    coloringInfo.RightOperand = Date.parseInvariant(document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput').getAttribute('placeholder').toString(), this._dateControlObj.get_dateFormat()).format('yyyyMMdd');
                }
                else {
                    coloringInfo.RightOperand = Date.parseInvariant(document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput').getAttribute('placeholder').toString(), this._grid.get_GridInfo().DateFormat).format('yyyyMMdd');
                }
            }
        }
        else {
            if ((document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value !== '') {
                coloringInfo.RightOperand = (document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value.replace(this.regex, '');
                realValue = (document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value;
            }
            else {
                coloringInfo.RightOperand = document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput').getAttribute('placeholder').toString();
            }
        }
        coloringInfo.RuleText = ruleText;
        coloringInfo.DataType = dataType;
        coloringInfo.RowColor = this._rowColor;
        coloringInfo.OpType = com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType.updateRule;
        this._updateStatus = false;
        this._updatedRowIndex = 0;
        this.addRulesToPopUp(coloringInfo.ColumnName, coloringInfo.Operator, coloringInfo.RightOperand, coloringInfo.ColorCode, coloringInfo.OpType, coloringInfo.DataType, coloringInfo.RowColor, false, true, realValue);
        this._clearRuleWindow();
        this._removeDateInputControl();
    },

    addRulesToPopUp: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$addRulesToPopUp(columnName, operat, value, color, opType, dataType, rowColor, comesFromMainMergedView, updateRule, realValue) {
        /// <param name="columnName" type="String">
        /// </param>
        /// <param name="operat" type="String">
        /// </param>
        /// <param name="value" type="String">
        /// </param>
        /// <param name="color" type="String">
        /// </param>
        /// <param name="opType" type="com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType">
        /// </param>
        /// <param name="dataType" type="String">
        /// </param>
        /// <param name="rowColor" type="Boolean">
        /// </param>
        /// <param name="comesFromMainMergedView" type="Boolean">
        /// </param>
        /// <param name="updateRule" type="Boolean">
        /// </param>
        /// <param name="realValue" type="String">
        /// </param>
        var cntrForUpdateRule = 0;
        var displayNames = [];
        displayNames = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
        var columnNameattr = columnName;
        for (var i = 0; i < displayNames.length; i++) {
            if (columnName === displayNames[i].toString()) {
                columnName = this._grid.get_GridInfo().ColumnNameMapping[columnName].toString();
                break;
            }
        }
        if (dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime) {
            var year = value.substring(0, 4);
            var month = value.substring(4, 6);
            var day = value.substring(6, 8);
            value = month + '/' + day + '/' + year;
        }
        if (comesFromMainMergedView) {
            if (document.getElementById('faiconMerger') != null) {
                document.getElementById('faiconMerger').style.marginTop = '0px';
            }
        }
        var eachAddRuleParent = this._grid.elementHelper.get_divElement();
        var eachAddRule = this._grid.elementHelper.get_divElement();
        eachAddRule.id = this._grid.get_id() + '_eachAddRule' + columnName + operat + value;
        eachAddRule.className = 'eachAddRule';
        eachAddRule.setAttribute('IsColumnColored', true);
        var ruleTextParent = this._grid.elementHelper.get_divElement();
        ruleTextParent.id = this._grid.get_id() + '_ruleTextParent' + columnName + operat + value;
        ruleTextParent.className = 'ruleTextParent';
        var ruleColumnName = this._grid.elementHelper.get_divElement();
        ruleColumnName.id = this._grid.get_id() + '_ruleColumnName' + columnName;
        ruleColumnName.className = 'ruleColumnName';
        ruleColumnName.innerText = columnName;
        ruleColumnName.title = columnName;
        ruleColumnName.setAttribute('realcolumnname', columnNameattr);
        ruleTextParent.appendChild(ruleColumnName);
        var ruleSeperator = this._grid.elementHelper.get_divElement();
        ruleSeperator.id = this._grid.get_id() + '_ruleSeperator' + operat;
        ruleSeperator.className = 'ruleSeperator';
        ruleSeperator.innerText = '|';
        ruleTextParent.appendChild(ruleSeperator);
        var ruleOperator = this._grid.elementHelper.get_divElement();
        if (operat === '=') {
            ruleOperator.id = this._grid.get_id() + '_ruleOperator' + 'equalsto';
            ruleOperator.innerText = 'Equals To';
        }
        if (operat === '>') {
            ruleOperator.id = this._grid.get_id() + '_ruleOperator' + 'greaterthan';
            ruleOperator.innerText = 'Greater than';
        }
        if (operat === '<') {
            ruleOperator.id = this._grid.get_id() + '_ruleOperator' + 'lessthan';
            ruleOperator.innerText = 'Less than';
        }
        if (operat === 'StartsWith') {
            ruleOperator.id = this._grid.get_id() + '_ruleOperator' + 'StartsWith';
            ruleOperator.innerText = 'Starts With';
        }
        if (operat === 'EndsWith') {
            ruleOperator.id = this._grid.get_id() + '_ruleOperator' + 'EndsWith';
            ruleOperator.innerText = 'Ends With';
        }
        if (operat === 'Contains') {
            ruleOperator.id = this._grid.get_id() + '_ruleOperator' + 'Contains';
            ruleOperator.innerText = 'Contains';
        }
        if (operat === 'Equals') {
            ruleOperator.id = this._grid.get_id() + '_ruleOperator' + 'Equals';
            ruleOperator.innerText = 'Equals';
        }
        ruleOperator.className = 'ruleOperator';
        ruleTextParent.appendChild(ruleOperator);
        var ruleValueParent = this._grid.elementHelper.get_divElement();
        ruleValueParent.className = 'ruleValueParent';
        var rowColumnColored = this._grid.elementHelper.get_divElement();
        rowColumnColored.className = 'rowColumnColored';
        var ruleValue = this._grid.elementHelper.get_textElement();
        ruleValue.id = this._grid.get_id() + '_ruleValueText';
        ruleValue.className = 'ruleValueText';
        ruleValue.disabled = true;
        ruleValue.setAttribute('placeholder', value);
        ruleValue.value = realValue;
        ruleValue.style.backgroundColor = color;
        if (rowColor) {
            rowColumnColored.innerText = 'Row Colored';
        }
        if (!rowColor) {
            rowColumnColored.innerText = 'Cell Colored';
        }
        ruleValueParent.appendChild(ruleValue);
        ruleValueParent.appendChild(rowColumnColored);
        var columnRowColored = this._grid.elementHelper.get_divElement();
        columnRowColored.className = 'columnRowColored';
        var editDeleteRuleParent = this._grid.elementHelper.get_divElement();
        editDeleteRuleParent.className = 'editDeleteRuleParent';
        editDeleteRuleParent.id = 'editDeleteRuleParent';
        var editRulebtn = this._grid.elementHelper.get_divElement();
        editRulebtn.id = this._grid.get_id() + '_btnEditRule';
        editRulebtn.className = 'btnEditRule';
        editRulebtn.innerText = 'Edit';
        if (updateRule) {
            cntrForUpdateRule = eval('parseInt($($(\".saveRuleBasedColor\").closest(\".rulePopUptoBeHidden\").parent().children()[0]).find(\".btnEditRule\").attr(\"counter\"))');
            editRulebtn.setAttribute('counter', cntrForUpdateRule);
        }
        else {
            ++com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.cntrToMaintainindexruleList;
            editRulebtn.setAttribute('counter', com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.cntrToMaintainindexruleList);
        }
        var deleteRulebtn = this._grid.elementHelper.get_divElement();
        deleteRulebtn.id = this._grid.get_id() + '_btnDeleteRule';
        deleteRulebtn.className = 'btnDeleteRule';
        deleteRulebtn.innerText = 'Delete';
        editDeleteRuleParent.appendChild(editRulebtn);
        editDeleteRuleParent.appendChild(deleteRulebtn);
        eachAddRule.appendChild(ruleTextParent);
        eachAddRule.appendChild(ruleValueParent);
        eachAddRule.appendChild(editDeleteRuleParent);
        eachAddRuleParent.appendChild(eachAddRule);
        if (document.getElementById(this._grid.get_id() + '_divAddRule') == null) {
            this._divAddRule = document.createElement('DIV');
            this._divAddRule.id = this._grid.get_id() + '_divAddRule';
            this._divAddRule.className = 'addRuleGridPanelNew';
            this._divAddRule.style.display = '';
        }
        else {
            this._divAddRule = document.getElementById(this._grid.get_id() + '_divAddRule');
        }
        if (!updateRule) {
            this._divAddRule.appendChild(eachAddRuleParent);
        }
        else {
            eval('$($(\".saveRuleBasedColor' + '\").closest(\".rulePopUptoBeHidden\").parent().children()[0]).remove();');
            eval('$($(\".saveRuleBasedColor' + '\").closest(\".rulePopUptoBeHidden\").parent().children()[0]).css({\"display\":\"none\"});');
            eval('$($(\".saveRuleBasedColor' + '\").closest(\".rulePopUptoBeHidden\").parent()).append(eachAddRule);');
        }
        if (eval('$(\".addRuleGridPanelNew' + '\").children().length') === 1 || (eval('$(\".addRuleGridPanelNew' + '\").children().length') === 0)) {
            eval('$(\".eachAddRule' + '\").parent().css({\'width\':\'47%\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'float\':\'left\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-left\':\'145px\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-right\':\'0px\'})');
        }
        if (eval('$(\".addRuleGridPanelNew' + '\").children().length') > 1) {
            eval('$(\".eachAddRule' + '\").parent().css({\'width\':\'47%\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'float\':\'left\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-right\':\'14px\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-left\':\'0px\'})');
        }
        if (comesFromMainMergedView) {
            eval('$(\".eachAddRule' + '\").parent().css({\'width\':\'100%\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'float\':\'none\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-right\':\'0px\'})');
            eval('$(\".eachAddRule' + '\").parent().css({\'margin-left\':\'0px\'})');
        }
        this._divAddRule.style.display = '';
        if (eval('$(\"#mainRuleColorParent' + '\").find(\".addRuleGridPanelNew\").length') === 0) {
            document.getElementById('mainRuleColorParent').appendChild(this._divAddRule);
        }
        document.getElementById('mainRuleColorParent').style.display = 'inline-block';
        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(this._divAddRule);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(this._divAddRule, 'click', Function.createDelegate(this, this._ruleBasedColoringDivHandler));
    },

    _addRuleToTable: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_addRuleToTable(columnName, operat, value, color, opType, dataType) {
        /// <param name="columnName" type="String">
        /// </param>
        /// <param name="operat" type="String">
        /// </param>
        /// <param name="value" type="String">
        /// </param>
        /// <param name="color" type="String">
        /// </param>
        /// <param name="opType" type="com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType">
        /// </param>
        /// <param name="dataType" type="String">
        /// </param>
        if (opType === com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType.deleteRule) {
            return;
        }
        this._divAddRule.style.display = 'inline';
        this._btnApplyRule.style.display = 'inline';
        var row = null;
        var cellRule = null;
        var ruleColor = this._grid.elementHelper.get_textElement();
        row = this._tblRuleList.insertRow(this._tblRuleList.rows.length);
        cellRule = row.insertCell(row.cells.length);
        this._grid.raddomElement.setInnerContent(cellRule, columnName);
        cellRule = row.insertCell(row.cells.length);
        this._grid.raddomElement.setInnerContent(cellRule, operat);
        cellRule = row.insertCell(row.cells.length);
        cellRule.style.paddingLeft = '15px';
        if (dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime) {
            if (this._validateDate(value)) {
                this._grid.raddomElement.setInnerContent(cellRule, value);
            }
            else {
                this._grid.raddomElement.setInnerContent(cellRule, Date.parseInvariant(value, 'yyyyMMdd').format(this._grid.get_GridInfo().DateFormat));
            }
        }
        else {
            this._grid.raddomElement.setInnerContent(cellRule, value);
        }
        cellRule = row.insertCell(row.cells.length);
        cellRule.style.textAlign = 'center';
        ruleColor.id = this._grid.get_id() + '_txtRuleColor_' + this._ruleCount.toString();
        ruleColor.style.backgroundColor = color;
        ruleColor.style.width = '10px';
        ruleColor.style.height = '10px';
        ruleColor.disabled = true;
        cellRule.appendChild(ruleColor);
        cellRule = row.insertCell(row.cells.length);
        cellRule.style.textAlign = 'center';
        var _btnEditRule = document.createElement('A');
        _btnEditRule.id = this._grid.get_id() + '_btnEditRule_' + this._ruleCount.toString();
        _btnEditRule.className = 'addRuleEditBtn';
        _btnEditRule.style.marginLeft = '46%';
        cellRule.appendChild(_btnEditRule);
        cellRule = row.insertCell(row.cells.length);
        cellRule.style.textAlign = 'center';
        var _btnDeleteRule = document.createElement('A');
        _btnDeleteRule.id = this._grid.get_id() + '_btnDeleteRule_' + this._ruleCount.toString();
        _btnDeleteRule.className = 'addRuleRemoveBtn';
        _btnDeleteRule.style.marginLeft = '46%';
        cellRule.appendChild(_btnDeleteRule);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(_btnDeleteRule, 'click', Function.createDelegate(this, this._deletRule));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(_btnEditRule, 'click', Function.createDelegate(this, this._editRule));
        this._ruleCount++;
    },

    _applyRules: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_applyRules(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._updateStatus = false;
        com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList = com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.concat(this.tempRuleList);
        Array.forEach(this.tempRuleList, Function.createDelegate(this, function (o) {
            var realValue = (o).RightOperand;
            eval('realValue.replace(\"/\\B(?=(\\d{3})+(?!\\d))/g\",\",\")');
            this.addRulesToPopUp((o).ColumnName, (o).Operator, (o).RightOperand, (o).ColorCode, (o).OpType, (o).DataType, (o).RowColor, false, false, realValue);
        }));
        this._closeDiv(e);
        e.preventDefault();
    },

    _deleteExistingRule: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_deleteExistingRule(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        eval('$(e.target).closest(\'.eachAddRule\').parent().remove()');
        for (var i = 0; i < com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length; i++) {
            if ((com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList[i]).ColorCode === e.target.parentNode.parentNode.childNodes[1].childNodes[0].style.backgroundColor) {
                (com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList[i]).OpType = com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType.deleteRule;
            }
        }
    },

    _deletRule: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_deletRule(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var rowElement = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'tr');
        var index = com.ivp.rad.controls.neogrid.scripts.GridUIHelper.rowIndex(rowElement);
        com.ivp.rad.controls.neogrid.scripts.GridUIHelper.removeTextNodesFromGrid(rowElement.parentNode);
        rowElement.parentNode.removeChild(rowElement);
        for (var i = 0; i < this.tempRuleList.length; i++) {
            if ((this.tempRuleList[i]).ColorCode === rowElement.children[3].children[0].style.backgroundColor) {
                (this.tempRuleList[i]).OpType = com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType.deleteRule;
            }
        }
        if (this.tempRuleList.length === 0) {
            this._divAddRule.style.display = 'none';
        }
        e.preventDefault();
    },

    _editRule: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_editRule(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var rowElement = com.ivp.rad.rscriptutils.RSCommonScripts.findControl(e.target, 'tr');
        var index = com.ivp.rad.controls.neogrid.scripts.GridUIHelper.rowIndex(rowElement);
        var oInfo = this.tempRuleList[index - 1];
        this._ddlColumns.setAttribute('value', oInfo.ColumnName + '|' + oInfo.DataType);
        var oper = oInfo.Operator;
        var dataType = oInfo.DataType;
        this._grid.raddomElement.setInnerContent(this._ddlOperations, '');
        Array.clear(this._arrOperations);
        this._bindOperations(dataType);
        this._ddlOperations.setAttribute('value', oper);
        if (dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime) {
            this._getDateInputControl();
            this._dateControlObj.set_date(Date.parseInvariant(oInfo.RightOperand, 'yyyyMMdd').format(this._dateControlObj.get_dateFormat()));
            (document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value = this._dateControlObj.get_date();
        }
        else {
            (document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value = oInfo.RightOperand;
        }
        this._txtRuleColor.style.backgroundColor = oInfo.ColorCode;
        this._grid.raddomElement.setInnerContent(this._btnAddRules, 'Update');
        this._updateStatus = true;
        this._updatedRowIndex = index - 1;
        this._divCancelUpdate.style.display = 'inline';
    },

    _cancelUpdate: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_cancelUpdate(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._clearRuleWindow();
        this._divCancelUpdate.style.display = 'inline';
        this._grid.raddomElement.setInnerContent(this._btnAddRules, 'Add');
        e.preventDefault();
    },

    _onOperationChnaged: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_onOperationChnaged(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'firstOperationDiv') {
            if (e.target.innerText === 'Operator') {
                document.getElementById(this._grid.get_id() + '_ddlRuleOperations').style.height = 'auto';
            }
            else {
                if (this._ddlOperations.clientHeight === 20) {
                    this._ddlOperations.style.height = 'auto';
                }
                else {
                    this._ddlOperations.style.height = '20px';
                    this._ddlColumns.style.height = '20px';
                    this._ddlColumns.style.overflow = 'hidden';
                }
            }
        }
        if (e.target.className === 'eachOperation') {
            document.getElementById('firstOperationDiv').innerText = e.target.innerText;
            this._ddlOperations.style.height = '20px';
        }
    },

    _onSelectChnaged: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_onSelectChnaged(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        eval('$(\".existingColumnNames\").scrollTop(0)');
        if (document.getElementById(this._grid.get_id() + '_columnOptionsName') == null) {
            var $dict1 = com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.listColumnNames;
            for (var $key2 in $dict1) {
                var entry = { key: $key2, value: $dict1[$key2] };
                var columnOptionsNames = document.createElement('DIV');
                columnOptionsNames.id = this._grid.get_id() + '_columnOptionsName';
                columnOptionsNames.className = 'columnOptionsEach';
                columnOptionsNames.title = entry.key.trim();
                columnOptionsNames.innerText = entry.key.trim();
                columnOptionsNames.setAttribute('value', entry.value.toString());
                this._ddlColumns.appendChild(columnOptionsNames);
            }
        }
        if (e.target.className === 'firstColumnDiv') {
            if (e.target.innerText === 'Column Name') {
                this._ddlColumns.style.height = '300px';
                this._ddlColumns.style.overflow = 'scroll';
                eval('$(\"#' + this._grid.get_id() + '_ddlColumns' + '\").css({\"overflow-x\":\"hidden\"})');
            }
            else {
                if (this._ddlColumns.style.height === '20px') {
                    this._ddlColumns.style.height = '300px';
                    this._ddlColumns.style.overflow = 'scroll';
                    eval('$(\"#' + this._grid.get_id() + '_ddlColumns' + '\").css({\"overflow-x\":\"hidden\"})');
                }
                else {
                    this._ddlColumns.style.height = '20px';
                    this._ddlColumns.style.overflow = 'hidden';
                }
            }
        }
        if (e.target.className === 'columnOptionsEach') {
            document.getElementById('firstColumnDiv').innerText = e.target.innerText;
            document.getElementById('firstColumnDiv').setAttribute('value', e.target.getAttribute('value').toString());
            this._ddlColumns.style.height = '20px';
            this._ddlColumns.style.overflow = 'hidden';
        }
        this._ddlOperations.disabled = false;
        Array.clear(this._arrOperations);
        var columnName = e.target.getAttribute('value').toString().split('|')[0];
        var dataType = e.target.getAttribute('value').toString().split('|')[1];
        this._bindOperations(dataType);
        if (dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime) {
            document.getElementById(this._grid.get_id() + '_txtUserInput').setAttribute('placeholder', this._grid.get_GridInfo().DateFormat);
            document.getElementById(this._grid.get_id() + '_txtUserInput').style.textAlign = 'left';
        }
        else {
            document.getElementById(this._grid.get_id() + '_txtUserInput').setAttribute('placeholder', 'Enter Value');
        }
        if (dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal || dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double || dataType === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int) {
            document.getElementById(this._grid.get_id() + '_txtUserInput').style.textAlign = 'right';
            (document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value = '';
        }
        else {
            if (!this._updateStatus) {
                document.getElementById(this._grid.get_id() + '_txtUserInput').style.textAlign = 'left';
            }
            (document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value = '';
        }
    },

    _getDateInputControl: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_getDateInputControl() {
        if (this._dateControlObj == null) {
            this._dateControlObj = new com.ivp.rad.controls.raddateinput.scripts.DateInputScripts(document.getElementById(this._grid.get_id() + '_txtUserInput'));
            this._dateControlObj.set_dateFormat(this._grid.get_GridInfo().DateFormat);
            this._dateControlObj.set_date('');
            this._dateControlObj.endUpdate();
            Sys.Application.addComponent(this._dateControlObj);
        }
    },

    _getColumnList: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_getColumnList() {
        var counter = 0;
        com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.listColumnNames = {};
        this._columnDisplayNameList = [];
        var frozenHeaderColumn = (this._grid.elementInfo.get_frozenHeaderDiv() != null) ? this._grid.elementInfo.get_frozenHeaderDiv().children[0].children[0].children[0].children : null;
        var fluidHeadercolumn = this._grid.elementInfo.get_fluidHeaderDiv().children[0].children[0].children[0].children;
        if (frozenHeaderColumn != null) {
            for (var i = 0; i < frozenHeaderColumn.length; i++) {
                if (frozenHeaderColumn[i].getAttribute('columnName') == null) {
                    continue;
                }
                if (frozenHeaderColumn[i].getAttribute('dataType').toString() === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_boolean) {
                    continue;
                }
                com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.listColumnNames[fluidHeadercolumn[i].lastChild.innerText] = fluidHeadercolumn[i].getAttribute('columnName').toString() + '|' + fluidHeadercolumn[i].getAttribute('dataType').toString();
                this._columnDisplayNameList[counter++] = fluidHeadercolumn[i].lastChild.innerText;
            }
        }
        if (fluidHeadercolumn != null) {
            for (var i = 0; i < fluidHeadercolumn.length; i++) {
                if (fluidHeadercolumn[i].getAttribute('columnName') == null) {
                    continue;
                }
                if (fluidHeadercolumn[i].getAttribute('dataType').toString() === com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_boolean) {
                    continue;
                }
                com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.listColumnNames[fluidHeadercolumn[i].lastChild.innerText] = fluidHeadercolumn[i].getAttribute('columnName').toString() + '|' + fluidHeadercolumn[i].getAttribute('dataType').toString();
                this._columnDisplayNameList[counter++] = fluidHeadercolumn[i].lastChild.innerText;
            }
        }
    },

    _removeDateInputControl: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_removeDateInputControl() {
        if (this._dateControlObj != null) {
            this._dateControlObj.dispose();
            Sys.Application.removeComponent(this._dateControlObj);
            $clearHandlers(document.getElementById(this._grid.get_id() + '_txtUserInput'));
            this._dateControlObj = null;
        }
    },

    _addToolTipToUserInputBox: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_addToolTipToUserInputBox() {
        this._txtUserInput.title = 'Enter date in (mm / dd / yyyy)';
    },

    _removeToolTipFromUserInputBox: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_removeToolTipFromUserInputBox() {
        this._txtUserInput.title = '';
    },

    _bindOperations: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_bindOperations(dataType) {
        /// <param name="dataType" type="String">
        /// </param>
        this._grid.raddomElement.setInnerContent(this._ddlOperations, '');
        this._ddlOperations.innerHTML = '<div id=\"firstOperationDiv\" class=\"firstOperationDiv\">Operator</div><div class=\"fa fa-caret-down dropdownoperations\"></div>';
        var operatorOptions = this._grid.elementHelper.get_divElement();
        switch (dataType) {
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal:
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double:
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int:
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime:
                this._addNumberOperations();
                if (this._arrOperations.length > 0) {
                    var option = null;
                    Array.forEach(this._arrOperations, Function.createDelegate(this, function (o, i, a) {
                        if (o.toString().trim() !== '') {
                            option = document.createElement('DIV');
                            option.setAttribute('value', o.toString().split('|')[0]);
                            option.innerText = o.toString().split('|')[0];
                            option.title = o.toString();
                            option.className = 'eachOperation';
                            this._ddlOperations.appendChild(option);
                        }
                    }));
                }
                break;
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_string:
                this._addStringOperations();
                if (this._arrOperations.length > 0) {
                    var option = null;
                    Array.forEach(this._arrOperations, Function.createDelegate(this, function (o, i, a) {
                        if (o.toString().trim() !== '') {
                            option = document.createElement('DIV');
                            option.setAttribute('value', o.toString().split('|')[0]);
                            option.innerText = o.toString().split('|')[0];
                            option.title = o.toString();
                            option.className = 'eachOperation';
                            this._ddlOperations.appendChild(option);
                        }
                    }));
                }
                break;
            default:
                break;
        }
    },

    _closeDiv: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_closeDiv(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        Array.clear(this.tempRuleList);
        document.getElementById('rulePopUptoBeHidden').style.display = 'none';
    },

    _addNumberOperations: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_addNumberOperations() {
        Array.add(this._arrOperations, '>' + '|' + 'Greater than');
        Array.add(this._arrOperations, '<' + '|' + 'Less than');
        Array.add(this._arrOperations, '=' + '|' + 'Equals to');
    },

    _addStringOperations: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_addStringOperations() {
        Array.add(this._arrOperations, 'StartsWith');
        Array.add(this._arrOperations, 'EndsWith');
        Array.add(this._arrOperations, 'Equals');
        Array.add(this._arrOperations, 'Contains');
    },

    _validateRule: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_validateRule(index) {
        /// <param name="index" type="Number" integer="true">
        /// </param>
        /// <returns type="Boolean"></returns>
        var ruleColor = '#F7F2DC';
        var columnName = document.getElementById('firstColumnDiv').getAttribute('value').toString().split('|')[0];
        var operatorName = '';
        var dataType = '';
        if (columnName !== 'Column Name') {
            dataType = document.getElementById('firstColumnDiv').getAttribute('value').toString().split('|')[1];
            operatorName = document.getElementById('firstOperationDiv').innerText;
        }
        var errMsg = '';
        var isValid = true;
        var _operator = '';
        var rowColor = false;
        if (document.getElementById('columnColor').className === 'columnColor') {
            rowColor = false;
        }
        else if (document.getElementById('rowColor').className === 'columnColor') {
            rowColor = true;
        }
        var _ruleObject = null;
        if (ruleColor === '') {
            errMsg = 'Please select color.';
            isValid = false;
        }
        if (columnName === 'Column Name') {
            errMsg += 'Please select column.';
            isValid = false;
        }
        if (operatorName === 'Operator') {
            errMsg += 'Please select operator.';
            isValid = false;
        }
        _operator = document.getElementById('firstOperationDiv').innerText;
        if ((document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value === '') {
            errMsg += 'Please enter value to compare.';
            isValid = false;
        }
        else {
            var isValidInput = this._validateInput(dataType);
            if (!isValidInput) {
                errMsg += 'Invalid input value.';
                isValid = false;
            }
        }
        for (var i = 0; i < com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length; i++) {
            if (i !== index) {
                _ruleObject = com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList[i];
                if (_ruleObject.ColorCode === ruleColor) {
                    errMsg += 'Selected color exist in other rule.';
                    isValid = false;
                }
                else if (_ruleObject.ColumnName === columnName && _ruleObject.Operator === _operator) {
                    errMsg += 'Rule with this column and operation already exist.';
                    isValid = false;
                }
                else if (_ruleObject.ColumnName === columnName && _ruleObject.RowColor === rowColor) {
                    errMsg += 'Rule with this column exists on row';
                    isValid = false;
                }
            }
        }
        if (!isValid) {
            document.getElementById(this._grid.get_id() + '_divRuleErrMsg').style.display = '';
            document.getElementById(this._grid.get_id() + '_divRuleErrMsg').className = 'fa fa-exclamation-circle errorDiv';
            document.getElementById(this._grid.get_id() + '_divRuleErrMsg').title = errMsg;
        }
        else {
            document.getElementById(this._grid.get_id() + '_divRuleErrMsg').innerHTML = '';
            document.getElementById(this._grid.get_id() + '_divRuleErrMsg').style.display = 'none';
        }
        return isValid;
    },

    _validateInput: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_validateInput(dataType) {
        /// <param name="dataType" type="String">
        /// </param>
        /// <returns type="Boolean"></returns>
        var isValid = false;
        var inputValue = '';
        if ((document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value !== '') {
            inputValue = (document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput')).value.replace(this.regex, '');
        }
        else if (document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput').getAttribute('placeholder').toString() !== '') {
            inputValue = document.getElementById(this._grid.get_GridInfo().GridId + '_txtUserInput').getAttribute('placeholder').toString();
        }
        switch (dataType) {
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal:
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double:
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int:
                isValid = this._vaildateNumber(inputValue);
                break;
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_string:
                isValid = this._validateString(inputValue);
                break;
            case com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime:
                isValid = this._validateDate(inputValue);
                break;
            default:
                break;
        }
        return isValid;
    },

    _vaildateNumber: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_vaildateNumber(inputValue) {
        /// <param name="inputValue" type="Object">
        /// </param>
        /// <returns type="Boolean"></returns>
        var isNumber = true;
        var pattern = '[\\d]+';
        var regEx = new RegExp(pattern);
        if (inputValue.toString().search(regEx) === -1) {
            isNumber = false;
        }
        return isNumber;
    },

    _validateString: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_validateString(inputValue) {
        /// <param name="inputValue" type="Object">
        /// </param>
        /// <returns type="Boolean"></returns>
        var isString = true;
        var pattern = '[\\w]+';
        var regEx = new RegExp(pattern);
        if (inputValue.toString().search(regEx) === -1) {
            isString = false;
        }
        return isString;
    },

    _validateDate: function com_ivp_rad_controls_neogrid_scripts_RuleBasedColoring$_validateDate(inputValue) {
        /// <param name="inputValue" type="Object">
        /// </param>
        /// <returns type="Boolean"></returns>
        try {
            var _date = Date.parseInvariant(inputValue.toString(), this._grid.get_GridInfo().DateFormat);
            if (_date == null) {
                return false;
            }
            return true;
        }
        catch ($e1) {
        }
        return false;
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.Search

com.ivp.rad.controls.neogrid.scripts.Search = function com_ivp_rad_controls_neogrid_scripts_Search(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    this._grid = grid;
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.Search.prototype = {
    _grid: null,
    _lastKeyPress: 0,
    _interval: 3000,
    _oldSearchText: '',
    timeOut: 0,
    keyUpEvent: function com_ivp_rad_controls_neogrid_scripts_Search$keyUpEvent(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>

        if (this._grid.get_GridInfo().IsAdvanceSearch) {
            if (e.keyCode === Sys.UI.Key.enter) {
                if (eval('$(\"#' + this._grid.get_GridInfo().GridId + '_txtSearch\").suggest(\'isContainerEnter\')')) {
                    var cleanSearch = false;
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_EditCommitPopUP\").remove()');
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_txtSearch\").val(e.target.value)');
                    if (document.getElementById(this._grid.get_id() + '_clearSearchToggle').childNodes[1].className === 'clearSearchInnerLeft') {
                        cleanSearch = false;
                    }
                    else if (document.getElementById(this._grid.get_id() + '_clearSearchToggle').childNodes[1].className === 'clearSearchInnerRight') {
                        cleanSearch = true;
                    }
                    if (!this._grid.get_GridInfo().IsMasterChildGrid) {
                        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH, (e.target).value + '|' + cleanSearch, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH);
                    }
                    e.preventDefault();
                    e.stopPropagation();
                }
            }
        }
        else {
            if (e.keyCode === Sys.UI.Key.backspace || e.keyCode === Sys.UI.Key.del || e.keyCode === Sys.UI.Key.space || (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 96 && e.keyCode <= 122)) {
                this._lastKeyPress = new Date().getTime();
                this.timeOut = 0;
                this.timeOut = window.setTimeout(Function.createDelegate(this, function () {
                    var currentTime = new Date().getTime();
                    if (currentTime - this._lastKeyPress > this._interval) {
                        if (this._oldSearchText !== (e.target).value) {
                            this._oldSearchText = (e.target).value;
                            if (!this._grid.get_GridInfo().IsMasterChildGrid) {
                                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH, (e.target).value.trim(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH);
                            }
                            else {
                                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_GRID_SEARCH, (e.target).value.trim(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_GRID_SEARCH);
                            }
                        }
                    }
                }), this._interval + 100);
            }
            if (e.keyCode === Sys.UI.Key.enter) {
                window.clearTimeout(this.timeOut);
                if (!this._grid.get_GridInfo().IsMasterChildGrid) {
                    this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH, (e.target).value.trim(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH);
                }
                else {
                    this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_GRID_SEARCH, (e.target).value.trim(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_GRID_SEARCH);
                }
                e.preventDefault();
                e.stopPropagation();
            }
        }

    },

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_Search$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        
        if (this._grid.get_GridInfo().RequireSearch) {
            if (serviceInfo.serializedInfo.SearchText != null && serviceInfo.serializedInfo.SearchText != "") {
                $("#" + this._grid.get_GridInfo().GridId + "_SearchInMainGrid")[0].className = "MainSearchBox SearchBoxHidden SearchBoxVisible";
            }
            else {
                $("#" + this._grid.get_GridInfo().GridId + "_SearchInMainGrid")[0].className = "MainSearchBox SearchBoxHidden";
            }
            if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_GRID_SEARCH) {
                if (serviceInfo.serializedInfo.SearchText != null) {
                    this._grid.elementInfo.get_search().value = serviceInfo.serializedInfo.MasterGridSearchText;
                }
                else {
                    this._grid.elementInfo.get_search().value = '';
                }
            }
            else {
                if (serviceInfo.serializedInfo.SearchText != null) {
                    this._grid.elementInfo.get_search().value = serviceInfo.serializedInfo.SearchText;
                }
                else {
                    this._grid.elementInfo.get_search().value = '';
                }
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.SliderFilter

com.ivp.rad.controls.neogrid.scripts.SliderFilter = function com_ivp_rad_controls_neogrid_scripts_SliderFilter(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_sliders" type="Array">
    /// </field>
    /// <field name="_sliderFilteredColumns" type="Array">
    /// </field>
    /// <field name="_sliderFilterableColumns" type="Array">
    /// </field>
    /// <field name="_SEPARATOR" type="String" static="true">
    /// </field>
    /// <field name="_isO_LONG_DATE_FORMAT" type="String" static="true">
    /// </field>
    this._grid = grid;
    this._sliderFilteredColumns = [];
    this._sliderFilterableColumns = [];
    this._sliders = [];
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.SliderFilter.prototype = {
    _grid: null,
    _sliders: null,
    _sliderFilteredColumns: null,
    _sliderFilterableColumns: null,

    showHideSlider: function com_ivp_rad_controls_neogrid_scripts_SliderFilter$showHideSlider(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.elementInfo.get_sliderFilterDiv().style.display === 'none') {
            this._grid.elementInfo.get_sliderFilterDiv().style.display = '';
            e.target.className = 'hidePanel';
        }
        else {
            this._grid.elementInfo.get_sliderFilterDiv().style.display = 'none';
            e.target.className = 'showPanel';
        }
    },

    createSlider: function com_ivp_rad_controls_neogrid_scripts_SliderFilter$createSlider(dragDrop) {
        /// <param name="dragDrop" type="com.ivp.rad.controls.scripts.raddragdropscripts.DragDrop">
        /// </param>
        var filterInfo = new com.ivp.rad.controls.neogrid.scripts.info.FilterInfo();
        filterInfo.ColumnName = dragDrop.get_index();
        filterInfo.DataType = com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_anyType;
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_MIN_MAX_COLUMN, Sys.Serialization.JavaScriptSerializer.serialize(filterInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_MIN_MAX_COLUMN);
    },

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_SliderFilter$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        var showSliderfilter = false;
        var info;
        var tableCell = document.getElementById(this._grid.elementIDManager.get_sliderFilterDiv() + '_table_cell');
        if (tableCell != null) {
            tableCell.innerHTML = '';
        }
        for (var i = 0; i < serviceInfo.serializedInfo.FilteredColumns.length; i++) {
            info = serviceInfo.serializedInfo.FilteredColumns[i];
            if (info.IsSliderFilter) {
            }
        }
        if (showSliderfilter) {
            this._grid.elementInfo.get_sliderFilterDiv().style.display = '';
        }
    },

    _appendSliderToHolder: function com_ivp_rad_controls_neogrid_scripts_SliderFilter$_appendSliderToHolder(divSliderHolder, columnName) {
        /// <param name="divSliderHolder" type="Object" domElement="true">
        /// </param>
        /// <param name="columnName" type="String">
        /// </param>
        var tableElement = null;
        tableElement = document.getElementById(this._grid.elementIDManager.get_sliderFilterDiv() + '_table');
        var tableCellElement;
        var headerText = this._getDisplayName(columnName);
        if (tableElement != null) {
            tableCellElement = document.getElementById(tableElement.id + '_cell');
            var outerTable = this._grid.elementHelper.get_table();
            outerTable.className = 'sliderOuterTable';
            outerTable.id = tableCellElement.id + '_sliderContainerTable' + columnName;
            var btnElementClose = this._grid.elementHelper.get_buttonElement();
            btnElementClose.setAttribute('identifier', columnName);
            btnElementClose.className = 'closeButton';
            btnElementClose.style.cursor = 'hand';
            btnElementClose.id = outerTable.id + '_button' + columnName;
            btnElementClose.style.zIndex = 9999;
            var btnCloseSliderFilter = Function.createDelegate(this, this._closeSliderFilter);
            $addHandler(btnElementClose, 'click', btnCloseSliderFilter);
            var rowElementSlider = outerTable.insertRow(outerTable.rows.length);
            var cellElementSlider = rowElementSlider.insertCell(rowElementSlider.cells.length);
            cellElementSlider.setAttribute('horizontal-align', 'center');
            cellElementSlider.colSpan = 2;
            cellElementSlider.appendChild(divSliderHolder);
            var cellElementCloseSlider = rowElementSlider.insertCell(rowElementSlider.cells.length);
            cellElementCloseSlider.setAttribute('horizontal-align', 'center');
            cellElementCloseSlider.appendChild(btnElementClose);
            tableCellElement.appendChild(outerTable);
        }
    },

    _closeSliderFilter: function com_ivp_rad_controls_neogrid_scripts_SliderFilter$_closeSliderFilter(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        e.preventDefault();
        var infoFilter = new com.ivp.rad.controls.neogrid.scripts.info.FilterInfo();
        infoFilter.ColumnName = e.target.getAttribute('identifier').toString();
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_SLIDER_REMOVE, Sys.Serialization.JavaScriptSerializer.serialize(infoFilter), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_SLIDER_REMOVE);
        var tableId = this._grid.get_id() + '_sliderFilter_div_table_cell_sliderContainerTable' + e.target.getAttribute('identifier');
        Array.remove(this._sliderFilteredColumns, e.target.getAttribute('identifier').toString());
        var component = $find(this._grid.get_id() + '_slider_' + e.target.getAttribute('identifier'));
        Array.remove(this._sliders, component);
        component.dispose();
        Sys.Application.removeComponent(component);
        var buttonId = tableId + '_button' + e.target.getAttribute('identifier');
        if (document.getElementById(buttonId) != null) {
            $clearHandlers(document.getElementById(buttonId));
        }
        var sliderContainer = document.getElementById(tableId);
        sliderContainer.parentNode.removeChild(sliderContainer);
    },

    performSilverSliderFilter: function com_ivp_rad_controls_neogrid_scripts_SliderFilter$performSilverSliderFilter(selectedmin, selectedmax, minvalue, maxvalue, SliderCustomIdentifier, isNumber) {
        /// <summary>
        /// Performs the silver light based slider filter.
        /// </summary>
        /// <param name="selectedmin" type="String">
        /// The selectedmin.
        /// </param>
        /// <param name="selectedmax" type="String">
        /// The selectedmax.
        /// </param>
        /// <param name="minvalue" type="String">
        /// The minvalue.
        /// </param>
        /// <param name="maxvalue" type="String">
        /// The maxvalue.
        /// </param>
        /// <param name="SliderCustomIdentifier" type="String">
        /// The slider custom identifier.
        /// </param>
        /// <param name="isNumber" type="Boolean">
        /// if set to <c>true</c> [is number].
        /// </param>
        var infoFilter = new com.ivp.rad.controls.neogrid.scripts.info.FilterInfo();
        infoFilter.SelectedMaxValue = selectedmax;
        infoFilter.SelectedMaxValue = (infoFilter.SelectedMaxValue.toString() !== '' && !isNumber) ? Date.parseInvariant(infoFilter.SelectedMaxValue.toString(), this._grid.get_GridInfo().DateFormat).format(com.ivp.rad.controls.neogrid.scripts.SliderFilter._isO_LONG_DATE_FORMAT) : infoFilter.SelectedMaxValue.toString().replace(new RegExp(',', 'gi'), '');
        infoFilter.SelectedMinValue = selectedmin;
        infoFilter.SelectedMinValue = (infoFilter.SelectedMinValue.toString() !== '' && !isNumber) ? Date.parseInvariant(infoFilter.SelectedMinValue.toString(), this._grid.get_GridInfo().DateFormat).format(com.ivp.rad.controls.neogrid.scripts.SliderFilter._isO_LONG_DATE_FORMAT) : infoFilter.SelectedMinValue.toString().replace(new RegExp(',', 'gi'), '');
        infoFilter.MaxValue = maxvalue;
        infoFilter.MaxValue = (infoFilter.MaxValue.toString() !== '' && !isNumber) ? Date.parseInvariant(infoFilter.MaxValue.toString(), this._grid.get_GridInfo().DateFormat).format(com.ivp.rad.controls.neogrid.scripts.SliderFilter._isO_LONG_DATE_FORMAT) : infoFilter.MaxValue.toString().replace(new RegExp(',', 'gi'), '');
        infoFilter.MinValue = minvalue;
        infoFilter.MinValue = (infoFilter.MinValue.toString() !== '' && !isNumber) ? Date.parseInvariant(infoFilter.MinValue.toString(), this._grid.get_GridInfo().DateFormat).format(com.ivp.rad.controls.neogrid.scripts.SliderFilter._isO_LONG_DATE_FORMAT) : infoFilter.MinValue.toString().replace(new RegExp(',', 'gi'), '');
        infoFilter.ColumnName = SliderCustomIdentifier;
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_SLIDER, Sys.Serialization.JavaScriptSerializer.serialize(infoFilter), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_SLIDER);
    },

    _getDisplayName: function com_ivp_rad_controls_neogrid_scripts_SliderFilter$_getDisplayName(s) {
        /// <param name="s" type="String">
        /// </param>
        /// <returns type="String"></returns>
        if (this._grid.get_GridInfo().ColumnNameMapping != null) {
            if (this._grid.get_GridInfo().ColumnNameMapping[s] == null || this._grid.get_GridInfo().ColumnNameMapping[s].toString().trim() === '') {
                return s;
            }
            else {
                return this._grid.get_GridInfo().ColumnNameMapping[s].toString();
            }
        }
        return s;
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.Sort

com.ivp.rad.controls.neogrid.scripts.Sort = function com_ivp_rad_controls_neogrid_scripts_Sort(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_linq" type="LINQ">
    /// </field>
    /// <field name="sortedColumns" type="Array">
    /// </field>
    this._grid = grid;
    var cellEventHandler = Function.createDelegate(this, this._iterateOnHeaderCellsForSort);
    this._grid.eventHandlerManager.addHeaderCellIterated(cellEventHandler);
    this.sortedColumns = [];
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.Sort.prototype = {
    _grid: null,
    _linq: null,
    sortedColumns: null,

    _iterateOnHeaderCellsForSort: function com_ivp_rad_controls_neogrid_scripts_Sort$_iterateOnHeaderCellsForSort(sender, e) {
        /// <param name="sender" type="Object">
        /// </param>
        /// <param name="e" type="com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs">
        /// </param>
        var sortDiv = this._grid.elementHelper.get_divElement();
        sortDiv.id = this._grid.get_id() + '_' + e.get_columnName().replace(new RegExp('[ ]', 'gi'), '_') + '_Sort';
        sortDiv.setAttribute('columnName', e.get_columnName());
        sortDiv.innerHTML = '&nbsp;';
        sortDiv.style.height = '14px';
        sortDiv.style.display = 'none';
        sortDiv.setAttribute('isgridheader', true);
        var divs = e.get_TH().getElementsByTagName('DIV');
        if (Array.contains(window.Object.keys(this._grid.get_GridInfo().CustomHeaderInfo), e.get_columnName())) {
            var element = null;
            if ((eval('$(e.get_TH()).find(\".xlneofilterSortDiv\").length')) > 0) {
                element = eval('$(e.get_TH()).find(\".xlneofilterSortDiv\")[0]');
                element.appendChild(sortDiv);
            }
            else {
                element = eval('$(e.get_TH()).find(\".xlneofilterSortDivFloatLeft\")[0]');
                element.appendChild(sortDiv);
            }
        }
        else {
            divs[1].appendChild(sortDiv);
        }
    },

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_Sort$_serviceCompleted(info) {
        /// <param name="info" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        if (info.serializedInfo.GroupedSortedColumns != null) {
            this.resetAllSortIcons();
            this.sortedColumns = info.serializedInfo.GroupedSortedColumns;
        }
        this._setSortIcon();
        if (info.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT) {
            var div = document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv');
            for (var i = 0; i < document.getElementById(this._grid.get_GridInfo().GridId + '_bodyDiv').children[0].children[1].children[0].children.length; i++) {
                var currentRow = div.children[0].children[1].children[0].children[i];
                if (currentRow.getAttribute('isgroupheader') == null) {
                    if (Array.contains((info.serializedInfo.ChildGridsToOpen), currentRow.getAttribute('idcolumnvalue').toString())) {
                        this._getChildGridDataForSort(currentRow.id, currentRow.getAttribute('idcolumnvalue').toString());
                    }
                }
            }
        }
    },

    _getChildGridDataForSort: function com_ivp_rad_controls_neogrid_scripts_Sort$_getChildGridDataForSort(currentrowid, idcolumnvalue) {
        /// <param name="currentrowid" type="String">
        /// </param>
        /// <param name="idcolumnvalue" type="String">
        /// </param>
        this._grid.childGrid.idcolumnValue = idcolumnvalue;
        this._grid.childGrid.rowid = currentrowid;
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_CHILD_GRID, idcolumnvalue + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_CHILD_GRID);
    },

    performSorting: function com_ivp_rad_controls_neogrid_scripts_Sort$performSorting(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.manageHeader._resized) {
            this._grid.manageHeader._resized = false;
            return;
        }
        if (e.target.id.endsWith('_FilterListShow')) {
            return;
        }
        if (e.target.getAttribute('nofeatures') != null && Boolean.parse(e.target.getAttribute('nofeatures').toString())) {
            return;
        }
        this._linq = new LINQ(this.sortedColumns);
        this._linq = this._linq.Where(Function.createDelegate(this, function (o, i) {
            return (o).ColumnName === e.target.getAttribute('columnName').toString();
        }));
        var columnName = e.target.getAttribute('columnName').toString().replace(new RegExp('[ ]', 'gi'), '_');
        var sortdiv = document.getElementById(this._grid.get_GridInfo().GridId + '_' + columnName + '_Sort');
        if (this._linq.Count(null) > 0) {
            var sort = this._linq.First(null);
            if (sort.SortOrder === com.ivp.rad.controls.neogrid.scripts.info.Order.ASC) {
                sort.SortOrder = com.ivp.rad.controls.neogrid.scripts.info.Order.DESC;
            }
            else if (sort.SortOrder === com.ivp.rad.controls.neogrid.scripts.info.Order.NONE) {
                sortdiv.nextSibling.style.paddingTop = '10px';
                sort.SortOrder = com.ivp.rad.controls.neogrid.scripts.info.Order.ASC;
                sortdiv.style.display = '';
            }
            else if (sort.SortOrder === com.ivp.rad.controls.neogrid.scripts.info.Order.DESC) {
                sortdiv.style.display = 'none';
                sortdiv.nextSibling.style.paddingTop = '28px';
                sort.SortOrder = com.ivp.rad.controls.neogrid.scripts.info.Order.NONE;
                if (!sort.IsGrouped) {
                    Array.remove(this.sortedColumns, sort);
                }
            }
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT, Sys.Serialization.JavaScriptSerializer.serialize(sort) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT);
        }
        else {
            if (sortdiv != null) {
                var sort = new com.ivp.rad.controls.neogrid.scripts.info.SortInfo();
                sort.ColumnName = e.target.getAttribute('columnName').toString();
                sort.SortOrder = com.ivp.rad.controls.neogrid.scripts.info.Order.ASC;
                sortdiv.style.display = '';
                sortdiv.nextSibling.style.paddingTop = '10px';
                Array.add(this.sortedColumns, sort);
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT, Sys.Serialization.JavaScriptSerializer.serialize(sort) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT);
            }
        }
    },

    performAbsoluteSort: function com_ivp_rad_controls_neogrid_scripts_Sort$performAbsoluteSort(columnName, isAbsoluteSorted) {
        /// <param name="columnName" type="String">
        /// </param>
        /// <param name="isAbsoluteSorted" type="Boolean">
        /// </param>
        this._linq = new LINQ(this.sortedColumns);
        this._linq = this._linq.Where(Function.createDelegate(this, function (o, i) {
            return (o).ColumnName === columnName;
        }));
        var sortDiv = document.getElementById(this._grid.get_GridInfo().GridId + '_' + columnName.replace(new RegExp('[ ]', 'gi'), '_') + '_Sort');
        if (this._linq.Count(null) > 0) {
            var sort = this._linq.First(null);
            sort.IsAbsoluteSorted = isAbsoluteSorted;
            if (!isAbsoluteSorted) {
                sort.SortOrder = com.ivp.rad.controls.neogrid.scripts.info.Order.NONE;
                sortDiv.style.display = 'none';
                sortDiv.nextSibling.style.paddingTop = '14px';
                sortDiv.nextSibling.style.paddingBottom = '0px';
            }
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT, Sys.Serialization.JavaScriptSerializer.serialize(sort) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT);
        }
        else {
            var sort = new com.ivp.rad.controls.neogrid.scripts.info.SortInfo();
            sort.ColumnName = columnName;
            sort.SortOrder = com.ivp.rad.controls.neogrid.scripts.info.Order.ASC;
            sortDiv.nextSibling.style.paddingTop = '0px';
            sortDiv.nextSibling.style.paddingBottom = '2px';
            sortDiv.style.display = '';
            sort.IsAbsoluteSorted = isAbsoluteSorted;
            Array.add(this.sortedColumns, sort);
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT, Sys.Serialization.JavaScriptSerializer.serialize(sort) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT);
        }
    },

    removeSort: function com_ivp_rad_controls_neogrid_scripts_Sort$removeSort(ColumnName) {
        /// <param name="ColumnName" type="String">
        /// </param>
        var currentNumber = Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value);
        this._grid.set_PreviousStartIndex((currentNumber - 1) * this._grid.get_GridInfo().PageSize);
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_SORT, ColumnName + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_SORT);
    },

    clearSort: function com_ivp_rad_controls_neogrid_scripts_Sort$clearSort(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var currentNumber = Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value);
        this._grid.set_PreviousStartIndex((currentNumber - 1) * this._grid.get_GridInfo().PageSize);
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT_REMOVE_ALL, '' + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT_REMOVE_ALL);
        this.resetAllSortIcons();
    },

    resetAllSortIcons: function com_ivp_rad_controls_neogrid_scripts_Sort$resetAllSortIcons() {
        var sortInfo = null;
        var sortElement = null;
        var regEx = new RegExp('[ ]', 'gi');
        Array.forEach(this.sortedColumns, Function.createDelegate(this, function (o) {
            sortInfo = o;
            sortElement = document.getElementById(this._grid.get_id() + '_' + sortInfo.ColumnName.replace(regEx, '_') + '_Sort');
            if (sortElement != null) {
                sortElement.className = '';
            }
        }));
        if (this.sortedColumns.length === 0) {
            if (document.getElementById(this._grid.elementIDManager.get_fluidHeaderDivID()) != null) {
                for (var i = 0; i < window.jQuery(this._grid.elementInfo.get_fluidHeaderDiv().firstChild).find('DIV[id*=' + '_Sort]').length; i++) {
                    window.jQuery(this._grid.elementInfo.get_fluidHeaderDiv().firstChild).find('DIV[id*=' + '_Sort]')[i].className = '';
                    window.jQuery(this._grid.elementInfo.get_fluidHeaderDiv().firstChild).find('DIV[id*=' + '_Sort]')[i].style.display = 'none';
                    if (window.jQuery(this._grid.elementInfo.get_fluidHeaderDiv().firstChild).find('DIV[id*=' + '_Sort]')[i].nextSibling != null) {
                        window.jQuery(this._grid.elementInfo.get_fluidHeaderDiv().firstChild).find('DIV[id*=' + '_Sort]')[i].nextSibling.style.paddingTop = '28px';
                    }
                }
            }
        }
        Array.clear(this.sortedColumns);
    },

    _setSortIcon: function com_ivp_rad_controls_neogrid_scripts_Sort$_setSortIcon() {
        var sortInfo = null;
        var sortElement = null;
        var regEx = new RegExp('[ ]', 'gi');
        Array.forEach(this.sortedColumns, Function.createDelegate(this, function (o) {
            sortInfo = o;
            sortElement = document.getElementById(this._grid.get_id() + '_' + sortInfo.ColumnName.replace(regEx, '_') + '_Sort');
            if (sortElement != null) {
                sortElement.className = (sortInfo.SortOrder === com.ivp.rad.controls.neogrid.scripts.info.Order.ASC) ? 'xlneoascending' : 'xlneodescending';
                sortElement.innerHTML = '&nbsp;';
            }
        }));
        var _linqDefaultSort = new LINQ(this._grid.get_DefaultGroupedAndSortedColumns());
        _linqDefaultSort = _linqDefaultSort.Where(Function.createDelegate(this, function (o, i) {
            return (o).SortOrder !== com.ivp.rad.controls.neogrid.scripts.info.Order.NONE;
        }));
        if (this.sortedColumns.length > 0 || _linqDefaultSort.Count(null) > 0) {
        }
        else {
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.UpperHeader

com.ivp.rad.controls.neogrid.scripts.UpperHeader = function com_ivp_rad_controls_neogrid_scripts_UpperHeader(grid) {
    /// <param name="grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </param>
    /// <field name="_grid" type="com.ivp.rad.controls.neogrid.scripts.Grid">
    /// </field>
    /// <field name="_mainDivInDropDown" type="Object" domElement="true">
    /// </field>
    /// <field name="_columnName" type="String">
    /// </field>
    /// <field name="_toBeGroupedDiv" type="Object" domElement="true">
    /// </field>
    /// <field name="_dropContainer" type="Object" domElement="true">
    /// </field>
    /// <field name="_listHiddenColumns" type="Array">
    /// </field>
    /// <field name="_listVisibleColumns" type="Array">
    /// </field>
    /// <field name="_columnNamesList" type="Array">
    /// </field>
    /// <field name="_showHideListResizeStart" type="Boolean">
    /// </field>
    /// <field name="_initialXPos" type="Number" integer="true">
    /// </field>
    /// <field name="_initialYPos" type="Number" integer="true">
    /// </field>
    /// <field name="_initialHeight" type="Number" integer="true">
    /// </field>
    /// <field name="_initialWidth" type="Number" integer="true">
    /// </field>
    /// <field name="_gridCustomFormatting" type="Object">
    /// </field>
    /// <field name="_justificationCollection" type="Object">
    /// </field>
    /// <field name="formattingColumnList" type="Array">
    /// </field>
    /// <field name="removeFormattingList" type="Array">
    /// </field>
    /// <field name="currentSeletedColumn" type="String">
    /// </field>
    /// <field name="_onFormattedList" type="Boolean">
    /// </field>
    /// <field name="_lastKeyPress" type="Number" integer="true">
    /// </field>
    /// <field name="_interval" type="Number" integer="true">
    /// </field>
    /// <field name="_oldSearchText" type="String">
    /// </field>
    /// <field name="columnMapInfo" type="Array">
    /// </field>
    /// <field name="displayColumnNames" type="Array">
    /// </field>
    /// <field name="existingColumnNames" type="Array">
    /// </field>
    /// <field name="_hiddenColumnListNew" type="Array">
    /// </field>
    /// <field name="_hiddenColumnListReal" type="Array">
    /// </field>
    /// <field name="columnsToBeHidden" type="Array">
    /// </field>
    /// <field name="testSampleValue" type="Boolean">
    /// </field>
    /// <field name="columnsToBevisible" type="Array">
    /// </field>
    /// <field name="columnRealNameList" type="Array">
    /// </field>
    /// <field name="viewsColumnsSequenceForLayouts" type="Array" static="true">
    /// </field>
    /// <field name="viewsColumnsHiddenForLayouts" type="Array" static="true">
    /// </field>
    /// <field name="viewsColumnsVisibleForLayouts" type="Array" static="true">
    /// </field>
    /// <field name="viewsCustomFormatMappingForLayouts" type="Object" static="true">
    /// </field>
    /// <field name="_currentLayout" type="com.ivp.rad.controls.neogrid.scripts.info.LayoutInfo">
    /// </field>
    /// <field name="columnSequence" type="Array">
    /// </field>
    /// <field name="gridCustomFormatMapping" type="Object">
    /// </field>
    /// <field name="gridCustomFormatMappingToPersistInfo" type="Object">
    /// </field>
    /// <field name="newColumnsAdded" type="Boolean">
    /// </field>
    /// <field name="newColumnFlag" type="Boolean">
    /// </field>
    /// <field name="isRuleBasedColoringFromView" type="Boolean" static="true">
    /// </field>
    /// <field name="viewColumnsToDictionary" type="Object">
    /// </field>
    /// <field name="isLayoutFromView" type="Boolean" static="true">
    /// </field>
    /// <field name="isRuleBasedColorFromView" type="Boolean" static="true">
    /// </field>
    /// <field name="listColumnNames" type="Object">
    /// </field>
    /// <field name="_saveViewInformation" type="Array">
    /// </field>
    /// <field name="isEachRuleFromView" type="Boolean" static="true">
    /// </field>
    /// <field name="clickedFirstTime" type="Boolean">
    /// </field>
    /// <field name="divToBeMoved" type="Object" domElement="true">
    /// </field>
    /// <field name="divToBeAttached" type="Object" domElement="true">
    /// </field>
    /// <field name="borderToBeShown" type="Object" domElement="true">
    /// </field>
    /// <field name="searchInfo" type="String">
    /// </field>
    /// <field name="uniqueValuesForColumn" type="String">
    /// </field>
    /// <field name="_thRecordSummary" type="Object" domElement="true">
    /// </field>
    this._saveViewInformation = [];
    this._grid = grid;
    this._gridCustomFormatting = {};
    this.formattingColumnList = [];
    this.removeFormattingList = [];
    this._justificationCollection = {};
    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsSequenceForLayouts = [];
    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsHiddenForLayouts = [];
    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsVisibleForLayouts = [];
    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsCustomFormatMappingForLayouts = {};
    this._currentLayout = new com.ivp.rad.controls.neogrid.scripts.info.LayoutInfo();
    this.viewColumnsToDictionary = {};
    this.listColumnNames = com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.listColumnNames;
    this._prepareUpperHeader();
    this._dropContainer = document.getElementById(this._grid.elementIDManager.get_groupDropPanel());
    var serviceCompletedEventHandler = Function.createDelegate(this, this._serviceCompleted);
    this._grid.eventHandlerManager.addServiceCompletedEventHandler(serviceCompletedEventHandler);
}
com.ivp.rad.controls.neogrid.scripts.UpperHeader.createBootBoxPopUp = function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createBootBoxPopUp() {
    eval('bootbox.dialog({  message: \"Please Remove Ranking First. \"' + ', title: \'Remove Ranking : \'  })');
}
com.ivp.rad.controls.neogrid.scripts.UpperHeader.prototype = {
    _grid: null,
    _mainDivInDropDown: null,
    _columnName: null,
    _toBeGroupedDiv: null,
    _dropContainer: null,
    _listHiddenColumns: null,
    _listVisibleColumns: null,
    _columnNamesList: null,
    _showHideListResizeStart: false,
    _initialXPos: 0,
    _initialYPos: 0,
    _initialHeight: 0,
    _initialWidth: 0,
    _gridCustomFormatting: null,
    _justificationCollection: null,
    formattingColumnList: null,
    removeFormattingList: null,
    currentSeletedColumn: null,
    _onFormattedList: false,
    _lastKeyPress: 0,
    _interval: 500,
    _oldSearchText: '',
    columnMapInfo: null,
    displayColumnNames: null,
    existingColumnNames: null,
    _hiddenColumnListNew: null,
    _hiddenColumnListReal: null,
    columnsToBeHidden: null,
    testSampleValue: false,
    columnsToBevisible: null,
    columnRealNameList: null,
    _currentLayout: null,
    columnSequence: null,
    gridCustomFormatMapping: null,
    gridCustomFormatMappingToPersistInfo: null,
    newColumnsAdded: false,
    newColumnFlag: false,
    viewColumnsToDictionary: null,
    listColumnNames: null,
    clickedFirstTime: false,
    divToBeMoved: null,
    divToBeAttached: null,
    borderToBeShown: null,
    searchInfo: null,
    uniqueValuesForColumn: null,

    _prepareUpperHeader: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_prepareUpperHeader() {
        if (this._grid.get_GridInfo().IsAdvanceSearch) {
            this._createEntSearchDiv();
        }
        else {
        }
        var tbl = this._grid.elementHelper.get_table();
        var tr = tbl.insertRow(0);
        tr.className = this._grid.get_GridInfo().CssUpperHeader;
        tr.setAttribute('isgridupperheader', true);
        var tdLeftAligned = tr.insertCell(0);
        tdLeftAligned.style.width = '85%';
        tdLeftAligned.setAttribute('isgridupperheader', true);
        tdLeftAligned.id = 'EntSearchreduceWidth';
        var tdRightAligned = tr.insertCell(1);
        tdRightAligned.setAttribute('isgridupperheader', true);
        tdRightAligned.style.width = '15%';
        tdRightAligned.id = 'RightUpperHeaderMainDiv';
        if (this._grid.get_GridInfo().RequireMiniatureVersion) {
            tdRightAligned.style.display = 'none';
        }
        var tblLeftAligned = this._grid.elementHelper.get_table();
        tblLeftAligned.style.border = '0';
        tblLeftAligned.setAttribute('CellPadding', 0);
        tblLeftAligned.setAttribute('CellSpacing', 0);
        var trLeftAligned = tblLeftAligned.insertRow(0);
        var tblMiddleAligned = this._grid.elementHelper.get_table();
        tblMiddleAligned.style.border = '0';
        tblMiddleAligned.setAttribute('CellPadding', 0);
        tblMiddleAligned.setAttribute('CellSpacing', 0);
        var trMiddleAligned = tblMiddleAligned.insertRow(0);
        trMiddleAligned.setAttribute('isgridupperheader', true);
        var tblRightAligned = this._grid.elementHelper.get_table();
        tblRightAligned.style.border = '0';
        tblRightAligned.setAttribute('CellPadding', 0);
        tblRightAligned.setAttribute('CellSpacing', 0);
        var trRightAligned = tblRightAligned.insertRow(0);
        trRightAligned.setAttribute('isgridupperheader', true);
        this._getRecordSummary(trLeftAligned, 0);
        if (this._grid.get_GridInfo().IsMasterChildGrid) {
            this._getGroupDropPanel(trLeftAligned, 1);
        }
        else {
            if (this._grid.get_GridInfo().RequireRanking || this._grid.get_GridInfo().RequireTagging || this._grid.get_GridInfo().RequireViews || this._grid.get_GridInfo().RequireLayouts) {
                this._getConfigurationSettings(trLeftAligned, 1);
                this._getGroupingDropDown(trLeftAligned, 2);
                this._getGroupDropPanel(trLeftAligned, 3);
            }
            else {
                this._getGroupingDropDown(trLeftAligned, 1);
                this._getGroupDropPanel(trLeftAligned, 2);
            }
        }
        this._getLoadingCell(trRightAligned, 0);
        this._getCacheStatusSymbol(trRightAligned, 1);
        this._getTextSearchText(trRightAligned, 2);
        this._getTextSearch(trRightAligned, 3);
        this._getRemoveFunctionalityButton(trRightAligned, 4);
        this._getLayoutDropDown(trRightAligned, 5);
        this._getLayout(trRightAligned, 6);
        this._getExportToExcel(trRightAligned, 7);
        this._getExportToPdf(trRightAligned, 8);
        this._getEditableGrid(trRightAligned, 9);
        this._getSliderHeaderRow(trRightAligned, 10);
        this._getEditableGridAudit(trRightAligned, 11)
        this._getRADBalancePopupCell(trRightAligned, 12);
        this._getRADExtraPopupCell(trRightAligned, 13);
        this._getFullScreenCell(trRightAligned, 14);
        this._getRuleBasedColoring(trRightAligned, 15);
        this._getClearSelectionButton(trRightAligned, 16);
        this._getFullScreenButton(trRightAligned, 17);
        this._getPasteDataFromExcel(trRightAligned, 18);
        this._getClientSideColumnPopUp(trRightAligned, 19);
        this._getDownLoadIcons(trRightAligned, 20);
        //if (this._grid.get_GridInfo().DataInsight)
        //{
        //    this._getDataInsight(trRightAligned, 20);
        //}
        if (this._grid.get_GridInfo().HeaderIconList != null) {
            for (var i = 0; i < this._grid.get_GridInfo().HeaderIconList.length; i++) {
                this._getHeaderIconListForGrid(trRightAligned, 20 + i, this._grid.get_GridInfo().HeaderIconList[i].toString());
            }
        }
        tdRightAligned.appendChild(tblRightAligned);
        tdLeftAligned.appendChild(tblLeftAligned);
        this._grid.elementInfo.get_upperHeaderDiv().appendChild(tbl);
        if (this._grid.get_GridInfo().IsMasterChildGrid) {
            if (this._grid.get_GridInfo().GridId !== this._grid.get_GridInfo().MasterGridId) {
                document.getElementById(this._grid.elementIDManager.get_upperHeaderDivID()).style.display = 'none';
            }
        }
    },

    _createEntSearchDiv: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createEntSearchDiv() {
        var upperDivElementParent = this._grid.elementHelper.get_divElement();
        upperDivElementParent.id = this._grid.get_id() + '_SearchInMainGridParent';
        upperDivElementParent.className = 'EntSearchMainGridParent';
        var upperDivElement = this._grid.elementHelper.get_divElement();
        upperDivElement.id = this._grid.get_GridInfo().GridId + '_SearchInMainGrid';
        upperDivElement.className = 'EntSearchMainSearchBox SearchBoxHidden';
        upperDivElement.style.padding = '2px';
        var SearchFontawesome = document.createElement('i');
        SearchFontawesome.className = 'SearchIconEntSearch';
        SearchFontawesome.id = this._grid.get_id() + 'SearchFontawesomeEntSearch';
        upperDivElement.appendChild(SearchFontawesome);
        var txtFilter = this._grid.elementHelper.get_textElement();
        txtFilter.id = this._grid.elementIDManager.get_search();
        txtFilter.setAttribute('placeholder', 'Search..');
        txtFilter.style.textIndent = '12px';
        txtFilter.className = 'EntSearchTextBox';
        upperDivElement.appendChild(txtFilter);
        var clearSearchToggle = document.createElement('DIV');
        clearSearchToggle.id = this._grid.get_id() + '_clearSearchToggle';
        clearSearchToggle.className = 'radxlgridclearSearchToggle';
        var clearSearchInner = document.createElement('DIV');
        clearSearchInner.id = this._grid.get_id() + '_clearSearchInner';
        clearSearchInner.className = 'clearSearchInnerLeft';
        var onOffText = document.createElement('DIV');
        onOffText.innerText = 'Off';
        clearSearchToggle.appendChild(onOffText);
        clearSearchToggle.appendChild(clearSearchInner);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(clearSearchToggle, 'click', Function.createDelegate(this, this._clearSearchToggleIcon));
        upperDivElement.appendChild(clearSearchToggle);
        var clearSearch = document.createElement('DIV');
        clearSearch.id = this._grid.get_id() + '_clearEntSearch';
        clearSearch.className = 'radxlgridclearsearch fa fa-times';
        clearSearch.style.display = 'none';
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(clearSearch, 'click', Function.createDelegate(this, this._clearSearchIcon));
        upperDivElement.appendChild(clearSearch);
        upperDivElementParent.appendChild(upperDivElement);
        this._grid.elementInfo.get_upperHeaderDiv().appendChild(upperDivElementParent);
    },

    _createActionsPerformedDiv: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createActionsPerformedDiv() {
        var element = this._grid.elementHelper.get_divElement();
        element.id = this._grid.get_GridInfo().GridId + '_actionsPerformedDiv';
        element.className = 'neoGridActionsPerformed';
        this._grid.elementInfo.get_upperHeaderDiv().appendChild(element);
    },

    _clearSearchToggleIcon: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_clearSearchToggleIcon(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.parentNode.childNodes[1].className === 'clearSearchInnerLeft') {
            e.target.parentNode.childNodes[0].innerText = 'On';
            e.target.parentNode.childNodes[1].className = 'clearSearchInnerRight';
            e.target.parentNode.style.color = 'white';
            e.target.parentNode.style.backgroundColor = '#00bff0';
        }
        else if (e.target.parentNode.childNodes[1].className === 'clearSearchInnerRight') {
            e.target.parentNode.childNodes[0].innerText = 'Off';
            e.target.parentNode.childNodes[1].className = 'clearSearchInnerLeft';
            e.target.parentNode.style.color = 'gray';
            e.target.parentNode.style.backgroundColor = '#E0E0E0';
        }
    },

    _getHeaderIconListForGrid: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getHeaderIconListForGrid(trRightAligned, index, iconHTML) {
        /// <param name="trRightAligned" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        /// <param name="iconHTML" type="String">
        /// </param>
        var th = trRightAligned.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        th.innerHTML = iconHTML;
    },

    _getDownLoadIcons: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getDownLoadIcons(trRightAligned, index) {
        /// <param name="trRightAligned" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = trRightAligned.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnSavePastedData = this._grid.elementHelper.get_anchorElement();
        btnSavePastedData.id = this._grid.get_GridInfo().GridId + '_xlNeoDownLoad';
        btnSavePastedData.title = 'Download';
        btnSavePastedData.className = 'xlNeoDownloadIcon';
        if (this._grid.get_GridInfo().RequireExportToPdf) {
            th.appendChild(btnSavePastedData);
        }
    },

    _getChildGrid: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getChildGrid(trRightAligned, index) {
        /// <param name="trRightAligned" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = trRightAligned.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnSavePastedData = this._grid.elementHelper.get_inputButtonElement();
        btnSavePastedData.id = this._grid.get_GridInfo().GridId + '_MasterChildGrid';
        btnSavePastedData.title = 'Add Child Grid';
        btnSavePastedData.className = 'MasterChildGrid';
        th.appendChild(btnSavePastedData);
    },

    _getPasteDataFromExcel: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getPasteDataFromExcel(trRightAligned, Index) {
        /// <param name="trRightAligned" type="Object" domElement="true">
        /// </param>
        /// <param name="Index" type="Number" integer="true">
        /// </param>
        var th = trRightAligned.insertCell(Index);
        th.setAttribute('isgridupperheader', true);
        var btnSavePastedData = this._grid.elementHelper.get_inputButtonElement();
        btnSavePastedData.id = this._grid.elementIDManager.get_pasteExcelDataID();
        btnSavePastedData.title = 'Enable Copy Data From Excel';
        btnSavePastedData.className = 'xlCopyDataFromExcel';
        if (this._grid.get_GridInfo().RequirePastingDataOnDataFromExcel) {
            th.appendChild(btnSavePastedData);
        }
    },

    _getRemoveFunctionalityButton: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getRemoveFunctionalityButton(trRightAligned, index) {
        /// <param name="trRightAligned" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = trRightAligned.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnClearFunctionality = document.createElement('DIV');
        btnClearFunctionality.id = this._grid.get_id() + '_btnClearFunctionality';
        btnClearFunctionality.title = '';
        btnClearFunctionality.className = 'xlClearSortFilter';
        th.appendChild(btnClearFunctionality);
        if (!(this._grid.group != null && this._grid.group._groupedColumns.length > 0) || (this._grid.sort != null && this._grid.sort.sortedColumns.length > 0) || (this._grid.filter != null && this._grid.filter.filteredColumns.length > 0) || (this._grid.get_DefaultGroupedAndSortedColumns() != null && this._grid.get_DefaultGroupedAndSortedColumns().length !== 0)) {
            btnClearFunctionality.style.display = 'none';
        }
        th.style.maxWidth = '22px';
        var clearFunctionalityDiv = null;
        if (document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv') == null) {
            clearFunctionalityDiv = document.createElement('DIV');
            clearFunctionalityDiv.id = this._grid.get_id() + '_ClearFunctionalityDiv';
            clearFunctionalityDiv.style.display = 'none';
            clearFunctionalityDiv.className = 'xlClearFunctionalityDiv';
            var clearFilterDiv = document.createElement('DIV');
            clearFilterDiv.id = this._grid.get_id() + '_ClearFilterDiv';
            clearFilterDiv.className = 'xlClearFilterDiv';
            var clearSortDiv = document.createElement('DIV');
            clearSortDiv.className = 'xlClearSortDiv';
            clearSortDiv.id = this._grid.get_id() + '_ClearSortDiv';
            var clearGroupDiv = document.createElement('DIV');
            clearGroupDiv.className = 'xlClearGroupDiv';
            clearGroupDiv.id = this._grid.get_id() + '_ClearGroupDiv';
            var clearRankingDiv = document.createElement('DIV');
            clearRankingDiv.id = this._grid.get_id() + '_ClearRankingDiv';
            clearRankingDiv.className = 'xlClearRankingDiv';
            var clearGroupDivDefault = document.createElement('DIV');
            clearGroupDivDefault.id = this._grid.get_id() + '_ClearGroupDivDefault';
            clearGroupDivDefault.className = 'xlClearGroupDivDefault';
            clearFunctionalityDiv.appendChild(clearFilterDiv);
            clearFunctionalityDiv.appendChild(clearSortDiv);
            clearFunctionalityDiv.appendChild(clearGroupDiv);
            clearFunctionalityDiv.appendChild(clearRankingDiv);
            clearFunctionalityDiv.appendChild(clearGroupDivDefault);
            this._grid.get_element().parentNode.appendChild(clearFunctionalityDiv);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(clearFunctionalityDiv, 'click', Function.createDelegate(this, this._clearFunctionalityHandler));
        }
    },

    _clearFunctionalityHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_clearFunctionalityHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.get_id() === '') {
            eval('this._grid = $find(\"' + this._grid.get_GridInfo().GridId + '\")');
        }
        if (e.target.className === 'xlRemoveCurrentFilter fa fa-minus-circle') {
            if (eval('$(e.target).closest(\'.xlClearFilterDiv\').length') > 0) {
                this._columnName = e.target.previousSibling.getAttribute("columnname");
                e.target.previousSibling.innerHTML = '';
                var textDiv = document.createElement('DIV');
                var imageDiv = document.createElement('DIV');
                textDiv.innerText = 'Removing ' + this._columnName;
                textDiv.className = 'xlRemovingDivText';
                imageDiv.className = 'xlRemovingDivImage fa fa-spinner fa-spin';
                e.target.previousSibling.appendChild(textDiv);
                e.target.appendChild(imageDiv);
                e.target.className = 'xlRemoveCurrentFilter';
                var filterdiv = document.getElementById(this._grid.get_GridInfo().GridId + '_' + this._columnName + '_FilterListShow');
                if (filterdiv != null) {
                    filterdiv.className = 'xlneofilterIcon fa fa-filter';
                }
                var _scrollcontent = Function.createDelegate(this, this._removeFilter);
                window.setTimeout(Function.createDelegate(this, this._removeFilter), 50);
            }
            if (eval('$(e.target).closest(\'.xlClearSortDiv\').length') > 0) {
                if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null) {
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.createBootBoxPopUp();
                }
                else {
                    this._columnName = e.target.previousSibling.innerText;
                    var realColumnName = this._getRealColumnnName(this._columnName);
                    var ele = document.getElementById(this._grid.get_GridInfo().GridId + '_' + realColumnName.replace(new RegExp('[ ]', 'gi'), '_') + '_Sort');
                    if (ele != null) {
                        ele.style.display = 'none';
                        ele.nextSibling.style.paddingTop = '28px';
                    }
                    e.target.previousSibling.innerHTML = '';
                    var textDiv = document.createElement('DIV');
                    var imageDiv = document.createElement('DIV');
                    textDiv.innerText = 'Removing ' + this._columnName;
                    textDiv.className = 'xlRemovingDivText';
                    imageDiv.className = 'xlRemovingDivImage fa fa-spinner fa-spin';
                    e.target.previousSibling.appendChild(textDiv);
                    e.target.appendChild(imageDiv);
                    e.target.className = 'xlRemoveCurrentFilter';
                    var _scrollcontent = Function.createDelegate(this, this._removeortSort);
                    window.setTimeout(Function.createDelegate(this, this._removeortSort), 50);
                }
            }
            if (eval('$(e.target).closest(\'.xlClearGroupDiv\').length') > 0) {
                if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null) {
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.createBootBoxPopUp();
                }
                else {
                    this._columnName = e.target.previousSibling.innerText;
                    e.target.previousSibling.innerHTML = '';
                    var textDiv = document.createElement('DIV');
                    var imageDiv = document.createElement('DIV');
                    textDiv.innerText = 'Removing ' + this._columnName;
                    textDiv.className = 'xlRemovingDivText';
                    imageDiv.className = 'xlRemovingDivImage fa fa-spinner fa-spin';
                    e.target.previousSibling.appendChild(textDiv);
                    e.target.appendChild(imageDiv);
                    e.target.className = 'xlRemoveCurrentFilter';
                    var _scrollcontent = Function.createDelegate(this, this._removeGroup);
                    window.setTimeout(Function.createDelegate(this, this._removeGroup), 50);
                }
            }
        }
        if (e.target.className === 'xlRemoveCurrentFilterHeader') {
            this._grid.filter.clearAllfilters(e);
        }
        if (e.target.className === 'xlRemoveCurrentSortHeader') {
            if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo == null) {
                this._grid.sort.clearSort(e);
            }
            else {
                com.ivp.rad.controls.neogrid.scripts.UpperHeader.createBootBoxPopUp();
            }
        }
        if (e.target.className === 'xlRemoveCurrentGroupHeader') {
            if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo == null) {
                this._grid.group.removeGrouping(e);
            }
            else {
                com.ivp.rad.controls.neogrid.scripts.UpperHeader.createBootBoxPopUp();
            }
        }
        if (e.target.className === 'xlResetToDefault') {
            this._clearAllSort();
            this._clearAllGroup();
            this._clearAllFilter();
            this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo = null;
            this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo = null;
            this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayName = null;
            this._grid.get_GridInfo().RankingColumnInfo.topBottomCount = 0;
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RESET_TO_DEFAULT, '' + Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().ChildGridsToOpen), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RESET_TO_DEFAULT);
        }
        if (e.target.className === 'xlRemoveCurrentRankHeader' || eval('$(e.target).closest(\'.xlClearRankingDiv\').length') > 0) {
            this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo = null;
            this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo = null;
            this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayName = null;
            this._grid.get_GridInfo().RankingColumnInfo.topBottomCount = 0;
            this._grid.get_GridInfo().RankingColumnInfo.rows = com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows.none;
            this._grid.get_GridInfo().RankingColumnInfo.AscDesc = com.ivp.rad.controls.neogrid.scripts.info.SortType.ASC;
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_RANKING, '', com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_RANKING);
        }
    },

    _removeFilter: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_removeFilter() {
        this._grid.filter.removeFilter(this._columnName);
    },

    _removeortSort: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_removeortSort() {
        this._grid.sort.removeSort(this._columnName);
    },

    _removeGroup: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_removeGroup() {
        var ColumnName = this._columnName;
        var $dict1 = this._grid.get_GridInfo().ColumnNameMapping;
        for (var $key2 in $dict1) {
            var entry = { key: $key2, value: $dict1[$key2] };
            if (entry.value.toString() === this._columnName) {
                ColumnName = entry.key;
            }
        }
        if (!Array.contains(this._grid.get_DefaultGroupedAndSortedColumns(), this._grid.group._columnIndexAndNameMap[this._columnName])) {
            Array.remove(this._grid.group._groupedColumns, ColumnName);
        }
        this._grid.group.recreateDropContainer(true);
    },

    _clearAllSort: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_clearAllSort() {
        var currentNumber = Number.parseInvariant(this._grid.elementInfo.get_pageNumber().value);
        this._grid.set_PreviousStartIndex((currentNumber - 1) * this._grid.get_GridInfo().PageSize);
        this._grid.sort.resetAllSortIcons();
    },

    _clearAllGroup: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_clearAllGroup() {
        this._grid.elementInfo.get_groupDropPanel().innerHTML = 'Drag here to group.';
        this._grid.elementInfo.get_groupDropPanel().style.backgroundColor = '';
        this._grid.group._groupedColumns = [];
    },

    _clearAllFilter: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_clearAllFilter() {
        this._grid.set_PreviousStartIndex(0);
        this._grid.filter.resetAllIcons();
    },

    _getClientSideColumnPopUp: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getClientSideColumnPopUp(trRightAligned, index) {
        /// <param name="trRightAligned" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = trRightAligned.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnAddNewColumn = this._grid.elementHelper.get_inputButtonElement();
        btnAddNewColumn.id = this._grid.elementIDManager.get_addColumnDiv();
        btnAddNewColumn.title = 'Add New Column';
        btnAddNewColumn.className = 'xlAddNewColumnDiv';
        if (this._grid.get_GridInfo().RequireAddClientSideColumn) {
            th.appendChild(btnAddNewColumn);
        }
    },

    _getExportToPdf: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getExportToPdf(trRightAligned, index) {
        /// <param name="trRightAligned" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = trRightAligned.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnExportToPdf = this._grid.elementHelper.get_anchorElement();
        btnExportToPdf.id = this._grid.elementIDManager.get_exportToPdfID();
        btnExportToPdf.title = 'Export to Pdf.';
        btnExportToPdf.className = 'exporttopdf';
        if (this._grid.get_GridInfo().RequireExportToPdf) {
            th.appendChild(btnExportToPdf);
        }
    },

    _getClearSelectionButton: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getClearSelectionButton(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnClearSelection = this._grid.elementHelper.get_inputButtonElement();
        btnClearSelection.id = this._grid.elementIDManager.get_clearSelectionID();
        btnClearSelection.title = 'Clear all Selection';
        btnClearSelection.className = this._grid.get_GridInfo().CssClearSelection;
        btnClearSelection.style.display = 'none';
        th.appendChild(btnClearSelection);
    },

    _getFullScreenButton: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getFullScreenButton(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnfullscreen = this._grid.elementHelper.get_inputButtonElement();
        btnfullscreen.id = this._grid.get_GridInfo().GridId + '_btnFullScreenGrid';
        btnfullscreen.title = 'Full Screen View';
        btnfullscreen.className = 'xlfullscreen';
        btnfullscreen.style.display = '';
        if (this._grid.get_GridInfo().RequireFullScreen) {
            th.appendChild(btnfullscreen);
        }
    },

    _getLayoutDropDown: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getLayoutDropDown(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var layoutName = this._grid.elementHelper.get_selectElement();
        layoutName.id = this._grid.elementIDManager.get_manageLayoutDropDownId();
        layoutName.className = 'input';
        if (this._grid.get_GridInfo().RequireLayouts) {
            th.appendChild(layoutName);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(layoutName, 'change', Function.createDelegate(this._grid.manageLayouts, this._grid.manageLayouts._loadLayout));
        }
    },

    _serviceCompleted: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_serviceCompleted(serviceInfo) {
        /// <param name="serviceInfo" type="com.ivp.rad.controls.neogrid.scripts.ServiceInfo">
        /// </param>
        this.columnRealNameList = serviceInfo.serializedInfo.ColumnRealNamesList;
        this.viewColumnsToDictionary = serviceInfo.serializedInfo.ViewColumnDictionary;
        this.columnSequence = [];
        this._currentLayout = serviceInfo.serializedInfo.LayoutInfo;
        if (serviceInfo.serializedInfo.SelectedRowCellCount === 0) {
            document.getElementById(this._grid.elementIDManager.get_clearSelectionID()).style.display = 'none';
        }
        else {
            document.getElementById(this._grid.elementIDManager.get_clearSelectionID()).style.display = '';
        }
        this.columnMapInfo = serviceInfo.serializedInfo.ColumnMappingInfo;
        if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_CHECKED_ROWS) {
            return;
        }
        var pageSize = serviceInfo.serializedInfo.PageSize;
        var pageIndex = serviceInfo.serializedInfo.PageIndex;
        var RecordsCount = serviceInfo.serializedInfo.RecordCount;
        if (this._thRecordSummary != null) {
            if (this._grid.get_GridInfo().UpperHeaderText == null || this._grid.get_GridInfo().UpperHeaderText === '') {
                this._thRecordSummary.innerHTML = this._grid.get_GridInfo().ItemText + '(s) : ' + serviceInfo.serializedInfo.RecordCount;
            }
            else {
                this._thRecordSummary.innerHTML = this._grid.get_GridInfo().UpperHeaderText;
            }
        }
        if (this._grid.elementInfo.get_frozenHeaderDiv() != null && this._grid.get_GridInfo().CheckBoxInfo != null) {
            if (serviceInfo.serializedInfo.CheckedRowCountOnPage > 0) {
                if (serviceInfo.serializedInfo.CheckedRowCountOnPage === (serviceInfo.serializedInfo.RecordEndIndex - serviceInfo.serializedInfo.RecordStartIndex + 1)) {
                    if (((this._grid.elementInfo.get_frozenHeaderDiv().children[0].children[0]).children[0]).children[0].children.length > 0) {
                        if (document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv') != null) {
                            if (document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv').children.length > 0) {
                                (((this._grid.elementInfo.get_frozenHeaderDiv().children[0].children[0]).children[0]).children[0].children[0]).checked = true;
                            }
                        }
                    }
                }
                else {
                    if (((this._grid.elementInfo.get_frozenHeaderDiv().children[0].children[0]).children[0]).children[0].children.length > 0) {
                        (((this._grid.elementInfo.get_frozenHeaderDiv().children[0].children[0]).children[0]).children[0].children[0]).checked = false;
                    }
                }
            }
            else {
                if (((this._grid.elementInfo.get_frozenHeaderDiv().children[0].children[0]).children[0]).children[0].children.length > 0) {
                    (((this._grid.elementInfo.get_frozenHeaderDiv().children[0].children[0]).children[0]).children[0].children[0]).checked = false;
                }
            }
            if (serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED || serviceInfo.eventType === com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED) {
                var rows = this._grid.elementInfo.get_bodyInnerTable().children[1].children[0].children;
                if (this._grid.get_GridInfo().groupRowIdFlag) {
                    for (var j = 0; j < this._grid.get_GridInfo().groupHeaderToCheck.length; j++) {
                        for (var i = 0; i < rows.length; i++) {
                            if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i] != null) {
                                if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].getAttribute('groupRowId') != null) {
                                    if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].getAttribute('groupRowId').toString() === this._grid.get_GridInfo().groupHeaderToCheck[j].toString()) {
                                        var checkbox = (((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i]).children[0].getElementsByTagName('INPUT')[0]);
                                        checkbox.checked = this._grid.get_GridInfo().groupRowIdFlag;
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (this._grid.get_GridInfo().groupHeaderToUnCheck != null) {
                        for (var j = 0; j < this._grid.get_GridInfo().groupHeaderToUnCheck.length; j++) {
                            for (var i = 0; i < rows.length; i++) {
                                if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i] != null) {
                                    if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].getAttribute('groupRowId') != null) {
                                        if ((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i].getAttribute('groupRowId').toString() === this._grid.get_GridInfo().groupHeaderToUnCheck[j].toString()) {
                                            var checkbox = (((this._grid.elementInfo.get_frozenBodyDiv().firstChild.children[1].children[0]).children[i]).children[0].getElementsByTagName('INPUT')[0]);
                                            if (checkbox != null) {
                                                checkbox.checked = this._grid.get_GridInfo().groupRowIdFlag;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            this._grid.get_GridInfo().groupRowId = '';
            this._grid.get_GridInfo().groupHeaderToCheck = [];
            this._grid.get_GridInfo().groupHeaderToUnCheck = [];
            this._grid.get_GridInfo().groupRowIdFlag = false;
            document.getElementById(this._grid.get_id() + '_btnClearFunctionality').style.display = '';
            document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv').style.display = '';
        }
        this.searchInfo = Sys.Serialization.JavaScriptSerializer.serialize(serviceInfo.serializedInfo.searchInfo);
        this.uniqueValuesForColumn = Sys.Serialization.JavaScriptSerializer.serialize(serviceInfo.serializedInfo.UniqueValuesForColumn);

        $(".xlneoRADHover").hover(function (e) {
            var text = $(e.target).hasClass("xlneoMaskingElement") ? "APPLY" : "REVERT";
            var ExampleText = "";
            if ($(e.target).attr("MaskingSuggestion") == "Thousands(K)") {
                ExampleText = "(28,398.410300 > 28.98K)";
            }
            else if ($(e.target).attr("MaskingSuggestion") == "Millions(M)") {
                ExampleText = "(28,398,410.300 > 28.98M)";
            }
            else if ($(e.target).attr("MaskingSuggestion") == "Billions(B)") {
                ExampleText = "(28,398,410,300 > 28.98B)";
            }
            $(e.target).qtip({
                        content: {
                            text: function () {
                                return ("<div><div class='RADMaskingUserParentDiv' id='RADUserParentDiv'><div class='RADMaskingUserDivOnHover' id='RADUserDiv'> Masking Suggestion</div></div><div class='RADMaskingInfoParent'><div class='RADMaskingColumnNmaeDiv' ActualColumnNmae=" + $(e.target).closest(".newHeaderColumn").find(".xlneogroupDiv").attr("columnname") + " title=" + $(e.target).closest(".newHeaderColumn").find(".xlneogroupDiv").text() + ">" + $(e.target).closest(".newHeaderColumn").find(".xlneogroupDiv").text() + "</div><div class='RADMaskingSuggest' title=" + $(e.target).attr("MaskingSuggestion") + ">" + $(e.target).attr("MaskingSuggestion") + "</div><div class='RADMaskingExampleDivText'>" + ExampleText + "</div></div><div class='TooltipFooter'>" + text + "</div></div>");
                            }
                        },
                        show: {
                            event: false,
                            ready: true
                        },
                        hide: {
                            //event:'focusout',
                            event:'mouseout',
                            fixed: true
                        },
                        position: {
                            at: 'bottom center',
                            my: 'top center',
                            //target: [e.clientX, e.clientY],
                            adjust: {
                                mouse: false
                            }
                        },
                        style: {
                            Rounded: true,
                            Shadow: true,
                            width: 350, 
                            height: 110,
                            classes: 'qtip-bootstrap qtip-rounded qtip-shadow'
                        },
                    });
        },
        function () {

        });
    },

    _createTextForActionsPerformed: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createTextForActionsPerformed() {
        document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').innerHTML = '';
        if (this._grid.get_GridInfo().RankingColumnInfo != null) {
            if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null && this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo !== '') {
                if (this._grid.get_GridInfo().RankingColumnInfo.topBottomCount > 0) {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').innerHTML = '';
                    var div = this._grid.elementHelper.get_divElement();
                    div.className = 'neoGridGroupAction';
                    div.innerText = 'top ' + this._grid.get_GridInfo().RankingColumnInfo.topBottomCount + ' by ' + this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo + ' in ';
                    document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').appendChild(div);
                    this._createActionTextWithoutRanking(false);
                    eval('$(\'#' + this._grid.get_id() + '_actionsPerformedDiv\').animate({\"height\":\"30px\"})');
                }
                else {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').innerHTML = '';
                    this._createActionTextWithoutRanking(true);
                    eval('$(\'#' + this._grid.get_id() + '_actionsPerformedDiv\').animate({\"height\":\"30px\"})');
                }
                eval('$(\'#' + this._grid.get_id() + '_actionsPerformedDiv\').css({\"padding-bottom\":\"5px\"})');
            }
            else if (this._grid.sort.sortedColumns.length > 0 || this._grid.filter.filteredColumns.length > 0) {
                document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').innerHTML = '';
                this._createActionTextWithoutRanking(true);
                eval('$(\'#' + this._grid.get_id() + '_actionsPerformedDiv\').animate({\"height\":\"30px\"})');
                eval('$(\'#' + this._grid.get_id() + '_actionsPerformedDiv\').css({\"padding-bottom\":\"5px\"})');
            }
            else {
                document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').style.height = '0px';
                eval('$(\'#' + this._grid.get_id() + '_actionsPerformedDiv\').css({\"padding-bottom\":\"0px\"})');
            }
        }
        else if (this._grid.sort.sortedColumns.length > 0 || this._grid.filter.filteredColumns.length > 0) {
            document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').innerHTML = '';
            this._createActionTextWithoutRanking(true);
            eval('$(\'#' + this._grid.get_id() + '_actionsPerformedDiv\').animate({\"height\":\"30px\"})');
            eval('$(\'#' + this._grid.get_id() + '_actionsPerformedDiv\').css({\"padding-bottom\":\"5px\"})');
        }
        else {
            document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').style.height = '0px';
            eval('$(\'#' + this._grid.get_id() + '_actionsPerformedDiv\').css({\"padding-bottom\":\"0px\"})');
        }
    },

    _createActionTextWithoutRanking: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createActionTextWithoutRanking(flag) {
        /// <param name="flag" type="Boolean">
        /// </param>
        if (this._isthereAGroupedColumn()) {
            var div = this._grid.elementHelper.get_divElement();
            div.className = 'neoGridGroupAction';
            div.innerText = 'Group By';
            if (flag) {
                document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').appendChild(div);
            }
            document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').appendChild(this._getGroupColumnsNames());
        }
        if (this._grid.filter.filteredColumns.length > 0) {
            var div = this._grid.elementHelper.get_divElement();
            div.className = 'neoGridFilterAction';
            div.innerText = 'Where';
            document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').appendChild(div);
            document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').appendChild(this._getFilterColumnNames());
        }
        if (this._grid.filter.filteredColumns.length === 0 && this._grid.get_GridInfo().RankingColumnInfo != null) {
            if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo !== '') {
                var div = this._grid.elementHelper.get_divElement();
                div.className = 'neoGridFilterAction';
                div.innerText = 'Where';
                document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').appendChild(div);
                document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').appendChild(this._getFilterColumnNames());
            }
        }
        if (this._isthereASortedColumn()) {
            var div = this._grid.elementHelper.get_divElement();
            div.className = 'neoGridSortAction';
            div.innerText = 'Order By';
            document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').appendChild(div);
            document.getElementById(this._grid.get_GridInfo().GridId + '_actionsPerformedDiv').appendChild(this._getSortedColumnsNames());
        }
    },

    _getSortedColumnsNames: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getSortedColumnsNames() {
        /// <returns type="Object" domElement="true"></returns>
        var columnNames = '';
        var extraColumnNames = '';
        var count = 0;
        var totalCount = 0;
        for (var index = 0; index < this._grid.sort.sortedColumns.length; index++) {
            var s_info = this._grid.sort.sortedColumns[index];
            if (!s_info.IsGrouped) {
                totalCount++;
            }
            if (!s_info.IsGrouped && count < 2) {
                count++;
                var ColName = this._getColumnName(s_info.ColumnName);
                columnNames = (columnNames === '') ? ColName : columnNames + ' , ' + ColName;
            }
            else if (!s_info.IsGrouped) {
                var ColName = this._getColumnName(s_info.ColumnName);
                extraColumnNames = (extraColumnNames === '') ? ColName : extraColumnNames + ' , ' + ColName;
            }
        }
        var element = this._grid.elementHelper.get_divElement();
        element.className = 'neoGridSortActionNames';
        if (extraColumnNames !== '') {
            element.innerHTML = '<div class=\'neoFoundColumns\'>' + columnNames + ((totalCount > count) ? ('</div>  <div class=\'neoExtraColumns\' title=\'' + extraColumnNames + '\'>+' + (totalCount - count)) + '</div>' : '');
        }
        else {
            element.innerText = columnNames + ((totalCount > count) ? ('  <div class=\'neoExtraColumns\'>+' + (totalCount - count)) + '</div>' : '');
        }
        return element;
    },

    _getColumnName: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getColumnName(colName) {
        /// <param name="colName" type="String">
        /// </param>
        /// <returns type="String"></returns>
        var realNames = [];
        realNames = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
        if (Array.contains(realNames, colName)) {
            return this._grid.get_GridInfo().ColumnNameMapping[colName].toString();
        }
        return colName;
    },

    _getFilterColumnNames: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getFilterColumnNames() {
        /// <returns type="Object" domElement="true"></returns>
        var columnNames = '';
        var extraColumnNames = '';
        var count = 0;
        var totalCount = 0;
        for (var i = 0; i < this._grid.filter.filteredColumns.length; i++) {
            totalCount++;
            if (count < 2) {
                count++;
                var ColName = this._getColumnName(this._grid.filter.filteredColumns[i].toString());
                columnNames = (columnNames === '') ? ColName : columnNames + ' , ' + ColName;
            }
            else {
                var ColName = this._getColumnName(this._grid.filter.filteredColumns[i].toString());
                extraColumnNames = (extraColumnNames === '') ? ColName : extraColumnNames + ' , ' + ColName;
            }
        }
        if (this._grid.get_GridInfo().RankingColumnInfo != null) {
            if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null && this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo !== '' && this._grid.get_GridInfo().RankingColumnInfo.topBottomCount === 0) {
                totalCount++;
                count++;
                columnNames = (columnNames === '') ? this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo : columnNames + ' , ' + this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo;
            }
        }
        var element = this._grid.elementHelper.get_divElement();
        element.className = 'neoGridFilterActionNames';
        if (extraColumnNames !== '') {
            element.innerHTML = '<div class=\'neoFoundColumns\'>' + columnNames + ((totalCount > count) ? ('</div>  <div class=\'neoExtraColumns\' title=\'' + extraColumnNames + '\'>+' + (totalCount - count)) + '</div>' : '');
        }
        else {
            element.innerText = columnNames + ((totalCount > count) ? ('  <div class=\'neoExtraColumns\'>+' + (totalCount - count)) + '</div>' : '');
        }
        return element;
    },

    _getGroupColumnsNames: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getGroupColumnsNames() {
        /// <returns type="Object" domElement="true"></returns>
        var columnNames = '';
        var extraColumnNames = '';
        var count = 0;
        var totalCount = 0;
        for (var index = 0; index < this._grid.sort.sortedColumns.length; index++) {
            var s_info = this._grid.sort.sortedColumns[index];
            if (s_info.IsGrouped) {
                totalCount++;
            }
            if (s_info.IsGrouped && count < 2) {
                count++;
                var ColName = this._getColumnName(s_info.ColumnName);
                columnNames = (columnNames === '') ? ColName : columnNames + ' , ' + ColName;
            }
            else if (s_info.IsGrouped) {
                var ColName = this._getColumnName(s_info.ColumnName);
                extraColumnNames = (extraColumnNames === '') ? ColName : extraColumnNames + ' , ' + ColName;
            }
        }
        var element = this._grid.elementHelper.get_divElement();
        element.className = 'neoGridGroupActionNames';
        if (extraColumnNames !== '') {
            element.innerHTML = '<div class=\'neoFoundColumns\'>' + columnNames + ((totalCount > count) ? ('</div>  <div class=\'neoExtraColumns\' title=\'' + extraColumnNames + '\'>+' + (totalCount - count)) + '</div>' : '');
        }
        else {
            element.innerText = columnNames + ((totalCount > count) ? ('  <div class=\'neoExtraColumns\'>+' + (totalCount - count)) + '</div>' : '');
        }
        return element;
    },

    _isthereAGroupedColumn: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_isthereAGroupedColumn() {
        /// <returns type="Boolean"></returns>
        for (var index = 0; index < this._grid.sort.sortedColumns.length; index++) {
            var s_info = this._grid.sort.sortedColumns[index];
            if (s_info.IsGrouped) {
                return true;
            }
        }
        return false;
    },

    _isthereASortedColumn: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_isthereASortedColumn() {
        /// <returns type="Boolean"></returns>
        for (var index = 0; index < this._grid.sort.sortedColumns.length; index++) {
            var s_info = this._grid.sort.sortedColumns[index];
            if (!s_info.IsGrouped) {
                return true;
            }
        }
        return false;
    },

    _getCacheStatusSymbol: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getCacheStatusSymbol(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var divCacheStatusSymbol = this._grid.elementHelper.get_divElement();
        divCacheStatusSymbol.id = this._grid.elementIDManager.get_cacheStatusSymbolID();
        divCacheStatusSymbol.title = 'The Grid has expired. Please reload the page.';
        divCacheStatusSymbol.className = 'expiry';
        divCacheStatusSymbol.innerHTML = '&nbsp;';
        divCacheStatusSymbol.style.display = 'none';
        th.appendChild(divCacheStatusSymbol);
    },

    _getClearSort: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getClearSort(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        if (this._grid.get_GridInfo().RequireSort) {
            var sortedcol = 0;
            var btnClearSort = this._grid.elementHelper.get_inputButtonElement();
            btnClearSort.id = this._grid.elementIDManager.get_clearSortID();
            btnClearSort.title = 'Clear all Sort';
            btnClearSort.className = this._grid.get_GridInfo().CssClearSort;
            for (var i = 0; i < this._grid.get_DefaultGroupedAndSortedColumns().length; i++) {
                if ((this._grid.get_DefaultGroupedAndSortedColumns()[i]).SortOrder !== com.ivp.rad.controls.neogrid.scripts.info.Order.NONE) {
                    sortedcol++;
                }
            }
            if (this._grid.sort.sortedColumns.length > 0) {
                btnClearSort.style.display = '';
            }
            else if (sortedcol > 0) {
                btnClearSort.style.display = '';
            }
            else {
                btnClearSort.style.display = 'none';
            }
            th.appendChild(btnClearSort);
        }
    },

    _getClearFilter: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getClearFilter(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnClearFilter = this._grid.elementHelper.get_inputButtonElement();
        btnClearFilter.id = this._grid.elementIDManager.get_clearFilterID();
        btnClearFilter.title = 'Clear all Filters';
        btnClearFilter.className = this._grid.get_GridInfo().CssClearFilter;
        if (this._grid.get_GridInfo().RequireFilter) {
            if (this._grid.filter.filteredColumns.length > 0) {
                btnClearFilter.style.display = '';
            }
            else {
                btnClearFilter.style.display = 'none';
            }
            th.appendChild(btnClearFilter);
        }
    },

    _getClearGroup: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getClearGroup(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var defGroupedCol = 0;
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        if (this._grid.get_GridInfo().RequireGrouping) {
            var btnClearGroup = this._grid.elementHelper.get_inputButtonElement();
            btnClearGroup.id = this._grid.elementIDManager.get_clearGroupID();
            btnClearGroup.title = 'Clear all Groups';
            btnClearGroup.className = this._grid.get_GridInfo().CssClearGroup;
            for (var i = 0; i < this._grid.get_DefaultGroupedAndSortedColumns().length; i++) {
                if ((this._grid.get_DefaultGroupedAndSortedColumns()[i]).SortOrder !== com.ivp.rad.controls.neogrid.scripts.info.Order.NONE) {
                    defGroupedCol++;
                }
            }
            if (this._grid.group._groupedColumns.length > 0 || defGroupedCol > 0) {
                btnClearGroup.style.display = '';
            }
            else {
                btnClearGroup.style.display = 'none';
            }
            th.appendChild(btnClearGroup);
        }
    },

    //_getDataInsight: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getDataInsight(tr, index) {
    //    /// <param name="tr" type="Object" domElement="true">
    //    /// </param>
    //    /// <param name="index" type="Number" integer="true">
    //    /// </param>
    //    var th = tr.insertCell(index);
    //    th.setAttribute('isgridupperheader', true);
    //    var btnExportToExcel = this._grid.elementHelper.get_anchorElement();
    //    btnExportToExcel.id = 'insights';
    //    btnExportToExcel.title = 'DataInsights';
    //    btnExportToExcel.className = 'DataInsights';
    //    btnExportToExcel.text = 'Insights';
    //    if (this._grid.get_GridInfo().DataInsight) {
    //        th.appendChild(btnExportToExcel);
    //    }
    //},
    _getExportToExcel: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getExportToExcel(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnExportToExcel = this._grid.elementHelper.get_anchorElement();
        btnExportToExcel.id = this._grid.elementIDManager.get_exportToExcelID();
        btnExportToExcel.title = 'Export to Excel.';
        btnExportToExcel.className = this._grid.get_GridInfo().CssExportRows + " fa fa-file-excel";
        if (this._grid.get_GridInfo().RequireExportToExcel) {
            th.appendChild(btnExportToExcel);
        }
    },

    _getExportToExcelForVisibleRows: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getExportToExcelForVisibleRows(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnExportToExcel = this._grid.elementHelper.get_anchorElement();
        btnExportToExcel.title = 'Export visible rows.';
        btnExportToExcel.id = this._grid.elementIDManager.get_exportToExcelVisibleRows();
        btnExportToExcel.className = this._grid.get_GridInfo().CssExportVisibleRows;
        if (this._grid.get_GridInfo().RequireExportToExcel) {
            th.appendChild(btnExportToExcel);
        }
    },

    _getTextSearchText: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getTextSearchText(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        if (this._grid.get_GridInfo().RequireSearch) {
            th.innerHTML = '<span style=\"padding-left:0px;\"></span>';
        }
    },

    _getTextSearch: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getTextSearch(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        if (!this._grid.get_GridInfo().IsAdvanceSearch) {
            th.setAttribute('isgridupperheader', true);
            th.style.position = 'relative';
            th.style.width = '154px';
            th.style.paddingRight = '5px';
        }
        var upperDivElement = this._grid.elementHelper.get_divElement();
        if (!this._grid.get_GridInfo().IsAdvanceSearch) {
            upperDivElement.id = this._grid.get_GridInfo().GridId + '_SearchInMainGrid';
        }
        upperDivElement.className = 'MainSearchBox SearchBoxHidden';
        upperDivElement.style.padding = '2px';
        var SearchFontawesome = document.createElement('i');
        if (this._grid.get_GridInfo().IsAdvanceSearch) {
            SearchFontawesome.className = 'SearchIcon';
        }
        else {
            SearchFontawesome.className = 'fa fa-search SearchIcon';
        }
        SearchFontawesome.id = this._grid.get_id() + 'SearchFontawesome';
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(SearchFontawesome, 'click', Function.createDelegate(this, this._clickSearchIcon));
        upperDivElement.appendChild(SearchFontawesome);
        var txtFilter = this._grid.elementHelper.get_textElement();
        if (!this._grid.get_GridInfo().IsAdvanceSearch) {
            txtFilter.id = this._grid.elementIDManager.get_search();
        }
        txtFilter.setAttribute('placeholder', 'Search..');
        txtFilter.style.textIndent = '12px';
        txtFilter.className = 'form-control SearchTextBoxx';
        upperDivElement.appendChild(txtFilter);
        if (this._grid.get_GridInfo().IsAdvanceSearch) {
            var clearSearch = document.createElement('DIV');
            clearSearch.className = 'radxlgridclearsearch fa fa-times';
            clearSearch.style.display = 'none';
            upperDivElement.appendChild(clearSearch);
        }
        else {
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(txtFilter, 'keydown', Function.createDelegate(this, this._doNothing));
        }
        if (this._grid.get_GridInfo().RequireSearch) {
            th.appendChild(upperDivElement);
        }
    },

    _clearSearchIcon: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_clearSearchIcon(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        eval('$(\'#' + this._grid.get_id() + '_SearchInMainGridParent\').animate({\"height\":\"0px\"})');
        eval('$(\'#' + this._grid.get_id() + '_SearchInMainGrid\').animate({\"width\":\"0%\"})');
        document.getElementById(this._grid.get_id() + '_SearchInMainGrid').style.display = 'none';
        document.getElementById(this._grid.get_id() + 'SearchFontawesomeEntSearch').style.display = 'none';
        document.getElementById(this._grid.get_id() + '_SearchInMainGrid').style.right = '';
        document.getElementById(this._grid.get_id() + 'SearchFontawesome').style.display = 'inline-block';
        if (document.getElementById('EntSearchreduceWidth') != null) {
            document.getElementById('EntSearchreduceWidth').style.opacity = '1';
        }
        if (document.getElementById('RightUpperHeaderMainDiv') != null) {
            document.getElementById('RightUpperHeaderMainDiv').style.opacity = '1';
        }
        if (document.getElementById(this._grid.get_id() + '_headerDiv') != null) {
            document.getElementById(this._grid.get_id() + '_headerDiv').style.opacity = '1';
        }
        if (document.getElementById(this._grid.get_id() + '_bodyDiv') != null) {
            document.getElementById(this._grid.get_id() + '_bodyDiv').style.opacity = '1';
        }
        if (document.getElementById(this._grid.get_id() + '_footerDiv') != null) {
            document.getElementById(this._grid.get_id() + '_footerDiv').style.opacity = '1';
        }
        document.getElementById(this._grid.get_id() + '_clearEntSearch').style.display = 'none';
        document.getElementById(this._grid.get_id() + '_clearSearchToggle').style.display = 'none';
        document.getElementById(this._grid.get_id() + '_clearSearchToggle').className = 'radxlgridclearSearchToggle';
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_SEARCH, (e.target).value, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_SEARCH);
    },

    _clickSearchIcon: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_clickSearchIcon(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.get_GridInfo().IsAdvanceSearch) {
            eval('$(\'#' + this._grid.get_id() + '_actionsPerformedDiv\').animate({\"height\":\"0px\"})');
            eval('$(\'#' + this._grid.get_id() + '_SearchInMainGridParent\').animate({\"height\":\"35px\"})');
            document.getElementById(this._grid.get_id() + 'SearchFontawesomeEntSearch').style.display = 'block';
            document.getElementById(this._grid.get_id() + '_SearchInMainGrid').style.display = 'inline-block';
            var search = (eval('$(\"#' + this._grid.get_GridInfo().GridId + '_txtSearch\")'));
            eval('$(\'#' + this._grid.get_id() + '_SearchInMainGrid\').animate({\"width\":\"1280px\"})');
            document.getElementById(this._grid.get_id() + '_SearchInMainGrid').style.right = '10%';
            document.getElementById(this._grid.get_id() + 'SearchFontawesome').style.display = 'none';
            if (document.getElementById('EntSearchreduceWidth') != null) {
                document.getElementById('EntSearchreduceWidth').style.opacity = '0.5';
            }
            if (document.getElementById('RightUpperHeaderMainDiv') != null) {
                document.getElementById('RightUpperHeaderMainDiv').style.opacity = '0.5';
            }
            if (document.getElementById(this._grid.get_id() + '_headerDiv') != null) {
                document.getElementById(this._grid.get_id() + '_headerDiv').style.opacity = '0.5';
            }
            if (document.getElementById(this._grid.get_id() + '_bodyDiv') != null) {
                document.getElementById(this._grid.get_id() + '_bodyDiv').style.opacity = '0.5';
            }
            if (document.getElementById(this._grid.get_id() + '_footerDiv') != null) {
                document.getElementById(this._grid.get_id() + '_footerDiv').style.opacity = '0.5';
            }
            document.getElementById(this._grid.get_id() + '_clearEntSearch').style.display = 'inline-block';
            if (this._grid.sort.sortedColumns.length > 0 || this._grid.filter.filteredColumns.length > 0 || this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null) {
                document.getElementById(this._grid.get_id() + '_clearSearchToggle').style.display = 'inline-block';
            }
            else {
                document.getElementById(this._grid.get_id() + '_clearSearchToggle').style.display = 'none';
            }
            eval('RADNeoGridSearch(search[0][\"id\"],this._grid.get_GridInfo().searchInfo,this._grid.get_GridInfo().uniqueValuesForColumn)');
        }
        else {
            var SearchMainDiv = (eval('$(\"#' + this._grid.get_GridInfo().GridId + '_SearchInMainGrid\")[0]'));
            if (SearchMainDiv.className === 'MainSearchBox SearchBoxHidden') {
                SearchMainDiv.className = 'MainSearchBox SearchBoxHidden SearchBoxVisible';
            }
            else {
                SearchMainDiv.className = 'MainSearchBox SearchBoxHidden';
            }
        }
    },

    _doNothing: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_doNothing(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.keyCode === Sys.UI.Key.enter) {
            e.stopPropagation();
            e.preventDefault();
            e.rawEvent.returnValue = false;
        }
    },

    _thRecordSummary: null,

    _getRecordSummary: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getRecordSummary(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        this._thRecordSummary = tr.insertCell(index);
        this._thRecordSummary.setAttribute('isgridupperheader', true);
        this._thRecordSummary.id = this._grid.elementIDManager.get_gridSummary();
        this._thRecordSummary.className = this._grid.get_GridInfo().CssRecordSummary;
        if (this._grid.get_GridInfo().UpperHeaderText == null || this._grid.get_GridInfo().UpperHeaderText === '') {
            this._thRecordSummary.innerHTML = this._grid.get_GridInfo().ItemText + '(s) : ';
        }
        else {
            this._thRecordSummary.innerHTML = this._grid.get_GridInfo().UpperHeaderText;
        }
    },

    _getGroupDropPanel: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getGroupDropPanel(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        if (this._grid.get_GridInfo().RequireGrouping) {
            th.style.width = '50%';
            th.style.height = '22px';
            th.id = this._grid.elementIDManager.get_groupDropPanel();
            th.className = this._grid.get_GridInfo().CssGroupDropPanel;
            if (this._grid.get_GridInfo().IsMasterChildGrid) {
                if (this._grid.get_GridInfo().MasterGridId !== this._grid.get_GridInfo().GridId) {
                    th.innerHTML = 'Drag here to group.';
                }
            }
            else {
                th.innerHTML = 'Drag here to group.';
            }
        }
    },

    _getLoadingCell: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getLoadingCell(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        th.style.width = '22px';
        var divLoading = this._grid.elementHelper.get_divElement();
        divLoading.id = this._grid.elementIDManager.get_loading();
        divLoading.className = 'loading';
        divLoading.innerHTML = '&nbsp;';
        divLoading.style.display = 'none';
        divLoading.style.width = '22px';
        th.appendChild(divLoading);
    },
    _getEditableGridAudit: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getEditableGrid(tr, index) {
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        if (this._grid.get_GridInfo().RequireEditGrid) {
            th.className = 'RAD_Edit_Grid_Audit';
            th.title = 'Edit Grid Audit';
            th.id = 'Edit_Grid_Audit';
            th.style.verticalAlign = 'middle';
            th.style.lineHeight = '25px';
            th.style.cursor = 'pointer';
            th.style.width = '20px';
            th.style.paddingTop = '3px';
            th.style.fontSize = '20px';
        }
    },
    _getEditableGrid: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getEditableGrid(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        if (this._grid.get_GridInfo().RequireEditGrid) {
            th.className = 'RADEditIcon fa fa-pencil-square-o fa-lg';
            th.title = 'Edit Grid';
            th.id = this._grid.elementIDManager.get_editableGrid();
            th.style.verticalAlign = 'middle';
            th.style.lineHeight = '20px';
            th.style.cursor = 'pointer';
            th.style.width = '20px';
            th.style.paddingTop = '3px';
            th.style.fontSize = '14px';
            th.style.color = '##ADC2D2';
        }
    },

    _getLayout: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getLayout(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnManageLayout = this._grid.elementHelper.get_anchorElement();
        btnManageLayout.id = this._grid.elementIDManager.get_manageLayoutId();
        btnManageLayout.title = 'Manage Layout';
        btnManageLayout.className = 'manageViewIcon';
        btnManageLayout.style.display = 'none';
        if (this._grid.get_GridInfo().RequireLayouts) {
            th.appendChild(btnManageLayout);
        }
    },

    _getSliderHeaderRow: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getSliderHeaderRow(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnShowSlider = this._grid.elementHelper.get_buttonElement();
        btnShowSlider.id = this._grid.elementIDManager.get_showSliderID();
        btnShowSlider.title = 'Show Slider';
        btnShowSlider.className = 'showPanel';
        if (this._grid.get_GridInfo().RequireSliderFilter) {
            th.appendChild(btnShowSlider);
        }
    },

    _getRuleBasedColoring: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getRuleBasedColoring(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnRuleBasedColoring = this._grid.elementHelper.get_buttonElement();
        btnRuleBasedColoring.id = this._grid.elementIDManager.get_createColorRuleID();
        btnRuleBasedColoring.title = 'Show Rule Based Coloring';
        btnRuleBasedColoring.className = 'xlruleEditorPopup';
        btnRuleBasedColoring.style.display = 'none';
        if (this._grid.get_GridInfo().RequireRuleBasedColoring) {
            th.appendChild(btnRuleBasedColoring);
        }
    },

    _getFullScreenCell: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getFullScreenCell(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnFullScreen = this._grid.elementHelper.get_buttonElement();
        btnFullScreen.id = this._grid.elementIDManager.get_fullScreenID();
        btnFullScreen.setAttribute('state', 'original');
        btnFullScreen.title = 'Full Screen';
        btnFullScreen.className = 'xlfullScreen';
        th.style.display = 'none';
        if (this._grid.get_GridInfo().RequireFullScreen) {
            th.appendChild(btnFullScreen);
        }
    },

    _getRADBalancePopupCell: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getRADBalancePopupCell(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnBalancePopup = this._grid.elementHelper.get_buttonElement();
        btnBalancePopup.id = this._grid.elementIDManager.get_radBalancePopupId();
        btnBalancePopup.setAttribute('state', 'hidden');
        btnBalancePopup.title = 'Show Balances';
        btnBalancePopup.className = 'xlradbalancepopup';
        if (this._grid.get_GridInfo().RequireRADBalancePopup) {
            th.appendChild(btnBalancePopup);
        }
    },

    _getRADExtraPopupCell: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getRADExtraPopupCell(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var th = tr.insertCell(index);
        th.setAttribute('isgridupperheader', true);
        var btnExtraPopup = this._grid.elementHelper.get_buttonElement();
        btnExtraPopup.id = this._grid.elementIDManager.get_radExtraPopupId();
        btnExtraPopup.setAttribute('state', 'hidden');
        btnExtraPopup.className = 'xlradextrapopup';
        btnExtraPopup.title = this._grid.get_GridInfo().ExtraInfoPopupTitle;
        if (this._grid.get_GridInfo().RequireRADExtraPopup) {
            th.appendChild(btnExtraPopup);
        }
    },

    _fullScreen: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_fullScreen(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var heightDiff = 0;
        if (e.target.getAttribute('state').toString() === 'original') {
            e.target.setAttribute('state', 'full');
            this._grid.elementInfo.get_element().style.position = 'absolute';
            this._grid.elementInfo.get_element().style.top = '0px';
            heightDiff = (document.documentElement.offsetHeight - this._grid.elementInfo.get_upperHeaderDiv().offsetHeight - this._grid.elementInfo.get_headerInnerDiv().parentNode.offsetHeight - this._grid.elementInfo.get_footerDiv().offsetHeight - 16) - this._grid.elementInfo.get_bodyInnerDiv().offsetHeight;
            e.target.setAttribute('heightDiff', heightDiff);
            this._grid.elementInfo.get_bodyInnerDiv().style.height = (this._grid.elementInfo.get_bodyInnerDiv().offsetHeight + heightDiff) + 'px';
            if (this._grid.elementInfo.get_frozenBodyDiv() != null && this._grid.elementInfo.get_frozenBodyDiv().offsetHeight !== 0) {
                this._grid.elementInfo.get_frozenBodyDiv().style.height = (this._grid.elementInfo.get_frozenBodyDiv().offsetHeight + heightDiff) + 'px';
            }
        }
        else {
            e.target.setAttribute('state', 'original');
            this._grid.elementInfo.get_element().style.position = 'relative';
            heightDiff = Number.parseInvariant(e.target.getAttribute('heightDiff').toString());
            this._grid.elementInfo.get_bodyInnerDiv().style.height = this._grid.elementInfo.get_bodyInnerDiv().offsetHeight - heightDiff + 'px';
            if (this._grid.elementInfo.get_frozenBodyDiv() != null && this._grid.elementInfo.get_frozenBodyDiv().offsetHeight !== 0) {
                this._grid.elementInfo.get_frozenBodyDiv().style.height = (this._grid.elementInfo.get_frozenBodyDiv().offsetHeight - heightDiff) + 'px';
            }
        }
    },

    _clickEvent: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_clickEvent(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
    },

    _keyUpEvent: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_keyUpEvent(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
    },

    _showBalancePopup: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_showBalancePopup(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e != null) {
            if (e.target.getAttribute('state').toString() === 'hidden') {
                e.target.setAttribute('state', 'show');
                this._grid.elementInfo.get_bodyInnerDiv().style.height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) - 83) + 'px';
                this._grid.elementInfo.get_frozenBodyDiv().style.height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) - 83) + 'px';
                var width = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) - 83);
                this._grid.get_GridInfo().Height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) - 83) + 'px';
                if (Sys.Browser.name === 'Microsoft Internet Explorer' && Sys.Browser.version === 8) {
                    if (width !== Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2))) {
                        this._grid.get_GridInfo().Height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) - 83) + 'px';
                    }
                }
                this._grid.gridEngine._setVerticalScroll();
                this._grid.elementInfo.get_radbalancepopupDiv().style.display = '';
                this._grid.elementInfo.get_radbalancepopupDiv().childNodes[1].style.width = (this._grid.elementInfo.get_radbalancepopupDiv().offsetWidth - (this._grid.elementInfo.get_radbalancepopupDiv().childNodes[0].offsetWidth * 2) - 10) + 'px';
            }
            else {
                e.target.setAttribute('state', 'hidden');
                this._grid.elementInfo.get_radbalancepopupDiv().style.display = 'none';
                this._grid.elementInfo.get_bodyInnerDiv().style.height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) + 83) + 'px';
                this._grid.elementInfo.get_frozenBodyDiv().style.height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) + 83) + 'px';
                this._grid.get_GridInfo().Height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) + 83) + 'px';
                this._grid.gridEngine._setVerticalScroll();
            }
        }
        else {
            var _scrollcontent = Function.createDelegate(this, this._scrollContent);
            this._grid.elementInfo.get_radBalancePopupBtn().setAttribute('state', 'show');
            this._grid.elementInfo.get_radbalancepopupDiv().style.display = '';
            window.setTimeout(_scrollcontent, 50);
        }
    },

    _scrollContent: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_scrollContent() {
        var width = this._grid.elementInfo.get_radbalancepopupDiv().offsetWidth - (this._grid.elementInfo.get_radbalancepopupDiv().childNodes[0].offsetWidth * 2) - 10;
        if (width > 0) {
            this._grid.elementInfo.get_radbalancepopupDiv().childNodes[1].style.width = width + 'px';
        }
    },

    _showExtraPopup: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_showExtraPopup(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.getAttribute('state').toString() === 'hidden') {
            if ((this._grid.elementInfo.get_radExtrapopupDiv().firstChild).rows[0].children.length > 1) {
                e.target.setAttribute('state', 'show');
                this._grid.elementInfo.get_bodyInnerDiv().style.height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) - 109) + 'px';
                this._grid.elementInfo.get_frozenBodyDiv().style.height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) - 109) + 'px';
                this._grid.get_GridInfo().Height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) - 109) + 'px';
                this._grid.gridEngine._setVerticalScroll();
                this._grid.elementInfo.get_radExtrapopupDiv().style.display = '';
            }
        }
        else {
            e.target.setAttribute('state', 'hidden');
            this._grid.elementInfo.get_radExtrapopupDiv().style.display = 'none';
            if ((this._grid.elementInfo.get_radExtrapopupDiv().firstChild).rows[0].children.length > 1) {
                this._grid.elementInfo.get_bodyInnerDiv().style.height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) + 109) + 'px';
                this._grid.elementInfo.get_frozenBodyDiv().style.height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) + 100) + 'px';
                this._grid.get_GridInfo().Height = (Number.parseInvariant(this._grid.get_GridInfo().Height.substr(0, this._grid.get_GridInfo().Height.length - 2)) + 109) + 'px';
                this._grid.gridEngine._setVerticalScroll();
            }
        }
    },

    _getConfigurationSettings: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getConfigurationSettings(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var sel = document.createElement('SELECT');
        sel.className = 'xlSelectElement';
        sel.id = this._grid.get_id() + '_selectElement';
        var option = document.createElement('OPTION');
        option.value = 'All Columns';
        option.text = 'All Columns';
        option.selected = true;
        this._grid.raddomElement.addOptionElement(sel, option);
        option = document.createElement('OPTION');
        option.value = 'Hidden Columns';
        option.text = 'Hidden Columns';
        this._grid.raddomElement.addOptionElement(sel, option);
        option = document.createElement('OPTION');
        option.value = 'Visible Columns';
        option.text = 'Visible Columns';
        this._grid.raddomElement.addOptionElement(sel, option);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(sel, 'change', Function.createDelegate(this, this._showHideMenuChange));
        var configurationsettings = tr.insertCell(index);
        configurationsettings.setAttribute('isupperheader', true);
        configurationsettings.id = this._grid.get_id() + '_configutation';
        configurationsettings.title = 'Show Configuration';
        configurationsettings.className = 'xlConfiguration';
        if (this._grid.get_GridInfo().RequireMiniatureVersion) {
            configurationsettings.style.display = 'none';
        }
        var ConfigurationSettingsDiv = null;
        if (document.getElementById(this._grid.get_id() + '_ConfigurationSettings') == null) {
            ConfigurationSettingsDiv = document.createElement('DIV');
            ConfigurationSettingsDiv.id = this._grid.get_id() + '_ConfigurationSettings';
        }
        else {
            this._grid.get_element().parentNode.removeChild(document.getElementById(this._grid.get_id() + '_ConfigurationSettings'));
            ConfigurationSettingsDiv = document.createElement('DIV');
            ConfigurationSettingsDiv.id = this._grid.get_id() + '_ConfigurationSettings';
        }
        ConfigurationSettingsDiv.className = 'xlConfigurationSettings';
        ConfigurationSettingsDiv.style.display = 'none';
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(ConfigurationSettingsDiv, 'click', Function.createDelegate(this, this._confgurationSettingsHandler));
        var settingsChildItem = document.createElement('DIV');
        settingsChildItem.innerText = 'Customize Column';
        settingsChildItem.className = 'xlSettingsChild';
        settingsChildItem.style.paddingTop = '2px';
        if (this._grid.get_GridInfo().RequireTagging) {
            settingsChildItem = document.createElement('DIV');
            settingsChildItem.innerText = 'Tagging';
            settingsChildItem.className = 'xlSettingsChild';
            ConfigurationSettingsDiv.appendChild(settingsChildItem);
        }
        settingsChildItem = document.createElement('DIV');
        settingsChildItem.innerText = 'Format Column';
        settingsChildItem.className = 'xlSettingsChild';
        if (this._grid.get_GridInfo().RequireRanking) {
            settingsChildItem = document.createElement('DIV');
            settingsChildItem.innerText = 'Ranking/Top n Bottom n';
            settingsChildItem.className = 'xlSettingsChild';
            ConfigurationSettingsDiv.appendChild(settingsChildItem);
        }
        if (this._grid.get_GridInfo().RequireLayouts) {
            settingsChildItem = document.createElement('DIV');
            settingsChildItem.innerText = 'Manage Layout';
            settingsChildItem.className = 'xlSettingsChild';
            ConfigurationSettingsDiv.appendChild(settingsChildItem);
        }
        settingsChildItem = document.createElement('DIV');
        settingsChildItem.innerText = 'Rule Based Coloring';
        settingsChildItem.className = 'xlSettingsChild';
        if (this._grid.get_GridInfo().RequireViews) {
            settingsChildItem = document.createElement('DIV');
            settingsChildItem.innerText = 'Manage Views';
            settingsChildItem.className = 'xlSettingsChild';
            ConfigurationSettingsDiv.appendChild(settingsChildItem);
        }
        if (this._grid.get_GridInfo().DistributionSuggestion) {
            settingsChildItem = document.createElement('DIV');
            settingsChildItem.innerText = 'Masking Suggestion';
            settingsChildItem.className = 'xlSettingsChild';
            ConfigurationSettingsDiv.appendChild(settingsChildItem);
        }
        this._grid.get_element().parentNode.appendChild(ConfigurationSettingsDiv);
        this._getBodyForShowHide();
    },

    _containsFiletrResizeListDiv: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_containsFiletrResizeListDiv(e) {
        /// <param name="e" type="Object" domElement="true">
        /// </param>
        /// <returns type="Boolean"></returns>
        var parent = document.getElementById(this._grid.get_GridInfo().GridId + '_showHideColumnsDiv');
        var node = e.parentNode;
        while (node != null) {
            if (node === parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    },

    _fireshowHideMouseDown: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_fireshowHideMouseDown(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (document.getElementById(this._grid.get_id() + '_showHideColumnsDiv') != null) {
            this._initialHeight = document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').offsetHeight;
            this._startShowHideListResize(e);
        }
    },

    _fireshowHideMouseMove: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_fireshowHideMouseMove(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._containsFiletrResizeListDiv(e.target)) {
            this._resizeShowHideListResize(e);
        }
    },

    _fireShowHideMouseupHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_fireShowHideMouseupHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (document.getElementById(this._grid.get_id() + '_showHideColumnsDiv') != null) {
            this._endShowHideListResize(e);
        }
    },

    _startShowHideListResize: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_startShowHideListResize(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'xlResizeShowHideDiv') {
            this._showHideListResizeStart = true;
            this._initialXPos = e.clientX;
            this._initialYPos = e.clientY;
        }
    },

    _resizeShowHideListResize: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_resizeShowHideListResize(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var showHideBodyDiv = document.getElementById(this._grid.get_id() + '_showHideColumnsDiv');
        var visibleColDiv = document.getElementById(this._grid.get_id() + '_showHideColumnBody');
        var hiddenColDiv = document.getElementById(this._grid.get_id() + '_hiddenColumnHeader').nextSibling;
        var _newWidth = this._initialWidth + e.clientX - this._initialXPos;
        var _newHeight = this._initialHeight + e.clientY - this._initialYPos;
        if (this._showHideListResizeStart) {
            eval('var target = document.getElementById(\"' + this._grid.get_element().id + '\"); if(target.style.MozUserSelect!=\"undefined\") target.style.MozUserSelect=\"none\";');
            showHideBodyDiv.style.height = _newHeight + 'px';
            visibleColDiv.style.height = _newHeight - (((hiddenColDiv.offsetHeight > 0) ? 96 : 68) + hiddenColDiv.offsetHeight) + 'px';
            if (visibleColDiv.parentNode != null) {
                if (visibleColDiv.parentNode.className === 'slimScrollDivNew') {
                    visibleColDiv.parentNode.style.height = showHideBodyDiv.offsetHeight - (((hiddenColDiv.offsetHeight > 0) ? 96 : 68) + hiddenColDiv.offsetHeight) + 'px';
                }
            }
            document.body.style.cursor = 'nw-resize';
        }
        else {
            eval('var target = document.getElementById(\"' + this._grid.get_element().id + '\"); if(target.style.MozUserSelect!=\"undefined\") target.style.MozUserSelect=\"\";');
            document.body.style.cursor = '';
        }
    },

    _endShowHideListResize: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_endShowHideListResize(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._showHideListResizeStart) {
            this._showHideListResizeStart = false;
            document.body.style.cursor = '';
            this._initialHeight = document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').clientHeight;
            this._initialWidth = document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').clientWidth;
        }
    },

    _removeBodyElementsForShowHide: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_removeBodyElementsForShowHide() {
        var showHideColumnDiv = document.getElementById(this._grid.get_id() + '_showHideColumnsDiv');
        if (document.getElementById(this._grid.get_id() + '_visibleColumnHeader') != null) {
            showHideColumnDiv.removeChild(document.getElementById(this._grid.get_id() + '_visibleColumnHeader'));
        }
        if (document.getElementById(this._grid.get_id() + '_showHideColumnBody') != null) {
            if (document.getElementById(this._grid.get_id() + '_showHideColumnBody').parentNode.className === 'slimScrollDivNew') {
                showHideColumnDiv.removeChild(document.getElementById(this._grid.get_id() + '_showHideColumnBody').parentNode);
            }
            else {
                showHideColumnDiv.removeChild(document.getElementById(this._grid.get_id() + '_showHideColumnBody'));
            }
        }
        if (document.getElementById(this._grid.get_id() + '_hiddenColumnHeader') != null) {
            showHideColumnDiv.removeChild(document.getElementById(this._grid.get_id() + '_hiddenColumnHeader'));
        }
        if (document.getElementById(this._grid.get_id() + '_hiddenColumnBody') != null) {
            if (document.getElementById(this._grid.get_id() + '_hiddenColumnBody').parentNode.className === 'slimScrollDivNew') {
                showHideColumnDiv.removeChild(document.getElementById(this._grid.get_id() + '_hiddenColumnBody').parentNode);
            }
            else {
                showHideColumnDiv.removeChild(document.getElementById(this._grid.get_id() + '_hiddenColumnBody'));
            }
        }
        if (document.getElementById(this._grid.get_id() + '_showHideApply') != null) {
            showHideColumnDiv.removeChild(document.getElementById(this._grid.get_id() + '_showHideApply'));
        }
    },

    _getBodyForShowHide: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getBodyForShowHide() {
        var showHideColumnDiv = null;
        if (document.getElementById(this._grid.get_id() + '_showHideColumnsDiv') == null) {
            showHideColumnDiv = document.createElement('DIV');
            showHideColumnDiv.id = this._grid.get_id() + '_showHideColumnsDiv';
        }
        else {
            showHideColumnDiv = document.getElementById(this._grid.get_id() + '_showHideColumnsDiv');
            showHideColumnDiv.innerHTML = '';
        }
        showHideColumnDiv.className = 'xlshowhideColumnsDiv';
        showHideColumnDiv.style.display = 'none';
        var showHideHeader = document.createElement('DIV');
        showHideHeader.className = 'xlshowHideHeader';
        showHideHeader.innerText = 'Column Name';
        showHideColumnDiv.appendChild(showHideHeader);
        showHideHeader = document.createElement('DIV');
        showHideHeader.className = 'xlShowHideOptions';
        showHideColumnDiv.appendChild(showHideHeader);
        var headerItems = document.createElement('DIV');
        headerItems.innerText = 'Filter By : ';
        headerItems.style.width = '100%';
        headerItems.className = 'xlHeaderItemsLeft';
        headerItems.style.display = 'none';
        showHideHeader.appendChild(headerItems);
        var VisibleColumnDivHeader = document.createElement('DIV');
        VisibleColumnDivHeader.className = 'xlVisibleColumnHeader';
        VisibleColumnDivHeader.id = this._grid.get_id() + '_visibleColumnHeader';
        VisibleColumnDivHeader.innerHTML = 'Visible Columns';
        showHideColumnDiv.appendChild(VisibleColumnDivHeader);
        var showHideColumnBody = document.createElement('DIV');
        showHideColumnBody.className = 'xlShowHideColumnBody';
        showHideColumnBody.id = this._grid.get_id() + '_showHideColumnBody';
        showHideColumnDiv.appendChild(showHideColumnBody);
        var hiddenColumnDivHeader = document.createElement('DIV');
        hiddenColumnDivHeader.className = 'xlHiddenColumnHeader';
        hiddenColumnDivHeader.id = this._grid.get_id() + '_hiddenColumnHeader';
        hiddenColumnDivHeader.innerHTML = 'Hidden Columns';
        showHideColumnDiv.appendChild(hiddenColumnDivHeader);
        var HiddenColumnBody = document.createElement('DIV');
        HiddenColumnBody.className = 'xlHiddenColumnBody';
        HiddenColumnBody.id = this._grid.get_id() + '_hiddenColumnBody';
        showHideColumnDiv.appendChild(HiddenColumnBody);
        var applyDiv = document.createElement('DIV');
        applyDiv.className = 'xlShowHideApply';
        applyDiv.id = this._grid.get_id() + '_showHideApply';
        applyDiv.innerHTML = 'Apply';
        showHideColumnDiv.appendChild(applyDiv);
        var resizeDiv = document.createElement('DIV');
        resizeDiv.className = 'xlResizeShowHideDiv';
        resizeDiv.id = this._grid.get_id() + '_resizeShowHide';
        showHideColumnDiv.appendChild(resizeDiv);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(showHideColumnDiv, 'click', Function.createDelegate(this, this._showHideColumnDivHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(showHideColumnDiv, 'mousedown', Function.createDelegate(this, this._fireshowHideMouseDown));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(showHideColumnDiv, 'mouseleave', Function.createDelegate(this, this._fireShowHideMouseLeaveHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(showHideColumnDiv, 'mousemove', Function.createDelegate(this, this._fireshowHideMouseMove));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(showHideColumnDiv, 'mouseup', Function.createDelegate(this, this._fireShowHideMouseupHandler));
        this._grid.get_element().parentNode.appendChild(showHideColumnDiv);
    },

    _fireShowHideMouseLeaveHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_fireShowHideMouseLeaveHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
    },

    _showHideMenuChange: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_showHideMenuChange(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var select = e.target;
        this._bindShowHideColumnBody(select.selectedIndex);
    },

    _bindShowHideColumnBody: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_bindShowHideColumnBody(index) {
        /// <param name="index" type="Number" integer="true">
        /// </param>
        this._listHiddenColumns = [];
        this._listVisibleColumns = [];
        var showHideBodyDiv = document.getElementById(this._grid.get_id() + '_showHideColumnBody');
        var HiddenColumnBody = document.getElementById(this._grid.get_id() + '_hiddenColumnBody');
        showHideBodyDiv.innerHTML = '';
        HiddenColumnBody.innerHTML = '';
        var count = 0;
        var HiddenColumnList = [];
        for (var i = 0; i < this._grid.get_GridInfo().ColumnsToHide.length; i++) {
            Array.add(HiddenColumnList, (this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName);
        }
        var columnItem = null;
        var columnDiv = null;
        var checkBoxDiv = null;
        if (index === 0) {
            for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
                if (!Array.contains(HiddenColumnList, this._grid.get_GridInfo().ColumnList[i].toString()) && !Array.contains(this._listHiddenColumns, this._grid.get_GridInfo().ColumnList[i].toString())) {
                    count++;
                    columnItem = document.createElement('DIV');
                    columnItem.className = 'xlShowHideColumn';
                    columnDiv = document.createElement('DIV');
                    checkBoxDiv = document.createElement('DIV');
                    var checkBox = document.createElement('INPUT');
                    checkBox.type = 'checkbox';
                    columnDiv.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                    columnDiv.title = this._grid.get_GridInfo().ColumnList[i].toString();
                    columnDiv.className = 'xlShowHideColumnItem';
                    checkBox.checked = true;
                    checkBox.setAttribute('isVisibleColumn', true);
                    checkBoxDiv.className = 'xlshowHideCheckBox';
                    checkBoxDiv.appendChild(checkBox);
                    columnItem.appendChild(columnDiv);
                    columnItem.appendChild(checkBoxDiv);
                    showHideBodyDiv.appendChild(columnItem);
                }
            }
            for (var i = 0; i < this._listVisibleColumns.length; i++) {
                count++;
                columnItem = document.createElement('DIV');
                columnItem.className = 'xlShowHideColumn';
                columnDiv = document.createElement('DIV');
                checkBoxDiv = document.createElement('DIV');
                var checkBox = document.createElement('INPUT');
                checkBox.type = 'checkbox';
                columnDiv.innerText = this._listVisibleColumns[i].toString();
                columnDiv.title = this._listVisibleColumns[i].toString();
                columnDiv.className = 'xlShowHideColumnItem';
                checkBox.checked = true;
                checkBox.setAttribute('isVisibleColumn', true);
                checkBoxDiv.className = 'xlshowHideCheckBox';
                checkBoxDiv.appendChild(checkBox);
                columnItem.appendChild(columnDiv);
                columnItem.appendChild(checkBoxDiv);
                showHideBodyDiv.appendChild(columnItem);
            }
            for (var i = 0; i < this._grid.get_GridInfo().ColumnsToHide.length; i++) {
                var hiddenColumn = this._grid.get_GridInfo().ColumnsToHide[i];
                if (!Array.contains(this._listVisibleColumns, hiddenColumn.ColumnName)) {
                    columnItem = document.createElement('DIV');
                    columnItem.className = 'xlShowHideColumnHiddenColumnParent';
                    columnDiv = document.createElement('DIV');
                    checkBoxDiv = document.createElement('DIV');
                    var checkBox = document.createElement('INPUT');
                    checkBox.type = 'checkbox';
                    columnDiv.innerText = hiddenColumn.ColumnName;
                    columnDiv.title = hiddenColumn.ColumnName;
                    columnDiv.className = 'xlShowHideColumnItem HiddenColumn';
                    checkBox.checked = false;
                    checkBox.setAttribute('isVisibleColumn', false);
                    checkBoxDiv.className = 'xlshowHideCheckBox';
                    checkBoxDiv.appendChild(checkBox);
                    columnItem.appendChild(columnDiv);
                    columnItem.appendChild(checkBoxDiv);
                    HiddenColumnBody.appendChild(columnItem);
                }
            }
            if (this._grid.get_GridInfo().ColumnsToHide.length === 0) {
                if (document.getElementById(this._grid.get_id() + '_hiddenColumnHeader') != null) {
                    document.getElementById(this._grid.get_id() + '_hiddenColumnHeader').style.display = 'none';
                }
            }
            else {
                if (document.getElementById(this._grid.get_id() + '_hiddenColumnHeader') != null) {
                    document.getElementById(this._grid.get_id() + '_hiddenColumnHeader').style.display = '';
                }
            }
            if (count > 0) {
                if (document.getElementById(this._grid.get_id() + '_visibleColumnHeader') != null) {
                    document.getElementById(this._grid.get_id() + '_visibleColumnHeader').style.display = '';
                }
            }
        }
        else if (index === 1) {
            for (var i = 0; i < this._grid.get_GridInfo().ColumnsToHide.length; i++) {
                var hiddenColumn = this._grid.get_GridInfo().ColumnsToHide[i];
                if (!Array.contains(this._listVisibleColumns, hiddenColumn.ColumnName)) {
                    columnItem = document.createElement('DIV');
                    columnItem.className = 'xlShowHideColumnHiddenColumnParent';
                    columnDiv = document.createElement('DIV');
                    checkBoxDiv = document.createElement('DIV');
                    var checkBox = document.createElement('INPUT');
                    checkBox.type = 'checkbox';
                    columnDiv.innerText = hiddenColumn.ColumnName;
                    columnDiv.title = hiddenColumn.ColumnName;
                    columnDiv.className = 'xlShowHideColumnItem HiddenColumn';
                    checkBox.checked = false;
                    checkBox.setAttribute('isVisibleColumn', false);
                    checkBoxDiv.className = 'xlshowHideCheckBox';
                    checkBoxDiv.appendChild(checkBox);
                    columnItem.appendChild(columnDiv);
                    columnItem.appendChild(checkBoxDiv);
                    HiddenColumnBody.appendChild(columnItem);
                }
            }
            for (var i = 0; i < this._listHiddenColumns.length; i++) {
                columnItem = document.createElement('DIV');
                columnItem.className = 'xlShowHideColumnHiddenColumnParent';
                columnDiv = document.createElement('DIV');
                checkBoxDiv = document.createElement('DIV');
                var checkBox = document.createElement('INPUT');
                checkBox.type = 'checkbox';
                columnDiv.innerText = this._listHiddenColumns[i].toString();
                columnDiv.title = this._listHiddenColumns[i].toString();
                columnDiv.className = 'xlShowHideColumnItem HiddenColumn';
                checkBox.checked = false;
                checkBox.setAttribute('isVisibleColumn', false);
                checkBoxDiv.className = 'xlshowHideCheckBox';
                checkBoxDiv.appendChild(checkBox);
                columnItem.appendChild(columnDiv);
                columnItem.appendChild(checkBoxDiv);
                HiddenColumnBody.appendChild(columnItem);
            }
            if (this._grid.get_GridInfo().ColumnsToHide.length === 0 && this._listHiddenColumns.length === 0) {
                columnItem = document.createElement('DIV');
                columnItem.className = 'xlShowHideColumn';
                columnItem.style.paddingLeft = '10px';
                columnItem.innerText = 'No Hidden Columns';
                HiddenColumnBody.appendChild(columnItem);
            }
            if (document.getElementById(this._grid.get_id() + '_hiddenColumnHeader') != null) {
                document.getElementById(this._grid.get_id() + '_hiddenColumnHeader').style.display = '';
            }
            if (document.getElementById(this._grid.get_id() + '_visibleColumnHeader') != null) {
                document.getElementById(this._grid.get_id() + '_visibleColumnHeader').style.display = 'none';
            }
        }
        else if (index === 2) {
            for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
                if (!Array.contains(HiddenColumnList, this._grid.get_GridInfo().ColumnList[i].toString()) && !Array.contains(this._listHiddenColumns, this._grid.get_GridInfo().ColumnList[i].toString())) {
                    count++;
                    columnItem = document.createElement('DIV');
                    columnItem.className = 'xlShowHideColumn';
                    columnDiv = document.createElement('DIV');
                    checkBoxDiv = document.createElement('DIV');
                    var checkBox = document.createElement('INPUT');
                    checkBox.type = 'checkbox';
                    columnDiv.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                    columnDiv.title = this._grid.get_GridInfo().ColumnList[i].toString();
                    columnDiv.className = 'xlShowHideColumnItem';
                    checkBox.checked = true;
                    checkBox.setAttribute('isVisibleColumn', true);
                    checkBoxDiv.className = 'xlshowHideCheckBox';
                    checkBoxDiv.appendChild(checkBox);
                    columnItem.appendChild(columnDiv);
                    columnItem.appendChild(checkBoxDiv);
                    showHideBodyDiv.appendChild(columnItem);
                }
            }
            for (var i = 0; i < this._listVisibleColumns.length; i++) {
                count++;
                columnItem = document.createElement('DIV');
                columnItem.className = 'xlShowHideColumn';
                columnDiv = document.createElement('DIV');
                checkBoxDiv = document.createElement('DIV');
                var checkBox = document.createElement('INPUT');
                checkBox.type = 'checkbox';
                columnDiv.innerText = this._listVisibleColumns[i].toString();
                columnDiv.title = this._listVisibleColumns[i].toString();
                columnDiv.className = 'xlShowHideColumnItem';
                checkBox.checked = true;
                checkBox.setAttribute('isVisibleColumn', true);
                checkBoxDiv.className = 'xlshowHideCheckBox';
                checkBoxDiv.appendChild(checkBox);
                columnItem.appendChild(columnDiv);
                columnItem.appendChild(checkBoxDiv);
                showHideBodyDiv.appendChild(columnItem);
            }
            if (document.getElementById(this._grid.get_id() + '_hiddenColumnHeader') != null) {
                document.getElementById(this._grid.get_id() + '_hiddenColumnHeader').style.display = 'none';
            }
            if (document.getElementById(this._grid.get_id() + '_visibleColumnHeader') != null) {
                document.getElementById(this._grid.get_id() + '_visibleColumnHeader').style.display = '';
            }
        }
        var HiddenbodyHeight = ((HiddenColumnBody.children.length - this._listVisibleColumns.length) > 6) ? 6 : (HiddenColumnBody.children.length - this._listVisibleColumns.length);
        eval('$(\"#' + this._grid.get_id() + '_hiddenColumnBody' + '\").slimscrollNew({height : \'' + (20 * ((HiddenbodyHeight > 0) ? HiddenbodyHeight : 0)) + 'px\', size:\'4px\' })');
        HiddenbodyHeight = ((showHideBodyDiv.children.length - this._listHiddenColumns.length) > 6) ? 6 : (showHideBodyDiv.children.length - this._listHiddenColumns.length);
        eval('$(\"#' + this._grid.get_id() + '_showHideColumnBody' + '\").slimscrollNew({height : \'' + (20 * ((HiddenbodyHeight > 0) ? HiddenbodyHeight : 0)) + 'px\', size:\'4px\' })');
        eval('$(\'.xlShowHideColumnBody\' ).sortable({ axis: \'y\',containment: \'parent\',items : \'.xlShowHideColumn\'})');
    },

    _showHideColumnDivHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_showHideColumnDivHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'xlShowHideApply') {
            var columnDiv = eval('$(\'#' + this._grid.get_id() + '_showHideColumnBody\').find(\'.xlShowHideColumnItem\')');
            var columnSequence = [];
            var ColumnList = [];
            var reorderFlag = false;
            for (var i = 0; i < columnDiv.length; i++) {
                if (columnDiv[i].className === 'xlShowHideColumnItem' && columnDiv[i].style.display !== 'none') {
                    Array.add(columnSequence, columnDiv[i].innerHTML);
                }
                if (columnDiv[i].className === 'xlShowHideColumnItem') {
                    Array.add(ColumnList, columnDiv[i].innerHTML);
                }
            }
            for (var i = 0; i < this._columnNamesList.length; i++) {
                if (this._columnNamesList[i].toString() !== ColumnList[i].toString()) {
                    reorderFlag = true;
                }
            }
            if (reorderFlag) {
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION, Sys.Serialization.JavaScriptSerializer.serialize(columnSequence) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._listHiddenColumns) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._listVisibleColumns), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION);
            }
            else {
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION, '' + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._listHiddenColumns) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._listVisibleColumns), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION);
            }
        }
        if (e.target.getAttribute('isVisibleColumn') != null) {
            if ((e.target).checked) {
                var checkBox = e.target;
                var columnName = checkBox.parentNode.previousSibling.innerText;
                checkBox.checked = true;
                this._adjustShowHideDivHeight(false);
                this._addColumnToVisibleBody(columnName);
                eval('$(checkBox.parentNode.parentNode).hide(\'drop\',\'slow\')');
                Array.add(this._listVisibleColumns, columnName);
                Array.remove(this._listHiddenColumns, columnName);
            }
            else {
                var checkBox = e.target;
                var columnName = checkBox.parentNode.previousSibling.innerText;
                checkBox.checked = false;
                this._adjustShowHideDivHeight(true);
                this._addColumnToHiddenBody(columnName);
                eval('$(checkBox.parentNode.parentNode).hide(\'drop\',\'slow\')');
                Array.add(this._listHiddenColumns, columnName);
                Array.remove(this._listVisibleColumns, columnName);
            }
            var HiddenColumnBody = document.getElementById(this._grid.get_id() + '_hiddenColumnBody');
            var showHideBodyDiv = document.getElementById(this._grid.get_id() + '_showHideColumnBody');
            if (HiddenColumnBody.children.length > 0) {
                document.getElementById(this._grid.get_id() + '_hiddenColumnHeader').style.display = '';
            }
            var HiddenbodyHeight = ((HiddenColumnBody.children.length - this._listVisibleColumns.length) > 6) ? 6 : (HiddenColumnBody.children.length - this._listVisibleColumns.length);
            if (HiddenbodyHeight <= 0) {
                if (document.getElementById(this._grid.get_id() + '_hiddenColumnHeader') != null) {
                    document.getElementById(this._grid.get_id() + '_hiddenColumnHeader').style.display = 'none';
                }
            }
            HiddenbodyHeight = ((showHideBodyDiv.children.length - this._listHiddenColumns.length) > 6) ? 6 : (showHideBodyDiv.children.length - this._listHiddenColumns.length);
            if (HiddenbodyHeight <= 0) {
                if (document.getElementById(this._grid.get_id() + '_visibleColumnHeader') != null) {
                    document.getElementById(this._grid.get_id() + '_visibleColumnHeader').style.display = '';
                }
            }
        }
        if (e.target.className === 'xlVisibleColumnHeader') {
            if (e.target.nextSibling.style.display === 'none') {
                var height = document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').offsetHeight;
                var visisblebodyheight = Number.parseInvariant(document.getElementById(this._grid.get_id() + '_showHideColumnBody').style.height.substring(0, document.getElementById(this._grid.get_id() + '_showHideColumnBody').style.height.indexOf('px')));
                height = height + visisblebodyheight;
                eval('$(e.target).next().show(\'blind\',500)');
                var divHeight = height + 'px';
                eval('$(\'#' + this._grid.get_id() + '_showHideColumnsDiv\').animate({ \'height\':\'' + divHeight + '\'}, 500 )');
            }
            else {
                var height = document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').offsetHeight;
                height = height - document.getElementById(this._grid.get_id() + '_showHideColumnBody').offsetHeight;
                eval('$(e.target).next().hide(\'blind\',500)');
                var divHeight = height + 'px';
                eval('$(\'#' + this._grid.get_id() + '_showHideColumnsDiv\').animate({ \'height\':\'' + divHeight + '\'}, 500 )');
            }
        }
        if (e.target.className === 'xlHiddenColumnHeader') {
            if (e.target.nextSibling.style.display === 'none') {
                var height = document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').offsetHeight;
                var visisblebodyheight = Number.parseInvariant(document.getElementById(this._grid.get_id() + '_hiddenColumnBody').style.height.substring(0, document.getElementById(this._grid.get_id() + '_hiddenColumnBody').style.height.indexOf('px')));
                height = height + visisblebodyheight;
                eval('$(e.target).next().show(\'blind\',500)');
                var divHeight = height + 'px';
                eval('$(\'#' + this._grid.get_id() + '_showHideColumnsDiv\').animate({ \'height\':\'' + divHeight + '\'}, 500 )');
            }
            else {
                var height = document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').offsetHeight;
                height = height - document.getElementById(this._grid.get_id() + '_hiddenColumnBody').offsetHeight;
                eval('$(e.target).next().hide(\'blind\',500)');
                var divHeight = height + 'px';
                eval('$(\'#' + this._grid.get_id() + '_showHideColumnsDiv\').animate({ \'height\':\'' + divHeight + '\'}, 500 )');
            }
        }
    },

    _adjustShowHideDivHeight: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_adjustShowHideDivHeight(flag) {
        /// <param name="flag" type="Boolean">
        /// </param>
        if (flag) {
            var count = 0;
            if (this._getHiddenBodyHeight() === 0) {
                count = 28;
            }
            if (document.getElementById(this._grid.get_id() + '_showHideColumnBody').offsetHeight === this._getVisibleBodyHeight()) {
                document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').style.height = (document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').offsetHeight - 20) + 'px';
                document.getElementById(this._grid.get_id() + '_showHideColumnBody').style.height = (document.getElementById(this._grid.get_id() + '_showHideColumnBody').offsetHeight - 20) + 'px';
                document.getElementById(this._grid.get_id() + '_showHideColumnBody').parentNode.style.height = (document.getElementById(this._grid.get_id() + '_showHideColumnBody').parentNode.offsetHeight - 20) + 'px';
            }
            if (document.getElementById(this._grid.get_id() + '_hiddenColumnBody').offsetHeight === this._getHiddenBodyHeight() && document.getElementById(this._grid.get_id() + '_hiddenColumnBody').offsetHeight < 120) {
                document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').style.height = (document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').offsetHeight + 20 + count) + 'px';
                document.getElementById(this._grid.get_id() + '_hiddenColumnBody').style.height = (document.getElementById(this._grid.get_id() + '_hiddenColumnBody').offsetHeight + 20) + 'px';
                document.getElementById(this._grid.get_id() + '_hiddenColumnBody').parentNode.style.height = (document.getElementById(this._grid.get_id() + '_hiddenColumnBody').parentNode.offsetHeight + 20) + 'px';
            }
        }
        else {
            if (document.getElementById(this._grid.get_id() + '_hiddenColumnBody').offsetHeight === this._getHiddenBodyHeight()) {
                var count = 0;
                if (this._getHiddenBodyHeight() === 20) {
                    count = -28;
                }
                document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').style.height = (document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').offsetHeight - 20 + count) + 'px';
                document.getElementById(this._grid.get_id() + '_hiddenColumnBody').style.height = (document.getElementById(this._grid.get_id() + '_hiddenColumnBody').offsetHeight - 20) + 'px';
                document.getElementById(this._grid.get_id() + '_hiddenColumnBody').parentNode.style.height = (document.getElementById(this._grid.get_id() + '_hiddenColumnBody').parentNode.offsetHeight - 20) + 'px';
            }
            if (document.getElementById(this._grid.get_id() + '_showHideColumnBody').offsetHeight === this._getVisibleBodyHeight() && document.getElementById(this._grid.get_id() + '_showHideColumnBody').offsetHeight < 120) {
                document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').style.height = (document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').offsetHeight + 20) + 'px';
                document.getElementById(this._grid.get_id() + '_showHideColumnBody').style.height = (document.getElementById(this._grid.get_id() + '_showHideColumnBody').offsetHeight + 20) + 'px';
                document.getElementById(this._grid.get_id() + '_showHideColumnBody').parentNode.style.height = (document.getElementById(this._grid.get_id() + '_showHideColumnBody').parentNode.offsetHeight + 20) + 'px';
            }
        }
    },

    _getHiddenBodyHeight: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getHiddenBodyHeight() {
        /// <returns type="Number" integer="true"></returns>
        var height = 0;
        var visisbleElement = document.getElementById(this._grid.get_id() + '_hiddenColumnBody');
        if (visisbleElement.children != null) {
            for (var i = 0; i < visisbleElement.children.length; i++) {
                if (visisbleElement.children[i].style.display !== 'none') {
                    height = height + 20;
                }
            }
        }
        return height;
    },

    _getVisibleBodyHeight: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getVisibleBodyHeight() {
        /// <returns type="Number" integer="true"></returns>
        var height = 0;
        var visisbleElement = document.getElementById(this._grid.get_id() + '_showHideColumnBody');
        if (visisbleElement.children != null) {
            for (var i = 0; i < visisbleElement.children.length; i++) {
                if (visisbleElement.children[i].style.display !== 'none') {
                    height = height + 20;
                }
            }
        }
        return height;
    },

    _addColumnToHiddenBody: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_addColumnToHiddenBody(ColumnName) {
        /// <param name="ColumnName" type="String">
        /// </param>
        var HiddenColumnBody = document.getElementById(this._grid.get_id() + '_hiddenColumnBody');
        var columnDiv = null;
        var checkBoxDiv = null;
        var columnItem = document.createElement('DIV');
        columnItem.className = 'xlShowHideColumnHiddenColumnParent';
        columnDiv = document.createElement('DIV');
        checkBoxDiv = document.createElement('DIV');
        var checkBox = document.createElement('INPUT');
        checkBox.type = 'checkbox';
        columnDiv.innerText = ColumnName;
        columnDiv.title = ColumnName;
        columnDiv.className = 'xlShowHideColumnItem HiddenColumn';
        checkBox.checked = false;
        checkBox.setAttribute('isVisibleColumn', false);
        checkBoxDiv.className = 'xlshowHideCheckBox';
        checkBoxDiv.appendChild(checkBox);
        columnItem.appendChild(columnDiv);
        columnItem.appendChild(checkBoxDiv);
        columnItem.style.backgroundColor = '#E4E4E4';
        HiddenColumnBody.appendChild(columnItem);
        var showHideBodyDiv = document.getElementById(this._grid.get_id() + '_showHideColumnBody');
        showHideBodyDiv.style.maxHeight = Number.parseInvariant(showHideBodyDiv.style.maxHeight.substring(0, showHideBodyDiv.style.maxHeight.indexOf('px'))) - 20 + 'px';
        if (showHideBodyDiv.parentNode != null) {
            showHideBodyDiv.parentNode.style.maxHeight = showHideBodyDiv.style.maxHeight;
        }
    },

    _addColumnToVisibleBody: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_addColumnToVisibleBody(ColumnName) {
        /// <param name="ColumnName" type="String">
        /// </param>
        var showHideBodyDiv = document.getElementById(this._grid.get_id() + '_showHideColumnBody');
        var columnDiv = null;
        var checkBoxDiv = null;
        var columnItem = document.createElement('DIV');
        columnItem.className = 'xlShowHideColumn';
        columnDiv = document.createElement('DIV');
        checkBoxDiv = document.createElement('DIV');
        var checkBox = document.createElement('INPUT');
        checkBox.type = 'checkbox';
        columnDiv.innerText = ColumnName;
        columnDiv.title = ColumnName;
        columnDiv.className = 'xlShowHideColumnItem';
        checkBox.checked = true;
        checkBox.setAttribute('isVisibleColumn', true);
        checkBoxDiv.className = 'xlshowHideCheckBox';
        checkBoxDiv.appendChild(checkBox);
        columnItem.appendChild(columnDiv);
        columnItem.appendChild(checkBoxDiv);
        columnItem.style.backgroundColor = '#E4E4E4';
        showHideBodyDiv.appendChild(columnItem);
        showHideBodyDiv.style.maxHeight = Number.parseInvariant(showHideBodyDiv.style.maxHeight.substring(0, showHideBodyDiv.style.maxHeight.indexOf('px'))) + 20 + 'px';
        if (showHideBodyDiv.parentNode != null) {
            showHideBodyDiv.parentNode.style.maxHeight = showHideBodyDiv.style.maxHeight;
        }
    },

    _confgurationSettingsHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_confgurationSettingsHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'xlSettingsChild') {
            if (e.target.innerText === 'Customize Column') {
                this._listVisibleColumns = [];
                this._listHiddenColumns = [];
                this._createShowHideMenuGear();
                document.getElementById(this._grid.get_id() + '_ConfigurationSettings').style.display = 'none';
            }
            if (e.target.innerText === 'Format Column') {
                document.getElementById(this._grid.get_id() + '_ConfigurationSettings').style.display = 'none';
                this.createFormatColumnMenu();
            }
            if (e.target.innerText === 'Masking Suggestion') {
                var closure = this;
                document.getElementById(this._grid.get_id() + '_ConfigurationSettings').style.display = 'none';
                document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = 'xlOpacityForGrid';
                document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').className = 'xlOpacityForGrid';
                document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = 'xlOpacityForGrid';
                var MaskingMenuDiv = document.createElement('DIV');
                MaskingMenuDiv.id = this._grid.get_id() + 'MaskingMenuDiv';
                MaskingMenuDiv.className = 'xlNeoMaskingMenuDiv';
                $("#" + this._grid.get_id()).append(MaskingMenuDiv);
                $(".xlNeoMaskingMenuDiv").append("<div class='RADMaskingUserParentDiv' id='RADUserParentDiv'><div class='RADMaskingUserDiv' id='RADUserDiv'> Masking Suggestion</div><div class='RADMaskingCancelDiv' id='RADCancelDiv'>x</div></div>");
                $(".xlNeoMaskingMenuDiv").append("<div class='RADMaskinginfoParentDiv' id='RADMaskinginfoParentDiv'></div>");
                
                for(var i =0 ; i < this._grid.get_GridInfo().MaskingSuggestionInfo.length; i++)
                {
                    var ColumnName = Array.contains(window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping), this._grid.get_GridInfo().MaskingSuggestionInfo[i].ColumnName) ? this._grid.get_GridInfo().ColumnNameMapping[this._grid.get_GridInfo().MaskingSuggestionInfo[i].ColumnName] : this._grid.get_GridInfo().MaskingSuggestionInfo[i].ColumnName;
                    $("#RADMaskinginfoParentDiv").append("<div class='RADMaskingInfoParent'></div>")
                    var Type = "";
                    var Example = "";
                    if (this._grid.get_GridInfo().MaskingSuggestionInfo[i].TypeOfMasking == 0)
                    {
                        Type = "Billions(B).";
                        Example = "(28,398,410,300 > 28.98B)";
                    }
                    else if (this._grid.get_GridInfo().MaskingSuggestionInfo[i].TypeOfMasking == 1)
                    {
                        Type = "Millions(M)";
                        Example = "(28,398,410.300 > 28.98M)";
                    }
                    else if (this._grid.get_GridInfo().MaskingSuggestionInfo[i].TypeOfMasking == 2)
                    {
                        Type = "Thousands(K)";
                        Example = "(28,398.410300 > 28.98K)";
                    }
                    if (Array.contains(window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping), this._grid.get_GridInfo().MaskingSuggestionInfo[i].ColumnName)) {
                        $($(".RADMaskingInfoParent")[i]).append("<div class='RADMaskingCheckBox fa fa-check RADColorDIV' type='checkbox'></div>");
                    }
                    else
                    {
                        $($(".RADMaskingInfoParent")[i]).append("<div class='RADMaskingCheckBox' type='checkbox'></div>");
                    }
                    $($(".RADMaskingInfoParent")[i]).append("<div class='RADMaskingColumnNmae'  ActualColumnNmae =" + this._grid.get_GridInfo().MaskingSuggestionInfo[i].ColumnName +  ">" + ColumnName + "</div><div class='RADMaskingSuggest'title=" + Type + " maskingproperty = " + this._grid.get_GridInfo().MaskingSuggestionInfo[i].TypeOfMasking + ">" + Type + "</div>");//Array.contains(window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping), this._grid.get_GridInfo().MaskingSuggestionInfo[i].ColumnName)?
                    $($(".RADMaskingInfoParent")[i]).append("<div class='RADMaskingExampleDiv' >" + Example + "</div>");
                    $($(".RADMaskingColumnNmae")[i]).attr("title",ColumnName);
                }
                $(".xlNeoMaskingMenuDiv").append("<div class='ApplyMaskingParentCSS'><div class='ApplyMaskingCSS'>Apply</div></div>");
                $(".ApplyMaskingCSS").click(function (event) {
                    var dataToSend = [];
                   
                    $(".RADMaskingInfoParent").each(function (event) {
                        var self = this;
                        var ActualObj = {};
                        if ($(self).find(".RADMaskingCheckBox").hasClass("RADColorDIV")) {
                            ActualObj.ColumnName = $(self).find(".RADMaskingColumnNmae").attr("actualcolumnnmae");
                            ActualObj.TypeOfMasking = parseInt($(self).find(".RADMaskingSuggest").attr("maskingproperty"));
                            dataToSend.push(ActualObj);
                        }
                        
                    })
                    $(".xlNeoMaskingMenuDiv").remove();
                    document.getElementById(closure._grid.elementIDManager._gridID + '_bodyDiv').className = '';
                    document.getElementById(closure._grid.elementIDManager._gridID + '_headerDiv').className = '';
                    document.getElementById(closure._grid.elementIDManager._gridID + '_upperHeader_Div').className = '';
                    closure._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_MASKING, Sys.Serialization.JavaScriptSerializer.serialize(dataToSend) + "|APPLYMultiple", com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_MASKING)
                    event.preventDefault();
                    event.stopPropagation();
                });
                $(".RADMaskingCancelDiv").click(function (event) {
                    $(".xlNeoMaskingMenuDiv").remove();
                    document.getElementById(closure._grid.elementIDManager._gridID + '_bodyDiv').className = '';
                    document.getElementById(closure._grid.elementIDManager._gridID + '_headerDiv').className = '';
                    document.getElementById(closure._grid.elementIDManager._gridID + '_upperHeader_Div').className = '';
                    event.preventDefault();
                    event.stopPropagation();
                });
                $(".RADMaskingCheckBox").click(function (event) {
                    if ($(event.target).hasClass("RADColorDIV"))
                    {
                        $(event.target)[0].className = "RADMaskingCheckBox";
                    }
                    else
                    {
                        $(event.target)[0].className = "RADMaskingCheckBox fa fa-check RADColorDIV";
                    }
                    event.preventDefault();
                    event.stopPropagation();
                });
            }
            if (e.target.innerText === 'Manage Layout') {
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout') != null) {
                    document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.left = '0px';
                    document.getElementById('addNewLayout').style.backgroundColor = '#40D3C0';
                    document.getElementById('addNewLayout').style.color = 'white';
                }
                document.getElementById(this._grid.get_id() + '_ConfigurationSettings').style.display = 'none';
                document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = 'xlOpacityForGrid';
                document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').className = 'xlOpacityForGrid';
                document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = 'xlOpacityForGrid';
                if (this._grid.elementInfo.get_manageLayoutDiv() != null) {
                    this._grid.elementInfo.get_manageLayoutDiv().style.display = '';
                    if (document.getElementById('existingDefaultLayout').children.length > 1 || document.getElementById('existingSharedLayout').children.length > 0) {
                        if (document.getElementById('existingDefaultLayout').children.length > 1) {
                            document.getElementById('existingDefaultLayout').style.display = '';
                            document.getElementById('xlDefaultLayout').style.display = '';
                        }
                    }
                    else {
                        document.getElementById('addNewLayoutParent').style.display = '';
                        $("#addNewLayout").css("background-color", "lightgray");
                        $("#addNewLayout").css("color", "black");
                    }
                    document.getElementById('existingSharedLayout').style.display = '';
                }
            }
            if (e.target.innerText === 'Rule Based Coloring') {
                document.getElementById(this._grid.get_id() + '_ConfigurationSettings').style.display = 'none';
                var obj = new com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring(this._grid);
                document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = 'xlOpacityForGrid';
                document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = 'xlOpacityForGrid';
                document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv_Table').className = 'xlOpacityForGrid';
                obj.openRuleWindow();
            }
            if (e.target.innerText === 'Tagging') {
                if (document.getElementById(this._grid.get_id() + '_ConfigurationSettings') != null) {
                    document.getElementById(this._grid.get_id() + '_ConfigurationSettings').style.display = 'none';
                    eval('$(\"#' + this._grid.get_GridInfo().taggingInfoID + '\").tagging(\"show\");');
                }
            }
            if (e.target.innerText === 'Ranking/Top n Bottom n') {
                if (document.getElementById(this._grid.get_id() + '_ConfigurationSettings') != null) {
                    document.getElementById(this._grid.get_id() + '_ConfigurationSettings').style.display = 'none';
                    var rankingMainDiv = document.createElement('DIV');
                    this.createRankingInfo(rankingMainDiv);
                }
            }
            if (e.target.innerText === 'Manage Views') {
                document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').style.opacity = '0.1';
                document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').style.opacity = '0.1';
                document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').style.opacity = '0.1';
                if (document.getElementById(this._grid.get_id() + '_ConfigurationSettings') != null) {
                    document.getElementById(this._grid.get_id() + '_ConfigurationSettings').style.display = 'none';
                }
                this.createMergedViewPopUpNew();
            }
        }
    },

    createFormatColumnMenu: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createFormatColumnMenu() {
        this.formattingColumnList = [];
        this.removeFormattingList = [];
        this._gridCustomFormatting = {};
        this._justificationCollection = {};
        var formatMenuDiv = document.createElement('DIV');
        formatMenuDiv.id = this._grid.get_id() + '_FormatMenuDiv';
        formatMenuDiv.className = 'xlFormatMenuDiv';
        var leftDiv = document.createElement('DIV');
        leftDiv.id = this._grid.get_id() + '_formatLeftDiv';
        leftDiv.className = 'xlformatLeftDiv';
        var rightDiv = document.createElement('DIV');
        rightDiv.id = this._grid.get_id() + '_formatRightDiv';
        rightDiv.className = 'xlformatRightDiv';
        var headerDiv = document.createElement('DIV');
        headerDiv.id = this._grid.get_id() + '_columnListHeader';
        headerDiv.className = 'xlColumnListHeader';
        var unformattedColumns = document.createElement('DIV');
        unformattedColumns.id = this._grid.get_id() + '_unformattedColumnsHeader';
        unformattedColumns.innerText = 'Column Names';
        unformattedColumns.className = 'xlUnformattedHeader';
        unformattedColumns.style.borderBottom = '2px solid #00bcef';
        var formattedColumns = document.createElement('DIV');
        formattedColumns.id = this._grid.get_id() + '_formattedColumnsHeader';
        formattedColumns.className = 'xlformattedHeader';
        formattedColumns.innerText = 'Formatted';
        headerDiv.appendChild(unformattedColumns);
        headerDiv.appendChild(formattedColumns);
        if (!(window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping).length > 0 || window.Object.keys(this._gridCustomFormatting).length > 0)) {
            formattedColumns.title = 'No Formatted Columns';
            formattedColumns.style.color = '#A8A8A8';
        }
        var columnBodyDiv = document.createElement('DIV');
        columnBodyDiv.id = this._grid.get_id() + '_columnBodyDiv';
        columnBodyDiv.className = 'xlColumnBodyDiv';
        leftDiv.appendChild(headerDiv);
        leftDiv.appendChild(columnBodyDiv);
        var search = document.createElement('DIV');
        search.className = 'xlFormatSearch';
        search.id = this._grid.get_id() + '_searchFormatMenu';
        formatMenuDiv.appendChild(search);
        formatMenuDiv.appendChild(leftDiv);
        formatMenuDiv.appendChild(rightDiv);
        var dataTypeGroup = document.createElement('DIV');
        dataTypeGroup.className = 'xlApplyFormat';
        dataTypeGroup.id = this._grid.get_id() + '_buttonGroup';
        var applyFormatting = document.createElement('DIV');
        applyFormatting.id = this._grid.get_id() + '_applyFormatButton';
        applyFormatting.className = 'xlApplyFormatButton';
        applyFormatting.innerText = 'Apply';
        dataTypeGroup.appendChild(applyFormatting);
        applyFormatting = document.createElement('DIV');
        applyFormatting.id = this._grid.get_id() + '_applyFormatImage';
        applyFormatting.className = 'xlApplyFormatImage';
        dataTypeGroup.appendChild(applyFormatting);
        formatMenuDiv.appendChild(dataTypeGroup);
        this._getFormattingInfoBody(rightDiv);
        this._grid.get_element().parentNode.appendChild(formatMenuDiv);
        var left = 0;
        if (document.getElementById(this._grid.get_id() + '_configutation') != null) {
            left = document.getElementById(this._grid.get_id() + '_configutation').offsetWidth;
        }
        formatMenuDiv.style.top = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_configutation\').offset().top + 5') + 'px';
        formatMenuDiv.style.left = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_configutation\').offset().left') + (left - 10) + 'px';
        this._getunformattedColumnBody(columnBodyDiv);
        this._getSearchElements();
        eval('$(\'#' + this._grid.get_id() + '_decimalValue\').spinner({\'min\' : 0,\'max\' : 8})');
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(formatMenuDiv, 'click', Function.createDelegate(this, this._formatMenuDivHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(formatMenuDiv, 'keyup', Function.createDelegate(this, this._fireFormatMenuKeyUp));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_id() + '_dataTypeOptions'), 'change', Function.createDelegate(this, this._dataTypeChangeHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_id() + '_unitTypeOptions'), 'change', Function.createDelegate(this, this._unitTypeChangeHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_id() + '_negativeValueOptions'), 'change', Function.createDelegate(this, this._negativeValueChangeHandler));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_id() + '_decimalValue'), 'keyup', Function.createDelegate(this, this._decimalKeyUpHandler));
        (document.getElementById(this._grid.get_id() + '_unitTypeOptions')).disabled = true;
        (document.getElementById(this._grid.get_id() + '_negativeValueOptions')).disabled = true;
        document.getElementById(this._grid.get_id() + '_decimalOptionsParent').disabled = true;
        document.getElementById(this._grid.get_id() + '_decimalValue').disabled = true;
        this._disableFilterDataType();
    },

    _createFormatMenuNew: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createFormatMenuNew() {
        if (document.getElementById(this._grid.get_id() + '_formatRightDivNew') == null) {
            var rightDiv = document.createElement('DIV');
            rightDiv.id = this._grid.get_id() + '_formatRightDivNew';
            rightDiv.className = 'xlformatRightDiv';
            this._getFormattingInfoBody(rightDiv);
            document.getElementById(this._grid.get_GridInfo().GridId + '_mergerMainContentDiv').appendChild(rightDiv);
        }
    },

    _getFormattingInfoBody: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getFormattingInfoBody(formattingInfoBody) {
        /// <param name="formattingInfoBody" type="Object" domElement="true">
        /// </param>
        var dataTypeGroup = document.createElement('DIV');
        dataTypeGroup.className = 'xlColumnGroup';
        dataTypeGroup.id = this._grid.get_id() + '_columnGroup';
        var columnName = document.createElement('DIV');
        columnName.className = 'xlFormatColumnName';
        columnName.id = this._grid.get_id() + '_formatColumnName';
        dataTypeGroup.appendChild(columnName);
        columnName = document.createElement('DIV');
        columnName.className = 'xlPreviewGroup';
        columnName.id = this._grid.get_id() + '_previewGroup';
        columnName.style.display = 'none';
        dataTypeGroup.appendChild(columnName);
        var preview = document.createElement('DIV');
        preview.className = 'xlPreviewText';
        preview.innerText = 'Preview';
        preview.id = this._grid.get_id() + '_previewText';
        columnName.appendChild(preview);
        var dataTypeOptionsParents = document.createElement('DIV');
        dataTypeOptionsParents.id = this._grid.get_id() + '_textOptionsParent';
        dataTypeOptionsParents.className = 'xlTextOptionsParent';
        var inputelement1 = document.createElement('INPUT');
        inputelement1.id = this._grid.get_id() + '_textValue';
        inputelement1.className = 'xlTextValue';
        inputelement1.disabled = true;
        dataTypeOptionsParents.appendChild(inputelement1);
        columnName.appendChild(dataTypeOptionsParents);
        dataTypeGroup.appendChild(columnName);
        formattingInfoBody.appendChild(dataTypeGroup);
        dataTypeGroup = document.createElement('DIV');
        dataTypeGroup.id = this._grid.get_id() + '_dataTypeGroup';
        dataTypeGroup.className = 'xlDataTypeGroup';
        var dataTypeText = document.createElement('DIV');
        dataTypeText.id = this._grid.get_id() + '_datatypeText';
        dataTypeText.className = 'xlDataTypeText';
        dataTypeText.innerText = 'Data Type';
        var dataTypeOptionsParent = document.createElement('DIV');
        dataTypeOptionsParent.id = this._grid.get_id() + '_dataTypeOptionsParent';
        dataTypeOptionsParent.className = 'xlDataTypeOptionsParent';
        var dataTypeOptions = document.createElement('SELECT');
        dataTypeOptions.id = this._grid.get_id() + '_dataTypeOptions';
        dataTypeOptions.className = 'xlDataTypeOptions';
        this._getDataTypes(dataTypeOptions);
        dataTypeOptionsParent.appendChild(dataTypeOptions);
        dataTypeGroup.appendChild(dataTypeText);
        dataTypeGroup.appendChild(dataTypeOptionsParent);
        formattingInfoBody.appendChild(dataTypeGroup);
        dataTypeGroup = document.createElement('DIV');
        dataTypeGroup.className = 'xlUnitTypeGroup';
        dataTypeGroup.id = this._grid.get_id() + '_unitTypeGroup';
        dataTypeText = document.createElement('DIV');
        dataTypeText.id = this._grid.get_id() + '_unitTYpeText';
        dataTypeText.className = 'xlUnitTypeText';
        dataTypeText.innerText = 'Unit';
        dataTypeOptionsParent = document.createElement('DIV');
        dataTypeOptionsParent.id = this._grid.get_id() + '_unitTypeOptionsParent';
        dataTypeOptionsParent.className = 'xlUnitTypeOptionsParent';
        dataTypeOptions = document.createElement('SELECT');
        dataTypeOptions.id = this._grid.get_id() + '_unitTypeOptions';
        dataTypeOptions.className = 'xlUnitTypeOptions';
        this._getUnitTypes(dataTypeOptions);
        dataTypeOptionsParent.appendChild(dataTypeOptions);
        dataTypeGroup.appendChild(dataTypeText);
        dataTypeGroup.appendChild(dataTypeOptionsParent);
        formattingInfoBody.appendChild(dataTypeGroup);
        dataTypeGroup = document.createElement('DIV');
        dataTypeGroup.className = 'xlNegativeValueGroup';
        dataTypeGroup.id = this._grid.get_id() + '_negativeValueGroup';
        dataTypeText = document.createElement('DIV');
        dataTypeText.id = this._grid.get_id() + '_negativeValue';
        dataTypeText.className = 'xlNegativeValue';
        dataTypeText.innerText = 'Negative Value';
        dataTypeOptionsParent = document.createElement('DIV');
        dataTypeOptionsParent.id = this._grid.get_id() + '_negativeOptionsParent';
        dataTypeOptionsParent.className = 'xlNegativeOptionsParent';
        dataTypeOptions = document.createElement('SELECT');
        dataTypeOptions.id = this._grid.get_id() + '_negativeValueOptions';
        dataTypeOptions.className = 'xlNegativeValueOptions';
        this._getNegativeValues(dataTypeOptions);
        dataTypeOptionsParent.appendChild(dataTypeOptions);
        dataTypeGroup.appendChild(dataTypeText);
        dataTypeGroup.appendChild(dataTypeOptionsParent);
        formattingInfoBody.appendChild(dataTypeGroup);
        dataTypeGroup = document.createElement('DIV');
        dataTypeGroup.className = 'xlPrefixGroup';
        dataTypeGroup.id = this._grid.get_id() + '_prefixGroup';
        dataTypeText = document.createElement('DIV');
        dataTypeText.id = this._grid.get_id() + '_prefixText';
        dataTypeText.className = 'xlPrefixText';
        dataTypeText.innerText = 'Prefix';
        dataTypeOptionsParent = document.createElement('DIV');
        dataTypeOptionsParent.id = this._grid.get_id() + '_prefixOptionsParent';
        dataTypeOptionsParent.className = 'xlPrefixOptionsParent';
        var inputelement = document.createElement('INPUT');
        inputelement.id = this._grid.get_id() + '_prefixValue';
        inputelement.className = 'xlPrefixValue';
        dataTypeOptionsParent.appendChild(inputelement);
        dataTypeGroup.appendChild(dataTypeText);
        dataTypeGroup.appendChild(dataTypeOptionsParent);
        formattingInfoBody.appendChild(dataTypeGroup);
        dataTypeGroup = document.createElement('DIV');
        dataTypeGroup.className = 'xlDecimalGroup';
        dataTypeGroup.id = this._grid.get_id() + '_decimalGroup';
        dataTypeText = document.createElement('DIV');
        dataTypeText.id = this._grid.get_id() + '_decimalText';
        dataTypeText.className = 'xlDecimalText';
        dataTypeText.innerText = 'Decimal Places';
        dataTypeOptionsParent = document.createElement('DIV');
        dataTypeOptionsParent.id = this._grid.get_id() + '_decimalOptionsParent';
        dataTypeOptionsParent.className = 'xlDecimalOptionsParent';
        inputelement = document.createElement('INPUT');
        inputelement.id = this._grid.get_id() + '_decimalValue';
        inputelement.className = 'xlDecimalValue';
        dataTypeOptionsParent.appendChild(inputelement);
        dataTypeGroup.appendChild(dataTypeText);
        dataTypeGroup.appendChild(dataTypeOptionsParent);
        formattingInfoBody.appendChild(dataTypeGroup);
        dataTypeGroup = document.createElement('DIV');
        dataTypeGroup.className = 'xlJustificationGroup';
        dataTypeGroup.id = this._grid.get_id() + '_justificationGroup';
        dataTypeText = document.createElement('DIV');
        dataTypeText.id = this._grid.get_id() + '_JustificationText';
        dataTypeText.className = 'xlJustificationText';
        dataTypeText.innerText = 'Alignment';
        dataTypeOptionsParent = document.createElement('DIV');
        dataTypeOptionsParent.id = this._grid.get_id() + '_JustificationOptionsParent';
        dataTypeOptionsParent.className = 'xlJustificationOptionsParent';
        dataTypeOptions = document.createElement('SELECT');
        dataTypeOptions.id = this._grid.get_id() + '_justificationValueOptions';
        dataTypeOptions.className = 'xlJustificationValueOptions';
        this._getJustificationValues(dataTypeOptions);
        dataTypeOptionsParent.appendChild(dataTypeOptions);
        dataTypeGroup.appendChild(dataTypeText);
        dataTypeGroup.appendChild(dataTypeOptionsParent);
        formattingInfoBody.appendChild(dataTypeGroup);
        dataTypeGroup = document.createElement('DIV');
        dataTypeGroup.className = 'xlButtonGroup';
        dataTypeGroup.id = this._grid.get_id() + '_buttonGroup';
        var saveFormatting = document.createElement('DIV');
        saveFormatting.id = this._grid.get_id() + '_saveFormatButton';
        saveFormatting.className = 'xlSaveFormatButton';
        dataTypeGroup.appendChild(saveFormatting);
        saveFormatting = document.createElement('DIV');
        saveFormatting.id = this._grid.get_id() + '_clearFormatButton';
        saveFormatting.className = 'xlClearFormatButton';
        dataTypeGroup.appendChild(saveFormatting);
        var removeformat = document.createElement('DIV');
        removeformat.className = 'xlRemoveFormatting fa fa-trash-o';
        removeformat.id = this._grid.get_id() + '_removeFormatting';
        removeformat.style.display = 'none';
        dataTypeGroup.appendChild(removeformat);
        formattingInfoBody.appendChild(dataTypeGroup);
    },

    createRankingInfo: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createRankingInfo(rankingMainDiv) {
        /// <param name="rankingMainDiv" type="Object" domElement="true">
        /// </param>
        this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayNameOld = this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayName;
        rankingMainDiv.id = this._grid.get_id() + '_rankingMainDiv';
        rankingMainDiv.className = 'xlgridrankingdiv';
        var upperHeader = document.createElement('DIV');
        upperHeader.id = this._grid.get_id() + '_upperHeaderDiv';
        upperHeader.innerText = 'RANKING';
        upperHeader.className = 'xlrankingheader';
        rankingMainDiv.appendChild(upperHeader);
        var rankingColumnParent = document.createElement('DIV');
        rankingColumnParent.className = 'xlgridrankingColumnParent';
        var rankingColumnInfo = document.createElement('DIV');
        rankingColumnInfo.id = this._grid.get_id() + '_rankingColumnInfo';
        rankingColumnInfo.className = 'xlrankingselect';
        rankingColumnInfo.style.overflow = 'hidden';
        rankingColumnInfo.setAttribute('placeholder', 'Column Name');
        rankingColumnInfo.setAttribute('value', '-1');
        if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null && this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo !== '') {
            rankingColumnInfo.innerHTML = '<div id=\"firstColumnDiv\"class=\"firstColumnDiv\" value=\"-1\">' + this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo + '</div><div class=\"fa fa-caret-down downarrowdropdown\"></div>';
        }
        else {
            rankingColumnInfo.innerHTML = '<div id=\"firstColumnDiv\"class=\"firstColumnDiv\" value=\"-1\">Column Name</div><div class=\"fa fa-caret-down downarrowdropdown\"></div>';
        }
        var columnOptionsParent = document.createElement('DIV');
        columnOptionsParent.className = 'RankingColumnOptionsParent';
        for (var i = 0; i < this._grid.get_GridInfo().NumericColumnName.length; i++) {
            if (this._grid.get_GridInfo().NumericColumnName[i].toString().indexOf('RANK') == -1) {
                var columnOptionsNames = document.createElement('DIV');
                columnOptionsNames.id = this._grid.get_id() + '_columnOptionsName';
                columnOptionsNames.className = 'columnOptionsEachRanking';
                columnOptionsNames.title = this._grid.get_GridInfo().NumericColumnName[i].toString();
                columnOptionsNames.innerText = this._grid.get_GridInfo().NumericColumnName[i].toString();
                columnOptionsNames.setAttribute('value', this._grid.get_GridInfo().NumericColumnName[i].toString());
                columnOptionsParent.appendChild(columnOptionsNames);
            }
        }
        rankingColumnInfo.appendChild(columnOptionsParent);
        rankingColumnParent.appendChild(rankingColumnInfo);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(rankingColumnInfo, 'click', Function.createDelegate(this, this.onRankingColumnClick));
        var selected = '';
        if (this._grid.get_GridInfo().RankingColumnInfo != null) {
            selected = this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo;
        }
        var rankOrderParent = document.createElement('DIV');
        rankOrderParent.className = 'rankOrderParent';
        var rankOrder = this._grid.elementHelper.get_inputButtonElement();
        rankOrder.id = this._grid.get_id() + '_rankingOrderText';
        rankOrder.className = 'xlgridrankOrder';
        rankOrder.setAttribute('type', 'checkbox');
        rankOrder.setAttribute('data-toggle', 'toggle');
        rankOrder.setAttribute('data-size', 'mini');
        rankOrder.setAttribute('data-onstyle', 'info');
        rankOrder.setAttribute('data-on', 'ASC');
        rankOrder.setAttribute('data-off', 'DESC');
        rankOrderParent.appendChild(rankOrder);
        rankingColumnParent.appendChild(rankOrderParent);
        rankingMainDiv.appendChild(rankingColumnParent);
        var rankingGroupInfo = document.createElement('DIV');
        rankingGroupInfo.setAttribute('multiple', 'multiple');
        rankingGroupInfo.id = this._grid.get_id() + 'xlrankingselect';
        rankingGroupInfo.className = 'xlrankinggroupColumn';
        var groups = [];
        for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
            var options = new com.ivp.rad.controls.neogrid.scripts.info.Select2Data();
            options.id = this._grid.get_GridInfo().ColumnList[i].toString();
            options.text = this._grid.get_GridInfo().ColumnList[i].toString();
            Array.add(groups, options);
        }
        rankingMainDiv.appendChild(rankingGroupInfo);
        var selectedOptions = [];
        if (this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo != null) {
            for (var i = 0; i < this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo.length; i++) {
                if (!Array.contains(selectedOptions, this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo[i])) {
                    Array.add(selectedOptions, this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo[i]);
                }
            }
        }
        if (this._grid.group._groupedColumns != null) {
            var keys = [];
            keys = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
            for (var i = 0; i < this._grid.group._groupedColumns.length; i++) {
                var value = this._grid.group._groupedColumns[i].toString();
                if (Array.contains(keys, value)) {
                    value = this._grid.get_GridInfo().ColumnNameMapping[value].toString();
                }
                if (!Array.contains(selectedOptions, value)) {
                    Array.add(selectedOptions, value);
                }
            }
        }
        var topInfo = document.createElement('DIV');
        topInfo.id = this._grid.get_id() + '_rankingTopInfo';
        topInfo.className = 'xltopbottom';
        var topBottomData = [];
        var data = new com.ivp.rad.controls.neogrid.scripts.info.Select2Data();
        data.id = 'Top';
        data.text = 'Top';
        Array.add(topBottomData, data);
        data = new com.ivp.rad.controls.neogrid.scripts.info.Select2Data();
        data.id = 'Bottom';
        data.text = 'Bottom';
        Array.add(topBottomData, data);
        var topBottomLabel = document.createElement('DIV');
        topBottomLabel.id = this._grid.get_id() + '_topBottomLabel';
        topBottomLabel.className = 'xlgridtopBottomLabel';
        topBottomLabel.innerText = 'Top/Bottom';
        rankingMainDiv.appendChild(topBottomLabel);
        var topBottomParent = document.createElement('DIV');
        topBottomParent.className = 'xlgridtopBottomParent';
        var topbottomcheckbox = this._grid.elementHelper.get_inputButtonElement();
        topbottomcheckbox.className = 'xltopbottomcheckbox';
        topbottomcheckbox.id = this._grid.get_id() + '_topbottomcheckbox';
        topbottomcheckbox.setAttribute('type', 'checkbox');
        topbottomcheckbox.setAttribute('data-toggle', 'toggle');
        topbottomcheckbox.setAttribute('data-size', 'mini');
        topbottomcheckbox.setAttribute('data-onstyle', 'info');
        topbottomcheckbox.setAttribute('data-on', 'On');
        topbottomcheckbox.setAttribute('data-off', 'Off');
        topbottomcheckbox.setAttribute('data-style', 'ios');
        topBottomParent.appendChild(topbottomcheckbox);
        rankingMainDiv.appendChild(topBottomParent);
        var borderDiv = document.createElement('DIV');
        borderDiv.id = this._grid.get_id() + '_borderDiv';
        borderDiv.className = 'xlBorderDiv';
        rankingMainDiv.appendChild(borderDiv);
        var topBottomTextParent = document.createElement('DIV');
        topBottomTextParent.id = this._grid.get_id() + '_topBottomTextParent';
        topBottomTextParent.className = 'xlgridtopBottomTextParent';
        var topBottomShow = document.createElement('DIV');
        topBottomShow.id = this._grid.get_id() + '_topBottomShow';
        topBottomShow.className = 'xlgridtopBottomShow';
        topBottomShow.innerText = 'Show the';
        topBottomTextParent.appendChild(topBottomShow);
        var topBottomtext = document.createElement('DIV');
        topBottomtext.id = this._grid.get_id() + '_topBottomtext';
        topBottomtext.className = 'xlgridtopBottomtext';
        topBottomtext.innerText = 'top';
        topBottomTextParent.appendChild(topBottomtext);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(topBottomtext, 'click', Function.createDelegate(this, this.toggleTopBottom));
        var noOfRecordsParent = document.createElement('DIV');
        noOfRecordsParent.className = 'xlgridnoOfRecordsParent';
        noOfRecordsParent.id = this._grid.get_id() + '_noOfRecordsParent';
        var noOfRecords = document.createElement('DIV');
        noOfRecords.id = this._grid.get_id() + '_noOfRecords';
        noOfRecords.className = 'xlgridnoOfRecords';
        if (this._grid.get_GridInfo().RankingColumnInfo.topBottomCount === 0) {
            noOfRecords.innerText = '10';
        }
        else {
            noOfRecords.innerText = this._grid.get_GridInfo().RankingColumnInfo.topBottomCount.toString();
        }
        noOfRecordsParent.appendChild(noOfRecords);
        noOfRecords.setAttribute('contenteditable', true);
        var caretUpSpinner = document.createElement('DIV');
        caretUpSpinner.id = this._grid.get_id() + '_caretUpSpinner';
        caretUpSpinner.className = 'xlgridcaretUpSpinner fa fa-caret-up';
        var caretDownSpinner = document.createElement('DIV');
        caretDownSpinner.id = this._grid.get_id() + '_caretDownSpinner';
        caretDownSpinner.className = 'xlgridcaretDownSpinner fa fa-caret-down';
        noOfRecordsParent.appendChild(caretUpSpinner);
        noOfRecordsParent.appendChild(caretDownSpinner);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(caretUpSpinner, 'click', Function.createDelegate(this, this.spinnerValueUp));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(noOfRecords, 'keydown', Function.createDelegate(this, this.spinnerValueChange));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(caretDownSpinner, 'click', Function.createDelegate(this, this.spinnerValueDown));
        topBottomTextParent.appendChild(noOfRecordsParent);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(noOfRecordsParent, 'click', Function.createDelegate(this, this.noOfRecordsClick));
        var topBottomOfRecords = document.createElement('DIV');
        topBottomOfRecords.id = this._grid.get_id() + '_topBottomOfRecords';
        topBottomOfRecords.className = 'xlgridtopBottomOfRecords';
        topBottomOfRecords.innerText = 'of records';
        topBottomTextParent.appendChild(topBottomOfRecords);
        rankingMainDiv.appendChild(topBottomTextParent);
        var rankingToggleLabel = document.createElement('DIV');
        rankingToggleLabel.id = this._grid.get_id() + '_rankingToggleLabel';
        rankingToggleLabel.className = 'xlgridrankingToggleLabel';
        rankingToggleLabel.innerText = 'Ranking';
        rankingMainDiv.appendChild(rankingToggleLabel);
        var rankingToggleParent = document.createElement('DIV');
        rankingToggleParent.className = 'xlgridrankingToggleParent';
        var rankingtogglecheckbox = this._grid.elementHelper.get_inputButtonElement();
        rankingtogglecheckbox.className = 'xlrankingtogglecheckbox';
        rankingtogglecheckbox.id = this._grid.get_id() + '_rankingtogglecheckbox';
        rankingtogglecheckbox.setAttribute('type', 'checkbox');
        rankingtogglecheckbox.setAttribute('data-toggle', 'toggle');
        rankingtogglecheckbox.setAttribute('data-size', 'mini');
        rankingtogglecheckbox.setAttribute('data-onstyle', 'info');
        rankingtogglecheckbox.setAttribute('data-on', 'On');
        rankingtogglecheckbox.setAttribute('data-off', 'Off');
        rankingtogglecheckbox.setAttribute('data-style', 'ios');
        rankingToggleParent.appendChild(rankingtogglecheckbox);
        rankingMainDiv.appendChild(rankingToggleParent);
        var borderDivrankingToggle = document.createElement('DIV');
        borderDivrankingToggle.id = this._grid.get_id() + '_borderDivrankingToggle';
        borderDivrankingToggle.className = 'xlBorderDivborderrankingToggle';
        rankingMainDiv.appendChild(borderDivrankingToggle);
        var parentText = document.createElement('DIV');
        parentText.id = this._grid.get_id() + '_parentText';
        parentText.className = 'neogridrankingparentText';
        var text = document.createElement('DIV');
        text.id = this._grid.get_id() + '_rankingdivText';
        text.innerText = 'Append the column as';
        text.className = 'divText';
        parentText.appendChild(text);
        var editableTextDiv = document.createElement('DIV');
        editableTextDiv.id = this._grid.get_id() + '_editableTextDiv';
        editableTextDiv.className = 'neogrideditableTextDiv';
        editableTextDiv.setAttribute('contenteditable', true);
        if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null && this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo !== '') {
            editableTextDiv.innerText = this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayName;
        }
        parentText.appendChild(editableTextDiv);
        rankingMainDiv.appendChild(parentText);
        var rankingbuttondiv = document.createElement('DIV');
        rankingbuttondiv.id = this._grid.get_id() + '_rankingButtonDiv';
        rankingbuttondiv.className = 'xlrankingbutton';
        rankingbuttondiv.innerText = 'Apply';
        rankingMainDiv.appendChild(rankingbuttondiv);
        var rankingcancelButton = document.createElement('DIV');
        rankingcancelButton.id = this._grid.get_id() + '_rankingcancelButton';
        rankingcancelButton.className = 'neogridrankingcancelButton';
        rankingcancelButton.innerText = 'Cancel';
        rankingMainDiv.appendChild(rankingcancelButton);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(rankingcancelButton, 'click', Function.createDelegate(this, this.closeRankingPopUp));
        var editIcon = document.createElement('DIV');
        editIcon.id = this._grid.get_id() + '_editicon';
        editIcon.style.right = '120px';
        editIcon.style.fontSize = '14px';
        editIcon.style.cursor = 'pointer';
        editIcon.className = 'fa fa-pencil-square-o';
        editIcon.style.position = 'absolute';
        editIcon.style.top = '160px';
        if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null && this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo !== '') {
            editIcon.style.display = 'block';
        }
        else {
            editIcon.style.display = 'None';
        }
        editIcon.style.color = '#8C8C8C';
        rankingMainDiv.appendChild(editIcon);
        this._grid.get_element().parentNode.appendChild(rankingMainDiv);
        eval('$(\"#' + this._grid.get_id() + '_rankingOrderText' + '\").bootstrapToggle(\'off\');');
        if (this._grid.get_GridInfo().RankingColumnInfo.topBottomCount !== 0 || this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayName == null) {
            eval('$(\"#' + this._grid.get_id() + '_topbottomcheckbox' + '\").bootstrapToggle(\'on\');');
        }
        else {
            eval('$(\"#' + this._grid.get_id() + '_topbottomcheckbox' + '\").bootstrapToggle(\'off\');');
        }
        if (!this._grid.get_GridInfo().RankingColumnInfo.rankingOf) {
            eval('$(\"#' + this._grid.get_id() + '_rankingtogglecheckbox' + '\").bootstrapToggle(\'on\');');
        }
        else {
            eval('$(\"#' + this._grid.get_id() + '_rankingtogglecheckbox' + '\").bootstrapToggle(\'off\');');
        }
        eval('$(\"#' + this._grid.get_id() + 'xlrankingselect' + '\").select2({data : ' + Sys.Serialization.JavaScriptSerializer.serialize(groups) + ',multiple : true, placeholder : \"By Group(optional)\" })');
        eval('$(\"#' + this._grid.get_id() + 'xlrankingselect' + '\").select2( \"val\" , ' + Sys.Serialization.JavaScriptSerializer.serialize(selectedOptions) + ')');
        if (this._grid.get_GridInfo().RankingColumnInfo.rows !== com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows.none) {
            if (this._grid.get_GridInfo().RankingColumnInfo.rows === com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows.bottom) {
                eval('$(\"#' + this._grid.get_id() + '_rankingTopInfo' + '\").select2(\"val\" , \"' + 'Bottom' + '\")');
            }
            else {
                eval('$(\"#' + this._grid.get_id() + '_rankingTopInfo' + '\").select2(\"val\" , \"' + 'Top' + '\")');
            }
        }
        eval('$(\"#' + this._grid.get_id() + '_rankingColumnInfo' + '\").on(\"change\",function(e){ $find(\"' + this._grid.get_id() + '\").upperHeader.setRankingColumnName(e.val,rankingMainDiv,editIcon) })');
        eval('$(\"#' + this._grid.get_id() + 'xlrankingselect' + '\").on(\"change\",function(e){ $find(\"' + this._grid.get_id() + '\").upperHeader.setRankingPlaceholder() })');
        if (this._grid.get_GridInfo().RankingColumnInfo.topBottomCount > 0) {
            if (document.getElementById(this._grid.get_GridInfo().GridId + '_rankingparentspinner') != null) {
                document.getElementById(this._grid.get_GridInfo().GridId + '_rankingparentspinner').style.display = '';
                (document.getElementById(this._grid.get_id() + '_rankingSpinner')).value = this._grid.get_GridInfo().RankingColumnInfo.topBottomCount.toString();
            }
        }
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_id() + '_editicon'), 'click', Function.createDelegate(this, this.setRankingColumnNameEditable));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_id() + '_rankingButtonDiv'), 'click', Function.createDelegate(this, this.fetchRankingInfo));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_id() + '_topbottomcheckbox'), 'click', Function.createDelegate(this, this.showHideSpinner));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_id() + '_rankingOrderText'), 'click', Function.createDelegate(this, this._rankingOrderClick));
        var str = '';
        var div = document.getElementById(this._grid.get_id() + '_groupPlaceholder');
        var div1 = document.getElementById(this._grid.get_id() + 'xlrankingselect');
        if (div1.innerText !== '') {
            if (div != null) {
                div.style.display = '';
            }
        }
        else {
            if (div != null) {
                div.style.display = 'None';
            }
        }
        var div2 = document.getElementById(this._grid.get_id() + '_onColumnPlaceholder');
        if (document.getElementById(this._grid.get_id() + '_rankingColumnInfo').nodeValue != null) {
            if (div2 != null) {
                div2.style.display = '';
            }
        }
        else {
            if (div2 != null) {
                div2.style.display = 'None';
            }
        }
        if (eval('$(\"#' + this._grid.get_id() + '_rankingColumnInfo\").val()') !== '') {
            if (document.getElementById(this._grid.get_id() + '_rankingColumnDiv') == null) {
                var rankingColumnName = document.createElement('DIV');
                rankingColumnName.id = this._grid.get_id() + '_rankingColumnDiv';
                rankingColumnName.innerText = '';
                if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayName !== 'RANK' && this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayName !== '_RANK') {
                    rankingColumnName.innerText = this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayName;
                }
                rankingColumnName.title = this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayName;
                rankingColumnName.className = 'xlrankingcolumnname';
                rankingMainDiv.appendChild(rankingColumnName);
                editIcon.style.display = '';
                rankingMainDiv.appendChild(rankingColumnName);
                this._grid.get_element().parentNode.appendChild(rankingMainDiv);
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(rankingColumnName, 'focusout', Function.createDelegate(this, this.removeEditing));
            }
            else {
                document.getElementById(this._grid.get_id() + '_rankingColumnDiv').innerText = eval('$(\"#' + this._grid.get_id() + '_rankingColumnInfo\").val()') + ' Rank';
                document.getElementById(this._grid.get_id() + '_rankingColumnDiv').title = eval('$(\"#' + this._grid.get_id() + '_rankingColumnInfo\").val()') + ' Rank';
                editIcon.style.display = '';
                com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_id() + '_rankingColumnDiv'), 'focusout', Function.createDelegate(this, this.removeEditing));
            }
        }
        var gridid = this._grid.get_id();
        $("#" + this._grid.get_id() + '_rankingtogglecheckbox').change(function () {
            if (!$($(".xlgridrankingToggleParent").children()[0]).hasClass("btn-default off")) {
                $("#" + gridid + "_editableTextDiv").html($(".firstColumnDiv").html() + "_Rank");
            }
        });
    },

    closeRankingPopUp: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$closeRankingPopUp(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        eval('$(\"#' + this._grid.get_id() + '_rankingMainDiv' + '\").remove()');
        if (document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className.toString().indexOf('xlOpacityForGrid') !== -1) {
            document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = '';
            document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').className = '';
            document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = '';
        }
    },

    spinnerValueChange: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$spinnerValueChange(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var counterString = e.target.innerText;
        var counter = 0;
        if (e.keyCode === 38) {
            counter = eval('parseInt(counterString)');
            counter = counter + 1;
            if (counter >= 0) {
                document.getElementById(this._grid.get_id() + '_noOfRecords').innerText = counter.toString();
            }
        }
        if (e.keyCode === 40) {
            counter = eval('parseInt(counterString)');
            counter = counter - 1;
            if (counter >= 0) {
                document.getElementById(this._grid.get_id() + '_noOfRecords').innerText = counter.toString();
            }
        }
    },

    spinnerValueUp: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$spinnerValueUp(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var counter = 0;
        var counterString = e.target.parentNode.childNodes[0].innerText;
        counter = eval('parseInt(counterString)');
        counter = counter + 1;
        if (counter >= 0) {
            document.getElementById(this._grid.get_id() + '_noOfRecords').innerText = counter.toString();
        }
    },

    spinnerValueDown: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$spinnerValueDown(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var counter = 0;
        var counterString = e.target.parentNode.childNodes[0].innerText;
        counter = eval('parseInt(counterString)');
        counter = counter - 1;
        if (counter >= 0) {
            document.getElementById(this._grid.get_id() + '_noOfRecords').innerText = counter.toString();
        }
    },

    noOfRecordsClick: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$noOfRecordsClick(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className !== 'xlgridcaretDownSpinner fa fa-caret-down' && e.target.className !== 'xlgridcaretUpSpinner fa fa-caret-up') {
            e.target.parentNode.children[1].style.display = 'inline-block';
            e.target.parentNode.children[2].style.display = 'inline-block';
        }
    },

    toggleTopBottom: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$toggleTopBottom(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.innerText.toLowerCase() === 'top') {
            e.target.innerText = 'bottom';
        }
        else {
            e.target.innerText = 'top';
        }
    },

    onRankingColumnClick: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$onRankingColumnClick(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'firstColumnDiv') {
            if (document.getElementById(this._grid.get_id() + '_rankingColumnInfo').style.height === '30px' || document.getElementById(this._grid.get_id() + '_rankingColumnInfo').style.height === '') {
                document.getElementById(this._grid.get_id() + '_rankingColumnInfo').style.height = '235px';
            }
            else {
                document.getElementById(this._grid.get_id() + '_rankingColumnInfo').style.height = '30px';
            }
        }
        else if (e.target.className === 'columnOptionsEachRanking') {
            document.getElementById(this._grid.get_id() + '_rankingOrderText').parentNode.style.display = 'block';
            document.getElementById('firstColumnDiv').innerText = e.target.innerText;
            document.getElementById(this._grid.get_id() + '_rankingColumnInfo').style.height = '30px';
            document.getElementById(this._grid.get_id() + '_editableTextDiv').innerText = document.getElementById('firstColumnDiv').innerText + ' RANK';
            document.getElementById(this._grid.get_id() + '_editableTextDiv').title = document.getElementById('firstColumnDiv').innerText + ' RANK';
            document.getElementById(this._grid.get_id() + '_editicon').style.display = 'block';
        }
    },

    setRankingPlaceholder: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$setRankingPlaceholder() {
        if (document.getElementById(this._grid.get_id() + 'xlrankingselect') != null) {
            var div = document.getElementById(this._grid.get_id() + '_groupPlaceholder');
            if (div != null) {
                div.style.display = '';
            }
        }
    },

    showHideSpinner: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$showHideSpinner(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        eval('$(\"#' + this._grid.get_id() + '_rankingTopInfo' + '\").select2(\"val\" , \"' + 'Top' + '\")');
        var div = document.getElementById(this._grid.get_id() + '_rankingparentspinner');
        var check = e.target;
        if (check.checked) {
            div.style.display = '';
            if (document.getElementById(this._grid.get_id() + '_rankingSpinner') != null) {
                (document.getElementById(this._grid.get_id() + '_rankingSpinner')).value = '5';
            }
            var enableCheckbox = (document.getElementById(this._grid.get_id() + '_rankingcheckbox'));
            enableCheckbox.disabled = false;
        }
        if (!check.checked) {
            div.style.display = 'None';
        }
    },

    _rankingOrderClick: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_rankingOrderClick(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (document.getElementById(this._grid.get_id() + '_rankingOrderText').className === 'xlRankingOrderDivDSC') {
            document.getElementById(this._grid.get_id() + '_rankingOrderText').className = 'xlRankingOrderDivASC';
            document.getElementById(this._grid.get_id() + '_rankingOrderText').innerText = 'Asc';
        }
        else {
            document.getElementById(this._grid.get_id() + '_rankingOrderText').className = 'xlRankingOrderDivDSC';
            document.getElementById(this._grid.get_id() + '_rankingOrderText').innerText = 'Desc';
        }
    },

    fetchRankingInfo: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$fetchRankingInfo(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var selected = [];
        this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo = eval('$(\"#firstColumnDiv\").text()');
        selected = (eval('$(\"#' + this._grid.get_id() + 'xlrankingselect\").val()')).split(',');
        this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo = [];
        for (var i = 0; i < selected.length; i++) {
            Array.add(this._grid.get_GridInfo().RankingColumnInfo.PartitionColumnInfo, selected[i]);
        }
        if (eval('$($(\".xlgridrankingToggleParent\").children()[0]).hasClass(\"btn-default off\")')) {
            //this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayName = '_RANK';
            this._grid.get_GridInfo().RankingColumnInfo.rankingOf = true;
        }
        else {
            if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayNameOld == "" || this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayNameOld == null) {
                this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayNameOld = eval('$(\"#' + this._grid.get_id() + '_editableTextDiv\").text()');
            }
            this._grid.get_GridInfo().RankingColumnInfo.RankingColumnDisplayName = eval('$(\"#' + this._grid.get_id() + '_editableTextDiv\").text()');
            this._grid.get_GridInfo().RankingColumnInfo.rankingOf = false;
        }
        if (eval('$($(\".xlgridtopBottomParent\").children()[0]).hasClass(\"btn-default off\")')) {
            this._grid.get_GridInfo().RankingColumnInfo.topBottomCount = 0;
        }
        else {
            var topBottom = document.getElementById(this._grid.get_id() + '_topBottomtext').innerText;
            switch (topBottom) {
                case 'top':
                    this._grid.get_GridInfo().RankingColumnInfo.rows = com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows.top;
                    break;
                case 'bottom':
                    this._grid.get_GridInfo().RankingColumnInfo.rows = com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows.bottom;
                    break;
                default:
                    this._grid.get_GridInfo().RankingColumnInfo.rows = com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows.none;
                    break;
            }
            var topBottomCount = document.getElementById(this._grid.get_id() + '_noOfRecords').innerText;
            var count = eval('parseInt(topBottomCount)');
            this._grid.get_GridInfo().RankingColumnInfo.topBottomCount = count;
        }
        if (eval('$($(\".rankOrderParent\").children()[0]).hasClass(\"btn-default off\")')) {
            this._grid.get_GridInfo().RankingColumnInfo.AscDesc = com.ivp.rad.controls.neogrid.scripts.info.SortType.DESC;
        }
        else {
            this._grid.get_GridInfo().RankingColumnInfo.AscDesc = com.ivp.rad.controls.neogrid.scripts.info.SortType.ASC;
        }
        if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != "Column Name")
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RANKING_COLUMN_INFO, Sys.Serialization.JavaScriptSerializer.serialize(this._grid.get_GridInfo().RankingColumnInfo), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RANKING_COLUMN_INFO);
    },

    setRankingColumnName: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$setRankingColumnName(columnName, rankingMainDiv, editIcon) {
        /// <param name="columnName" type="String">
        /// </param>
        /// <param name="rankingMainDiv" type="Object" domElement="true">
        /// </param>
        /// <param name="editIcon" type="Object" domElement="true">
        /// </param>
        if (document.getElementById(this._grid.get_id() + '_rankingColumnInfo') != null) {
            var div = document.getElementById(this._grid.get_id() + '_onColumnPlaceholder');
            if (div != null) {
                div.style.display = '';
            }
        }
        if (document.getElementById(this._grid.get_id() + '_rankingColumnDiv') == null) {
            var rankingColumnName = document.createElement('DIV');
            rankingColumnName.id = this._grid.get_id() + '_rankingColumnDiv';
            rankingColumnName.innerText = '';
            rankingColumnName.innerText = columnName + ' Rank';
            rankingColumnName.title = columnName + ' Rank';
            rankingColumnName.className = 'xlrankingcolumnname';
            rankingMainDiv.appendChild(rankingColumnName);
            editIcon.style.display = '';
            rankingMainDiv.appendChild(rankingColumnName);
            this._grid.get_element().parentNode.appendChild(rankingMainDiv);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(rankingColumnName, 'focusout', Function.createDelegate(this, this.removeEditing));
        }
        else {
            document.getElementById(this._grid.get_id() + '_rankingColumnDiv').innerText = columnName + ' Rank';
            document.getElementById(this._grid.get_id() + '_rankingColumnDiv').title = columnName + ' Rank';
            editIcon.style.display = '';
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.getElementById(this._grid.get_id() + '_rankingColumnDiv'), 'focusout', Function.createDelegate(this, this.removeEditing));
        }
    },

    removeEditing: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$removeEditing(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var div = document.getElementById(this._grid.get_id() + '_rankingColumnDiv');
        div.setAttribute('contenteditable', 'false');
        div.style.border = '1px solid white';
    },

    setRankingColumnNameEditable: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$setRankingColumnNameEditable(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var div = document.getElementById(this._grid.get_id() + '_editableTextDiv');
        div.style.border = '1px solid lightgray';
        div.setAttribute('contenteditable', 'true');
    },

    _getUnitTypes: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getUnitTypes(dataTypeOptions) {
        /// <param name="dataTypeOptions" type="Object" domElement="true">
        /// </param>
        var element = document.createElement('OPTION');
        element.value = 'None';
        element.text = 'None';
        element.selected = true;
        element.className = 'xlUnitTypeOption';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Thousands';
        element.value = 'Thousands';
        element.className = 'xlUnitTypeOption';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Millions';
        element.value = 'Millions';
        element.className = 'xlUnitTypeOption';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Billions';
        element.value = 'Billions';
        element.className = 'xlUnitTypeOption';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
    },

    _getDataTypes: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getDataTypes(dataTypeOptions) {
        /// <param name="dataTypeOptions" type="Object" domElement="true">
        /// </param>
        var element = document.createElement('OPTION');
        element.value = 'None';
        element.text = 'None';
        element.selected = true;
        element.className = 'xlDataTypeOptionItems';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.value = 'String';
        element.text = 'String';
        element.className = 'xlDataTypeOptionItems';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Number';
        element.value = 'Number';
        element.className = 'xlDataTypeOptionItems';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Currency';
        element.value = 'Currency';
        element.className = 'xlDataTypeOptionItems';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Percentage';
        element.value = 'Percentage';
        element.className = 'xlDataTypeOptionItems';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
    },

    _getNegativeValues: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getNegativeValues(dataTypeOptions) {
        /// <param name="dataTypeOptions" type="Object" domElement="true">
        /// </param>
        var element = document.createElement('OPTION');
        element.value = 'Default';
        element.text = 'Default';
        element.selected = true;
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'DefaultBrac';
        element.value = 'DefaultBrac';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Colored';
        element.value = 'Colored';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'ColoredBrac';
        element.value = 'ColoredBrac';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
    },

    _getJustificationValues: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getJustificationValues(dataTypeOptions) {
        /// <param name="dataTypeOptions" type="Object" domElement="true">
        /// </param>
        var element = document.createElement('OPTION');
        element.value = 'Default';
        element.text = 'Default';
        element.selected = true;
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Left';
        element.value = 'Left';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Right';
        element.value = 'Right';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Center';
        element.value = 'Center';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
    },

    _getFormattedColumnBody: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getFormattedColumnBody(formattedBody) {
        /// <param name="formattedBody" type="Object" domElement="true">
        /// </param>
        var columnItem = null;
        var columnDiv = null;
        var checkBoxDiv = null;
        var count = 0;
        var formattedColumnList = window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping);
        for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
            if (Array.contains(formattedColumnList, this._grid.get_GridInfo().ColumnList[i].toString())) {
                if (count === 0) {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                    this.currentSeletedColumn = this._grid.get_GridInfo().ColumnList[i].toString();
                    this._setFormatFields(this.currentSeletedColumn);
                }
                columnItem = document.createElement('DIV');
                columnItem.className = 'xlFormatColumnDiv';
                if (count === 0) {
                    columnItem.style.backgroundColor = '#ECECEC';
                }
                columnDiv = document.createElement('DIV');
                checkBoxDiv = document.createElement('DIV');
                var checkBox = document.createElement('INPUT');
                checkBox.type = 'checkbox';
                columnDiv.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                columnDiv.title = this._grid.get_GridInfo().ColumnList[i].toString();
                columnDiv.className = 'xlFormatColumnItem';
                checkBox.checked = false;
                checkBox.setAttribute('isFormatted', true);
                checkBoxDiv.className = 'xlFormatColumnCheckBox';
                checkBoxDiv.appendChild(checkBox);
                columnItem.appendChild(checkBoxDiv);
                columnItem.appendChild(columnDiv);
                formattedBody.appendChild(columnItem);
                count++;
            }
        }
        formattedColumnList = [];
        formattedColumnList = window.Object.keys(this._gridCustomFormatting);
        for (var i = 0; i < formattedColumnList.length; i++) {
            if (count === 0) {
                document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = formattedColumnList[i].toString();
                this.currentSeletedColumn = formattedColumnList[i].toString();
                this._setFormatFields(this.currentSeletedColumn);
            }
            columnItem = document.createElement('DIV');
            columnItem.className = 'xlFormatColumnDiv';
            if (count === 0) {
                columnItem.style.backgroundColor = '#ECECEC';
            }
            columnDiv = document.createElement('DIV');
            checkBoxDiv = document.createElement('DIV');
            var checkBox = document.createElement('INPUT');
            checkBox.type = 'checkbox';
            columnDiv.innerText = formattedColumnList[i].toString();
            columnDiv.title = formattedColumnList[i].toString();
            columnDiv.className = 'xlFormatColumnItem';
            checkBox.checked = false;
            checkBox.setAttribute('isFormatted', true);
            checkBoxDiv.className = 'xlFormatColumnCheckBox';
            checkBoxDiv.appendChild(checkBox);
            columnItem.appendChild(checkBoxDiv);
            columnItem.appendChild(columnDiv);
            formattedBody.appendChild(columnItem);
            count++;
        }
        eval('$(\"#' + this._grid.get_id() + '_columnBodyDiv' + '\").slimscrollNew({height : \'' + 238 + 'px\', size:\'4px\' })');
    },

    _getunformattedColumnBody: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getunformattedColumnBody(unformattedBody) {
        /// <param name="unformattedBody" type="Object" domElement="true">
        /// </param>
        var columnItem = null;
        var columnDiv = null;
        var checkBoxDiv = null;
        var count = 0;
        var formattedColumnList = window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping);
        var formattedList = window.Object.keys(this._gridCustomFormatting);
        for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
            if (!(Array.contains(formattedColumnList, this._grid.get_GridInfo().ColumnList[i].toString()) || Array.contains(formattedList, this._grid.get_GridInfo().ColumnList[i].toString()))) {
                if (count === 0) {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                    this.currentSeletedColumn = this._grid.get_GridInfo().ColumnList[i].toString();
                }
                columnItem = document.createElement('DIV');
                columnItem.className = 'xlFormatColumnDiv';
                if (count === 0) {
                    columnItem.style.backgroundColor = '#ECECEC';
                }
                columnDiv = document.createElement('DIV');
                checkBoxDiv = document.createElement('DIV');
                var checkBox = document.createElement('INPUT');
                checkBox.type = 'checkbox';
                columnDiv.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                columnDiv.title = this._grid.get_GridInfo().ColumnList[i].toString();
                columnDiv.className = 'xlFormatColumnItem';
                checkBox.checked = false;
                checkBox.setAttribute('isNotFormatted', true);
                checkBoxDiv.className = 'xlFormatColumnCheckBox';
                checkBoxDiv.appendChild(checkBox);
                columnItem.appendChild(checkBoxDiv);
                columnItem.appendChild(columnDiv);
                unformattedBody.appendChild(columnItem);
                count++;
            }
            else {
                if (count === 0) {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                    this.currentSeletedColumn = this._grid.get_GridInfo().ColumnList[i].toString();
                }
                columnItem = document.createElement('DIV');
                columnItem.className = 'xlFormatColumnDiv';
                if (count === 0) {
                    columnItem.style.backgroundColor = '#ECECEC';
                }
                columnDiv = document.createElement('DIV');
                checkBoxDiv = document.createElement('DIV');
                var checkBox = document.createElement('INPUT');
                checkBox.type = 'checkbox';
                columnDiv.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                columnDiv.title = this._grid.get_GridInfo().ColumnList[i].toString();
                columnDiv.className = 'xlFormatColumnItem';
                checkBox.checked = false;
                checkBox.setAttribute('isFormatted', true);
                checkBoxDiv.className = 'xlFormatColumnCheckBox';
                checkBoxDiv.appendChild(checkBox);
                columnItem.appendChild(checkBoxDiv);
                columnItem.appendChild(columnDiv);
                columnItem.style.backgroundColor = '#EDEDED';
                unformattedBody.appendChild(columnItem);
                count++;
            }
        }
        eval('$(\"#' + this._grid.get_id() + '_columnBodyDiv' + '\").slimscrollNew({height : \'' + 238 + 'px\', size:\'4px\' })');
    },

    _getSelectedColumnName: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getSelectedColumnName(COlName) {
        /// <param name="COlName" type="String">
        /// </param>
        /// <returns type="String"></returns>
        var $dict1 = this._grid.get_GridInfo().ColumnNameMapping;
        for (var $key2 in $dict1) {
            var entry = { key: $key2, value: $dict1[$key2] };
            if (entry.value.toString() === COlName) {
                return entry.key;
            }
        }
        return COlName;
    },

    _formatMenuDivHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_formatMenuDivHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'xlApplyFormatButton') {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CUSTOM_FORMATTER, Sys.Serialization.JavaScriptSerializer.serialize(this._gridCustomFormatting) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.removeFormattingList), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CUSTOM_FORMATTER);
        }
        else if (e.target.className === 'xlSaveFormatButton') {
            if ((document.getElementById(this._grid.get_id() + '_dataTypeOptions')).selectedIndex !== 0) {
                if (this.formattingColumnList.length > 0) {
                    for (var i = 0; i < this.formattingColumnList.length; i++) {
                        if (!Array.contains(window.Object.keys(this._gridCustomFormatting), this.formattingColumnList[i].toString())) {
                            this._gridCustomFormatting[this._getSelectedColumnName(this.formattingColumnList[i].toString())] = this._getCustomFormatter();
                            this._justificationCollection[this._getSelectedColumnName(this.formattingColumnList[i].toString())] = this._getJustification();
                        }
                        else {
                            this._gridCustomFormatting[this._getSelectedColumnName(this.formattingColumnList[i].toString())] = this._getCustomFormatter();
                            this._justificationCollection[this._getSelectedColumnName(this.formattingColumnList[i].toString())] = this._getJustification();
                        }
                    }
                    if (!this._onFormattedList) {
                        this._removeSelectedColumns(this.formattingColumnList);
                        if (this.formattingColumnList.length > 0) {
                            document.getElementById(this._grid.get_id() + '_formattedColumnsHeader').title = '';
                            document.getElementById(this._grid.get_id() + '_formattedColumnsHeader').style.color = '#474747';
                        }
                    }
                    this.formattingColumnList = [];
                }
                else {
                    if (this.currentSeletedColumn !== '') {
                        var colName = this._getSelectedColumnName(this.currentSeletedColumn);
                        this._gridCustomFormatting[colName] = this._getCustomFormatter();
                        this._justificationCollection[colName] = this._getJustification();
                        if (!this._onFormattedList) {
                            this._removeSingleColumn(this.currentSeletedColumn);
                            document.getElementById(this._grid.get_id() + '_formattedColumnsHeader').title = '';
                            document.getElementById(this._grid.get_id() + '_formattedColumnsHeader').style.color = '#474747';
                        }
                        this.currentSeletedColumn = '';
                    }
                }
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_CUSTOM_FORMATTING, Sys.Serialization.JavaScriptSerializer.serialize(this._gridCustomFormatting) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.removeFormattingList) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this._justificationCollection), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_CUSTOM_FORMATTING);
                this._gridCustomFormatting = {};
                this.removeFormattingList = [];
                this._justificationCollection = {};
                this._resetFormatFieldInfo();
            }
            else {
                if (document.getElementById(this._grid.get_id() + '_xlPopUPDiv') == null) {
                    var popupDiv = document.createElement('DIV');
                    popupDiv.id = this._grid.get_id() + '_xlPopUPDiv';
                    popupDiv.innerHTML = '<label class=\"xlLabelClass\"> Please Select Data Type </label><div class=\"xlClosePopUp btn btn-default\" >Ok</div>';
                    popupDiv.className = 'xlFormatPopUp';
                    document.getElementById(this._grid.get_id() + '_FormatMenuDiv').appendChild(popupDiv);
                }
                else {
                    document.getElementById(this._grid.get_id() + '_xlPopUPDiv').style.display = '';
                }
            }
        }
        else if (e.target.getAttribute('isNotFormatted') != null) {
            if ((e.target).checked) {
                Array.add(this.formattingColumnList, e.target.parentNode.nextSibling.innerText);
                e.target.parentNode.parentNode.style.backgroundColor = '#ECECEC';
                this.currentSeletedColumn = '';
                if (this.formattingColumnList.length > 1) {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = 'Please Select DataType.';
                }
                else {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = this.formattingColumnList[0].toString();
                }
                this._unselectColumnOnCheckBoxCheck();
                if (this.formattingColumnList.length === 1) {
                    this._resetFormatFieldInfo();
                }
            }
            else {
                Array.remove(this.formattingColumnList, e.target.parentNode.nextSibling.innerText);
                e.target.parentNode.parentNode.style.backgroundColor = '#FFFFFF';
                if (this.formattingColumnList.length === 0) {
                    var element = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
                    if (element != null) {
                        if (element.children.length > 0) {
                            document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = element.children[0].children[1].innerText;
                        }
                    }
                    this._resetFormatFieldInfo();
                }
                if (this.formattingColumnList.length === 1) {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = this.formattingColumnList[0].toString();
                }
            }
        }
        else if (e.target.getAttribute('isFormatted') != null) {
            if ((e.target).checked) {
                Array.add(this.formattingColumnList, e.target.parentNode.nextSibling.innerText);
                this._setFormatFields(e.target.parentNode.nextSibling.innerText);
                e.target.parentNode.parentNode.style.backgroundColor = '#ECECEC';
                this.currentSeletedColumn = '';
                if (this.formattingColumnList.length > 1) {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = 'Please Select the DataType';
                }
                else {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = this.formattingColumnList[0].toString();
                }
                this._unselectColumnOnCheckBoxCheck();
            }
            else {
                Array.remove(this.formattingColumnList, e.target.parentNode.nextSibling.innerText);
                if (this.formattingColumnList.length === 0) {
                    this._resetFormatFieldInfo();
                    if (this.formattingColumnList.length === 0) {
                        var element = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
                        if (element != null) {
                            if (element.children.length > 0) {
                                document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = element.children[0].children[1].innerText;
                                this._setFormatFields(element.children[0].children[1].innerText);
                            }
                        }
                    }
                }
                if (this.formattingColumnList.length === 1) {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = this.formattingColumnList[0].toString();
                    this._setFormatFields(this.formattingColumnList[0].toString());
                }
                e.target.parentNode.parentNode.style.backgroundColor = '#FFFFFF';
            }
            document.getElementById(this._grid.get_id() + '_removeFormatting').style.display = '';
        }
        else if (e.target.className === 'xlUnformattedHeader') {
            if (document.getElementById(this._grid.get_id() + '_removeFormatting') != null) {
                document.getElementById(this._grid.get_id() + '_removeFormatting').style.display = 'none';
            }
            if (document.getElementById(this._grid.get_id() + '_columnBodyDiv') != null) {
                var columnBody = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
                columnBody.innerHTML = '';
                this._getunformattedColumnBody(columnBody);
                this._onFormattedList = false;
            }
            this._resetFormatFieldInfo();
            this.formattingColumnList = [];
            e.target.style.borderBottom = '2px solid #00bcef';
            e.target.nextSibling.style.borderBottom = '0px';
            this._disableFilterDataType();
        }
        else if (e.target.className === 'xlformattedHeader') {
            if ((window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping).length > 0 || window.Object.keys(this._gridCustomFormatting).length > 0)) {
                if (document.getElementById(this._grid.get_id() + '_removeFormatting') != null) {
                    document.getElementById(this._grid.get_id() + '_removeFormatting').style.display = '';
                }
                if (document.getElementById(this._grid.get_id() + '_columnBodyDiv') != null) {
                    var columnBody = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
                    columnBody.innerHTML = '';
                    this._getFormattedColumnBody(columnBody);
                    this._onFormattedList = true;
                }
                this.formattingColumnList = [];
                e.target.style.borderBottom = '2px solid #00bcef';
                e.target.previousSibling.style.borderBottom = '0px';
            }
            this._disableFilterDataType();
        }
        else if (e.target.className.indexOf('xlRemoveFormatting') !== -1) {
            if (this.formattingColumnList.length > 0) {
                this.removeFormattingList = this.formattingColumnList;
                this.formattingColumnList = [];
                for (var i = 0; i < this.removeFormattingList.length; i++) {
                    if (Array.contains(window.Object.keys(this._gridCustomFormatting), this.removeFormattingList[i].toString())) {
                        delete this._gridCustomFormatting[this.removeFormattingList[i].toString()];
                    }
                }
                this._removeSelectedColumns(this.removeFormattingList);
            }
            else if (this.currentSeletedColumn !== '') {
                Array.add(this.removeFormattingList, this.currentSeletedColumn);
                this._removeSingleColumn(this.currentSeletedColumn);
                if (Array.contains(window.Object.keys(this._gridCustomFormatting), this.currentSeletedColumn)) {
                    delete this._gridCustomFormatting[this.currentSeletedColumn];
                }
                this.currentSeletedColumn = '';
            }
            this._setFirstColumnAsDefault();
            if (!(window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping).length > 0 || window.Object.keys(this._gridCustomFormatting).length > 0)) {
                document.getElementById(this._grid.get_id() + '_formattedColumnsHeader').title = 'No Formatted Columns';
                document.getElementById(this._grid.get_id() + '_formattedColumnsHeader').style.color = '#A8A8A8';
            }
            this._removeFormattingInfo();
        }
        else if (e.target.className === 'xlFormatColumnItem') {
            if (this.currentSeletedColumn === e.target.innerText) {
            }
            else {
                if (e.target.previousSibling.children[0].getAttribute('isNotFormatted') != null) {
                    e.target.parentNode.style.backgroundColor = '#ECECEC';
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = e.target.innerText;
                    this.currentSeletedColumn = e.target.innerText;
                    this._uncheckCOlumnsSelectedFromCheckBox();
                    this.formattingColumnList = [];
                    this._unSelectPreviousColumns();
                    this._resetFormatFieldInfo();
                }
                else if (e.target.previousSibling.children[0].getAttribute('isFormatted') != null) {
                    this._setFormatFields(e.target.innerText);
                    e.target.parentNode.style.backgroundColor = '#ECECEC';
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = e.target.innerText;
                    this.currentSeletedColumn = e.target.innerText;
                    this._uncheckCOlumnsSelectedFromCheckBox();
                    this.formattingColumnList = [];
                    this._unSelectPreviousColumns();
                    document.getElementById(this._grid.get_id() + '_removeFormatting').style.display = '';
                }
            }
        }
        else if (e.target.className === '') {
            this._resetFormatFieldInfo();
        }
        if (e.target.className === 'xlClosePopUp btn btn-default') {
            if (document.getElementById(this._grid.get_id() + '_xlPopUPDiv') != null) {
                document.getElementById(this._grid.get_id() + '_xlPopUPDiv').style.display = 'none';
            }
        }
        if (e.target.className === 'xlClearFormatButton') {
            this._resetFormatFieldInfo();
            if (document.getElementById(this._grid.get_GridInfo().GridId + '_previewGroup') != null) {
                document.getElementById(this._grid.get_GridInfo().GridId + '_previewGroup').style.display = 'none';
            }
        }
    },

    _getCustomFormatter: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getCustomFormatter() {
        /// <returns type="com.ivp.rad.controls.neogrid.scripts.CustomFormatter"></returns>
        var customformatter = new com.ivp.rad.controls.neogrid.scripts.CustomFormatter();
        var datatype = document.getElementById(this._grid.get_id() + '_dataTypeOptions');
        switch (datatype.selectedIndex) {
            case 0:
                customformatter.DataType = com.ivp.rad.controls.neogrid.scripts.FormatterDataType.none;
                break;
            case 1:
                customformatter.DataType = com.ivp.rad.controls.neogrid.scripts.FormatterDataType.string;
                break;
            case 2:
                customformatter.DataType = com.ivp.rad.controls.neogrid.scripts.FormatterDataType.number;
                break;
            case 3:
                customformatter.DataType = com.ivp.rad.controls.neogrid.scripts.FormatterDataType.currency;
                break;
            default:
                customformatter.DataType = com.ivp.rad.controls.neogrid.scripts.FormatterDataType.percentage;
                break;
        }
        datatype = document.getElementById(this._grid.get_id() + '_negativeValueOptions');
        switch (datatype.selectedIndex) {
            case 0:
                customformatter.NegativeValue = com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULT;
                break;
            case 1:
                customformatter.NegativeValue = com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULTBRAC;
                break;
            case 2:
                customformatter.NegativeValue = com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLORED;
                break;
            case 3:
                customformatter.NegativeValue = com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLOREDBRAC;
                break;
            default:
                customformatter.NegativeValue = com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULT;
                break;
        }
        datatype = document.getElementById(this._grid.get_id() + '_unitTypeOptions');
        switch (datatype.selectedIndex) {
            case 0:
                customformatter.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.none;
                break;
            case 1:
                customformatter.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.thousands;
                break;
            case 2:
                customformatter.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.millions;
                break;
            case 3:
                customformatter.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.billions;
                break;
            default:
                customformatter.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.none;
                break;
        }
        if ((document.getElementById(this._grid.get_id() + '_decimalValue')).value === '') {
            customformatter.DecimalPlaces = 0;
        }
        else {
            customformatter.DecimalPlaces = Number.parseInvariant((document.getElementById(this._grid.get_id() + '_decimalValue')).value);
        }
        customformatter.Prefix = (document.getElementById(this._grid.get_id() + '_prefixValue')).value;
        return customformatter;
    },

    _getJustification: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getJustification() {
        /// <returns type="com.ivp.rad.controls.neogrid.scripts.info.Justification"></returns>
        switch ((document.getElementById(this._grid.get_id() + '_justificationValueOptions')).selectedIndex) {
            case 0:
                return com.ivp.rad.controls.neogrid.scripts.info.Justification.DEFAULT;
            case 1:
                return com.ivp.rad.controls.neogrid.scripts.info.Justification.LEFT;
            case 2:
                return com.ivp.rad.controls.neogrid.scripts.info.Justification.RIGHT;
            case 3:
                return com.ivp.rad.controls.neogrid.scripts.info.Justification.CENTER;
            default:
                return com.ivp.rad.controls.neogrid.scripts.info.Justification.DEFAULT;
        }
    },

    _removeSelectedColumns: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_removeSelectedColumns(ColumnList) {
        /// <param name="ColumnList" type="Array">
        /// </param>
        var columnBody = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
        if (columnBody != null) {
            for (var i = 0; i < columnBody.children.length; i++) {
                if (columnBody.children[i].style.display !== 'none') {
                    if ((columnBody.children[i].children[0].children[0]).checked) {
                    }
                }
            }
        }
    },

    _removeSingleColumn: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_removeSingleColumn(ColumnName) {
        /// <param name="ColumnName" type="String">
        /// </param>
        var columnBody = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
        if (columnBody != null) {
            for (var i = 0; i < columnBody.children.length; i++) {
                if (columnBody.children[i].style.display !== 'none') {
                    if (columnBody.children[i].children[1].innerText === ColumnName) {
                        columnBody.children[i].style.backgroundColor = '#EDEDED';
                    }
                }
            }
        }
    },

    _setFormatFields: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_setFormatFields(columnName) {
        /// <param name="columnName" type="String">
        /// </param>
        var customformatter = new com.ivp.rad.controls.neogrid.scripts.CustomFormatter();
        if (Array.contains(window.Object.keys(this._gridCustomFormatting), columnName)) {
            customformatter = this._gridCustomFormatting[columnName];
        }
        else if (Array.contains(window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping), columnName)) {
            customformatter = this._grid.get_GridInfo().GridCustomFormatMapping[columnName];
        }
        this._setFormatFieldsInfo(customformatter);
    },

    _setFormatFieldsInfo: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_setFormatFieldsInfo(formatterInfo) {
        /// <param name="formatterInfo" type="com.ivp.rad.controls.neogrid.scripts.CustomFormatter">
        /// </param>
        var element = document.getElementById(this._grid.get_id() + '_dataTypeOptions');
        switch (formatterInfo.DataType) {
            case com.ivp.rad.controls.neogrid.scripts.FormatterDataType.string:
                (element).selectedIndex = 1;
                document.getElementById(this._grid.get_id() + '_negativeValueOptions').disabled = true;
                document.getElementById(this._grid.get_id() + '_unitTypeOptions').disabled = true;
                document.getElementById(this._grid.get_id() + '_decimalOptionsParent').disabled = true;
                document.getElementById(this._grid.get_id() + '_decimalValue').disabled = true;
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().css({\'pointer-events\':\'none\'})');
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().next().css({\'pointer-events\':\'none\'})');
                break;
            case com.ivp.rad.controls.neogrid.scripts.FormatterDataType.number:
                (element).selectedIndex = 2;
                document.getElementById(this._grid.get_id() + '_negativeValueOptions').disabled = false;
                document.getElementById(this._grid.get_id() + '_unitTypeOptions').disabled = false;
                document.getElementById(this._grid.get_id() + '_decimalOptionsParent').disabled = false;
                document.getElementById(this._grid.get_id() + '_decimalValue').disabled = false;
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().css({\'pointer-events\':\'\'})');
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().next().css({\'pointer-events\':\'\'})');
                break;
            case com.ivp.rad.controls.neogrid.scripts.FormatterDataType.currency:
                (element).selectedIndex = 3;
                document.getElementById(this._grid.get_id() + '_negativeValueOptions').disabled = false;
                document.getElementById(this._grid.get_id() + '_unitTypeOptions').disabled = false;
                document.getElementById(this._grid.get_id() + '_decimalOptionsParent').disabled = false;
                document.getElementById(this._grid.get_id() + '_decimalValue').disabled = false;
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().css({\'pointer-events\':\'\'})');
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().next().css({\'pointer-events\':\'\'})');
                break;
            case com.ivp.rad.controls.neogrid.scripts.FormatterDataType.percentage:
                (element).selectedIndex = 4;
                document.getElementById(this._grid.get_id() + '_negativeValueOptions').disabled = false;
                document.getElementById(this._grid.get_id() + '_unitTypeOptions').disabled = false;
                document.getElementById(this._grid.get_id() + '_decimalOptionsParent').disabled = false;
                document.getElementById(this._grid.get_id() + '_decimalValue').disabled = false;
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().css({\'pointer-events\':\'\'})');
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().next().css({\'pointer-events\':\'\'})');
                break;
            default:
                (element).selectedIndex = 0;
                break;
        }
        element = document.getElementById(this._grid.get_id() + '_negativeValueOptions');
        switch (formatterInfo.NegativeValue) {
            case com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULT:
                (element).selectedIndex = 0;
                break;
            case com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULTBRAC:
                (element).selectedIndex = 1;
                break;
            case com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLORED:
                (element).selectedIndex = 2;
                break;
            case com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLOREDBRAC:
                (element).selectedIndex = 3;
                break;
            default:
                (element).selectedIndex = 0;
                break;
        }
        element = document.getElementById(this._grid.get_id() + '_unitTypeOptions');
        switch (formatterInfo.Unit) {
            case com.ivp.rad.controls.neogrid.scripts.Unit.none:
                (element).selectedIndex = 0;
                break;
            case com.ivp.rad.controls.neogrid.scripts.Unit.thousands:
                (element).selectedIndex = 1;
                break;
            case com.ivp.rad.controls.neogrid.scripts.Unit.millions:
                (element).selectedIndex = 2;
                break;
            case com.ivp.rad.controls.neogrid.scripts.Unit.billions:
                (element).selectedIndex = 3;
                break;
            default:
                (element).selectedIndex = 0;
                break;
        }
        element = document.getElementById(this._grid.get_id() + '_decimalValue');
        (element).value = formatterInfo.DecimalPlaces.toString();
        element = document.getElementById(this._grid.get_id() + '_prefixValue');
        (element).value = formatterInfo.Prefix;
    },

    _resetFormatFieldInfo: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_resetFormatFieldInfo() {
        var element = document.getElementById(this._grid.get_id() + '_dataTypeOptions');
        (element).selectedIndex = 0;
        element = document.getElementById(this._grid.get_id() + '_negativeValueOptions');
        (element).selectedIndex = 0;
        element = document.getElementById(this._grid.get_id() + '_unitTypeOptions');
        (element).selectedIndex = 0;
        element = document.getElementById(this._grid.get_id() + '_decimalValue');
        (element).value = '';
        element = document.getElementById(this._grid.get_id() + '_prefixValue');
        (element).value = '';
        element = document.getElementById(this._grid.get_id() + '_justificationValueOptions');
        (element).selectedIndex = 0;
    },

    _uncheckCOlumnsSelectedFromCheckBox: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_uncheckCOlumnsSelectedFromCheckBox() {
        var columnBody = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
        for (var i = 0; i < columnBody.children.length; i++) {
            if ((columnBody.children[i].children[0].children[0]).getAttribute('isNotFormatted') != null) {
                if (Array.contains(this.formattingColumnList, columnBody.children[i].children[1].innerText)) {
                    (columnBody.children[i].children[0].children[0]).checked = false;
                    columnBody.children[i].style.backgroundColor = '#FFFFFF';
                }
            }
        }
    },

    _unSelectPreviousColumns: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_unSelectPreviousColumns() {
        var columnBody = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
        if (this.currentSeletedColumn !== '') {
            for (var i = 0; i < columnBody.children.length; i++) {
                if ((columnBody.children[i].children[0].children[0]).getAttribute('isNotFormatted') != null) {
                    if (columnBody.children[i].children[1].innerText !== this.currentSeletedColumn) {
                        columnBody.children[i].style.backgroundColor = '#FFFFFF';
                    }
                }
            }
        }
    },

    _unselectColumnOnCheckBoxCheck: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_unselectColumnOnCheckBoxCheck() {
        var columnBody = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
        for (var i = 0; i < columnBody.children.length; i++) {
            if ((columnBody.children[i].children[0].children[0]).getAttribute('isNotFormatted') != null) {
                if (!Array.contains(this.formattingColumnList, columnBody.children[i].children[1].innerText)) {
                    columnBody.children[i].style.backgroundColor = '#FFFFFF';
                }
            }
        }
    },

    _getSearchElements: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getSearchElements() {
        var element = document.getElementById(this._grid.get_id() + '_searchFormatMenu');
        var searchTextParent = document.createElement('DIV');
        var searchText = document.createElement('DIV');
        searchText.innerHTML = '<input type=\"text\" id=\"' + this._grid.get_id() + '_txtSearch\" placeholder=\"Search\" class=\"SearchFormatMenu\" style=\"text-indent: 18px;\">';
        searchTextParent.appendChild(searchText);
        searchTextParent.className = 'xlSearcParent';
        element.appendChild(searchTextParent);
        var FilterText = document.createElement('DIV');
        FilterText.className = 'xlFilterText';
        FilterText.innerText = 'Filter By : ';
        element.appendChild(FilterText);
        FilterText = document.createElement('DIV');
        FilterText.className = 'xlFilterByDataType';
        FilterText.id = this._grid.get_id() + 'filterDataType';
        var select = document.createElement('SELECT');
        select.id = this._grid.get_id() + 'filterDataOptions';
        select.className = 'xlfilterDataOptions';
        this._getDataTypesForFilter(select);
        FilterText.appendChild(select);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(select, 'change', Function.createDelegate(this, this._filterDataType));
        element.appendChild(FilterText);
    },

    _getDataTypesForFilter: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getDataTypesForFilter(dataTypeOptions) {
        /// <param name="dataTypeOptions" type="Object" domElement="true">
        /// </param>
        var element = document.createElement('OPTION');
        element.value = 'All DataTypes';
        element.text = 'All DataTypes';
        element.className = 'xlDataTypeOptionItems';
        element.selected = true;
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.value = 'String';
        element.text = 'String';
        element.className = 'xlDataTypeOptionItems';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Number';
        element.value = 'Number';
        element.className = 'xlDataTypeOptionItems';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Currency';
        element.value = 'Currency';
        element.className = 'xlDataTypeOptionItems';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
        element = document.createElement('OPTION');
        element.text = 'Percentage';
        element.value = 'Percentage';
        element.className = 'xlDataTypeOptionItems';
        this._grid.raddomElement.addOptionElement(dataTypeOptions, element);
    },

    _filterDataType: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_filterDataType(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if ((window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping).length > 0 || window.Object.keys(this._gridCustomFormatting).length > 0)) {
            this._resetFormatFieldInfo();
            switch ((e.target).selectedIndex) {
                case 0:
                    document.getElementById(this._grid.get_id() + '_columnBodyDiv').innerHTML = '';
                    this._getFormattedColumnBody(document.getElementById(this._grid.get_id() + '_columnBodyDiv'));
                    break;
                case 1:
                    this._bindFormattedBody(com.ivp.rad.controls.neogrid.scripts.FormatterDataType.string);
                    break;
                case 2:
                    this._bindFormattedBody(com.ivp.rad.controls.neogrid.scripts.FormatterDataType.number);
                    break;
                case 3:
                    this._bindFormattedBody(com.ivp.rad.controls.neogrid.scripts.FormatterDataType.currency);
                    break;
                case 4:
                    this._bindFormattedBody(com.ivp.rad.controls.neogrid.scripts.FormatterDataType.percentage);
                    break;
            }
            this.formattingColumnList = [];
            document.getElementById(this._grid.get_id() + '_formattedColumnsHeader').style.borderBottom = '2px solid #00bcef';
            document.getElementById(this._grid.get_id() + '_unformattedColumnsHeader').style.borderBottom = '0px';
        }
    },

    _bindFormattedBody: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_bindFormattedBody(dataType) {
        /// <param name="dataType" type="com.ivp.rad.controls.neogrid.scripts.FormatterDataType">
        /// </param>
        var formattedBody = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
        formattedBody.innerHTML = '';
        var columnItem = null;
        var columnDiv = null;
        var checkBoxDiv = null;
        var count = 0;
        var formattedColumnList = window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping);
        for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
            if (Array.contains(formattedColumnList, this._grid.get_GridInfo().ColumnList[i].toString())) {
                var formatterInfo = this._grid.get_GridInfo().GridCustomFormatMapping[this._grid.get_GridInfo().ColumnList[i].toString()];
                if (formatterInfo.DataType === dataType) {
                    if (count === 0) {
                        document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                        this.currentSeletedColumn = this._grid.get_GridInfo().ColumnList[i].toString();
                        this._setFormatFields(this.currentSeletedColumn);
                    }
                    columnItem = document.createElement('DIV');
                    columnItem.className = 'xlFormatColumnDiv';
                    if (count === 0) {
                        columnItem.style.backgroundColor = '#ECECEC';
                    }
                    columnDiv = document.createElement('DIV');
                    checkBoxDiv = document.createElement('DIV');
                    var checkBox = document.createElement('INPUT');
                    checkBox.type = 'checkbox';
                    columnDiv.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                    columnDiv.title = this._grid.get_GridInfo().ColumnList[i].toString();
                    columnDiv.className = 'xlFormatColumnItem';
                    checkBox.checked = false;
                    checkBox.setAttribute('isFormatted', true);
                    checkBoxDiv.className = 'xlFormatColumnCheckBox';
                    checkBoxDiv.appendChild(checkBox);
                    columnItem.appendChild(checkBoxDiv);
                    columnItem.appendChild(columnDiv);
                    formattedBody.appendChild(columnItem);
                    count++;
                }
            }
        }
        formattedColumnList = [];
        formattedColumnList = window.Object.keys(this._gridCustomFormatting);
        for (var i = 0; i < formattedColumnList.length; i++) {
            var formatterInfo = this._gridCustomFormatting[formattedColumnList[i].toString()];
            if (formatterInfo.DataType === dataType) {
                if (count === 0) {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = formattedColumnList[i].toString();
                    this.currentSeletedColumn = formattedColumnList[i].toString();
                    this._setFormatFields(this.currentSeletedColumn);
                }
                columnItem = document.createElement('DIV');
                columnItem.className = 'xlFormatColumnDiv';
                if (count === 0) {
                    columnItem.style.backgroundColor = '#ECECEC';
                }
                columnDiv = document.createElement('DIV');
                checkBoxDiv = document.createElement('DIV');
                var checkBox = document.createElement('INPUT');
                checkBox.type = 'checkbox';
                columnDiv.innerText = formattedColumnList[i].toString();
                columnDiv.title = formattedColumnList[i].toString();
                columnDiv.className = 'xlFormatColumnItem';
                checkBox.checked = false;
                checkBox.setAttribute('isFormatted', true);
                checkBoxDiv.className = 'xlFormatColumnCheckBox';
                checkBoxDiv.appendChild(checkBox);
                columnItem.appendChild(checkBoxDiv);
                columnItem.appendChild(columnDiv);
                formattedBody.appendChild(columnItem);
                count++;
            }
        }
    },

    _fireFormatMenuKeyUp: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_fireFormatMenuKeyUp(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className.indexOf('xlDecimalValue') === -1 && e.target.className.indexOf('xlPrefixValue') === -1) {
            if (e.keyCode === Sys.UI.Key.backspace || e.keyCode === Sys.UI.Key.del || e.keyCode === Sys.UI.Key.space || (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 96 && e.keyCode <= 122)) {
                this._lastKeyPress = new Date().getTime();
                var timeOut = 0;
                timeOut = window.setTimeout(Function.createDelegate(this, function () {
                    var currentTime = new Date().getTime();
                    if (currentTime - this._lastKeyPress > this._interval) {
                        if (this._oldSearchText !== (e.target).value) {
                            this._oldSearchText = (e.target).value;
                            this._filterColumnBody((e.target).value);
                        }
                    }
                }), this._interval + 100);
            }
            if (e.keyCode === Sys.UI.Key.enter) {
                this._filterColumnBody((e.target).value);
                e.preventDefault();
                e.stopPropagation();
            }
        }
        else if (e.target.className === 'xlPrefixValue') {
            this._getTextBoxValue();
        }
    },

    _filterColumnBody: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_filterColumnBody(ColumnName) {
        /// <param name="ColumnName" type="String">
        /// </param>
        var element = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
        element.innerHTML = '';
        if (this._onFormattedList) {
            this._getFormattedSearcBody(element, ColumnName);
        }
        else {
            this._getunformattedSearchBody(element, ColumnName);
        }
    },

    _getFormattedSearcBody: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getFormattedSearcBody(formattedBody, ColumnName) {
        /// <param name="formattedBody" type="Object" domElement="true">
        /// </param>
        /// <param name="ColumnName" type="String">
        /// </param>
        var columnItem = null;
        var columnDiv = null;
        var checkBoxDiv = null;
        var count = 0;
        var formattedColumnList = window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping);
        for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
            if (Array.contains(formattedColumnList, this._grid.get_GridInfo().ColumnList[i].toString())) {
                if (this._grid.get_GridInfo().ColumnList[i].toString().toLowerCase().indexOf(ColumnName.toLowerCase()) !== -1) {
                    if (count === 0) {
                        document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                        this.currentSeletedColumn = this._grid.get_GridInfo().ColumnList[i].toString();
                        this._setFormatFields(this.currentSeletedColumn);
                    }
                    columnItem = document.createElement('DIV');
                    columnItem.className = 'xlFormatColumnDiv';
                    if (count === 0) {
                        columnItem.style.backgroundColor = '#ECECEC';
                    }
                    columnDiv = document.createElement('DIV');
                    checkBoxDiv = document.createElement('DIV');
                    var checkBox = document.createElement('INPUT');
                    checkBox.type = 'checkbox';
                    columnDiv.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                    columnDiv.title = this._grid.get_GridInfo().ColumnList[i].toString();
                    columnDiv.className = 'xlFormatColumnItem';
                    checkBox.checked = false;
                    checkBox.setAttribute('isFormatted', true);
                    checkBoxDiv.className = 'xlFormatColumnCheckBox';
                    checkBoxDiv.appendChild(checkBox);
                    columnItem.appendChild(checkBoxDiv);
                    columnItem.appendChild(columnDiv);
                    formattedBody.appendChild(columnItem);
                    count++;
                }
            }
        }
        formattedColumnList = [];
        formattedColumnList = window.Object.keys(this._gridCustomFormatting);
        for (var i = 0; i < formattedColumnList.length; i++) {
            if (formattedColumnList[i].toString().toLowerCase().indexOf(ColumnName.toLowerCase()) !== -1) {
                if (count === 0) {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = formattedColumnList[i].toString();
                    this.currentSeletedColumn = formattedColumnList[i].toString();
                    this._setFormatFields(this.currentSeletedColumn);
                }
                columnItem = document.createElement('DIV');
                columnItem.className = 'xlFormatColumnDiv';
                if (count === 0) {
                    columnItem.style.backgroundColor = '#ECECEC';
                }
                columnDiv = document.createElement('DIV');
                checkBoxDiv = document.createElement('DIV');
                var checkBox = document.createElement('INPUT');
                checkBox.type = 'checkbox';
                columnDiv.innerText = formattedColumnList[i].toString();
                columnDiv.title = formattedColumnList[i].toString();
                columnDiv.className = 'xlFormatColumnItem';
                checkBox.checked = false;
                checkBox.setAttribute('isFormatted', true);
                checkBoxDiv.className = 'xlFormatColumnCheckBox';
                checkBoxDiv.appendChild(checkBox);
                columnItem.appendChild(checkBoxDiv);
                columnItem.appendChild(columnDiv);
                formattedBody.appendChild(columnItem);
                count++;
            }
        }
        eval('$(\"#' + this._grid.get_id() + '_columnBodyDiv' + '\").slimscrollNew({height : \'' + 238 + 'px\', size:\'4px\' })');
    },

    _getunformattedSearchBody: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getunformattedSearchBody(unformattedBody, ColumnName) {
        /// <param name="unformattedBody" type="Object" domElement="true">
        /// </param>
        /// <param name="ColumnName" type="String">
        /// </param>
        var columnItem = null;
        var columnDiv = null;
        var checkBoxDiv = null;
        var count = 0;
        var formattedColumnList = window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping);
        var formattedList = window.Object.keys(this._gridCustomFormatting);
        for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
            if (!(Array.contains(formattedColumnList, this._grid.get_GridInfo().ColumnList[i].toString()) || Array.contains(formattedList, this._grid.get_GridInfo().ColumnList[i].toString()))) {
                if (this._grid.get_GridInfo().ColumnList[i].toString().toLowerCase().indexOf(ColumnName.toLowerCase()) !== -1) {
                    if (count === 0) {
                        document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                        this.currentSeletedColumn = this._grid.get_GridInfo().ColumnList[i].toString();
                    }
                    columnItem = document.createElement('DIV');
                    columnItem.className = 'xlFormatColumnDiv';
                    if (count === 0) {
                        columnItem.style.backgroundColor = '#ECECEC';
                    }
                    columnDiv = document.createElement('DIV');
                    checkBoxDiv = document.createElement('DIV');
                    var checkBox = document.createElement('INPUT');
                    checkBox.type = 'checkbox';
                    columnDiv.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                    columnDiv.title = this._grid.get_GridInfo().ColumnList[i].toString();
                    columnDiv.className = 'xlFormatColumnItem';
                    checkBox.checked = false;
                    checkBox.setAttribute('isNotFormatted', true);
                    checkBoxDiv.className = 'xlFormatColumnCheckBox';
                    checkBoxDiv.appendChild(checkBox);
                    columnItem.appendChild(checkBoxDiv);
                    columnItem.appendChild(columnDiv);
                    unformattedBody.appendChild(columnItem);
                    count++;
                }
            }
        }
        for (var i = 0; i < formattedColumnList.length; i++) {
            if (count === 0) {
                document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                this.currentSeletedColumn = this._grid.get_GridInfo().ColumnList[i].toString();
            }
            columnItem = document.createElement('DIV');
            columnItem.className = 'xlFormatColumnDiv';
            if (count === 0) {
                columnItem.style.backgroundColor = '#ECECEC';
            }
            columnDiv = document.createElement('DIV');
            checkBoxDiv = document.createElement('DIV');
            var checkBox = document.createElement('INPUT');
            checkBox.type = 'checkbox';
            columnDiv.innerText = formattedColumnList[i].toString();
            columnDiv.title = formattedColumnList[i].toString();
            columnDiv.className = 'xlFormatColumnItem';
            checkBox.checked = false;
            checkBox.setAttribute('isFormatted', true);
            checkBoxDiv.className = 'xlFormatColumnCheckBox';
            checkBoxDiv.appendChild(checkBox);
            columnItem.appendChild(checkBoxDiv);
            columnItem.appendChild(columnDiv);
            columnItem.style.backgroundColor = '#EDEDED';
            unformattedBody.appendChild(columnItem);
            count++;
        }
    },

    _setFirstColumnAsDefault: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_setFirstColumnAsDefault() {
        var element = document.getElementById(this._grid.get_id() + '_columnBodyDiv');
        if (element != null) {
            for (var i = 0; i < element.children.length; i++) {
                if (element.children[i].className.indexOf('ui-effects-wrapper') === -1) {
                    document.getElementById(this._grid.get_id() + '_formatColumnName').innerText = element.children[i].children[1].innerText;
                    this.currentSeletedColumn = element.children[i].children[1].innerText;
                    element.children[i].style.backgroundColor = '#ECECEC';
                    if (Array.contains(window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping), this.currentSeletedColumn)) {
                        this._setFormatFields(this.currentSeletedColumn);
                    }
                    else {
                        document.getElementById(this._grid.get_id() + '_removeFormatting').style.display = 'none';
                    }
                    break;
                }
            }
        }
    },

    _dataTypeChangeHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_dataTypeChangeHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        switch ((e.target).selectedIndex) {
            case 0:
                (document.getElementById(this._grid.get_id() + '_unitTypeOptions')).disabled = true;
                (document.getElementById(this._grid.get_id() + '_negativeValueOptions')).disabled = true;
                document.getElementById(this._grid.get_id() + '_decimalOptionsParent').disabled = true;
                document.getElementById(this._grid.get_id() + '_decimalValue').disabled = true;
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().css({\'pointer-events\':\'none\'})');
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().next().css({\'pointer-events\':\'none\'})');
                document.getElementById(this._grid.get_id() + '_previewGroup').style.display = 'none';
                break;
            case 1:
            case 4:
                (document.getElementById(this._grid.get_id() + '_unitTypeOptions')).disabled = true;
                (document.getElementById(this._grid.get_id() + '_negativeValueOptions')).disabled = true;
                document.getElementById(this._grid.get_id() + '_decimalOptionsParent').disabled = true;
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().css({\'pointer-events\':\'none\'})');
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().next().css({\'pointer-events\':\'none\'})');
                document.getElementById(this._grid.get_id() + '_decimalValue').disabled = true;
                document.getElementById(this._grid.get_id() + '_previewGroup').style.display = '';
                break;
            case 2:
            case 3:
                (document.getElementById(this._grid.get_id() + '_unitTypeOptions')).disabled = false;
                (document.getElementById(this._grid.get_id() + '_negativeValueOptions')).disabled = false;
                document.getElementById(this._grid.get_id() + '_decimalOptionsParent').disabled = false;
                document.getElementById(this._grid.get_id() + '_decimalValue').disabled = false;
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().css({\'pointer-events\':\'\'})');
                eval('$(\'#' + this._grid.get_id() + '_decimalValue\').next().next().css({\'pointer-events\':\'\'})');
                document.getElementById(this._grid.get_id() + '_previewGroup').style.display = '';
                break;
        }
        this._getTextBoxValue();
    },

    _unitTypeChangeHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_unitTypeChangeHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._getTextBoxValue();
    },

    _negativeValueChangeHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_negativeValueChangeHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        this._getTextBoxValue();
    },

    _decimalKeyUpHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_decimalKeyUpHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.keyCode === Sys.UI.Key.up || e.keyCode === Sys.UI.Key.down) {
            this._getTextBoxValue();
        }
    },

    _getTextBoxValue: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getTextBoxValue() {
        switch ((document.getElementById(this._grid.get_id() + '_dataTypeOptions')).selectedIndex) {
            case 0:
                break;
            case 1:
                (document.getElementById(this._grid.get_id() + '_textValue')).value = 'Text';
                break;
            default:
                var decimalPlaces = 0;
                if ((document.getElementById(this._grid.get_id() + '_decimalValue')).value !== '') {
                    decimalPlaces = Number.parseInvariant((document.getElementById(this._grid.get_id() + '_decimalValue')).value);
                }
                var formatString = '{0:N' + decimalPlaces + '}';
                var suffix = '';
                var number = 123456;
                var element = document.getElementById(this._grid.get_id() + '_unitTypeOptions');
                switch (element.selectedIndex) {
                    case 0:
                    default:
                        break;
                    case 1:
                        number = number / 1000;
                        suffix = ' K';
                        break;
                    case 3:
                        number = number / 1000000;
                        suffix = ' M';
                        break;
                    case 4:
                        number = number / Math.pow(10, 10);
                        suffix = ' B';
                        break;
                }
                var formattedNumber = String.format(formatString, number);
                var prefix = '';
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_prefixValue') != null) {
                    prefix = (document.getElementById(this._grid.get_GridInfo().GridId + '_prefixValue')).value;
                }
                formattedNumber = prefix + formattedNumber + suffix;
                element = document.getElementById(this._grid.get_id() + '_negativeValueOptions');
                switch (element.selectedIndex) {
                    case 0:
                    default:
                        break;
                    case 1:
                        formattedNumber = '(' + formattedNumber + ')';
                        break;
                    case 2:
                        document.getElementById(this._grid.get_id() + '_textValue').style.color = 'Red';
                        break;
                    case 3:
                        formattedNumber = '(' + formattedNumber + ')';
                        document.getElementById(this._grid.get_id() + '_textValue').style.color = 'Red';
                        break;
                }
                (document.getElementById(this._grid.get_id() + '_textValue')).value = formattedNumber;
                break;
        }
    },

    _disableFilterDataType: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_disableFilterDataType() {
        if (this._onFormattedList) {
            document.getElementById(this._grid.get_id() + 'filterDataType').style.display = '';
            document.getElementById(this._grid.get_id() + 'filterDataType').previousSibling.style.display = '';
        }
        else {
            document.getElementById(this._grid.get_id() + 'filterDataType').style.display = 'none';
            document.getElementById(this._grid.get_id() + 'filterDataType').previousSibling.style.display = 'none';
        }
    },

    _removeFormattingInfo: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_removeFormattingInfo() {
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_CUSTOM_FORMATTING, Sys.Serialization.JavaScriptSerializer.serialize(this._gridCustomFormatting) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.removeFormattingList), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_CUSTOM_FORMATTING);
        this.removeFormattingList = [];
        this._resetFormatFieldInfo();
    },

    _createViewsMenu: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createViewsMenu() {
        this._showHideListResizeStart = false;
        this._columnNamesList = [];
        var showHideBodyDiv = document.getElementById(this._grid.get_id() + '_showHideColumnBody');
        var HiddenColumnBody = document.getElementById(this._grid.get_id() + '_hiddenColumnBody');
        showHideBodyDiv.innerHTML = '';
        HiddenColumnBody.innerHTML = '';
        var count = 0;
        var columNames = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
        var HiddenColumnList = [];
        for (var i = 0; i < this._grid.get_GridInfo().ColumnsToHide.length; i++) {
            if (Array.contains(columNames, (this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName)) {
                Array.add(HiddenColumnList, this._grid.get_GridInfo().ColumnNameMapping[(this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName]);
            }
            else {
                Array.add(HiddenColumnList, (this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName);
            }
        }
        var columnItem = null;
        var columnDiv = null;
        var checkBoxDiv = null;
        for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
            if (!Array.contains(HiddenColumnList, this._grid.get_GridInfo().ColumnList[i].toString()) && !Array.contains(this._listHiddenColumns, this._grid.get_GridInfo().ColumnList[i].toString())) {
                count++;
                Array.add(this._columnNamesList, this._grid.get_GridInfo().ColumnList[i].toString());
                columnItem = document.createElement('DIV');
                columnItem.className = 'xlShowHideColumn';
                columnDiv = document.createElement('DIV');
                checkBoxDiv = document.createElement('DIV');
                var checkBox = document.createElement('INPUT');
                checkBox.type = 'checkbox';
                columnDiv.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                columnDiv.title = this._grid.get_GridInfo().ColumnList[i].toString();
                columnDiv.className = 'xlShowHideColumnItem';
                checkBox.checked = true;
                checkBox.setAttribute('isVisibleColumn', true);
                checkBoxDiv.className = 'xlshowHideCheckBox';
                checkBoxDiv.appendChild(checkBox);
                columnItem.appendChild(columnDiv);
                columnItem.appendChild(checkBoxDiv);
                showHideBodyDiv.appendChild(columnItem);
            }
        }
        for (var i = 0; i < this._listVisibleColumns.length; i++) {
            count++;
            columnItem = document.createElement('DIV');
            columnItem.className = 'xlShowHideColumn';
            columnDiv = document.createElement('DIV');
            checkBoxDiv = document.createElement('DIV');
            var checkBox = document.createElement('INPUT');
            checkBox.type = 'checkbox';
            columnDiv.innerText = this._listVisibleColumns[i].toString();
            columnDiv.title = this._listVisibleColumns[i].toString();
            columnDiv.className = 'xlShowHideColumnItem';
            checkBox.checked = true;
            checkBox.setAttribute('isVisibleColumn', true);
            checkBoxDiv.className = 'xlshowHideCheckBox';
            checkBoxDiv.appendChild(checkBox);
            columnItem.appendChild(columnDiv);
            columnItem.appendChild(checkBoxDiv);
            showHideBodyDiv.appendChild(columnItem);
        }
    },

    _createShowHideMenuGear: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createShowHideMenuGear() {
        this._showHideListResizeStart = false;
        this._getBodyForShowHide();
        this._columnNamesList = [];
        var showHideBodyDiv = document.getElementById(this._grid.get_id() + '_showHideColumnBody');
        var HiddenColumnBody = document.getElementById(this._grid.get_id() + '_hiddenColumnBody');
        showHideBodyDiv.innerHTML = '';
        HiddenColumnBody.innerHTML = '';
        var count = 0;
        var columNames = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
        var HiddenColumnList = [];
        for (var i = 0; i < this._grid.get_GridInfo().ColumnsToHide.length; i++) {
            if (Array.contains(columNames, (this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName)) {
                Array.add(HiddenColumnList, this._grid.get_GridInfo().ColumnNameMapping[(this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName]);
            }
            else {
                Array.add(HiddenColumnList, (this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName);
            }
        }
        var columnItem = null;
        var columnDiv = null;
        var checkBoxDiv = null;
        for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
            if (!Array.contains(HiddenColumnList, this._grid.get_GridInfo().ColumnList[i].toString()) && !Array.contains(this._listHiddenColumns, this._grid.get_GridInfo().ColumnList[i].toString())) {
                count++;
                Array.add(this._columnNamesList, this._grid.get_GridInfo().ColumnList[i].toString());
                columnItem = document.createElement('DIV');
                columnItem.className = 'xlShowHideColumn';
                columnDiv = document.createElement('DIV');
                checkBoxDiv = document.createElement('DIV');
                var checkBox = document.createElement('INPUT');
                checkBox.type = 'checkbox';
                columnDiv.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                columnDiv.title = this._grid.get_GridInfo().ColumnList[i].toString();
                columnDiv.className = 'xlShowHideColumnItem';
                checkBox.checked = true;
                checkBox.setAttribute('isVisibleColumn', true);
                checkBoxDiv.className = 'xlshowHideCheckBox';
                checkBoxDiv.appendChild(checkBox);
                columnItem.appendChild(columnDiv);
                columnItem.appendChild(checkBoxDiv);
                showHideBodyDiv.appendChild(columnItem);
            }
        }
        for (var i = 0; i < this._listVisibleColumns.length; i++) {
            count++;
            columnItem = document.createElement('DIV');
            columnItem.className = 'xlShowHideColumn';
            columnDiv = document.createElement('DIV');
            checkBoxDiv = document.createElement('DIV');
            var checkBox = document.createElement('INPUT');
            checkBox.type = 'checkbox';
            columnDiv.innerText = this._listVisibleColumns[i].toString();
            columnDiv.title = this._listVisibleColumns[i].toString();
            columnDiv.className = 'xlShowHideColumnItem';
            checkBox.checked = true;
            checkBox.setAttribute('isVisibleColumn', true);
            checkBoxDiv.className = 'xlshowHideCheckBox';
            checkBoxDiv.appendChild(checkBox);
            columnItem.appendChild(columnDiv);
            columnItem.appendChild(checkBoxDiv);
            showHideBodyDiv.appendChild(columnItem);
        }
        for (var i = 0; i < this._grid.get_GridInfo().ColumnsToHide.length; i++) {
            var hiddenColumn = this._grid.get_GridInfo().ColumnsToHide[i];
            if (!hiddenColumn.isDefault) {
                if (!Array.contains(this._listVisibleColumns, hiddenColumn.ColumnName)) {
                    columnItem = document.createElement('DIV');
                    columnItem.className = 'xlShowHideColumnHiddenColumnParent';
                    columnDiv = document.createElement('DIV');
                    checkBoxDiv = document.createElement('DIV');
                    var checkBox = document.createElement('INPUT');
                    checkBox.type = 'checkbox';
                    columnDiv.innerText = this._getColumnNameFromMapping(hiddenColumn.ColumnName);
                    columnDiv.title = this._getColumnNameFromMapping(hiddenColumn.ColumnName);
                    columnDiv.className = 'xlShowHideColumnItem HiddenColumn';
                    checkBox.checked = false;
                    checkBox.setAttribute('isVisibleColumn', false);
                    checkBoxDiv.className = 'xlshowHideCheckBox';
                    checkBoxDiv.appendChild(checkBox);
                    columnItem.appendChild(columnDiv);
                    columnItem.appendChild(checkBoxDiv);
                    HiddenColumnBody.appendChild(columnItem);
                }
            }
        }
        for (var i = 0; i < this._listHiddenColumns.length; i++) {
            columnItem = document.createElement('DIV');
            columnItem.className = 'xlShowHideColumnHiddenColumnParent';
            columnDiv = document.createElement('DIV');
            checkBoxDiv = document.createElement('DIV');
            var checkBox = document.createElement('INPUT');
            checkBox.type = 'checkbox';
            columnDiv.innerText = this._listHiddenColumns[i].toString();
            columnDiv.title = this._listHiddenColumns[i].toString();
            columnDiv.className = 'xlShowHideColumnItem HiddenColumn';
            checkBox.checked = false;
            checkBox.setAttribute('isVisibleColumn', false);
            checkBoxDiv.className = 'xlshowHideCheckBox';
            checkBoxDiv.appendChild(checkBox);
            columnItem.appendChild(columnDiv);
            columnItem.appendChild(checkBoxDiv);
            HiddenColumnBody.appendChild(columnItem);
        }
        if (this._grid.get_GridInfo().ColumnsToHide.length === 0) {
            if (document.getElementById(this._grid.get_id() + '_hiddenColumnHeader') != null) {
                document.getElementById(this._grid.get_id() + '_hiddenColumnHeader').style.display = 'none';
            }
        }
        else {
            if (document.getElementById(this._grid.get_id() + '_hiddenColumnHeader') != null) {
                document.getElementById(this._grid.get_id() + '_hiddenColumnHeader').style.display = '';
                document.getElementById(this._grid.get_id() + '_hiddenColumnHeader').nextSibling.style.display = '';
            }
        }
        if (count > 0) {
            if (document.getElementById(this._grid.get_id() + '_visibleColumnHeader') != null) {
                document.getElementById(this._grid.get_id() + '_visibleColumnHeader').style.display = '';
                document.getElementById(this._grid.get_id() + '_visibleColumnHeader').nextSibling.style.display = '';
            }
        }
        var hiddenItemsCount = (HiddenColumnBody.children.length - this._listVisibleColumns.length);
        var HiddenbodyHeight = ((HiddenColumnBody.children.length - this._listVisibleColumns.length) > 6) ? 6 : (HiddenColumnBody.children.length - this._listVisibleColumns.length);
        eval('$(\"#' + this._grid.get_id() + '_hiddenColumnBody' + '\").slimscrollNew({height : \'' + (20 * ((HiddenbodyHeight > 0) ? HiddenbodyHeight : 0)) + 'px\', size:\'4px\' })');
        HiddenbodyHeight = ((showHideBodyDiv.children.length - this._listHiddenColumns.length) > 6) ? 6 : (showHideBodyDiv.children.length - this._listHiddenColumns.length);
        eval('$(\"#' + this._grid.get_id() + '_showHideColumnBody' + '\").slimscrollNew({height : \'' + (20 * ((HiddenbodyHeight > 0) ? HiddenbodyHeight : 0)) + 'px\', size:\'4px\' })');
        showHideBodyDiv.style.maxHeight = ((showHideBodyDiv.children.length - this._listHiddenColumns.length) * 20) + 'px';
        if (showHideBodyDiv.parentNode != null) {
            showHideBodyDiv.parentNode.style.maxHeight = ((showHideBodyDiv.children.length - this._listHiddenColumns.length) * 20) + 'px';
        }
        var left = 0;
        if (document.getElementById(this._grid.get_id() + '_configutation') != null) {
            left = document.getElementById(this._grid.get_id() + '_configutation').offsetWidth;
        }
        document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').style.top = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_configutation\').offset().top + 5') + 'px';
        document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').style.left = eval('$(\'#' + this._grid.get_GridInfo().GridId + '_configutation\').offset().left') + (left - 10) + 'px';
        document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').style.maxHeight = (80 + (hiddenItemsCount * 20) + ((showHideBodyDiv.children.length - this._listHiddenColumns.length) * 20)) + 'px';
        if (showHideBodyDiv.children.length - this._listHiddenColumns.length > 6) {
            document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').style.height = ((hiddenItemsCount > 0) ? 216 : 188) + (((hiddenItemsCount > 6) ? 6 : hiddenItemsCount) * 20) + 'px';
        }
        else {
            document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').style.height = ((hiddenItemsCount > 0) ? 96 : 68) + (20 * (showHideBodyDiv.children.length - this._listHiddenColumns.length)) + (((hiddenItemsCount > 6) ? 6 : hiddenItemsCount) * 20) + 'px';
        }
        document.getElementById(this._grid.get_id() + '_showHideColumnsDiv').style.display = '';
        eval('$(\'.xlShowHideColumnBody\' ).sortable({ axis: \'y\', containment: \'parent\',items : \'.xlShowHideColumn\' })');
    },

    _getColumnNameFromMapping: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getColumnNameFromMapping(columnNAme) {
        /// <param name="columnNAme" type="String">
        /// </param>
        /// <returns type="String"></returns>
        var columNames = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
        if (Array.contains(columNames, columnNAme)) {
            return this._grid.get_GridInfo().ColumnNameMapping[columnNAme].toString();
        }
        return columnNAme;
    },

    _getRealColumnnName: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getRealColumnnName(columnNAme) {
        /// <param name="columnNAme" type="String">
        /// </param>
        /// <returns type="String"></returns>
        var $dict1 = this._grid.get_GridInfo().ColumnNameMapping;
        for (var $key2 in $dict1) {
            var entry = { key: $key2, value: $dict1[$key2] };
            if (entry.value.toString() === columnNAme) {
                return entry.key;
            }
        }
        return columnNAme;
    },

    _getShowHideColumnDropDown: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getShowHideColumnDropDown(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var ShowHideColumnCells = tr.insertCell(index);
        ShowHideColumnCells.style.width = '8%';
        ShowHideColumnCells.setAttribute('isgridupperheader', true);
        ShowHideColumnCells.id = this._grid.elementIDManager.get_showHideColumnDivID();
        ShowHideColumnCells.className = 'xlshowHideColumns';
        ShowHideColumnCells.title = 'Show Hide Columns';
        ShowHideColumnCells.style.cursor = 'pointer';
        var openDropDown = this._grid.elementHelper.get_divElement();
        openDropDown.innerText = 'Show / Hide Columns';
        openDropDown.className = 'xlshowhideColumnDropDown';
        var arrowInShowHide = document.createElement('DIV');
        arrowInShowHide.className = 'xlarrowinShowHide fa fa-caret-down';
        ShowHideColumnCells.appendChild(openDropDown);
        ShowHideColumnCells.appendChild(arrowInShowHide);
        if (this._grid.get_GridInfo().IsMasterChildGrid) {
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(document.body, 'click', Function.createDelegate(this, this.clickedOnBodyHandler));
        }
    },

    createGroupingDiv: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createGroupingDiv() {
        var GroupingCell = document.getElementById(this._grid.elementIDManager.get_groupingInUpperHeader());
        this._mainDivInDropDown = document.createElement('DIV');
        this._mainDivInDropDown.style.maxHeight = '400px';
        var SearchInput = document.createElement('INPUT');
        SearchInput.id = this._grid.get_GridInfo().GridId + '_SearchInGroups';
        SearchInput.type = 'text';
        SearchInput.className = 'form-control SearchInGroupDiv';
        SearchInput.style.height = '20px';
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(SearchInput, 'keyup', Function.createDelegate(this, this._searchInGroupDivs));
        this._mainDivInDropDown.appendChild(SearchInput);
        this._toBeGroupedDiv = document.createElement('DIV');
        this._toBeGroupedDiv.id = this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv';
        this._toBeGroupedDiv.className = 'ToBeGroupedDiv';
        this._toBeGroupedDiv.style.height = '0px';
        this._toBeGroupedDiv.style.borderBottom = '0px solid';
        this._mainDivInDropDown.appendChild(this._toBeGroupedDiv);
        var ColumnNamesDiv = document.createElement('DIV');
        ColumnNamesDiv.id = this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown';
        for (var i = 0; i < this._grid.get_GridInfo().AllColumnList.length; i++) {
            var ChildDivInDropDown = document.createElement('DIV');
            var str = this._grid.get_GridInfo().AllColumnList[i];
            if (Array.indexOf(this._grid.get_GridInfo().NumericColumnName, str) === -1) {
                ChildDivInDropDown.innerText = str;
                ChildDivInDropDown.setAttribute('added', 'false');
                ChildDivInDropDown.setAttribute('class', 'DivInGroupByDropDown');
                ChildDivInDropDown.setAttribute('columnIndexInAllColumnList', this._grid.get_GridInfo().AllColumnList.indexOf(str));
                ColumnNamesDiv.appendChild(ChildDivInDropDown);
            }
        }
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(ColumnNamesDiv, 'click', Function.createDelegate(this, this._selectDivClickHandler));
        this._mainDivInDropDown.appendChild(ColumnNamesDiv);
        var ApplyDiv = document.createElement('DIV');
        var TextInApplyDiv = document.createElement('DIV');
        TextInApplyDiv.innerText = 'Apply';
        TextInApplyDiv.setAttribute('style', 'width:88%;float:left;');
        ApplyDiv.appendChild(TextInApplyDiv);
        var ArrowInApplyDiv = document.createElement('DIV');
        ArrowInApplyDiv.className = 'ArrowCSS';
        ArrowInApplyDiv.setAttribute('style', 'float:right;vertical-align:middle;line-height:21px;');
        ApplyDiv.appendChild(ArrowInApplyDiv);
        ApplyDiv.setAttribute('class', 'ApplyCSS');
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(ApplyDiv, 'click', Function.createDelegate(this, this._applyDivHandler));
        this._mainDivInDropDown.appendChild(ApplyDiv);
        this._mainDivInDropDown.setAttribute('class', 'MainDivClassInGroupBy');
        this._mainDivInDropDown.style.display = 'none';
        this._mainDivInDropDown.style.left = (GroupingCell.offsetLeft + 10) + 'px';
        this._grid.get_element().parentNode.appendChild(this._mainDivInDropDown);
    },

    _getGroupingDropDown: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_getGroupingDropDown(tr, index) {
        /// <param name="tr" type="Object" domElement="true">
        /// </param>
        /// <param name="index" type="Number" integer="true">
        /// </param>
        var GroupingCell = tr.insertCell(index);
        GroupingCell.style.width = '6%';
        GroupingCell.setAttribute('isgridupperheader', true);
        GroupingCell.id = this._grid.elementIDManager.get_groupingInUpperHeader();
        GroupingCell.className = 'groupingInUpperHeader';
        GroupingCell.title = 'Select Items for grouping';
        GroupingCell.style.cursor = 'pointer';
        if (this._grid.get_GridInfo().RequireMiniatureVersion) {
            GroupingCell.style.display = 'none';
        }
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(GroupingCell, 'click', Function.createDelegate(this, this._groupByClickedhandler));
        var OpenDropDown = document.createElement('DIV');
        OpenDropDown.innerText = 'Group By ';
        OpenDropDown.setAttribute('style', 'float:left;margin-left:10px;font-family:\'Lato\' sans-serif; font-size:12px;');
        OpenDropDown.id = 'GroupByTextForDropDown';
        var arrowInGroupBy = document.createElement('DIV');
        arrowInGroupBy.className = 'fa fa-caret-down';
        arrowInGroupBy.setAttribute('style', 'margin-top:3px;margin-left:10px');
        arrowInGroupBy.id = 'ArrowInGroupByDropDown';
        OpenDropDown.className = '';
        GroupingCell.appendChild(OpenDropDown);
        GroupingCell.appendChild(arrowInGroupBy);
    },

    clickedOnBodyHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$clickedOnBodyHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        //if (!$(e.target.parentNode).hasClass("TextAreaParent")) {
        //    for (var i = 0; i < $(".TextAreaParent").length; i++) {
        //        if ($(".TextAreaParent")[i].style.width == "350px") {
        //            $(".TextAreaParent")[i].parentNode.style.position = 'relative';
        //            $(".TextAreaParent")[i].style.width = 'auto';
        //            $(".TextAreaParent")[i].style.height = 'auto';
        //            $($(".TextAreaParent").find(".xlEditGridTextBox"))[i].style.width = '100%';
        //            $($(".TextAreaParent").find(".xlEditGridTextBox"))[i].style.height = '22px';
        //        }
        //    }
        //}
        if (this._grid.get_GridInfo().IsAdvanceSearch) {
            if (eval('$(e.target).closest(\".existingColumnNames\").length') === 0 && eval('$(\".existingColumnNames\").css(\"height\")') === '300px') {
                eval('$(\".existingColumnNames\").css({\"height\":\"20px\"});');
            }
        }
        if (e.target.className === 'DivToBeGroupedInGroupDropDown' || e.target.id === this._grid.elementIDManager.get_groupingInUpperHeader() || (e.target.parentNode != null && e.target.parentNode.id === this._grid.elementIDManager.get_groupingInUpperHeader()) || (e.target.parentNode != null && e.target.parentNode.className === 'ToBeGroupedDiv') || (e.target.parentNode != null && e.target.parentNode.parentNode != null && e.target.parentNode.parentNode.className === 'ToBeGroupedDiv')) {
        }
        else if (Number.parseInvariant(eval('$(e.target).closest(\".MainDivClassInGroupBy\").length').toString()) !== 0 || Number.parseInvariant(eval('$(e.target).closest(\".MainDivInDragDrop\").length').toString()) !== 0) {
        }
        else if (Number.parseInvariant(eval('$(e.target).closest(\".maingroupDragButton\").length').toString()) !== 0 || Number.parseInvariant(eval('$(e.target).closest(\".maingroupDragButtonPnL\").length').toString()) !== 0) {
            if (this._mainDivInDropDown != null) {
                if (this._mainDivInDropDown.style.display === '') {
                    this._groupByClickedhandler(e);
                }
            }
        }
        else {
            if (this._mainDivInDropDown != null) {
                if (Number.parseInvariant(eval('$(e.target).closest(\".MainDivClassInGroupBy\").length').toString()) === 0 && Number.parseInvariant(eval('$(e.target).closest(\".groupingInUpperHeader\").length').toString()) === 0) {
                    eval('$(\".MainDivClassInGroupBy\").remove()');
                    this._mainDivInDropDown = null;
                }
            }
            if (this._mainDivInDropDown != null) {
                if (this._mainDivInDropDown.style.display === '') {
                    this._groupByClickedhandler(e);
                }
            }
        }
        if (!(e.target.id === this._grid.get_GridInfo().GridId + '_SearchInMainGrid' || (e.target.parentNode != null && e.target.parentNode.id === this._grid.get_GridInfo().GridId + '_SearchInMainGrid'))) {
            var SearchMainDiv = (eval('$(\"#' + this._grid.get_GridInfo().GridId + '_SearchInMainGrid\")[0]'));
            if (SearchMainDiv != null) {
                var searchDiv = document.getElementById(this._grid.get_GridInfo().GridId + '_txtSearch');
                if (searchDiv.value.length === 0) {
                    if (SearchMainDiv.className === 'MainSearchBox SearchBoxHidden SearchBoxVisible') {
                        SearchMainDiv.className = 'MainSearchBox SearchBoxHidden';
                    }
                }
            }
        }
        if ($(e.target).hasClass("TooltipFooter"))
        {
            var dataToSend = [];
            var ActualObj = {};
            ActualObj.ColumnName = $(e.target).parent().find(".RADMaskingColumnNmaeDiv").attr("actualcolumnnmae");
            if ($(e.target).parent().find(".RADMaskingSuggest").text() == "Thousands(K)") {
                ActualObj.TypeOfMasking = 2;
            }
            else if ($(e.target).parent().find(".RADMaskingSuggest").text() == "Millions(M)") {
                ActualObj.TypeOfMasking = 1;
            }
            else if ($(e.target).parent().find(".RADMaskingSuggest").text() == "Billions(B)") {
                ActualObj.TypeOfMasking = 0;
            }
            dataToSend.push(ActualObj);
            if ($(e.target).text() == "APPLY") {
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_MASKING, Sys.Serialization.JavaScriptSerializer.serialize(dataToSend) + "|APPLY", com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_MASKING)
            }
            else if ($(e.target).text() == "REVERT") {
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_MASKING, Sys.Serialization.JavaScriptSerializer.serialize(dataToSend) + "|REMOVE", com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_MASKING)
            }
        }
        if (e.target.id !== this._grid.get_id() + '_btnClearFunctionality') {
            if (eval('$(e.target).closest(\'#' + this._grid.get_id() + '_ClearFunctionalityDiv\').length') === 0) {
                if (document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv') != null) {
                    document.getElementById(this._grid.get_id() + '_ClearFunctionalityDiv').style.display = 'none';
                }
            }
        }
        if (e.target.id !== this._grid.get_id() + '_configutation') {
            if (eval('$(e.target).closest(\'#' + this._grid.get_id() + '_ConfigurationSettings\').length') === 0) {
                if (document.getElementById(this._grid.get_id() + '_ConfigurationSettings') != null) {
                    document.getElementById(this._grid.get_id() + '_ConfigurationSettings').style.display = 'none';
                    if (document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className.toString().indexOf('xlOpacityForGrid') !== -1) {
                        document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = '';
                        document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').className = '';
                        document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = '';
                    }
                }
            }
        }
        if (e.target.className !== 'xlSettingsChild') {
            if (eval('$(e.target).closest(\'#' + this._grid.get_id() + '_showHideColumnsDiv\').length') === 0) {
                if (document.getElementById(this._grid.get_id() + '_showHideColumnsDiv') != null) {
                    this._grid.get_element().parentNode.removeChild(document.getElementById(this._grid.get_id() + '_showHideColumnsDiv'));
                }
            }
        }
        if (e.target.className !== 'xlSettingsChild') {
            if (eval('$(e.target).closest(\'#' + this._grid.get_id() + '_rankingMainDiv\').length') === 0) {
                if (document.getElementById(this._grid.get_id() + '_rankingMainDiv') != null) {
                    this._grid.get_element().parentNode.removeChild(document.getElementById(this._grid.get_id() + '_rankingMainDiv'));
                }
            }
        }
        if (e.target.id !== this._grid.get_id() + '_configutation' && e.target.className !== 'xlSettingsChild') {
            if (eval('$(e.target).closest(\'#' + this._grid.get_id() + '_ConfigurationSettings\').length') === 0 && eval('$(e.target).closest(\'#' + this._grid.get_id() + '_showHideColumnsDiv\').length') === 0 && eval('$(e.target).closest(\'#' + this._grid.get_id() + '_FormatMenuDiv\').length') === 0 && eval('$(e.target).closest(\'#' + this._grid.get_id() + '_rankingMainDiv\').length') === 0) {
                if (document.getElementById(this._grid.get_id()) != null) {
                    if (document.getElementById(this._grid.get_id()).className.toString().indexOf('xlOpacityForGrid') !== -1) {
                        document.getElementById(this._grid.get_id()).className = '';
                    }
                }
            }
        }
        if (e.target.className !== 'xlSettingsChild') {
            if (eval('$(e.target).closest(\'#' + this._grid.get_id() + '_FormatMenuDiv\').length') === 0) {
                if (document.getElementById(this._grid.get_id() + '_FormatMenuDiv') != null) {
                    this._grid.get_element().parentNode.removeChild(document.getElementById(this._grid.get_id() + '_FormatMenuDiv'));
                }
            }
        }
        if (eval('$(e.target).closest(\'#' + this._grid.get_id() + '_downLoadPopUp\').length') === 0 && e.target.className !== 'xlNeoDownloadIcon' && e.target.className !== 'xlNeoPDFDownLoadPopUp') {
            if (document.getElementById(this._grid.get_GridInfo().GridId + '_downLoadPopUp') != null) {
                this._grid.get_element().removeChild(document.getElementById(this._grid.get_GridInfo().GridId + '_downLoadPopUp'));
            }
        }
        if (this._grid.get_GridInfo().IsAdvanceSearch) {
            if (e.target.className !== 'xlSettingsChild') {
                if (eval('$(e.target).closest(\".mergerEachColumnMainParent\").length') === 0) {
                    if (eval('$(e.target).closest(\'.xlManageLayoutNew\').length') === 0 && eval('$(e.target).closest(\'.ui-autocomplete\').length') === 0 && eval('$(e.target).closest(\'.EntSearchMainSearchBox\').length') === 0 && e.target.innerText !== 'New Layout' && eval('$(e.target).closest(\'.addRuleGridPanelNew\').length') === 0 && e.target.className !== 'textToDisplay' && e.target.className !== 'addruleIconMerger fa fa-plus-circle' && e.target.className !== 'saveAsLayout' && e.target.className !== 'saveAsLayoutManageView' && eval('$(e.target).closest(\'.ruleColoringPopUpNewParent\').length') === 0 && e.target.className !== 'xlManageLayoutNew' && e.target.id !== this._grid.elementIDManager._gridID + '_manageLayoutID' && e.target.innerText !== 'Manage Layout' && e.target.innerText !== 'Rule Based Coloring') {
                        if (document.getElementById('addNewLayoutParent') != null) {
                            document.getElementById('addNewLayoutParent').style.display = 'none';
                        }
                        if (document.getElementById(this._grid.elementIDManager.get_manageLayoutDivId()) != null) {
                            document.getElementById(this._grid.elementIDManager.get_manageLayoutDivId()).style.display = 'none';
                            if (document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv') != null) {
                                document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = '';
                            }
                            if (document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv') != null) {
                                document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').className = '';
                            }
                            if (document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div') != null) {
                                document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = '';
                            }
                            document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv_Table').className = '';
                        }
                    }
                    if (eval('$(e.target).closest(\'.ruleColoringPopUpNewParent\').length') === 0 && eval('$(e.target).closest(\'.eachAddRule\').length') === 0 && eval('$(e.target).closest(\'.mainParentMergedViewNew\').length') === 0 && e.target.className !== 'saveAsLayout' && eval('$(e.target).closest(\'.xlManageLayoutNew\').length') === 0 && e.target.className !== 'ruleColoringPopUpNewParent' && e.target.id !== this._grid.elementIDManager._gridID + '_RuleDivID' && e.target.innerText !== 'Rule Based Coloring' && e.target.innerText !== 'Manage Layout' && eval('$(e.target).closest(\'.colorPaletteDiv\').length') === 0) {
                    }
                    if (eval('$(e.target).closest(\'.colorPaletteDiv\').length') === 0 && e.target.className !== 'colorPalleteIcon') {
                        if (document.getElementById(this._grid.elementIDManager._gridID + '_ColorPaletteDivID') != null) {
                            document.getElementById(this._grid.elementIDManager._gridID + '_ColorPaletteDivID').style.display = 'none';
                        }
                    }
                    if (eval('$(e.target).closest(\'.dropDownChoiceOfLayouts\').length') === 0 && e.target.className !== 'saveAsLayout' && e.target.className !== 'saveAsLayoutManageView') {
                        if (document.getElementById('dropDownChoiceOfLayouts') != null) {
                            eval('$(\"#dropDownChoiceOfLayouts\").remove()');
                        }
                    }
                }
                if (eval('$(e.target).closest(\'.mergerParentDiv\').length') === 0 && eval('$(e.target).closest(\'.ui-autocomplete\').length') === 0 && eval('$(e.target).closest(\'.EntSearchMainSearchBox\').length') === 0 && eval('$(e.target).closest(\'.dropDownChoiceOfLayouts\').length') === 0 && e.target.className !== 'viewColumnsIndividualChild' && eval('$(e.target).closest(\'td\').length') === 0 && eval('$(e.target).closest(\'.xlManageLayoutNew\').length') === 0 && eval('$(e.target).closest(\'.mainParentMergedViewNew\').length') === 0 && e.target.id !== 'LastDivHandlerToMove' && e.target.className !== 'hamBurger' && e.target.className !== 'hamBurger ui-sortable-handle' && e.target.className !== 'mergerColumnDeleteIcon fa fa-trash-o' && e.target.className !== 'viewColumnsIndividualChild') {
                    if (document.getElementById(this._grid.elementIDManager._gridID + '_mergerParentDiv') != null) {
                        eval('$(\"#' + this._grid.get_id() + '_mergerParentDiv\").remove()');
                    }
                    if (document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv') != null) {
                        document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').style.opacity = '1';
                    }
                    if (document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv') != null) {
                        document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').style.opacity = '1';
                    }
                    if (document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div') != null) {
                        document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').style.opacity = '1';
                    }
                }
                if (eval('$(e.target).closest(\'.mainParentMergedViewNew\').length') === 0) {
                    if (eval('$(e.target).closest(\'.mainParentMergedViewNew\').length') === 0 && eval('$(e.target).closest(\'.ui-autocomplete\').length') === 0 && eval('$(e.target).closest(\'.EntSearchMainSearchBox\').length') === 0 && e.target.id !== 'LastDivHandlerToMove' && eval('$(e.target).closest(\'.dropDownChoiceOfLayouts\').length') === 0 && e.target.className !== 'hamBurger' && e.target.className !== 'hamBurger ui-sortable-handle' && e.target.className !== 'mergerColumnDeleteIcon fa fa-trash-o' && e.target.className !== 'viewColumnsIndividualChild' && eval('$(e.target).closest(\'td\').length') === 0 && eval('$(e.target).closest(\'.mergerParentDiv\').length') === 0 && eval('$(e.target).closest(\'.xlManageLayoutNew\').length') === 0 && e.target.className !== 'xlLayoutClose fa fa-times' && eval('$(e.target).closest(\'.ruleColoringPopUpNewParent\').length') === 0 && eval('$(e.target).closest(\'.colorPaletteDiv\').length') === 0 && e.target.className !== 'cancelButton fa fa-times' && e.target.id !== this._grid.get_id() + '_btnDeleteRule') {
                        if (document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv') != null) {
                            document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').style.opacity = '1';
                        }
                        if (document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv') != null) {
                            document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').style.opacity = '1';
                        }
                        if (document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div') != null) {
                            document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').style.opacity = '1';
                        }
                        eval('$(\"#' + this._grid.get_id() + '_mainParentMergedViewNew\").remove()');
                    }
                }
            }
            if (e.target.id !== this._grid.get_id() + '_ExcelPopUp' && e.target.className !== 'xlSettingsChild' && e.target.parentNode.className !== 'xlNeoDownLoadPopUp') {
                if (document.getElementById(this._grid.get_id() + '_ExcelPopUp') != null) {
                    eval('$(\".xlExcelPopUp\").remove()');
                }
            }
        }
    },

    _applyDivHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_applyDivHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var collection = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").children()');
        var Groups = '';
        for (var i = 0; i < collection.length; i++) {
            Groups += collection[i].children[0].innerHTML+ '|';//this._grid.get_GridInfo().AllColumnList[parseInt($(collection[i].children[0]).attr('indexinallcolumnlist'))] 
        }
        this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MULTIPLE_GROUPS, Groups, com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MULTIPLE_GROUPS);
        this._mainDivInDropDown.style.display = 'none';
        eval('$(\"#ArrowInGroupByDropDown\")[0].style.color=\"Black\"');
        eval('$(\"#GroupByTextForDropDown\")[0].style.color=\"Black\"');
    },

    _searchInGroupDivs: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_searchInGroupDivs(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var text = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_SearchInGroups\").val()').toString();
        var collection = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").children().filter(function(index,elem){ if(elem.getAttribute(\"added\") == \"false\") return elem;})');
        for (var i = 0; i < collection.length; i++) {
            if (collection[i].innerText.toString().toLowerCase().indexOf(text.toLowerCase()) !== -1) {
                collection[i].style.display = '';
            }
            else {
                collection[i].style.display = 'none';
            }
        }
    },

    _createGroupDiv: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createGroupDiv(text) {
        /// <param name="text" type="String">
        /// </param>
        var AppendDiv = document.createElement('DIV');
        AppendDiv.setAttribute('style', 'float:left;width:100%;');
        AppendDiv.style.height = '24px';
        var TextElement = document.createElement('DIV');
        TextElement.innerText = text;
        TextElement.setAttribute('class', 'DivToBeGroupedInGroupDropDown');
        AppendDiv.appendChild(TextElement);
        var DownArrow = document.createElement('DIV');
        DownArrow.className = 'DownArrowClass';
        DownArrow.setAttribute('style', 'float:right;cursor:pointer;');
        AppendDiv.appendChild(DownArrow);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(DownArrow, 'click', Function.createDelegate(this, this._moveGroupDivDown));
        var UpArrow = document.createElement('DIV');
        UpArrow.className = 'UpArrowClass';
        UpArrow.setAttribute('style', 'float:right;cursor:pointer;');
        AppendDiv.appendChild(UpArrow);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(UpArrow, 'click', Function.createDelegate(this, this._moveGroupDivUp));
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(TextElement, 'click', Function.createDelegate(this, this._clickOnGroupedOne));
        this._toBeGroupedDiv.appendChild(AppendDiv);
        this._toBeGroupedDiv.style.height = (Number.parseInvariant(this._toBeGroupedDiv.style.height.replace('px', '')) + Number.parseInvariant(AppendDiv.style.height.replace('px', ''))) + 'px';
        var heightSubstract = (Number.parseInvariant(this._toBeGroupedDiv.style.height.replace('px', '')) + Number.parseInvariant(AppendDiv.style.height.replace('px', '')));
        var height = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height()');
        if (parseInt(this._grid.get_GridInfo().Height) >= (340 - height)) {
            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(340-$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height())})');
        }
        else {
            height = parseInt(this._grid.get_GridInfo().Height) - height - heightSubstract;
            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(' + height + ')})');
        }
    },

    _clickOnGroupedOne: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_clickOnGroupedOne(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this._grid.get_GridInfo().RankingColumnInfo.RankingColumnInfo != null) {
            com.ivp.rad.controls.neogrid.scripts.UpperHeader.createBootBoxPopUp();
        }
        else {
            if (e.target.tagName === 'DIV') {
                var text = e.target.innerText;
                this._toBeGroupedDiv.style.height = (Number.parseInvariant(this._toBeGroupedDiv.style.height.replace('px', '')) - Number.parseInvariant(e.target.parentNode.style.height.replace('px', ''))) + 'px';
                this._toBeGroupedDiv.removeChild(e.target.parentNode);
                var elem = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").children().filter(function(index,elem){ if(elem.innerText == \"' + text + '\") return elem;})');
                if (elem.length == 0) {
                    elem = document.createElement('DIV');
                    elem.innerText = text;
                    elem.setAttribute('class', 'DivInGroupByDropDown');
                    elem.style.display = '';
                    elem.setAttribute('added', 'false');
                    $("#" + this._grid.get_GridInfo().GridId + "_columnNamesDivForGroupDropDown").append($(elem));
                }
                else {
                    elem[0].style.display = '';
                    elem[0].setAttribute('added', 'false');
                }
                var childCollection = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_groupDropPanel\").children()');
                for (var i = 0; i < childCollection.length; i++) {
                    if (childCollection[i].children[0] != null && childCollection[i].children[0].innerText === text) {
                        this._dropContainer.removeChild(childCollection[i]);
                        if (i !== 0) {
                            this._dropContainer.removeChild(childCollection[i - 1]);
                        }
                        else {
                            if (!this._dropContainer.hasChildNodes()) {
                                this._dropContainer.innerText = 'Drag here to group.';
                                this._toBeGroupedDiv.style.borderBottom = '0px solid rgb(238, 231, 231)';
                            }
                            else {
                                this._dropContainer.removeChild(childCollection[i + 1]);
                            }
                        }
                        break;
                    }
                }
                var height = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height()');
                if (parseInt(this._grid.get_GridInfo().Height) >= (340 - height)) {
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(340-$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height())})');
                }
                else {
                    height = parseInt(this._grid.get_GridInfo().Height) - height;
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(' + height + ')})');
                }
            }
        }
    },

    _selectDivClickHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_selectDivClickHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.tagName === 'DIV') {
            if (e.target.getAttribute('added').toString() === 'false') {
				if ($(".ToBeGroupedDiv").children().length < 5) {
				    this._createGroupDiv(e.target.innerHTML);
					this._toBeGroupedDiv.style.borderBottom = '1px solid rgb(238, 231, 231)';
					e.target.setAttribute('added', 'true');
					e.target.style.display = 'none';
					if (this._dropContainer.children.length === 0 || this._dropContainer.innerText === 'Drag here to group.') {
						this._dropContainer.innerText = '';
						this._dropContainer.appendChild(this._createGroupDivInDragDropArea(e.target.innerText));
					}
					else {
						this._dropContainer.appendChild(this._createGroupDivSeperator());
						this._dropContainer.appendChild(this._createGroupDivInDragDropArea(e.target.innerText));
					}
				}
            }
            var height = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height()');
            if (parseInt(this._grid.get_GridInfo().Height) >= (340 - height)) {
                eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(340-$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height())})');
            }
            else {
                height = parseInt(this._grid.get_GridInfo().Height) - height;
                eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(' + height + ')})');
            }
        }
    },

    _createGroupDivInDragDropArea: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createGroupDivInDragDropArea(text) {
        /// <param name="text" type="String">
        /// </param>
        /// <returns type="Object" domElement="true"></returns>
        var elem = document.createElement('DIV');
        elem.setAttribute('class', 'MainDivInDragDrop');
        var TextDiv = document.createElement('DIV');
        TextDiv.innerText = text;
        TextDiv.setAttribute('class', 'TextDivInDragDrop');
        elem.appendChild(TextDiv);
        var SortDiv = document.createElement('DIV');
        SortDiv.className = 'sortInGroupDragButtonVirtual';
        elem.appendChild(SortDiv);
        var CrossDiv = document.createElement('DIV');
        CrossDiv.className = 'crossInGroupDragButtonVirtual';
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(CrossDiv, 'click', Function.createDelegate(this, this._removeGroupInDropDown));
        elem.appendChild(CrossDiv);
        return elem;
    },

    _removeGroupInDropDown: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_removeGroupInDropDown(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.parentNode.previousSibling != null) {
            this._dropContainer.removeChild(e.target.parentNode.previousSibling);
        }
        else if (this._dropContainer.children.length > 1) {
            this._dropContainer.removeChild(e.target.parentNode.nextSibling);
        }
        else {
            this._dropContainer.innerText = 'Drag here to group.';
            this._toBeGroupedDiv.style.borderBottom = '0px solid';
        }
        this._toBeGroupedDiv.style.height = (Number.parseInvariant(this._toBeGroupedDiv.style.height.replace('px', '')) - 24) + 'px';
        var text = e.target.previousSibling.previousSibling.innerText;
        this._toBeGroupedDiv.removeChild(eval('$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").children().filter(function(index,elem){ if(elem.children[0].innerText == \"' + text + '\") return elem;})[0]'));
        var elem = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").children().filter(function(index,elem){ if(elem.innerText == \"' + text + '\") return elem;})');
        elem[0].style.display = '';
        elem[0].setAttribute('added', 'false');
        this._dropContainer.removeChild(e.target.parentNode);
        var height = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height()');
        if (parseInt(this._grid.get_GridInfo().Height) >= (340 - height)) {
            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(340-$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height())})');
        }
        else {
            height = parseInt(this._grid.get_GridInfo().Height) - height;
            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(' + height + ')})');
        }
    },

    _createGroupDivSeperator: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createGroupDivSeperator() {
        /// <returns type="Object" domElement="true"></returns>
        var SeperatorDiv = document.createElement('DIV');
        SeperatorDiv.className = 'groupDragButtonSeparator';
        SeperatorDiv.innerText = '   ';
        return SeperatorDiv;
    },

    _moveGroupDivDown: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_moveGroupDivDown(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var MoveDownDiv = e.target.parentNode.children[0];
        if (e.target.parentNode.nextSibling != null) {
            var MoveUpDiv = e.target.parentNode.nextSibling.children[0];
            var text = MoveDownDiv.innerText;
            MoveDownDiv.innerText = MoveUpDiv.innerText;
            MoveUpDiv.innerText = text;
            var MoveRightDiv = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_groupDropPanel\").children().filter(function(index,elem){ if(elem.children[0] != null && elem.children[0].innerText == \"' + text + '\") return elem;})[0]');
            var innerHTML = MoveRightDiv.innerHTML;
            MoveRightDiv.innerHTML = MoveRightDiv.nextSibling.nextSibling.innerHTML;
            MoveRightDiv.nextSibling.nextSibling.innerHTML = innerHTML;
            var ClassName = MoveRightDiv.className;
            MoveRightDiv.className = MoveRightDiv.nextSibling.nextSibling.className;
            MoveRightDiv.nextSibling.nextSibling.className = ClassName;
        }
    },

    _moveGroupDivUp: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_moveGroupDivUp(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var MoveUpDiv = e.target.parentNode.children[0];
        if (e.target.parentNode.previousSibling != null) {
            var MoveDownDiv = e.target.parentNode.previousSibling.children[0];
            var text = MoveDownDiv.innerText;
            MoveDownDiv.innerText = MoveUpDiv.innerText;
            MoveUpDiv.innerText = text;
            var MoveLeftDiv = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_groupDropPanel\").children().filter(function(index,elem){ if(elem.children[0] != null && elem.children[0].innerText == \"' + MoveDownDiv.innerText + '\") return elem;})[0]');
            var innerHTML = MoveLeftDiv.previousSibling.previousSibling.innerHTML;
            MoveLeftDiv.previousSibling.previousSibling.innerHTML = MoveLeftDiv.innerHTML;
            MoveLeftDiv.innerHTML = innerHTML;
            var ClassName = MoveLeftDiv.className;
            MoveLeftDiv.className = MoveLeftDiv.previousSibling.previousSibling.className;
            MoveLeftDiv.previousSibling.previousSibling.className = ClassName;
        }
    },

    _groupByClickedhandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_groupByClickedhandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (document.getElementById(this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown') == null) {
            this.createGroupingDiv();
        }
        var offsettop = 0;
        var offsetleft = 0;
        var scrollTop = 0;
        var parent = document.getElementById(this._grid.get_GridInfo().GridId);
        while (parent != null && parent.offsetParent != null) {
            if ((parent.offsetParent.style.position !== '' && parent.offsetParent.style.position.toString().toLowerCase() !== 'static') || (eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== '' && eval('$(\'#' + parent.offsetParent.id + '\').css(\'position\')') !== 'static')) {
                offsettop += parent.offsetParent.offsetTop;
                offsetleft += parent.offsetParent.offsetLeft;
                scrollTop += parent.offsetParent.scrollTop;
                parent = parent.offsetParent;
            }
            else {
                parent = parent.offsetParent;
            }
        }
        var locationY = e.clientY + scrollTop + document.documentElement.scrollTop + 5 - offsettop;
        var locationX = e.clientX + document.documentElement.scrollLeft - 34 - offsetleft;
        this._mainDivInDropDown.style.top = locationY.toString() + 'px';
        //this._mainDivInDropDown.style.left = locationX.toString() + 'px';
        this._toBeGroupedDiv.innerHTML = '';
        this._toBeGroupedDiv.style.height = '0px';
        var collection = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").children()');
        var DropContainerCollection = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_groupDropPanel\").children()');
        for (var i = 0; i < collection.length; i++) {
            collection[i].setAttribute('added', 'false');
            collection[i].style.display = '';
        }
        var count = -1;
        for (var i = 0, k = 0; i < this._grid.group._groupedColumns.length; i++, k = k + 2) {
            var text = this._grid.group._groupedColumns[i].toString();
            var colNamesMapp = [];
            colNamesMapp = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
            if (Array.contains(colNamesMapp, text)) {
                text = this._grid.get_GridInfo().ColumnNameMapping[text].toString();
            }
            this._createGroupDiv(text, this._grid.get_GridInfo().AllColumnList.indexOf(text));
            var DivFound = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").children().filter(function(){return $(this).text()==\"' + text + '\"})');
            if (DivFound.length == 0) {
                DivFound = DivFound[0];
                DivFound = document.createElement('DIV');
                DivFound.innerText = text;
                DivFound.setAttribute('added', 'true');
                DivFound.setAttribute('class', 'DivInGroupByDropDown');
                //ColumnNamesDiv.appendChild(DivFound);
            }
            else
                DivFound = DivFound[0];
            DivFound.setAttribute('added', 'true');
            DivFound.style.display = 'none';
            if (DropContainerCollection[k].children[0].innerHTML !== text) {
                var container = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_groupDropPanel\").children().filter(function(index,elem){ if(elem.children[0] != null && elem.children[0].innerText == \"' + text + '\") return elem; })[0]');
                DropContainerCollection[k].innerHTML = container.innerHTML;
                if (!this._grid.get_GridInfo().RequireMiniatureVersion) {
                    DropContainerCollection[k].className = 'maingroupDragButton';
                }
                else {
                    DropContainerCollection[k].className = 'maingroupDragButtonPnL';
                }
            }
            count = k;
        }
        var length = DropContainerCollection.length;
        if (DropContainerCollection.length > count + 1) {
            for (var i = count + 1; i < length; i++) {
                this._dropContainer.removeChild(DropContainerCollection[i]);
            }
        }
        if (count === -1) {
            this._dropContainer.innerText = 'Drag here to group.';
        }
        if (e.target.tagName === 'TD') {
            if (this._mainDivInDropDown.style.display === 'none') {
                this._mainDivInDropDown.style.display = '';
                eval('$(\"#ArrowInGroupByDropDown\")[0].style.color=\"#00BCEF\"');
                eval('$(\"#GroupByTextForDropDown\")[0].style.color=\"#00BCEF\"');
            }
            else {
                var parentDiv = this._mainDivInDropDown.parentNode;
                parentDiv.removeChild(this._mainDivInDropDown);
                eval('$(\"#ArrowInGroupByDropDown\")[0].style.color=\"Black\"');
                eval('$(\"#GroupByTextForDropDown\")[0].style.color=\"Black\"');
            }
        }
        else {
            if (this._mainDivInDropDown.style.display === 'none') {
                this._mainDivInDropDown.style.display = '';
                eval('$(\"#ArrowInGroupByDropDown\")[0].style.color=\"#00BCEF\"');
                eval('$(\"#GroupByTextForDropDown\")[0].style.color=\"#00BCEF\"');
            }
            else {
                var parentDiv = this._mainDivInDropDown.parentNode;
                parentDiv.removeChild(this._mainDivInDropDown);
                (document.getElementById(this._grid.get_id() + '_SearchInGroups')).value = '';
                eval('$(\"#ArrowInGroupByDropDown\")[0].style.color=\"Black\"');
                eval('$(\"#GroupByTextForDropDown\")[0].style.color=\"Black\"');
            }
        }
        var height = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height()');
        if (parseInt(this._grid.get_GridInfo().Height) >= (340 - height)) {
            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(340-$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height())})');
        }
        else {
            height = parseInt(this._grid.get_GridInfo().Height) - height;
            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(' + height + ')})');
        }
    },

    outerGroupByClickedhandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$outerGroupByClickedhandler() {
        this._toBeGroupedDiv.innerHTML = '';
        this._toBeGroupedDiv.style.height = '0px';
        var collection = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").children()');
        var DropContainerCollection = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_groupDropPanel\").children()');
        for (var i = 0; i < collection.length; i++) {
            collection[i].setAttribute('added', 'false');
            collection[i].style.display = '';
        }
        var count = -1;
        for (var i = 0, k = 0; i < this._grid.group._groupedColumns.length; i++, k = k + 2) {
            var text = this._grid.group._groupedColumns[i].toString();
            this._createGroupDiv(text);
            var DivFound = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").children().filter(function(){return $(this).text()==\"' + text + '\"})[0]');
            DivFound.setAttribute('added', 'true');
            DivFound.style.display = 'none';
            if (DropContainerCollection[k].children[0].innerText !== text) {
                var container = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_groupDropPanel\").children().filter(function(index,elem){ if(elem.children[0] != null && elem.children[0].innerText == \"' + text + '\") return elem; })[0]');
                DropContainerCollection[k].innerHTML = container.innerHTML;
                if (!this._grid.get_GridInfo().RequireMiniatureVersion) {
                    DropContainerCollection[k].className = 'maingroupDragButton';
                }
                else {
                    DropContainerCollection[k].className = 'maingroupDragButtonPnL';
                }
            }
            count = k;
        }
        var length = DropContainerCollection.length;
        if (DropContainerCollection.length > count + 1) {
            for (var i = count + 1; i < length; i++) {
                this._dropContainer.removeChild(DropContainerCollection[i]);
            }
        }
        if (count === -1) {
            this._dropContainer.innerText = 'Drag here to group.';
        }
        if (this._mainDivInDropDown.style.display === 'none') {
            this._mainDivInDropDown.style.display = '';
        }
        else {
            this._mainDivInDropDown.style.display = 'none';
        }
        var height = eval('$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height()');
        if (parseInt(this._grid.get_GridInfo().Height) >= (340 - height)) {
            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(340-$(\"#' + this._grid.get_GridInfo().GridId + '_GroupingInGroupDiv\").height())})');
        }
        else {
            height = parseInt(this._grid.get_GridInfo().Height) - height;
            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_columnNamesDivForGroupDropDown\").slimscrollNew({height:(' + height + ')})');
        }
    },

    createExcelPopUp: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createExcelPopUp() {
        var ConfigurationSettingsDiv = null;
        if (document.getElementById(this._grid.get_id() + '_ExcelPopUp') == null) {
            ConfigurationSettingsDiv = document.createElement('DIV');
            ConfigurationSettingsDiv.id = this._grid.get_id() + '_ExcelPopUp';
        }
        else {
            this._grid.get_element().parentNode.removeChild(document.getElementById(this._grid.get_id() + '_ExcelPopUp'));
            ConfigurationSettingsDiv = document.createElement('DIV');
            ConfigurationSettingsDiv.id = this._grid.get_id() + '_ExcelPopUp';
        }
        ConfigurationSettingsDiv.className = 'xlExcelPopUp';
        var excelHeader = document.createElement('DIV');
        excelHeader.className = 'xlgridexcelHeader';
        excelHeader.innerText = 'Export To Excel';
        ConfigurationSettingsDiv.appendChild(excelHeader);
        var settingsChildItem = document.createElement('DIV');
        settingsChildItem.innerText = 'Export All Rows';
        settingsChildItem.className = 'excelPopUpxlSettingsChild';
        ConfigurationSettingsDiv.appendChild(settingsChildItem);
        settingsChildItem = document.createElement('DIV');
        settingsChildItem.innerText = 'Export Selected Rows';
        settingsChildItem.className = 'excelPopUpxlSettingsChild';
        ConfigurationSettingsDiv.appendChild(settingsChildItem);
        settingsChildItem = document.createElement('DIV');
        if (this._grid.group._groupedColumns.length === 0 || !this._grid.exportToExcel.isInterOpInstalled) {
            settingsChildItem.innerText = 'Export Visible Rows';
        }
        else {
            settingsChildItem.innerText = 'Export To Pivot';
        }
        settingsChildItem.className = 'excelPopUpxlSettingsChild';
        ConfigurationSettingsDiv.appendChild(settingsChildItem);
        this._grid.get_element().parentNode.appendChild(ConfigurationSettingsDiv);
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(ConfigurationSettingsDiv, 'click', Function.createDelegate(this, this.clickOnExcelPopUp));
    },

    clickOnExcelPopUp: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$clickOnExcelPopUp(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.innerText === 'Export All Rows') {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_EXCEL, 'true|' + Math.round(Math.random() * 10000).toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_EXCEL);
        }
        else if (e.target.innerText === 'Export Selected Rows') {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_CHECKED_ROWS, 'true|' + Math.round(Math.random() * 10000).toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_CHECKED_ROWS);
        }
        else if (e.target.innerText === 'Export Visible Rows') {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_VISIBLE_TO_EXCEL, 'true|' + Math.round(Math.random() * 10000).toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_VISIBLE_TO_EXCEL);
        }
        else if (e.target.innerText === 'Export To Pivot') {
            this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_PIVOT_ROWS, 'true|' + Math.round(Math.random() * 10000).toString(), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_PIVOT_ROWS);
        }
        if (document.getElementById(this._grid.get_id() + '_ExcelPopUp') != null) {
            eval('$(\".xlExcelPopUp\").remove()');
        }
    },

    createPDFExportPopUp: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createPDFExportPopUp(grid) {
        /// <param name="grid" type="String">
        /// </param>
        var exportPDF;
        if (document.getElementById(this._grid.get_GridInfo().GridId + grid) == null) {
            exportPDF = document.createElement('DIV');
            exportPDF.id = this._grid.get_GridInfo().GridId + grid;
            exportPDF.className = 'neoGridExportPDF';
        }
        else {
            exportPDF = document.getElementById(this._grid.get_GridInfo().GridId + grid);
        }
        var exportPDFHeader = document.createElement('DIV');
        exportPDFHeader.className = 'neoGridExportPDFHeader';
        exportPDFHeader.innerText = 'Export to PDF';
        exportPDF.appendChild(exportPDFHeader);
        var exportPDFBody = document.createElement('DIV');
        exportPDFBody.className = 'neoGridExportPDFBody';
        exportPDF.appendChild(exportPDFBody);
        var exportPDFFrozenColBody = document.createElement('DIV');
        exportPDFFrozenColBody.className = 'neoGridExportPDFFrozenColBody';
        exportPDFBody.appendChild(exportPDFFrozenColBody);
        var exportPDFFrozenlabel = document.createElement('DIV');
        exportPDFFrozenlabel.className = 'neoGridExportPDFFrozenLabel';
        exportPDFFrozenlabel.innerText = 'Columns To Repeat: ';
        exportPDFFrozenColBody.appendChild(exportPDFFrozenlabel);
        exportPDFFrozenlabel = document.createElement('DIV');
        exportPDFFrozenlabel.className = 'neoGridExportPDFFrozenDropDown';
        exportPDFFrozenColBody.appendChild(exportPDFFrozenlabel);
        var exportPDFFrozenlabelSelect2 = document.createElement('DIV');
        exportPDFFrozenlabelSelect2.id = this._grid.get_GridInfo().GridId + '_xlPDFExportSelect2';
        exportPDFFrozenlabelSelect2.className = 'neoGridExportPDFFrozenDropDown';
        exportPDFFrozenlabel.appendChild(exportPDFFrozenlabelSelect2);
        exportPDFFrozenColBody = document.createElement('DIV');
        exportPDFFrozenColBody.className = 'neoGridExportPDFOrientation';
        exportPDFBody.appendChild(exportPDFFrozenColBody);
        exportPDFFrozenlabel = document.createElement('DIV');
        exportPDFFrozenlabel.className = 'neoGridExportPDFOrientationLabel';
        exportPDFFrozenlabel.innerText = 'Orientation : ';
        exportPDFFrozenColBody.appendChild(exportPDFFrozenlabel);
        exportPDFFrozenlabel = document.createElement('DIV');
        exportPDFFrozenlabel.className = 'neoGridExportPDFOrientationDropDown';
        exportPDFFrozenColBody.appendChild(exportPDFFrozenlabel);
        var exportPDFFrozenland = document.createElement('DIV');
        exportPDFFrozenland.className = 'neoGridExportPDFOrientationland';
        exportPDFFrozenland.innerText = 'Landscape';
        exportPDFFrozenland.style.color = '#00BFF0';
        exportPDFFrozenland.setAttribute('selected', true);
        exportPDFFrozenlabel.appendChild(exportPDFFrozenland);
        exportPDFFrozenland = document.createElement('DIV');
        exportPDFFrozenland.className = 'neoGridExportPDFOrientationPort';
        exportPDFFrozenland.innerText = 'Portrait';
        exportPDFFrozenlabel.appendChild(exportPDFFrozenland);
        exportPDFFrozenColBody = document.createElement('DIV');
        exportPDFFrozenColBody.className = 'neoGridExportPDFPageOrder';
        exportPDFBody.appendChild(exportPDFFrozenColBody);
        exportPDFFrozenlabel = document.createElement('DIV');
        exportPDFFrozenlabel.className = 'neoGridExportPDFPageOrderLabel';
        exportPDFFrozenlabel.innerText = 'Page Order : ';
        exportPDFFrozenColBody.appendChild(exportPDFFrozenlabel);
        exportPDFFrozenlabel.style.display = 'none';
        exportPDFFrozenlabel = document.createElement('DIV');
        exportPDFFrozenlabel.className = 'neoGridExportPDFPageOrderDropDown';
        exportPDFFrozenColBody.appendChild(exportPDFFrozenlabel);
        exportPDFFrozenland = document.createElement('DIV');
        exportPDFFrozenland.className = 'neoGridExportPDFpageorderland';
        exportPDFFrozenland.innerText = 'Over Then Down';
        exportPDFFrozenland.style.color = '#00BFF0';
        exportPDFFrozenland.setAttribute('selected', true);
        exportPDFFrozenlabel.appendChild(exportPDFFrozenland);
        exportPDFFrozenlabel.style.display = 'none';
        exportPDFFrozenland = document.createElement('DIV');
        exportPDFFrozenland.className = 'neoGridExportPDFpageorderPort';
        exportPDFFrozenland.innerText = 'Down Then Over';
        exportPDFFrozenlabel.appendChild(exportPDFFrozenland);
        exportPDFFrozenlabel.style.display = 'none';
        exportPDFFrozenColBody.style.display = 'none';
        exportPDFFrozenColBody = document.createElement('DIV');
        exportPDFFrozenColBody.className = 'neoGridExportPDFPageFitParent';
        exportPDFBody.appendChild(exportPDFFrozenColBody);
        exportPDFFrozenlabel = document.createElement('DIV');
        exportPDFFrozenlabel.className = 'neoGridExportPDFPageFitLabel';
        exportPDFFrozenlabel.innerText = 'Fit To Page : ';
        exportPDFFrozenColBody.appendChild(exportPDFFrozenlabel);
        var chkFitToPage = document.createElement('INPUT');
        chkFitToPage.type = 'checkbox';
        chkFitToPage.checked = true;
        chkFitToPage.id = this._grid.get_GridInfo().GridId + '_fitToPage';
        exportPDFFrozenlabel = document.createElement('DIV');
        exportPDFFrozenlabel.className = 'neoGridExportPDFPageFitchkBox';
        exportPDFFrozenlabel.appendChild(chkFitToPage);
        exportPDFFrozenColBody.appendChild(exportPDFFrozenlabel);
        exportPDFFrozenlabel = document.createElement('DIV');
        exportPDFFrozenlabel.className = 'neoGridExportPDFPageSizeLabel';
        exportPDFFrozenlabel.innerText = 'Page Size : ';
        exportPDFFrozenColBody.appendChild(exportPDFFrozenlabel);
        var exportPDFPageSizeSelect2 = document.createElement('SELECT');
        exportPDFPageSizeSelect2.id = this._grid.get_GridInfo().GridId + '_xlPDFPageSizeSelect2';
        exportPDFPageSizeSelect2.className = 'neoGridExportPDFPageSizeDropDown';
        exportPDFFrozenlabel = document.createElement('DIV');
        exportPDFFrozenlabel.className = 'neoGridExportPDFPageDropDown';
        exportPDFFrozenlabel.appendChild(exportPDFPageSizeSelect2);
        exportPDFFrozenColBody.appendChild(exportPDFFrozenlabel);
        exportPDFFrozenland = document.createElement('DIV');
        exportPDFFrozenland.className = 'neoGridExportPDFExportButton';
        exportPDF.appendChild(exportPDFFrozenland);
        var button = document.createElement('BUTTON');
        button.className = 'neoGridPDFExportButton';
        button.innerText = 'Export';
        exportPDFFrozenland.appendChild(button);
        this._grid.get_element().appendChild(exportPDF);
        this._createSelect2ForFrozenPDFExport();
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(exportPDF, 'click', Function.createDelegate(this, this._exportPDFClickHandler));
    },

    _exportPDFClickHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_exportPDFClickHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'neoGridExportPDFOrientationPort') {
            e.target.setAttribute('selected', true);
            e.target.style.color = '#00BFF0';
            e.target.previousSibling.setAttribute('selected', false);
            e.target.previousSibling.style.color = '#474747';
        }
        else if (e.target.className === 'neoGridExportPDFOrientationland') {
            e.target.setAttribute('selected', true);
            e.target.style.color = '#00BFF0';
            e.target.nextSibling.setAttribute('selected', false);
            e.target.nextSibling.style.color = '#474747';
        }
        else if (e.target.className === 'neoGridExportPDFpageorderPort') {
            e.target.setAttribute('selected', true);
            e.target.style.color = '#00BFF0';
            e.target.previousSibling.setAttribute('selected', false);
            e.target.previousSibling.style.color = '#474747';
        }
        else if (e.target.className === 'neoGridExportPDFpageorderland') {
            e.target.setAttribute('selected', true);
            e.target.style.color = '#00BFF0';
            e.target.nextSibling.setAttribute('selected', false);
            e.target.nextSibling.style.color = '#474747';
        }
        else if (e.target.className === 'neoGridPDFExportButton') {
            var selected = (eval('$(\"#' + this._grid.get_id() + '_xlPDFExportSelect2\").val()')).split(',');
            var selectedCols = [];
            for (var i = 0; i < selected.length; i++) {
                if (selected[i].toString() !== '') {
                    Array.add(selectedCols, selected[i].toString());
                }
            }
            var exportPDInfo = new com.ivp.rad.controls.neogrid.scripts.info.ExportPDFInfo();
            exportPDInfo.FrozenColumn = selectedCols;
            if ((eval('$(\'.neoGridExportPDFOrientationland\')[0]')).getAttribute('selected')) {
                exportPDInfo.OrietationPDF = com.ivp.rad.controls.neogrid.scripts.info.Orietation.landScape;
            }
            if ((eval('$(\'.neoGridExportPDFOrientationPort\')[0]')).getAttribute('selected')) {
                exportPDInfo.OrietationPDF = com.ivp.rad.controls.neogrid.scripts.info.Orietation.portrait;
            }
            if ((eval('$(\'.neoGridExportPDFpageorderland\')[0]')).getAttribute('selected')) {
                exportPDInfo.PageOrderPDF = com.ivp.rad.controls.neogrid.scripts.info.PageOrder.OTD;
            }
            if ((eval('$(\'.neoGridExportPDFpageorderPort\')[0]')).getAttribute('selected')) {
                exportPDInfo.PageOrderPDF = com.ivp.rad.controls.neogrid.scripts.info.PageOrder.DTO;
            }
            if ((document.getElementById(this._grid.get_GridInfo().GridId + '_fitToPage')).checked) {
                exportPDInfo.FitToPage = true;
            }
            switch ((eval('$(\"#' + this._grid.get_id() + '_xlPDFPageSizeSelect2\").val()'))) {
                case 'A0':
                    exportPDInfo.PageSize = com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize.a0;
                    break;
                case 'A1':
                    exportPDInfo.PageSize = com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize.a1;
                    break;
                case 'A2':
                    exportPDInfo.PageSize = com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize.a2;
                    break;
                case 'A3':
                    exportPDInfo.PageSize = com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize.a3;
                    break;
                case 'A4':
                    exportPDInfo.PageSize = com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize.a4;
                    break;
                default:
                    exportPDInfo.PageSize = com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize.a1;
                    break;
            }
            this._grid.exportToPdf._exportToPdfAllRows(Sys.Serialization.JavaScriptSerializer.serialize(exportPDInfo));
            this._grid.get_element().removeChild(document.getElementById(this._grid.get_GridInfo().GridId + '_downLoadPopUp'));
            e.preventDefault();
            e.stopPropagation();
        }
    },

    _createSelect2ForFrozenPDFExport: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createSelect2ForFrozenPDFExport() {
        var groups = [];
        for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
            if (this._grid.get_GridInfo().ColumnList[i].toString() !== this._grid.get_GridInfo().IdColumnName) {
                var options = new com.ivp.rad.controls.neogrid.scripts.info.Select2Data();
                options.id = this._grid.get_GridInfo().ColumnList[i].toString();
                options.text = this._grid.get_GridInfo().ColumnList[i].toString();
                Array.add(groups, options);
            }
        }
        var frozenColumnCollection = [];
        for (var k = 0; k < this._grid.get_GridInfo().FrozenColumns.length; k++) {
            Array.add(frozenColumnCollection, (this._grid.get_GridInfo().FrozenColumns[k]).ColumnName);
        }
        eval('$(\"#' + this._grid.get_id() + '_xlPDFExportSelect2' + '\").select2({data : ' + Sys.Serialization.JavaScriptSerializer.serialize(groups) + ',multiple : true, placeholder : \"By Group(optional)\" })');
        eval('$(\"#' + this._grid.get_id() + '_xlPDFExportSelect2' + '\").select2( \"val\" , ' + Sys.Serialization.JavaScriptSerializer.serialize(frozenColumnCollection) + ')');
        groups = [];
        var opt = document.createElement('OPTION');
        var pageSize = 0;
        var docWidth = document.getElementById(this._grid.get_GridInfo().GridId + '_repeatedBodyDiv').offsetWidth;
        docWidth = (docWidth * 72 / 96) + this._grid.get_GridInfo().ColumnList.length * 5;
        if (docWidth > 0 && docWidth <= 760) {
            pageSize = 4;
        }
        else if (docWidth > 761 && docWidth <= 1100) {
            pageSize = 4;
        }
        else if (docWidth > 1101 && docWidth <= 1520) {
            pageSize = 3;
        }
        else if (docWidth > 1521 && docWidth <= 2250) {
            pageSize = 2;
        }
        else if (docWidth > 2251 && docWidth <= 3200) {
            pageSize = 1;
        }
        else {
            pageSize = 0;
        }
        for (var i = 0; i < 5; i++) {
            opt = document.createElement('OPTION');
            opt.value = 'A' + i;
            opt.text = 'A' + i;
            if (pageSize === i) {
                opt.selected = true;
            }
            document.getElementById(this._grid.get_GridInfo().GridId + '_xlPDFPageSizeSelect2').appendChild(opt);
        }
        eval('$(\"#' + this._grid.get_id() + '_xlPDFPageSizeSelect2' + '\").select2()');
    },

    createDownLoadPopup: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createDownLoadPopup() {
        var element = document.createElement('DIV');
        element.id = this._grid.get_GridInfo().GridId + '_downLoadPopUp';
        element.className = 'xlNeoDownLoadPopUp';
        var exportExcel = document.createElement('DIV');
        exportExcel.className = 'xlNeoExcelDownLoadPopUp';
        exportExcel.innerText = 'Excel';
        element.appendChild(exportExcel);
        var exportPDF = document.createElement('DIV');
        exportPDF.className = 'xlNeoPDFDownLoadPopUp';
        exportPDF.innerText = 'PDF';
        element.appendChild(exportPDF);
        if (document.getElementById(this._grid.get_GridInfo().GridId + '_downLoadPopUp') == null) {
            this._grid.get_element().appendChild(element);
        }
    },

    createMergedViewPopUpNew: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createMergedViewPopUpNew() {
        if (document.getElementById(this._grid.get_GridInfo().GridId + '_mainParentMergedViewNew') == null) {
            var mainParentMergedViewNew = document.createElement('DIV');
            mainParentMergedViewNew.id = this._grid.get_GridInfo().GridId + '_mainParentMergedViewNew';
            mainParentMergedViewNew.className = 'mainParentMergedViewNew';
            var headerDiv = document.createElement('DIV');
            headerDiv.className = 'headerDivmerger';
            if (this._currentLayout.ViewName !== '' && this._currentLayout.ViewName != null) {
                headerDiv.innerText = 'MANAGE VIEW' + ' ' + ' ' + ' ' + 'Layout Loaded' + ' ' + this._currentLayout.ViewName;
            }
            else {
                headerDiv.innerText = 'MANAGE VIEW';
            }
            var mergerTabsMainDiv = document.createElement('DIV');
            mergerTabsMainDiv.id = this._grid.get_GridInfo().GridId + '_mergerTabsMainDiv';
            mergerTabsMainDiv.className = 'mergerTabsMainDiv';
            var mergerTab1 = document.createElement('DIV');
            mergerTab1.id = this._grid.get_GridInfo().GridId + '_mergerTab1';
            mergerTab1.className = 'mergerTabs';
            mergerTab1.innerText = 'CUSTOMIZE COLUMN';
            var applyButtonMainDiv = document.createElement('DIV');
            applyButtonMainDiv.className = 'applyButtonMainDiv';
            var applyButton = document.createElement('DIV');
            applyButton.id = this._grid.get_id() + '_applyButton';
            applyButton.innerText = 'Preview';
            applyButton.className = 'applyButton';
            var saveInLayout = document.createElement('DIV');
            saveInLayout.id = this._grid.get_id() + '_saveAsLayout';
            saveInLayout.innerText = 'Save As Layout';
            saveInLayout.className = 'saveAsLayout';
            var cancelButton = document.createElement('DIV');
            cancelButton.id = this._grid.get_id() + '_cancelButton';
            cancelButton.innerText = 'Cancel';
            cancelButton.className = 'cancelButtonMainView';
            mergerTabsMainDiv.appendChild(cancelButton);
            mergerTabsMainDiv.appendChild(applyButton);
            mergerTabsMainDiv.appendChild(saveInLayout);
            mergerTabsMainDiv.appendChild(headerDiv);
            mainParentMergedViewNew.appendChild(mergerTabsMainDiv);
            var mainHeaderMergedViewNew = document.createElement('DIV');
            mainHeaderMergedViewNew.id = this._grid.get_GridInfo().GridId + '_mainHeaderMergedViewNew';
            mainHeaderMergedViewNew.className = 'mainHeaderMergedViewNew';
            var mergerCustomizeColumn = document.createElement('DIV');
            mergerCustomizeColumn.innerText = 'CUSTOMIZE COLUMNS';
            mergerCustomizeColumn.className = 'mergerCustomizeColumn';
            var mergerColorRule = document.createElement('DIV');
            mergerColorRule.innerText = 'COLOR RULE';
            mergerColorRule.id = 'mergerColorRule';
            mergerColorRule.className = 'mergerColorRule';
            var mergerGrouping = document.createElement('DIV');
            mergerGrouping.id = this._grid.get_GridInfo().GridId + '_mergerGrouping';
            mergerGrouping.className = 'mergerGrouping';
            mergerGrouping.innerText = 'GROUP AND FILTER';
            mainHeaderMergedViewNew.appendChild(mergerCustomizeColumn);
            mainHeaderMergedViewNew.appendChild(mergerColorRule);
            mainHeaderMergedViewNew.appendChild(mergerGrouping);
            var mainCustomizeColumnsParent = document.createElement('DIV');
            mainCustomizeColumnsParent.className = 'mainCustomizeColumnsParent';
            var displayNames = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
            if (this.columnSequence != null && this.columnSequence.length > 0) {
                for (var i = 0; i < this.columnSequence.length; i++) {
                    var customizeColumnsIndividual = document.createElement('DIV');
                    customizeColumnsIndividual.className = 'customizeColumnsIndividual';
                    mainCustomizeColumnsParent.appendChild(customizeColumnsIndividual);
                    customizeColumnsIndividual.innerText = (this.viewColumnsToDictionary[this.columnSequence[i].toString()]).DisplayName.toString();
                    if (!Array.contains(this._grid.get_GridInfo().ColumnList, (this.viewColumnsToDictionary[this.columnSequence[i].toString()]).DisplayName)) {
                        customizeColumnsIndividual.style.color = '#57CDF8';
                    }
                }
            }
            else {
                for (var i = 0; i < this._grid.get_GridInfo().ColumnList.length; i++) {
                    var customizeColumnsIndividual = document.createElement('DIV');
                    customizeColumnsIndividual.innerText = this._grid.get_GridInfo().ColumnList[i].toString();
                    customizeColumnsIndividual.className = 'customizeColumnsIndividual';
                    mainCustomizeColumnsParent.appendChild(customizeColumnsIndividual);
                }
            }
            var mainRuleColorParent = document.createElement('DIV');
            mainRuleColorParent.className = 'mainColorRuleParent';
            mainRuleColorParent.id = 'mainRuleColorParent';
            var mainGroupingParent = document.createElement('DIV');
            mainGroupingParent.className = 'mainGroupingParent';
            if (this._grid.group._groupedColumns.length === 0 && this._grid.sort.sortedColumns.length === 0 && this._grid.filter.filteredColumns.length === 0 && this._grid.get_GridInfo().FrozenColumns.length === 0) {
                mainGroupingParent.innerText = 'No Grouping,Sorting or Filtering has been applied in this layout';
                mainGroupingParent.style.paddingTop = '16%';
                mainGroupingParent.style.fontSize = '19px';
                mainGroupingParent.style.color = '#7ACCC8';
            }
            else {
                mainGroupingParent.style.paddingTop = '10px';
            }
            var groupsExist = document.createElement('DIV');
            groupsExist.className = 'groupsExist';
            var groupHeader = document.createElement('DIV');
            groupHeader.className = 'groupHeader';
            groupHeader.innerText = 'Grouping';
            if (this._grid.group._groupedColumns.length > 0) {
                groupsExist.appendChild(groupHeader);
            }
            var otherFunctionsExist = document.createElement('DIV');
            otherFunctionsExist.className = 'otherFunctionsExist';
            var otherFunctions = document.createElement('DIV');
            otherFunctions.className = 'otherFunctions';
            otherFunctions.innerText = 'Filter And Sort';
            var FrozenColumns = document.createElement('DIV');
            FrozenColumns.className = 'otherFunctions';
            FrozenColumns.innerText = 'Frozen Columns';
            if (this._grid.sort.sortedColumns.length > 0 || this._grid.filter.filteredColumns.length > 0) {
                otherFunctionsExist.appendChild(otherFunctions);
            }
            for (var i = 0; i < this._grid.group._groupedColumns.length; i++) {
                var GRoupingColumnsindividual = document.createElement('DIV');
                if (!Array.contains(displayNames, this._grid.group._groupedColumns[i].toString())) {
                    GRoupingColumnsindividual.innerText = this._grid.group._groupedColumns[i].toString();
                }
                else {
                    GRoupingColumnsindividual.innerText = this._grid.get_GridInfo().ColumnNameMapping[this._grid.group._groupedColumns[i].toString()].toString();
                }
                GRoupingColumnsindividual.className = 'GRoupingColumnsindividual';
                groupsExist.appendChild(GRoupingColumnsindividual);
            }
            for (var i = 0; i < this._grid.sort.sortedColumns.length; i++) {
                var GRoupingColumnsindividual = document.createElement('DIV');
                var filterIconInmergedView = document.createElement('DIV');
                var GroupingColumnText = document.createElement('DIV');
                GroupingColumnText.className = 'GroupingColumnText';
                if (!Array.contains(displayNames, (this._grid.sort.sortedColumns[i]).ColumnName.toString())) {
                    GroupingColumnText.innerText = (this._grid.sort.sortedColumns[i]).ColumnName.toString();
                }
                else {
                    GroupingColumnText.innerText = this._grid.get_GridInfo().ColumnNameMapping[(this._grid.sort.sortedColumns[i]).ColumnName.toString()].toString();
                }
                GRoupingColumnsindividual.className = 'GRoupingColumnsindividualSort';
                if ((this._grid.sort.sortedColumns[i]).SortOrder === com.ivp.rad.controls.neogrid.scripts.info.Order.ASC) {
                    filterIconInmergedView.className = 'sortIconAscInMergedView fa fa-caret-up';
                }
                if ((this._grid.sort.sortedColumns[i]).SortOrder === com.ivp.rad.controls.neogrid.scripts.info.Order.DESC) {
                    filterIconInmergedView.className = 'sortIconDescInMergedView fa fa-caret-down';
                }
                GRoupingColumnsindividual.appendChild(GroupingColumnText);
                GRoupingColumnsindividual.appendChild(GroupingColumnText);
                GRoupingColumnsindividual.appendChild(filterIconInmergedView);
                otherFunctionsExist.appendChild(GRoupingColumnsindividual);
            }
            for (var i = 0; i < this._grid.filter.filteredColumnInfo.length; i++) {
                var GRoupingColumnsindividual = document.createElement('DIV');
                var GroupingColumnText = document.createElement('DIV');
                GroupingColumnText.className = 'GroupingColumnTextFilter';
                var filterIconInmergedView = document.createElement('DIV');
                filterIconInmergedView.className = 'filterIconInMergedView';
                if (!Array.contains(displayNames, (this._grid.filter.filteredColumnInfo[i]).ColumnName.toString())) {
                    GroupingColumnText.innerText = (this._grid.filter.filteredColumnInfo[i]).ColumnName.toString();
                }
                else {
                    GroupingColumnText.innerText = this._grid.get_GridInfo().ColumnNameMapping[(this._grid.filter.filteredColumnInfo[i]).ColumnName.toString()].toString();
                }
                GRoupingColumnsindividual.className = 'GRoupingColumnsindividualFilter';
                GRoupingColumnsindividual.appendChild(GroupingColumnText);
                GRoupingColumnsindividual.appendChild(filterIconInmergedView);
                var valueOfFilter = null;
                for (var j = 0; j < 2; j++) {
                    valueOfFilter = document.createElement('DIV');
                    valueOfFilter.className = 'valueOfFilter';
                    if ((this._grid.filter.filteredColumnInfo[i]).Values[j] != null) {
                        valueOfFilter.innerText = (this._grid.filter.filteredColumnInfo[i]).Values[j].toString();
                    }
                    GRoupingColumnsindividual.appendChild(valueOfFilter);
                    if ((this._grid.filter.filteredColumnInfo[i]).Values[j] != null) {
                        valueOfFilter.title = (this._grid.filter.filteredColumnInfo[i]).Values[j].toString();
                    }
                }
                if ((this._grid.filter.filteredColumnInfo[i]).Values.length > 2) {
                    valueOfFilter = document.createElement('DIV');
                    valueOfFilter.innerText = '+' + ((this._grid.filter.filteredColumnInfo[i]).Values.length - 2) + 'more';
                    valueOfFilter.className = 'valueOfFilterMore';
                    GRoupingColumnsindividual.appendChild(valueOfFilter);
                }
                otherFunctionsExist.appendChild(GRoupingColumnsindividual);
            }
            if (this._grid.get_GridInfo().FrozenColumns.length > 0) {
                otherFunctionsExist.appendChild(FrozenColumns);
            }
            var FrozenColumnsList = [];
            for (var i = 0; i < this._grid.get_GridInfo().FrozenColumns.length; i++) {
                Array.add(FrozenColumnsList, (this._grid.get_GridInfo().FrozenColumns[i]).ColumnName);
            }
            for (var i = 0; i < FrozenColumnsList.length; i++) {
                var GRoupingColumnsindividual = document.createElement('DIV');
                if (!Array.contains(displayNames, FrozenColumnsList[i].toString())) {
                    GRoupingColumnsindividual.innerText = FrozenColumnsList[i].toString();
                }
                else {
                    GRoupingColumnsindividual.innerText = this._grid.get_GridInfo().ColumnNameMapping[FrozenColumnsList[i].toString()].toString();
                }
                GRoupingColumnsindividual.className = 'GRoupingColumnsindividual';
                FrozenColumns.appendChild(GRoupingColumnsindividual);
            }
            var textToDisplay = document.createElement('DIV');
            textToDisplay.innerText = 'ADD COLOR RULES';
            textToDisplay.className = 'textToDisplay';
            textToDisplay.id = 'textToDisplay';
            var faicon = document.createElement('DIV');
            faicon.className = 'addruleIconMerger fa fa-plus-circle';
            faicon.style.marginTop = '50%';
            faicon.id = 'faiconMerger';
            com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList = com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleListToPersistInfo;
            if (com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length === 0) {
                mainRuleColorParent.appendChild(faicon);
                mainRuleColorParent.appendChild(textToDisplay);
            }
            mainGroupingParent.appendChild(groupsExist);
            mainGroupingParent.appendChild(otherFunctionsExist);
            mainParentMergedViewNew.appendChild(mainHeaderMergedViewNew);
            var emptyHeightHandle = document.createElement('DIV');
            emptyHeightHandle.className = 'emptyHeightHandle';
            emptyHeightHandle.appendChild(mainCustomizeColumnsParent);
            emptyHeightHandle.appendChild(mainRuleColorParent);
            emptyHeightHandle.appendChild(mainGroupingParent);
            mainParentMergedViewNew.appendChild(emptyHeightHandle);
            this._grid.get_element().appendChild(mainParentMergedViewNew);
            mainParentMergedViewNew.style.left = ((mainParentMergedViewNew.parentNode.offsetWidth / 2) - (0.5 * mainParentMergedViewNew.parentNode.offsetWidth) / 2) / 2 + 'px';
            var obj = new com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring(this._grid);
            com.ivp.rad.controls.neogrid.scripts.UpperHeader.isEachRuleFromView = true;
            com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.cntrToMaintainindexruleList = com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.cntToMaintainIndex;
            com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.cntrToMaintainindexruleList = 0;
            if (com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length > 0) {
                this._grid.ruleBasedColoring._createRuleWindow(null, null);
                document.getElementById('addNewRuleParent').setAttribute('frommainview', 'true');
                if (document.getElementById(this._grid.get_id() + '_RuleDivID') != null) {
                    document.getElementById(this._grid.get_id() + '_RuleDivID').style.display = 'block';
                }
            }
            Array.forEach(com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList, Function.createDelegate(this, function (o) {
                var realValue = (o).RightOperand;
                eval('realValue.replace(\"/\\B(?=(\\d{3})+(?!\\d))/g\",\",\")');
                obj.addRulesToPopUp((o).ColumnName, (o).Operator, (o).RightOperand, (o).ColorCode, (o).OpType, (o).DataType, (o).RowColor, true, false, realValue);
            }));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(mainParentMergedViewNew, 'click', Function.createDelegate(this, this._mergerMainDivHandler));
        }
        else {
            document.getElementById(this._grid.get_GridInfo().GridId + '_mainParentMergedViewNew').style.display = 'block';
        }
    },

    createMergedViewPopUp: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createMergedViewPopUp(saveInformation, customFormatMapping) {
        /// <param name="saveInformation" type="Array">
        /// </param>
        /// <param name="customFormatMapping" type="Object">
        /// </param>
        this.displayColumnNames = [];
        this.columnsToBevisible = [];
        this.columnsToBeHidden = [];
        this.columnSequence = [];
        this._saveViewInformation = [];
        var columNames = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
        var visibleGridColumns = window.Object.keys(this.viewColumnsToDictionary);
        this._hiddenColumnListNew = [];
        this._hiddenColumnListReal = [];
        for (var i = 0; i < this._grid.get_GridInfo().ColumnsToHide.length; i++) {
            if (Array.contains(columNames, (this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName)) {
                Array.add(this._hiddenColumnListNew, this._grid.get_GridInfo().ColumnNameMapping[(this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName]);
            }
            else {
                Array.add(this._hiddenColumnListNew, (this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName);
            }
            Array.add(this._hiddenColumnListReal, (this._grid.get_GridInfo().ColumnsToHide[i]).ColumnName);
        }
        this.existingColumnNames = [];
        var mergerParentDiv = null;
        if (document.getElementById(this._grid.get_GridInfo().GridId + '_mergerParentDiv') == null) {
            mergerParentDiv = document.createElement('DIV');
            mergerParentDiv.id = this._grid.get_GridInfo().GridId + '_mergerParentDiv';
            mergerParentDiv.className = 'mergerParentDiv';
            var mergerMainContentDiv = document.createElement('DIV');
            mergerMainContentDiv.id = this._grid.get_GridInfo().GridId + '_mergerMainContentDiv';
            mergerMainContentDiv.className = 'mergerMainContentDiv';
            var mergerHeaderDiv = document.createElement('DIV');
            mergerHeaderDiv.id = this._grid.get_GridInfo().GridId + '_mergerHeaderDiv';
            mergerHeaderDiv.className = 'mergerHeaderDiv';
            mergerHeaderDiv.innerText = 'MERGER';
            var mergerTabsMainDiv = document.createElement('DIV');
            mergerTabsMainDiv.id = this._grid.get_GridInfo().GridId + '_mergerTabsMainDiv';
            mergerTabsMainDiv.className = 'mergerTabsMainDiv';
            var mergerTab1 = document.createElement('DIV');
            mergerTab1.id = this._grid.get_GridInfo().GridId + '_mergerTab1';
            mergerTab1.className = 'mergerTabs';
            if (this._currentLayout.ViewName !== '' && this._currentLayout.ViewName != null) {
                mergerTab1.innerText = 'MANAGE VIEW' + ' ' + ' ' + ' ' + 'Layout Loaded' + ' ' + this._currentLayout.ViewName;
            }
            else {
                mergerTab1.innerText = 'MANAGE VIEW';
            }
            mergerTabsMainDiv.appendChild(mergerTab1);
            var applyButtonMainDiv = document.createElement('DIV');
            applyButtonMainDiv.className = 'applyButtonMainDiv';
            var backButton = document.createElement('DIV');
            backButton.id = this._grid.get_id() + '_backButton';
            backButton.className = 'ViewBackButton';
            var applyButton = document.createElement('DIV');
            applyButton.id = this._grid.get_id() + '_applyButtonManageView';
            applyButton.innerText = 'Preview';
            applyButton.className = 'applyButtonManageView';
            var saveInLayout = document.createElement('DIV');
            saveInLayout.id = this._grid.get_id() + '_saveAsLayoutManageView';
            saveInLayout.innerText = 'Save As Layout';
            saveInLayout.className = 'saveAsLayoutManageView';
            var cancelButton = document.createElement('DIV');
            cancelButton.id = this._grid.get_id() + '_cancelButton';
            cancelButton.innerText = 'Cancel';
            cancelButton.className = 'cancelButton';
            var mergerTab2 = document.createElement('DIV');
            mergerTab2.id = this._grid.get_GridInfo().GridId + '_mergerTab2';
            mergerTab2.className = 'mergerTabsChange';
            mergerTab2.innerText = 'CUSTOMIZE COLUMN';
            mergerTabsMainDiv.appendChild(mergerTab1);
            mergerTabsMainDiv.appendChild(cancelButton);
            mergerTabsMainDiv.appendChild(backButton);
            mergerTabsMainDiv.appendChild(applyButton);
            mergerTabsMainDiv.appendChild(mergerTab2);
            mergerTabsMainDiv.appendChild(saveInLayout);
            var mergerSearchToggleParentDiv = document.createElement('DIV');
            mergerSearchToggleParentDiv.id = this._grid.get_GridInfo().GridId + '_mergerSearchToggleParentDiv';
            mergerSearchToggleParentDiv.className = 'mergerSearchToggleParentDiv';
            var searchBarContainer = document.createElement('DIV');
            searchBarContainer.id = this._grid.get_GridInfo().GridId + '_searchBarContainer';
            searchBarContainer.className = 'searchBarContainer';
            var searchIconDiv = document.createElement('DIV');
            searchIconDiv.id = this._grid.get_GridInfo().GridId + '_searchIconDiv';
            searchIconDiv.className = 'searchIconDiv';
            var searchIcon = document.createElement('DIV');
            searchIcon.id = this._grid.get_GridInfo().GridId + '_serachIcon';
            searchIcon.className = 'searchIcon fa fa-search';
            searchIconDiv.appendChild(searchIcon);
            searchBarContainer.appendChild(searchIconDiv);
            mergerSearchToggleParentDiv.appendChild(searchBarContainer);
            mergerMainContentDiv.appendChild(mergerTabsMainDiv);
            mergerMainContentDiv.appendChild(mergerSearchToggleParentDiv);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(mergerSearchToggleParentDiv, 'click', Function.createDelegate(this, this._searchToggleDivHandler));
            var mergerColumnsMainDiv = document.createElement('DIV');
            mergerColumnsMainDiv.id = this._grid.get_GridInfo().GridId + '_mergerColumnsMainDiv';
            mergerColumnsMainDiv.className = 'mergerColumnsMainDiv';
            var columnsExistingInGridParent = document.createElement('DIV');
            columnsExistingInGridParent.id = this._grid.get_GridInfo().GridId + '_columnsExistingInGridParent';
            columnsExistingInGridParent.className = 'columnsExistingInGridParent';
            var mergerFormatterParent = document.createElement('DIV');
            mergerFormatterParent.id = this._grid.get_id() + '_mergerFormatterParent';
            mergerFormatterParent.className = 'mergerFormatterParent';
            var emptyDiv = document.createElement('DIV');
            emptyDiv.style.width = '22%';
            emptyDiv.style.display = 'inline-block';
            var mergerDataType = document.createElement('DIV');
            mergerDataType.id = this._grid.get_id() + '_mergerDataType';
            mergerDataType.className = 'mergerDataType';
            mergerDataType.innerText = 'DATATYPE';
            var mergerUnit = document.createElement('DIV');
            mergerUnit.id = this._grid.get_id() + '_mergerUnit';
            mergerUnit.className = 'mergerUnit';
            mergerUnit.innerText = 'UNIT';
            var mergerNegativeValue = document.createElement('DIV');
            mergerNegativeValue.id = this._grid.get_id() + '_mergerNegativeValue';
            mergerNegativeValue.className = 'mergerNegativeValue';
            mergerNegativeValue.innerText = 'NEGATIVE VALUE';
            var mergerPrefix = document.createElement('DIV');
            mergerPrefix.id = this._grid.get_id() + '_mergerPrefix';
            mergerPrefix.className = 'mergerPrefix';
            mergerPrefix.innerText = 'PREFIX';
            var mergerDecimalPlaces = document.createElement('DIV');
            mergerDecimalPlaces.id = this._grid.get_id() + '_mergerDecimalPlaces';
            mergerDecimalPlaces.className = 'mergerDecimalPlaces';
            mergerDecimalPlaces.innerText = 'DECIMAL PLACES';
            var mergerSample = document.createElement('DIV');
            mergerSample.id = this._grid.get_id() + '_mergerSample';
            mergerSample.className = 'mergerSample';
            mergerSample.innerText = 'EXAMPLE';
            mergerFormatterParent.appendChild(emptyDiv);
            mergerFormatterParent.appendChild(mergerDataType);
            mergerFormatterParent.appendChild(mergerUnit);
            mergerFormatterParent.appendChild(mergerNegativeValue);
            mergerFormatterParent.appendChild(mergerPrefix);
            mergerFormatterParent.appendChild(mergerDecimalPlaces);
            mergerFormatterParent.appendChild(mergerSample);
            mergerMainContentDiv.appendChild(mergerFormatterParent);
            var mergerEachColumnMainParent = null;
            var mergerAddColumnFooterParent = document.createElement('DIV');
            mergerAddColumnFooterParent.id = this._grid.get_id() + '_mergerAddColumnFooterParent';
            mergerAddColumnFooterParent.className = 'mergerAddColumnFooterParent';
            var mergerAddColumnFooter = document.createElement('DIV');
            mergerAddColumnFooter.id = this._grid.get_id() + '_mergerAddColumnFooter';
            mergerAddColumnFooter.className = 'mergerAddColumnFooter';
            mergerAddColumnFooter.innerText = 'ADD COLUMN';
            mergerAddColumnFooterParent.appendChild(mergerAddColumnFooter);
            var mergerDeleteFooter = document.createElement('DIV');
            mergerDeleteFooter.id = this._grid.get_id() + '_mergerDeleteFooter';
            mergerDeleteFooter.className = 'mergerDeleteFooter fa fa-caret-right';
            mergerAddColumnFooterParent.appendChild(mergerDeleteFooter);
            var searchBarContainerFooter = document.createElement('DIV');
            searchBarContainerFooter.id = this._grid.get_GridInfo().GridId + '_searchBarContainerFooter';
            searchBarContainerFooter.className = 'searchBarContainer';
            searchBarContainerFooter.style.marginTop = '10px';
            searchBarContainerFooter.style.marginLeft = '75px';
            searchBarContainerFooter.style.display = 'none';
            var searchIconDivFooter = document.createElement('DIV');
            searchIconDivFooter.id = this._grid.get_GridInfo().GridId + '_searchIconDivFooter';
            searchIconDivFooter.className = 'searchIconDiv';
            var searchIconFooter = document.createElement('DIV');
            searchIconFooter.id = this._grid.get_GridInfo().GridId + '_serachIconFooter';
            searchIconFooter.className = 'searchIcon fa fa-search';
            searchIconDivFooter.appendChild(searchIconFooter);
            searchBarContainerFooter.appendChild(searchIconDivFooter);
            mergerAddColumnFooterParent.appendChild(searchBarContainerFooter);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(searchBarContainerFooter, 'click', Function.createDelegate(this, this._searchToggleDivHandlerFooter));
            var viewColumnsMainDiv = document.createElement('DIV');
            viewColumnsMainDiv.id = this._grid.get_id() + '_viewColumnsMainDiv';
            viewColumnsMainDiv.className = 'viewColumnsMainDiv';
            this.displayColumnNames = window.Object.keys(this._grid.get_GridInfo().ColumnNameMapping);
            var FormattingColumnNames = window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping);
            for (var i = 0; i < this.columnMapInfo.length; i++) {
                var viewInfoEachObj = this.viewColumnsToDictionary[(this.columnMapInfo[i]).ColumnName];
                if (!Array.contains(this._hiddenColumnListReal, (this.columnMapInfo[i]).ColumnName) && (this.columnMapInfo[i]).ColumnName !== this._grid.get_GridInfo().IdColumnName && Array.contains(visibleGridColumns, (this.columnMapInfo[i]).ColumnName)) {
                    Array.add(this.existingColumnNames, (this.columnMapInfo[i]).ColumnName.toLowerCase());
                    mergerEachColumnMainParent = document.createElement('DIV');
                    mergerEachColumnMainParent.id = this._grid.get_id() + '_mergerEachColumnMainParent' + (this.columnMapInfo[i]).ColumnName;
                    mergerEachColumnMainParent.className = 'mergerEachColumnMainParent';
                    var hamBurger = document.createElement('DIV');
                    hamBurger.id = this._grid.get_id() + '_hamBurger' + (this.columnMapInfo[i]).ColumnName;
                    hamBurger.className = 'hamBurger';
                    if (viewInfoEachObj.color !== '') {
                        hamBurger.style.borderLeft = '3px' + ' ' + 'solid' + ' ' + viewInfoEachObj.color;
                    }
                    var columnsExistingInGridIndividualParent = document.createElement('DIV');
                    columnsExistingInGridIndividualParent.id = this._grid.get_GridInfo().GridId + viewInfoEachObj.ColumnName + '_selectedGridColumnParent';
                    columnsExistingInGridIndividualParent.className = 'columnsExistingInGridIndividualParent';
                    columnsExistingInGridIndividualParent.setAttribute('gridid', this._grid.get_GridInfo().GridId);
                    var columnsExistingInGridIndividualChild = document.createElement('DIV');
                    columnsExistingInGridIndividualChild.id = this._grid.get_GridInfo().GridId + viewInfoEachObj.ColumnName + '_selectedGridColumnChild';
                    columnsExistingInGridIndividualChild.setAttribute('value', viewInfoEachObj.ColumnName);
                    columnsExistingInGridIndividualChild.className = 'columnsExistingInGridIndividualChild';
                    columnsExistingInGridIndividualChild.innerText = viewInfoEachObj.DisplayName.toString();
                    columnsExistingInGridIndividualChild.setAttribute('realname', viewInfoEachObj.ColumnName);
					columnsExistingInGridIndividualChild.setAttribute('title', viewInfoEachObj.DisplayName.toString());
                    columnsExistingInGridIndividualParent.appendChild(columnsExistingInGridIndividualChild);
                    mergerEachColumnMainParent.appendChild(hamBurger);
                    mergerEachColumnMainParent.appendChild(columnsExistingInGridIndividualParent);
                    var mergerEachColumnDataType = document.createElement('DIV');
                    mergerEachColumnDataType.id = viewInfoEachObj.ColumnName + '_mergerEachColumnDataType';
                    mergerEachColumnDataType.className = 'mergerEachColumnDataType';
                    var mergerEachColumnSample = document.createElement('DIV');
                    mergerEachColumnSample.id = viewInfoEachObj.ColumnName + '_mergerEachColumnSample';
                    mergerEachColumnSample.className = 'mergerEachColumnSample';
                    mergerEachColumnSample.innerText = 'None';
                    var formatDetails = new com.ivp.rad.controls.neogrid.scripts.CustomFormatter();
                    if (Array.contains(FormattingColumnNames, viewInfoEachObj.ColumnName)) {
                        formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[viewInfoEachObj.ColumnName];
                        if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.string) {
                            mergerEachColumnDataType.innerText = 'String';
                            mergerEachColumnSample.innerText = 'aaabbbccc';
                            mergerEachColumnSample.style.textAlign = 'left';
                        }
                        if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.currency) {
                            mergerEachColumnDataType.innerText = 'Currency';
                            mergerEachColumnSample.innerText = '123456';
                            mergerEachColumnSample.style.textAlign = 'right';
                        }
                        if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.percentage) {
                            mergerEachColumnDataType.innerText = 'Percentage';
                            mergerEachColumnSample.innerText = '123456';
                            mergerEachColumnSample.style.textAlign = 'right';
                        }
                        if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.number) {
                            mergerEachColumnDataType.innerText = 'Number';
                            mergerEachColumnSample.innerText = '123456';
                            mergerEachColumnSample.style.textAlign = 'right';
                        }
                        if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.none) {
                            mergerEachColumnDataType.innerText = 'None';
                            mergerEachColumnSample.innerText = '123456';
                            mergerEachColumnSample.style.textAlign = 'right';
                        }
                        this.createFormattedSampleValue(mergerEachColumnSample, formatDetails);
                    }
                    else {
                        var value = viewInfoEachObj.DataType.toString();
                        switch (value) {
                            case 'System.String':
                            case 'System.Boolean':
                                mergerEachColumnDataType.innerText = 'String';
                                mergerEachColumnSample.innerText = 'aaabbbccc';
                                mergerEachColumnSample.style.textAlign = 'left';
                                break;
                            case 'System.DateTime':
                                mergerEachColumnDataType.innerText = 'DateTime';
                                mergerEachColumnSample.innerText = '12/31/2014';
                                mergerEachColumnSample.style.textAlign = 'right';
                                break;
                            case 'System.Decimal':
                            case 'System.Double':
                            case 'System.Int32':
                                mergerEachColumnDataType.innerText = 'Number';
                                mergerEachColumnSample.innerText = '123456';
                                mergerEachColumnSample.style.textAlign = 'right';
                                break;
                        }
                    }
                    var mergerEachColumnUnit = document.createElement('DIV');
                    mergerEachColumnUnit.id = viewInfoEachObj.ColumnName + '_mergerEachColumnUnit';
                    mergerEachColumnUnit.className = 'mergerEachColumnUnit';
                    if (Array.contains(FormattingColumnNames, viewInfoEachObj.ColumnName)) {
                        formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[viewInfoEachObj.ColumnName];
                        if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.none) {
                            mergerEachColumnUnit.innerText = 'None';
                        }
                        if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.thousands) {
                            mergerEachColumnUnit.innerText = 'Thousands';
                        }
                        if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.billions) {
                            mergerEachColumnUnit.innerText = 'Billions';
                        }
                        if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.millions) {
                            mergerEachColumnUnit.innerText = 'Millions';
                        }
                        this.createFormattedSampleValue(mergerEachColumnSample, formatDetails);
                    }
                    else {
                        mergerEachColumnUnit.innerText = 'None';
                    }
                    var mergerEachColumnNegativeValue = document.createElement('DIV');
                    mergerEachColumnNegativeValue.id = viewInfoEachObj.ColumnName + '_mergerEachColumnNegativeValue';
                    mergerEachColumnNegativeValue.className = 'mergerEachColumnNegativeValue';
                    if (Array.contains(FormattingColumnNames, viewInfoEachObj.ColumnName)) {
                        formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[viewInfoEachObj.ColumnName];
                        if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULT) {
                            mergerEachColumnNegativeValue.innerText = 'Default';
                        }
                        if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULTBRAC) {
                            mergerEachColumnNegativeValue.innerText = 'Default Brac';
                        }
                        if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLORED) {
                            mergerEachColumnNegativeValue.innerText = 'Colored';
                        }
                        if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLOREDBRAC) {
                            mergerEachColumnNegativeValue.innerText = 'Colored Brac';
                        }
                        this.createFormattedSampleValue(mergerEachColumnSample, formatDetails);
                    }
                    else {
                        mergerEachColumnNegativeValue.innerText = 'None';
                    }
                    var mergerEachColumnPrefix = document.createElement('DIV');
                    mergerEachColumnPrefix.id = viewInfoEachObj.ColumnName + '_mergerEachColumnPrefix';
                    mergerEachColumnPrefix.className = 'mergerEachColumnPrefix';
                    if (Array.contains(FormattingColumnNames, viewInfoEachObj.ColumnName)) {
                        formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[viewInfoEachObj.ColumnName];
                        if (formatDetails.Prefix !== '') {
                            mergerEachColumnPrefix.innerText = formatDetails.Prefix;
                        }
                        this.createFormattedSampleValue(mergerEachColumnSample, formatDetails);
                    }
                    else {
                        mergerEachColumnPrefix.innerText = 'None';
                    }
                    var mergerEachColumnDecimalPlaces = document.createElement('DIV');
                    mergerEachColumnDecimalPlaces.id = viewInfoEachObj.ColumnName + '_mergerEachColumnDecimalPlaces';
                    mergerEachColumnDecimalPlaces.className = 'mergerEachColumnDecimalPlaces';
                    if (Array.contains(FormattingColumnNames, viewInfoEachObj.ColumnName)) {
                        formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[viewInfoEachObj.ColumnName];
                        if (formatDetails.DecimalPlaces !== 0) {
                            mergerEachColumnDecimalPlaces.innerText = formatDetails.DecimalPlaces.toString();
                        }
                        this.createFormattedSampleValue(mergerEachColumnSample, formatDetails);
                    }
                    else {
                        mergerEachColumnDecimalPlaces.innerText = 'None';
                    }
                    var mergerColumnDeleteIcon = document.createElement('DIV');
                    mergerColumnDeleteIcon.id = viewInfoEachObj.ColumnName + '_mergerColumnDeleteIcon';
                    mergerColumnDeleteIcon.className = 'mergerColumnDeleteIcon fa fa-trash-o';
                    var mergerColumnRefreshIcon = document.createElement('DIV');
                    mergerColumnRefreshIcon.id = viewInfoEachObj.ColumnName + '_mergerColumnRefreshIcon';
                    mergerColumnRefreshIcon.className = 'mergerColumnRefreshIcon';
                    mergerEachColumnMainParent.appendChild(mergerEachColumnDataType);
                    mergerEachColumnMainParent.appendChild(mergerEachColumnUnit);
                    mergerEachColumnMainParent.appendChild(mergerEachColumnNegativeValue);
                    mergerEachColumnMainParent.appendChild(mergerEachColumnPrefix);
                    mergerEachColumnMainParent.appendChild(mergerEachColumnDecimalPlaces);
                    mergerEachColumnMainParent.appendChild(mergerEachColumnSample);
                    mergerEachColumnMainParent.appendChild(mergerColumnRefreshIcon);
                    mergerEachColumnMainParent.appendChild(mergerColumnDeleteIcon);
                    mergerColumnsMainDiv.appendChild(mergerEachColumnMainParent);
                }
            }
            mergerMainContentDiv.appendChild(mergerColumnsMainDiv);
            mergerMainContentDiv.appendChild(mergerAddColumnFooterParent);
            mergerMainContentDiv.appendChild(viewColumnsMainDiv);
            mergerMainContentDiv.appendChild(applyButtonMainDiv);
            mergerParentDiv.appendChild(mergerMainContentDiv);
            this._grid.get_element().appendChild(mergerParentDiv);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(mergerParentDiv);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(mergerParentDiv, 'click', Function.createDelegate(this, this._mergerDivHandler));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(mergerParentDiv, 'keyup', Function.createDelegate(this, this._mergerKeyUpHandler));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(mergerParentDiv, 'mousemove', Function.createDelegate(this, this._mergerMouseMoveHandler));
            eval('$(\'#' + this._grid.get_id() + '_mergerColumnsMainDiv' + '\'' + ').sortable({axis: \'y\',containment: \'parent\',handle:\'.hamBurger\'})');
            eval('$(\"#' + this._grid.get_id() + '_mergerMainContentDiv' + '\").find(\'.columnsExistingInGridIndividualParent\').each(function(k,v){$(v).qtip({content:$find($(this).attr(\'gridid\')).upperHeader.createQtipOnHover($(v).children()[0].innerText),style: {width : 400,classes: \'qtip-light qtipCustom\'},position: {my: \'center left\',at: \'center right\',target:$(this)},show: \'mouseover\',hide: \'mouseout\'})});');
        }
        else {
            mergerParentDiv = document.getElementById(this._grid.get_GridInfo().GridId + '_mergerParentDiv');
            document.getElementById(this._grid.get_GridInfo().GridId + '_mergerParentDiv').style.display = '';
            com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(mergerParentDiv);
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(mergerParentDiv, 'click', Function.createDelegate(this, this._mergerDivHandler));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(mergerParentDiv, 'keyup', Function.createDelegate(this, this._mergerKeyUpHandler));
            com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(mergerParentDiv, 'mousemove', Function.createDelegate(this, this._mergerMouseMoveHandler));
            eval('$(\'#' + this._grid.get_id() + '_mergerColumnsMainDiv' + '\'' + ').sortable({axis: \'y\',containment: \'parent\',handle:\'.hamBurger\'})');
            eval('$(\"#' + this._grid.get_id() + '_mergerMainContentDiv' + '\").find(\'.columnsExistingInGridIndividualParent\').each(function(k,v){$(v).qtip({content:$find($(this).attr(\'gridid\')).upperHeader.createQtipOnHover($(v).children()[0].innerText),style: {width : 400,classes: \'qtip-light qtipCustom\'},position: {my: \'center left\',at: \'center right\',target:$(this)},show: \'mouseover\',hide: \'mouseout\'})});');
        }
        mergerParentDiv.style.left = ((mergerParentDiv.parentNode.offsetWidth / 2) - (0.5 * mergerParentDiv.parentNode.offsetWidth) / 2) / 2 + 'px';
    },

    _mergerMouseMoveHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_mergerMouseMoveHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (this.divToBeMoved != null) {
            this.divToBeMoved.style.top = (e.clientY - 110) + 'px';
        }
    },

    _mergerKeyUpHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_mergerKeyUpHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'firstPrefixOption') {
            this.createSampleValue(e);
        }
        if (e.target.className === 'firstdecimalPlacesOption') {
            this.createSampleValue(e);
        }
        if (e.target.className === 'searchColumnDiv') {
            this.createColumnsInSearchMode(e);
        }
        if (e.target.className === 'searchColumnDivFooter') {
            this.createViewColumnsInSearchMode(e);
        }
    },

    createViewColumnsInSearchMode: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createViewColumnsInSearchMode(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
       // eval('$(\"#' + this._grid.get_id() + '_viewColumnsMainDiv\").empty()');
        //for (var i = 0; i < this._grid.get_GridInfo().ViewColumns.length; i++) {
        //    if ((!Array.contains(this.existingColumnNames, (this._grid.get_GridInfo().ViewColumns[i]).ColumnName.toLowerCase()) && this._grid.get_GridInfo().IdColumnName !== (this._grid.get_GridInfo().ViewColumns[i]).DisplayName) && (this._grid.get_GridInfo().ViewColumns[i]).DisplayName.toUpperCase().indexOf((e.target).value.toUpperCase()) !== -1) {
        //        var viewColumnsIndividualParent = document.createElement('DIV');
        //        viewColumnsIndividualParent.id = this._grid.get_GridInfo().GridId + (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_viewColumnsIndividualParent';
        //        viewColumnsIndividualParent.className = 'viewColumnsIndividualParent';
        //        var viewColumnsIndividualChild = document.createElement('DIV');
        //        viewColumnsIndividualChild.setAttribute('realname', (this._grid.get_GridInfo().ViewColumns[i]).ColumnName);
        //        viewColumnsIndividualChild.id = this._grid.get_GridInfo().GridId + (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_viewColumnsIndividualChild';
        //        viewColumnsIndividualChild.className = 'viewColumnsIndividualChild';
        //        viewColumnsIndividualChild.innerText = (this._grid.get_GridInfo().ViewColumns[i]).DisplayName;
        //        viewColumnsIndividualParent.className = 'viewColumnsIndividualParent';
        //        if ((this._grid.get_GridInfo().ViewColumns[i]).color !== '') {
        //            viewColumnsIndividualParent.style.borderLeft = '3px' + ' ' + 'solid' + ' ' + (this._grid.get_GridInfo().ViewColumns[i]).color;
        //        }
        //        viewColumnsIndividualChild.className = 'viewColumnsIndividualChild';
        //        viewColumnsIndividualParent.appendChild(viewColumnsIndividualChild);
        //        document.getElementById(this._grid.get_id() + '_viewColumnsMainDiv').appendChild(viewColumnsIndividualParent);
        //    }
        //}
        $(".RADViewHidden").removeClass("RADViewHidden");
        $(".RADCategoryHidden").removeClass("RADCategoryHidden")
        $(".CateGorieSWrapDiv").each(function () {
            for (var i = 0 ; i < $(this).find(".viewColumnsIndividualChild").length; i++) {
                if ($($(this).find(".viewColumnsIndividualChild")[i]).text().toLowerCase().indexOf(e.target.value.toLowerCase()) == -1)
                {
                    $($($(this).find(".viewColumnsIndividualChild")[i]).closest(".viewColumnsIndividualParent")).addClass("RADViewHidden");
                }
            }
        })

        $(".CateGorieSWrapDiv").each(function () {
            if($(this).find(".viewColumnsIndividualParent").length == $(this).find(".RADViewHidden").length)
            {
                $(this).addClass("RADCategoryHidden");
            }
        })

        //document.getElementById(this._grid.get_id() + '_mergerMainContentDiv').appendChild(document.getElementById(this._grid.get_id() + '_viewColumnsMainDiv'));
    },

    createColumnsInSearchMode: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createColumnsInSearchMode(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        eval('$(\"#' + this._grid.get_id() + '_mergerColumnsMainDiv\").empty()');
        var mergerEachColumnMainParent = null;
        var formatDetails = new com.ivp.rad.controls.neogrid.scripts.CustomFormatter();
        var FormattingColumnNames = window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping);
        for (var i = 0; i < this._grid.get_GridInfo().ViewColumns.length; i++) {
            if ((!Array.contains(this._hiddenColumnListReal, (this._grid.get_GridInfo().ViewColumns[i]).ColumnName) && (this._grid.get_GridInfo().ViewColumns[i]).ColumnName !== this._grid.get_GridInfo().IdColumnName && Array.contains(this._grid.get_GridInfo().ColumnList, (this._grid.get_GridInfo().ViewColumns[i]).DisplayName) && (this._grid.get_GridInfo().ViewColumns[i]).ColumnName.indexOf((e.target).value.toLowerCase()) !== -1)) {
                mergerEachColumnMainParent = document.createElement('DIV');
                mergerEachColumnMainParent.id = this._grid.get_id() + '_mergerEachColumnMainParent' + (this._grid.get_GridInfo().ViewColumns[i]).ColumnName;
                mergerEachColumnMainParent.className = 'mergerEachColumnMainParent';
                var hamBurger = document.createElement('DIV');
                hamBurger.id = this._grid.get_id() + '_hamBurger' + (this._grid.get_GridInfo().ViewColumns[i]).ColumnName;
                hamBurger.className = 'hamBurger';
                var columnsExistingInGridIndividualParent = document.createElement('DIV');
                columnsExistingInGridIndividualParent.id = this._grid.get_GridInfo().GridId + (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_selectedGridColumnParent';
                columnsExistingInGridIndividualParent.className = 'columnsExistingInGridIndividualParent';
                if ((this._grid.get_GridInfo().ViewColumns[i]).color !== '') {
                    hamBurger.style.borderLeft = '3px' + ' ' + 'solid' + ' ' + (this._grid.get_GridInfo().ViewColumns[i]).color;
                }
                var columnsExistingInGridIndividualChild = document.createElement('DIV');
                columnsExistingInGridIndividualChild.id = this._grid.get_GridInfo().GridId + (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_selectedGridColumnChild';
                columnsExistingInGridIndividualChild.setAttribute('value', (this._grid.get_GridInfo().ViewColumns[i]).ColumnName);
				columnsExistingInGridIndividualChild.setAttribute('realname', (this._grid.get_GridInfo().ViewColumns[i]).ColumnName);
                columnsExistingInGridIndividualChild.className = 'columnsExistingInGridIndividualChild';
                columnsExistingInGridIndividualChild.innerText = (this._grid.get_GridInfo().ViewColumns[i]).DisplayName.toString();
                columnsExistingInGridIndividualParent.appendChild(columnsExistingInGridIndividualChild);
                mergerEachColumnMainParent.appendChild(hamBurger);
                mergerEachColumnMainParent.appendChild(columnsExistingInGridIndividualParent);
                var mergerEachColumnDataType = document.createElement('DIV');
                mergerEachColumnDataType.id = (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_mergerEachColumnDataType';
                mergerEachColumnDataType.className = 'mergerEachColumnDataType';
                var mergerEachColumnSample = document.createElement('DIV');
                mergerEachColumnSample.id = (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_mergerEachColumnSample';
                mergerEachColumnSample.className = 'mergerEachColumnSample';
                mergerEachColumnSample.innerText = 'None';
                formatDetails = new com.ivp.rad.controls.neogrid.scripts.CustomFormatter();
                if (Array.contains(FormattingColumnNames, (this._grid.get_GridInfo().ViewColumns[i]).ColumnName)) {
                    formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[(this._grid.get_GridInfo().ViewColumns[i]).ColumnName];
                    if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.string) {
                        mergerEachColumnDataType.innerText = 'String';
                        mergerEachColumnSample.innerText = 'aaabbbccc';
                        mergerEachColumnSample.style.textAlign = 'left';
                    }
                    if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.currency) {
                        mergerEachColumnDataType.innerText = 'Currency';
                        mergerEachColumnSample.innerText = '123456';
                        mergerEachColumnSample.style.textAlign = 'right';
                    }
                    if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.percentage) {
                        mergerEachColumnDataType.innerText = 'Percentage';
                        mergerEachColumnSample.innerText = '123456';
                        mergerEachColumnSample.style.textAlign = 'right';
                    }
                    if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.number) {
                        mergerEachColumnDataType.innerText = 'Number';
                        mergerEachColumnSample.innerText = '123456';
                        mergerEachColumnSample.style.textAlign = 'right';
                    }
                    if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.none) {
                        mergerEachColumnDataType.innerText = 'None';
                        mergerEachColumnSample.innerText = '123456';
                        mergerEachColumnSample.style.textAlign = 'right';
                    }
                    this.createFormattedSampleValue(mergerEachColumnSample, formatDetails);
                }
                else {
                    var value = (this._grid.get_GridInfo().ViewColumns[i]).DataType.toString();
                    switch (value) {
                        case 'System.String':
                        case 'System.DateTime':
                        case 'System.Boolean':
                            mergerEachColumnDataType.innerText = 'String';
                            mergerEachColumnSample.innerText = 'aaabbbccc';
                            mergerEachColumnSample.style.textAlign = 'left';
                            break;
                        case 'System.Decimal':
                        case 'System.Double':
                        case 'System.Int32':
                            mergerEachColumnDataType.innerText = 'Number';
                            mergerEachColumnSample.innerText = '123456';
                            mergerEachColumnSample.style.textAlign = 'right';
                            break;
                    }
                }
                var mergerEachColumnUnit = document.createElement('DIV');
                mergerEachColumnUnit.id = (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_mergerEachColumnUnit';
                mergerEachColumnUnit.className = 'mergerEachColumnUnit';
                mergerEachColumnUnit.innerText = 'None';
                var mergerEachColumnNegativeValue = document.createElement('DIV');
                mergerEachColumnNegativeValue.id = (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_mergerEachColumnNegativeValue';
                mergerEachColumnNegativeValue.className = 'mergerEachColumnNegativeValue';
                mergerEachColumnNegativeValue.innerText = 'None';
                var mergerEachColumnPrefix = document.createElement('DIV');
                mergerEachColumnPrefix.id = (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_mergerEachColumnPrefix';
                mergerEachColumnPrefix.className = 'mergerEachColumnPrefix';
                mergerEachColumnPrefix.innerText = 'None';
                var mergerEachColumnDecimalPlaces = document.createElement('DIV');
                mergerEachColumnDecimalPlaces.id = (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_mergerEachColumnDecimalPlaces';
                mergerEachColumnDecimalPlaces.className = 'mergerEachColumnDecimalPlaces';
                mergerEachColumnDecimalPlaces.innerText = 'None';
                var mergerColumnDeleteIcon = document.createElement('DIV');
                mergerColumnDeleteIcon.id = (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_mergerColumnDeleteIcon';
                mergerColumnDeleteIcon.className = 'mergerColumnDeleteIcon fa fa-trash-o';
                var mergerColumnRefreshIcon = document.createElement('DIV');
                mergerColumnRefreshIcon.id = (this._grid.get_GridInfo().ViewColumns[i]).ColumnName + '_mergerColumnRefreshIcon';
                mergerColumnRefreshIcon.className = 'mergerColumnRefreshIcon';
                mergerEachColumnMainParent.appendChild(mergerEachColumnDataType);
                mergerEachColumnMainParent.appendChild(mergerEachColumnUnit);
                mergerEachColumnMainParent.appendChild(mergerEachColumnNegativeValue);
                mergerEachColumnMainParent.appendChild(mergerEachColumnPrefix);
                mergerEachColumnMainParent.appendChild(mergerEachColumnDecimalPlaces);
                mergerEachColumnMainParent.appendChild(mergerEachColumnSample);
                mergerEachColumnMainParent.appendChild(mergerColumnRefreshIcon);
                mergerEachColumnMainParent.appendChild(mergerColumnDeleteIcon);
                document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').appendChild(mergerEachColumnMainParent);
            }
        }
        document.getElementById(this._grid.get_id() + '_mergerMainContentDiv').appendChild(document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv'));
        document.getElementById(this._grid.get_id() + '_mergerMainContentDiv').insertBefore(document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv'), document.getElementById(this._grid.get_id() + '_mergerAddColumnFooterParent'));
    },

    createFormattedSampleValue: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createFormattedSampleValue(Sample, formatDetails) {
        /// <param name="Sample" type="Object" domElement="true">
        /// </param>
        /// <param name="formatDetails" type="com.ivp.rad.controls.neogrid.scripts.CustomFormatter">
        /// </param>
        Sample.innerText = '';
        switch (formatDetails.DataType) {
            case com.ivp.rad.controls.neogrid.scripts.FormatterDataType.string:
                Sample.innerText = 'aaabbbccc';
                Sample.style.textAlign = 'left';
                break;
            case com.ivp.rad.controls.neogrid.scripts.FormatterDataType.percentage:
                Sample.innerText = '123456';
                Sample.style.textAlign = 'right';
                break;
            case com.ivp.rad.controls.neogrid.scripts.FormatterDataType.number:
                Sample.innerText = '123456';
                Sample.style.textAlign = 'right';
                break;
            case com.ivp.rad.controls.neogrid.scripts.FormatterDataType.none:
                Sample.innerText = '123456';
                Sample.style.textAlign = 'right';
                break;
            case com.ivp.rad.controls.neogrid.scripts.FormatterDataType.currency:
                Sample.innerText = '123456';
                Sample.style.textAlign = 'right';
                break;
        }
        switch (formatDetails.Unit) {
            case com.ivp.rad.controls.neogrid.scripts.Unit.none:
                break;
            case com.ivp.rad.controls.neogrid.scripts.Unit.thousands:
                Sample.innerText = '123 K';
                break;
            case com.ivp.rad.controls.neogrid.scripts.Unit.millions:
                Sample.innerText = '123,456';
                break;
            case com.ivp.rad.controls.neogrid.scripts.Unit.billions:
                Sample.innerText = '0 M';
                break;
        }
        var formatString = '';
        if (formatDetails.DecimalPlaces !== 0) {
            formatString = '{0:N' + formatDetails.DecimalPlaces + '}';
            Sample.innerText = String.format(formatString, 123456);
        }
        if (formatDetails.Prefix !== '' && formatDetails.Prefix != null) {
            Sample.innerText = formatDetails.Prefix + Sample.innerText;
        }
        else {
            Sample.innerText = Sample.innerText;
        }
        switch (formatDetails.NegativeValue) {
            case com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLORED:
                Sample.style.color = 'Red';
                break;
            case com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLOREDBRAC:
                Sample.innerText = '(' + Sample.innerText + ')';
                Sample.style.color = 'Red';
                break;
            case com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULT:
                Sample.style.color = '#726F6F';
                break;
            case com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULTBRAC:
                Sample.innerText = '(' + Sample.innerText + ')';
                Sample.style.color = '#726F6F';
                break;
        }
    },

    createSampleValue: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createSampleValue(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var mainParent = eval('$(e.target).closest(\".mergerEachColumnMainParent\")[0]');
        if (mainParent.childNodes[2].innerText === 'String') {
            mainParent.childNodes[7].innerText = 'aaabbbccc';
            mainParent.childNodes[7].style.textAlign = 'left';
        }
        else {
            mainParent.childNodes[7].innerText = '123456';
            mainParent.childNodes[7].style.textAlign = 'right';
        }
        switch (mainParent.childNodes[2].childNodes[0].innerText) {
            case 'Number':
                break;
            case 'Currency':
                break;
            case 'Percentage':
                break;
        }
        switch (mainParent.childNodes[3].childNodes[0].innerText) {
            case 'None':
                break;
            case 'Thousands':
                mainParent.childNodes[7].innerText = '123 K';
                break;
            case 'Millions':
                mainParent.childNodes[7].innerText = '1.23456M';
                break;
            case 'Billions':
                mainParent.childNodes[7].innerText = '0 B';
                break;
        }
        var formatString = '';
        if (mainParent.childNodes[6].childNodes[0].innerText !== '' && mainParent.childNodes[6].childNodes[0].innerText !== '0' && mainParent.childNodes[6].innerText !== 'None') {
            if (parseInt(mainParent.childNodes[6].childNodes[0].innerText) > 8) {
                mainParent.childNodes[6].childNodes[0].innerText = '8';
            }
            formatString = '{0:N' + mainParent.childNodes[6].childNodes[0].innerText + '}';
            mainParent.childNodes[7].innerText = String.format(formatString, 123456);
        }
        if (mainParent.childNodes[5].childNodes[0].innerText !== '') {
            mainParent.childNodes[7].innerText = mainParent.childNodes[5].childNodes[0].innerText + mainParent.childNodes[7].innerText;
        }
        if (mainParent.childNodes[4].childNodes[0].getAttribute('value') != null) {
            switch (mainParent.childNodes[4].childNodes[0].getAttribute('value').toString()) {
                case 'Default':
                    mainParent.childNodes[7].style.color = '#726F6F';
                    break;
                case 'Default Brac':
                    mainParent.childNodes[7].innerText = '(' + mainParent.childNodes[7].innerText + ')';
                    mainParent.childNodes[7].style.color = '#726F6F';
                    break;
                case 'Colored':
                    mainParent.childNodes[7].style.color = 'Red';
                    break;
                case 'Colored Brac':
                    mainParent.childNodes[7].innerText = '(' + mainParent.childNodes[7].innerText + ')';
                    mainParent.childNodes[7].style.color = 'Red';
                    break;
            }
        }
    },

    clickHandlerOnMergerMainBody: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$clickHandlerOnMergerMainBody(e, children) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <param name="children" type="Number" integer="true">
        /// </param>
        this.testSampleValue = false;
        if (eval('$(e.target).closest(\".mergerEachColumnMainParent\").children()[2].innerText') !== 'DateTime') {
            if ((e.target.className !== 'firstnegativeValueOption' || e.target.className !== 'firstDataTypeOption' || e.target.className !== 'firstUnitOption') && (e.target.parentNode.className !== 'parentEmptyOptionNegative' && e.target.parentNode.className !== 'parentEmptyOptionDataType' && e.target.parentNode.className !== 'parentEmptyOption')) {
                var element = eval('$(\'.firstnegativeValueOption\')');
                if (eval('element.length') > 0) {
                    eval('element.next().remove()');
                }
                element = eval('$(\'.firstDataTypeOption\')');
                if (eval('element.length') > 0) {
                    eval('element.next().remove()');
                }
                element = eval('$(\'.firstUnitOption\')');
                if (eval('element.length') > 0) {
                    eval('element.next().remove()');
                }
            }
            var FormattingColumnNames = [];
            FormattingColumnNames = window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping);
            var formatDetails = new com.ivp.rad.controls.neogrid.scripts.CustomFormatter();
            var mainParent = eval('$(e.target).closest(\".mergerEachColumnMainParent\")[0]');
            if (mainParent.childNodes[2].innerText === 'DateTime') {
                mainParent.childNodes[8].className = 'mergerColumnRefreshIcon';
            }
            else {
                mainParent.childNodes[8].className = 'mergerColumnRefreshIcon fa fa-repeat';
                mainParent.childNodes[8].title = 'Reset Data';
            }
            if (mainParent.childNodes[7].innerText === '123456' || mainParent.childNodes[7].innerText === 'aaabbbccc') {
                this.testSampleValue = true;
            }
            mainParent.childNodes[9].className = 'mergerColumnDeleteIcon fa fa-trash-o';
            if (mainParent.getAttribute('isedit') == null) {
                var dataType = mainParent.childNodes[2].innerText;
                if (dataType !== 'String' && dataType !== 'Percentage') {
                    if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
                        formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[mainParent.childNodes[1].childNodes[0].getAttribute('value').toString()];
                        if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.none) {
                            mainParent.childNodes[2].innerHTML = '<div id=\"dataTypeFirstOption\" contenteditable=false class=\"firstDataTypeOption\">None</div>';
                        }
                        else if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.currency) {
                            mainParent.childNodes[2].innerHTML = '<div id=\"dataTypeFirstOption\" contenteditable=false class=\"firstDataTypeOption\">Currency</div>';
                        }
                        else if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.number) {
                            mainParent.childNodes[2].innerHTML = '<div id=\"dataTypeFirstOption\" contenteditable=false class=\"firstDataTypeOption\">Number</div>';
                        }
                        else if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.percentage) {
                            mainParent.childNodes[2].innerHTML = '<div id=\"dataTypeFirstOption\" contenteditable=false class=\"firstDataTypeOption\">Percentage</div>';
                        }
                    }
                    else {
                        mainParent.childNodes[2].innerHTML = '<div id=\"dataTypeFirstOption\" contenteditable=false class=\"firstDataTypeOption\">Number</div>';
                    }
                    if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
                        formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[mainParent.childNodes[1].childNodes[0].getAttribute('value').toString()];
                        if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.none) {
                            mainParent.childNodes[3].innerHTML = '<div id=\"unitFirstOption\" contenteditable=false class=\"firstUnitOption\">None</div>';
                        }
                        else if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.thousands) {
                            mainParent.childNodes[3].innerHTML = '<div id=\"unitFirstOption\" contenteditable=false class=\"firstUnitOption\">Thousands</div>';
                        }
                        else if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.millions) {
                            mainParent.childNodes[3].innerHTML = '<div id=\"unitFirstOption\" contenteditable=false class=\"firstUnitOption\">Millions</div>';
                        }
                        else if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.billions) {
                            mainParent.childNodes[3].innerHTML = '<div id=\"unitFirstOption\" contenteditable=false class=\"firstUnitOption\">Billions</div>';
                        }
                    }
                    else {
                        mainParent.childNodes[3].innerHTML = '<div id=\"unitFirstOption\" contenteditable=false class=\"firstUnitOption\">None</div>';
                    }
                    if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
                        formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[mainParent.childNodes[1].childNodes[0].getAttribute('value').toString()];
                        if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULT) {
                            mainParent.childNodes[4].innerHTML = '<div id=\"negativeValueFirstOption\" contenteditable=false class=\"firstnegativeValueOption\">Default</div>';
                        }
                        else if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLOREDBRAC) {
                            mainParent.childNodes[4].innerHTML = '<div id=\"negativeValueFirstOption\" contenteditable=false class=\"firstnegativeValueOption\">Colored Brac</div>';
                        }
                        else if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLORED) {
                            mainParent.childNodes[4].innerHTML = '<div id=\"negativeValueFirstOption\" contenteditable=false class=\"firstnegativeValueOption\">Colored</div>';
                        }
                        else if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULTBRAC) {
                            mainParent.childNodes[4].innerHTML = '<div id=\"negativeValueFirstOption\" contenteditable=false class=\"firstnegativeValueOption\">Default Brac</div>';
                        }
                    }
                    else {
                        mainParent.childNodes[4].innerHTML = '<div id=\"negativeValueFirstOption\" contenteditable=false class=\"firstnegativeValueOption\">Default</div>';
                    }
                    if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
                        formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[mainParent.childNodes[1].childNodes[0].getAttribute('value').toString()];
                        if (formatDetails.Prefix !== '') {
                            mainParent.childNodes[5].innerHTML = '<div id=\"prefixFirstOption\" contenteditable=true class=\"firstPrefixOption\">' + formatDetails.Prefix + '</div>';
                        }
                        else {
                            mainParent.childNodes[5].innerHTML = '<div id=\"prefixFirstOption\" contenteditable=true class=\"firstPrefixOption\"></div>';
                        }
                    }
                    else {
                        mainParent.childNodes[5].innerHTML = '<div id=\"prefixFirstOption\" contenteditable=true class=\"firstPrefixOption\"></div>';
                    }
                    if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
                        formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[mainParent.childNodes[1].childNodes[0].getAttribute('value').toString()];
                        if (formatDetails.DecimalPlaces !== 0) {
                            mainParent.childNodes[6].innerHTML = '<div id=\"decimalPlacesFirstOption\" contenteditable=true class=\"firstdecimalPlacesOption\">' + formatDetails.DecimalPlaces + '</div>';
                        }
                        else {
                            mainParent.childNodes[6].innerHTML = '<div id=\"decimalPlacesFirstOption\" contenteditable=true class=\"firstdecimalPlacesOption\">0</div>';
                        }
                    }
                    else {
                        mainParent.childNodes[6].innerHTML = '<div id=\"decimalPlacesFirstOption\" contenteditable=true class=\"firstdecimalPlacesOption\"></div>';
                    }
                    mainParent.childNodes[7].innerText = mainParent.childNodes[7].innerText;
                }
                else {
                    if (dataType === 'String') {
                        if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
                        }
                        else {
                        }
                        mainParent.childNodes[7].innerText = mainParent.childNodes[7].innerText;
                    }
                    else {
                        if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
                            formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[mainParent.childNodes[1].childNodes[0].getAttribute('value').toString()];
                            if (formatDetails.DecimalPlaces !== 0) {
                                mainParent.childNodes[6].innerHTML = '<div id=\"decimalPlacesFirstOption\" contenteditable=true class=\"firstdecimalPlacesOption\">' + formatDetails.DecimalPlaces + '</div>';
                            }
                            else {
                                mainParent.childNodes[6].innerHTML = '<div id=\"decimalPlacesFirstOption\" contenteditable=true class=\"firstdecimalPlacesOption\">0</div>';
                            }
                        }
                        else {
                            mainParent.childNodes[6].innerHTML = '<div id=\"decimalPlacesFirstOption\" contenteditable=true class=\"firstdecimalPlacesOption\"></div>';
                        }
                        mainParent.childNodes[7].innerText = mainParent.childNodes[7].innerText;
                    }
                }
                mainParent.setAttribute('isedit', true);
            }
            else {
                var dataType = mainParent.childNodes[2].innerText;
                if (dataType.trim() === 'Percentage') {
                    if (e.target.className === 'firstDataTypeOption') {
                        if (document.getElementById('parentEmptyOption') == null && document.getElementById('parentEmptyOptionNegative') == null && document.getElementById('parentEmptyOptionDataType') == null) {
                            e.target.parentNode.style.border = '1px solid #d7d7d7';
                            var parentEmptyOption = document.createElement('DIV');
                            parentEmptyOption.className = 'parentEmptyOption';
                            parentEmptyOption.id = 'parentEmptyOption';
                            var parentEmptyOptionDataType = document.createElement('DIV');
                            parentEmptyOptionDataType.className = 'parentEmptyOptionDataType';
                            parentEmptyOptionDataType.id = 'parentEmptyOptionDataType';
                            var numberOption = document.createElement('DIV');
                            numberOption.className = 'number optionselected';
                            numberOption.innerText = 'Number';
                            var currencyOption = document.createElement('DIV');
                            currencyOption.className = 'currencyOption optionselected';
                            currencyOption.innerText = 'Currency';
                            var percentageOption = document.createElement('DIV');
                            percentageOption.className = 'percentageOption optionselected';
                            percentageOption.innerText = 'Percentage';
                            parentEmptyOptionDataType.appendChild(numberOption);
                            parentEmptyOptionDataType.appendChild(currencyOption);
                            parentEmptyOptionDataType.appendChild(percentageOption);
                            mainParent.childNodes[2].appendChild(parentEmptyOptionDataType);
                        }
                        else {
                            if (document.getElementById('parentEmptyOptionDataType').style.display === 'block') {
                                document.getElementById('parentEmptyOptionDataType').style.display = 'none';
                            }
                            else if (document.getElementById('parentEmptyOptionDataType').style.display === 'none') {
                                document.getElementById('parentEmptyOptionDataType').style.display = 'block';
                            }
                            e.target.style.border = '0px solid';
                            e.target.parentNode.style.border = '1px solid #d7d7d7';
                        }
                    }
                }
                if (dataType !== 'String' && dataType.trim() !== 'Percentage') {
                    if (e.target.className === 'firstUnitOption' || e.target.className === '') {
                        if (document.getElementById('parentEmptyOption') == null && document.getElementById('parentEmptyOptionNegative') == null && document.getElementById('parentEmptyOptionDataType') == null) {
                            e.target.parentNode.style.border = '1px solid #d7d7d7';
                            var parentEmptyOption = document.createElement('DIV');
                            parentEmptyOption.id = 'parentEmptyOption';
                            parentEmptyOption.className = 'parentEmptyOption';
                            var noneOption = document.createElement('DIV');
                            noneOption.className = 'noneOption optionselected';
                            noneOption.innerText = 'None';
                            var thousandOption = document.createElement('DIV');
                            thousandOption.className = 'thousandOption optionselected';
                            thousandOption.innerText = 'Thousands';
                            var millionOption = document.createElement('DIV');
                            millionOption.className = 'millionOption optionselected';
                            millionOption.innerText = 'Millions';
                            var billionOption = document.createElement('DIV');
                            billionOption.className = 'billionOption optionselected';
                            billionOption.innerText = 'Billions';
                            e.target.style.border = '0px solid';
                            parentEmptyOption.appendChild(noneOption);
                            parentEmptyOption.appendChild(thousandOption);
                            parentEmptyOption.appendChild(millionOption);
                            parentEmptyOption.appendChild(billionOption);
                            parentEmptyOption.style.display = 'block';
                            mainParent.childNodes[3].appendChild(parentEmptyOption);
                            var parentEmptyOptionNegative = document.createElement('DIV');
                            parentEmptyOptionNegative.className = 'parentEmptyOptionNegative';
                            parentEmptyOptionNegative.id = 'parentEmptyOptionNegative';
                            var defaultOption = document.createElement('DIV');
                            defaultOption.className = 'defaultBrac optionselected';
                            defaultOption.innerText = '-123456';
                            defaultOption.setAttribute('value', 'Default');
                            var defaultBrac = document.createElement('DIV');
                            defaultBrac.className = 'defaultBrac optionselected';
                            defaultBrac.innerText = '(123456)';
                            defaultBrac.setAttribute('value', 'default Brac');
                            var colored = document.createElement('DIV');
                            colored.className = 'colored optionselected';
                            colored.innerText = '-123456';
                            colored.style.color = 'red';
                            colored.setAttribute('value', 'Colored');
                            var coloredBrac = document.createElement('DIV');
                            coloredBrac.className = 'coloredBrac optionselected';
                            coloredBrac.innerText = '(123456)';
                            coloredBrac.style.color = 'red';
                            coloredBrac.setAttribute('value', 'Colored Brac');
                            parentEmptyOptionNegative.style.display = 'none';
                            parentEmptyOptionNegative.appendChild(defaultOption);
                            parentEmptyOptionNegative.appendChild(defaultBrac);
                            parentEmptyOptionNegative.appendChild(colored);
                            parentEmptyOptionNegative.appendChild(coloredBrac);
                            mainParent.childNodes[4].appendChild(parentEmptyOptionNegative);
                            var parentEmptyOptionDataType = document.createElement('DIV');
                            parentEmptyOptionDataType.className = 'parentEmptyOptionDataType';
                            parentEmptyOptionDataType.id = 'parentEmptyOptionDataType';
                            var numberOption = document.createElement('DIV');
                            defaultOption.className = 'number optionselected';
                            defaultOption.innerText = 'Number';
                            var currencyOption = document.createElement('DIV');
                            currencyOption.className = 'currencyOption optionselected';
                            currencyOption.innerText = 'Currency';
                            var percentageOption = document.createElement('DIV');
                            percentageOption.className = 'percentageOption optionselected';
                            percentageOption.innerText = 'Percentage';
                            parentEmptyOptionDataType.style.display = 'none';
                            parentEmptyOptionDataType.appendChild(numberOption);
                            parentEmptyOptionDataType.appendChild(currencyOption);
                            parentEmptyOptionDataType.appendChild(percentageOption);
                            mainParent.childNodes[2].appendChild(parentEmptyOptionDataType);
                        }
                        else {
                            if (document.getElementById('parentEmptyOption').style.display === 'block') {
                                document.getElementById('parentEmptyOption').style.display = 'none';
                            }
                            else if (document.getElementById('parentEmptyOption').style.display === 'none') {
                                document.getElementById('parentEmptyOption').style.display = 'block';
                            }
                            e.target.style.border = '0px solid';
                            e.target.parentNode.style.border = '1px solid #d7d7d7';
                        }
                    }
                    if (e.target.className === 'firstDataTypeOption') {
                        if (document.getElementById('parentEmptyOption') == null && document.getElementById('parentEmptyOptionNegative') == null && document.getElementById('parentEmptyOptionDataType') == null) {
                            e.target.parentNode.style.border = '1px solid #d7d7d7';
                            var parentEmptyOption = document.createElement('DIV');
                            parentEmptyOption.className = 'parentEmptyOption';
                            parentEmptyOption.id = 'parentEmptyOption';
                            var noneOption = document.createElement('DIV');
                            noneOption.className = 'noneOption optionselected';
                            noneOption.innerText = 'None';
                            e.target.style.border = '0px solid';
                            var thousandOption = document.createElement('DIV');
                            thousandOption.className = 'thousandOption optionselected';
                            thousandOption.innerText = 'Thousands';
                            var millionOption = document.createElement('DIV');
                            millionOption.className = 'millionOption optionselected';
                            millionOption.innerText = 'Millions';
                            var billionOption = document.createElement('DIV');
                            billionOption.className = 'billionOption optionselected';
                            billionOption.innerText = 'Billions';
                            parentEmptyOption.appendChild(noneOption);
                            parentEmptyOption.appendChild(thousandOption);
                            parentEmptyOption.appendChild(millionOption);
                            parentEmptyOption.appendChild(billionOption);
                            mainParent.childNodes[3].appendChild(parentEmptyOption);
                            parentEmptyOption.style.display = 'none';
                            var parentEmptyOptionNegative = document.createElement('DIV');
                            parentEmptyOptionNegative.className = 'parentEmptyOptionNegative';
                            parentEmptyOptionNegative.id = 'parentEmptyOptionNegative';
                            var defaultOption = document.createElement('DIV');
                            defaultOption.className = 'defaultBrac optionselected';
                            defaultOption.innerText = '-123456';
                            defaultOption.setAttribute('value', 'Default');
                            var defaultBrac = document.createElement('DIV');
                            defaultBrac.className = 'defaultBrac optionselected';
                            defaultBrac.innerText = '(123456)';
                            defaultBrac.setAttribute('value', 'Default Brac');
                            var colored = document.createElement('DIV');
                            colored.className = 'colored optionselected';
                            colored.innerText = '-123456';
                            colored.style.color = 'red';
                            colored.setAttribute('value', 'Colored');
                            var coloredBrac = document.createElement('DIV');
                            coloredBrac.className = 'coloredBrac optionselected';
                            coloredBrac.innerText = '(123456)';
                            coloredBrac.style.color = 'red';
                            coloredBrac.setAttribute('value', 'Colored Brac');
                            parentEmptyOptionNegative.appendChild(defaultOption);
                            parentEmptyOptionNegative.appendChild(defaultBrac);
                            parentEmptyOptionNegative.appendChild(colored);
                            parentEmptyOptionNegative.appendChild(coloredBrac);
                            parentEmptyOptionNegative.style.display = 'none';
                            mainParent.childNodes[4].appendChild(parentEmptyOptionNegative);
                            var parentEmptyOptionDataType = document.createElement('DIV');
                            parentEmptyOptionDataType.className = 'parentEmptyOptionDataType';
                            parentEmptyOptionDataType.id = 'parentEmptyOptionDataType';
                            var numberOption = document.createElement('DIV');
                            numberOption.className = 'number optionselected';
                            numberOption.innerText = 'Number';
                            var currencyOption = document.createElement('DIV');
                            currencyOption.className = 'currencyOption optionselected';
                            currencyOption.innerText = 'Currency';
                            var percentageOption = document.createElement('DIV');
                            percentageOption.className = 'percentageOption optionselected';
                            percentageOption.innerText = 'Percentage';
                            parentEmptyOptionDataType.appendChild(numberOption);
                            parentEmptyOptionDataType.appendChild(currencyOption);
                            parentEmptyOptionDataType.appendChild(percentageOption);
                            mainParent.childNodes[2].appendChild(parentEmptyOptionDataType);
                        }
                        else {
                            if (document.getElementById('parentEmptyOptionDataType').style.display === 'block') {
                                document.getElementById('parentEmptyOptionDataType').style.display = 'none';
                            }
                            else if (document.getElementById('parentEmptyOptionDataType').style.display === 'none') {
                                document.getElementById('parentEmptyOptionDataType').style.display = 'block';
                            }
                            e.target.style.border = '0px solid';
                            e.target.parentNode.style.border = '1px solid #d7d7d7';
                        }
                    }
                    if (e.target.className === 'firstnegativeValueOption') {
                        if (document.getElementById('parentEmptyOption') == null && document.getElementById('parentEmptyOptionNegative') == null && document.getElementById('parentEmptyOptionDataType') == null) {
                            e.target.parentNode.style.border = '1px solid #d7d7d7';
                            var parentEmptyOption = document.createElement('DIV');
                            parentEmptyOption.className = 'parentEmptyOption';
                            var noneOption = document.createElement('DIV');
                            noneOption.className = 'noneOption optionselected';
                            noneOption.innerText = 'None';
                            e.target.style.border = '0px solid';
                            var thousandOption = document.createElement('DIV');
                            thousandOption.className = 'thousandOption optionselected';
                            thousandOption.innerText = 'Thousands';
                            var millionOption = document.createElement('DIV');
                            millionOption.className = 'millionOption optionselected';
                            millionOption.innerText = 'Millions';
                            var billionOption = document.createElement('DIV');
                            billionOption.className = 'billionOption optionselected';
                            billionOption.innerText = 'Billions';
                            parentEmptyOption.appendChild(noneOption);
                            parentEmptyOption.appendChild(thousandOption);
                            parentEmptyOption.appendChild(millionOption);
                            parentEmptyOption.appendChild(billionOption);
                            mainParent.childNodes[3].appendChild(parentEmptyOption);
                            parentEmptyOption.style.display = 'none';
                            var parentEmptyOptionNegative = document.createElement('DIV');
                            parentEmptyOptionNegative.className = 'parentEmptyOptionNegative';
                            var defaultOption = document.createElement('DIV');
                            defaultOption.className = 'defaultBrac optionselected';
                            defaultOption.innerText = '-123456';
                            defaultOption.setAttribute('value', 'Default');
                            var defaultBrac = document.createElement('DIV');
                            defaultBrac.className = 'defaultBrac optionselected';
                            defaultBrac.innerText = '(123456)';
                            defaultBrac.setAttribute('value', 'Default Brac');
                            var colored = document.createElement('DIV');
                            colored.className = 'colored optionselected';
                            colored.innerText = '-123456';
                            colored.style.color = 'red';
                            colored.setAttribute('value', 'Colored');
                            var coloredBrac = document.createElement('DIV');
                            coloredBrac.className = 'coloredBrac optionselected';
                            coloredBrac.innerText = '(123456)';
                            coloredBrac.style.color = 'red';
                            coloredBrac.setAttribute('value', 'Colored Brac');
                            parentEmptyOptionNegative.appendChild(defaultOption);
                            parentEmptyOptionNegative.appendChild(defaultBrac);
                            parentEmptyOptionNegative.appendChild(colored);
                            parentEmptyOptionNegative.appendChild(coloredBrac);
                            mainParent.childNodes[4].appendChild(parentEmptyOptionNegative);
                            var parentEmptyOptionDataType = document.createElement('DIV');
                            parentEmptyOptionDataType.className = 'parentEmptyOptionDataType';
                            parentEmptyOptionDataType.id = 'parentEmptyOptionDataType';
                            var numberOption = document.createElement('DIV');
                            numberOption.className = 'number optionselected';
                            numberOption.innerText = 'Number';
                            var currencyOption = document.createElement('DIV');
                            currencyOption.className = 'currencyOption optionselected';
                            currencyOption.innerText = 'Currency';
                            var percentageOption = document.createElement('DIV');
                            percentageOption.className = 'percentageOption optionselected';
                            percentageOption.innerText = 'Percentage';
                            parentEmptyOptionDataType.style.display = 'none';
                            parentEmptyOptionDataType.appendChild(numberOption);
                            parentEmptyOptionDataType.appendChild(currencyOption);
                            parentEmptyOptionDataType.appendChild(percentageOption);
                            mainParent.childNodes[2].appendChild(parentEmptyOptionDataType);
                        }
                        else {
                            if (document.getElementById('parentEmptyOptionNegative').style.display === 'block') {
                                document.getElementById('parentEmptyOptionNegative').style.display = 'none';
                            }
                            else if (document.getElementById('parentEmptyOptionNegative').style.display === 'none') {
                                document.getElementById('parentEmptyOptionNegative').style.display = 'block';
                            }
                            e.target.style.border = '0px solid';
                            e.target.parentNode.style.border = '1px solid #d7d7d7';
                        }
                    }
                    if (mainParent.childNodes[7].innerText === '123456') {
                        mainParent.childNodes[7].innerHTML = '123456';
                    }
                }
                else {
                    if (mainParent.childNodes[7].innerText === 'aaabbbccc') {
                        mainParent.childNodes[7].innerHTML = 'aaabbbccc';
                    }
                }
            }
        }
    },
    hideSelectedColumns: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$hideSelectedColumns(e, children) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <param name="children" type="Number" integer="true">
        /// </param>
        var newColumnFlag = false;
        children--;
        var viewColumnsIndividualParent = document.createElement('DIV');
        viewColumnsIndividualParent.id = this._grid.get_GridInfo().GridId + e.target.parentNode.childNodes[1].childNodes[0].innerText + '_viewColumnsIndividualParent';
        viewColumnsIndividualParent.className = 'viewColumnsIndividualParent';
        viewColumnsIndividualParent.setAttribute('gridid', this._grid.get_GridInfo().GridId);
        var viewColumnsIndividualChild = document.createElement('DIV');
        viewColumnsIndividualChild.id = this._grid.get_GridInfo().GridId + e.target.parentNode.childNodes[1].childNodes[0].innerText + '_viewColumnsIndividualChild';
        viewColumnsIndividualChild.className = 'viewColumnsIndividualChild';
        viewColumnsIndividualChild.setAttribute('realname', e.target.parentNode.childNodes[1].childNodes[0].getAttribute('realname').toString());
        Array.remove(this.existingColumnNames, e.target.parentNode.childNodes[1].childNodes[0].innerText.toLowerCase());
        viewColumnsIndividualChild.innerText = e.target.parentNode.childNodes[1].childNodes[0].innerText;
        viewColumnsIndividualParent.appendChild(viewColumnsIndividualChild);
        viewColumnsIndividualParent.style.borderLeft = e.target.parentNode.childNodes[0].style.borderLeft;
        if (document.getElementById(this._grid.get_id() + '_viewColumnsMainDiv') != null) {
            //document.getElementById(this._grid.get_id() + '_viewColumnsMainDiv').appendChild(viewColumnsIndividualParent);
            var object = _.find(this._grid.get_GridInfo().ViewColumns, function (item) {
                return item.DisplayName == e.target.parentNode.childNodes[1].childNodes[0].innerText;
            })
            $(".CateGorieSWrapDiv").each(function () {
                if ($(this).find(".CategoriesNameDiv").text() == object.CategoryName)
                {
                    if($(this).hasClass("RADCategoryHidden"))
                    {
                        $(this).removeClass("RADCategoryHidden");
                    }
                    if($(this).find(".ParentOfviewColumnsIndividualParent").length > 0)
                    {
                        $(this).find(".ParentOfviewColumnsIndividualParent")[0].appendChild(viewColumnsIndividualParent);
                    }
                    else
                    {
                        var div = document.createElement('DIV');
                        div.className = 'ParentOfviewColumnsIndividualParent';
                        div.appendChild(viewColumnsIndividualParent);
                        $(this)[0].appendChild(div);
                    }
                    $(this).show();
                }
            })
        }
        eval('$(e.target.parentNode).remove()');
        if (Array.contains(this.columnRealNameList, e.target.parentNode.childNodes[1].childNodes[0].innerText)) {
            Array.add(this.columnsToBeHidden, e.target.parentNode.childNodes[1].childNodes[0].innerText);
            newColumnFlag = true;
        }
        else {
            var $dict1 = this._grid.get_GridInfo().ColumnNameMapping;
            for (var $key2 in $dict1) {
                var item = { key: $key2, value: $dict1[$key2] };
                if (item.value.toString() === e.target.parentNode.childNodes[1].childNodes[0].innerText) {
                    Array.add(this.columnsToBeHidden, item.key.toString());
                    newColumnFlag = true;
                    break;
                }
            }
        }
        if (!newColumnFlag) {
            if (e.target.parentNode.childNodes[1].childNodes[0].getAttribute('realname') != null) {
                Array.add(this.columnsToBeHidden, e.target.parentNode.childNodes[1].childNodes[0].getAttribute('realname').toString());
            }
        }
        eval('$(viewColumnsIndividualParent).qtip(\"destroy\")');
        eval('$(\"#' + this._grid.get_id() + '_mergerMainContentDiv' + '\").find($(viewColumnsIndividualParent)).each(function(k,v){$(v).qtip({content:$find($(this).attr(\'gridid\')).upperHeader.createQtipOnHover($(v).children()[0].innerText),style: {width : 400,classes: \'qtip-light qtipCustom\'},position: {my: \'center left\',at: \'center right\',target:$(this)},show: \'mouseover\',hide: \'mouseout\'})});');
    },

    hideColumnsFromView: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$hideColumnsFromView(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        e.target.parentNode.childNodes[2].style.display = 'none';
        if (e.target.parentNode.children[2].nextSibling != null) {
            eval('$(e.target.parentNode.childNodes[2].nextSibling).remove()');
        }
        e.target.className = 'mergerDeleteFooter fa fa-caret-right';
        e.target.parentNode.childNodes[0].style.color = '#00BCEF';
        eval('$(e.target.parentNode.parentNode.lastChild).remove()');
        document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').style.height = '335px';
        eval('$(\'#' + this._grid.get_id() + '_mergerColumnsMainDiv' + '\'' + ').scrollTop(' + 0 + ')');
    },

    resetData: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$resetData(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var FormattingColumnNames = [];
        FormattingColumnNames = window.Object.keys(this._grid.get_GridInfo().GridCustomFormatMapping);
        var formatDetails = new com.ivp.rad.controls.neogrid.scripts.CustomFormatter();
        var mainParent = eval('$(e.target).closest(\".mergerEachColumnMainParent\")[0]');
        mainParent.removeAttribute('isedit');
        if (this.testSampleValue) {
            if (mainParent.childNodes[2].innerText === 'String') {
                mainParent.childNodes[7].innerText = 'aaabbbccc';
            }
            else {
                mainParent.childNodes[7].innerText = '123456';
            }
        }
        else {
            mainParent.childNodes[7].innerText = mainParent.childNodes[7].innerText;
        }
        if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
            formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[mainParent.childNodes[1].childNodes[0].getAttribute('value').toString()];
            if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.none) {
                mainParent.childNodes[3].removeChild(mainParent.childNodes[3].childNodes[0]);
                mainParent.childNodes[3].innerText = 'None';
                mainParent.childNodes[3].style.border = '0px solid';
            }
            if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.thousands) {
                mainParent.childNodes[3].removeChild(mainParent.childNodes[3].childNodes[0]);
                mainParent.childNodes[3].innerText = 'Thousands';
                mainParent.childNodes[3].style.border = '0px solid';
            }
            if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.billions) {
                mainParent.childNodes[3].removeChild(mainParent.childNodes[3].childNodes[0]);
                mainParent.childNodes[3].innerText = 'Billions';
                mainParent.childNodes[3].style.border = '0px solid';
            }
            if (formatDetails.Unit === com.ivp.rad.controls.neogrid.scripts.Unit.millions) {
                mainParent.childNodes[3].removeChild(mainParent.childNodes[3].childNodes[0]);
                mainParent.childNodes[3].innerText = 'Millions';
                mainParent.childNodes[3].style.border = '0px solid';
            }
        }
        else {
            mainParent.childNodes[3].removeChild(mainParent.childNodes[3].childNodes[0]);
            mainParent.childNodes[3].innerText = 'None';
            mainParent.childNodes[3].style.border = '0px solid';
        }
        if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
            formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[mainParent.childNodes[1].childNodes[0].getAttribute('value').toString()];
            if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.none) {
                mainParent.childNodes[2].removeChild(mainParent.childNodes[2].childNodes[0]);
                mainParent.childNodes[2].innerText = 'None';
                mainParent.childNodes[2].style.border = '0px solid';
            }
            if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.number) {
                mainParent.childNodes[2].removeChild(mainParent.childNodes[2].childNodes[0]);
                mainParent.childNodes[2].innerText = 'Number';
                mainParent.childNodes[2].style.border = '0px solid';
            }
            if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.currency) {
                mainParent.childNodes[2].removeChild(mainParent.childNodes[2].childNodes[0]);
                mainParent.childNodes[2].innerText = 'Currency';
                mainParent.childNodes[2].style.border = '0px solid';
            }
            if (formatDetails.DataType === com.ivp.rad.controls.neogrid.scripts.FormatterDataType.percentage) {
                mainParent.childNodes[2].removeChild(mainParent.childNodes[2].childNodes[0]);
                mainParent.childNodes[2].innerText = 'Percentage';
                mainParent.childNodes[2].style.border = '0px solid';
            }
        }
        else {
            if (mainParent.childNodes[2].innerText === 'String') {
                mainParent.childNodes[2].innerText = 'String';
            }
            else {
                var x = mainParent.childNodes[2].childNodes[0].innerText;
                mainParent.childNodes[2].removeChild(mainParent.childNodes[2].childNodes[0]);
                mainParent.childNodes[2].innerText = 'Number';
                mainParent.childNodes[2].style.border = '0px solid';
            }
        }
        if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
            formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[mainParent.childNodes[1].childNodes[0].getAttribute('value').toString()];
            if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULT) {
                mainParent.childNodes[4].removeChild(mainParent.childNodes[4].childNodes[0]);
                mainParent.childNodes[4].innerText = 'Default';
                mainParent.childNodes[4].style.border = '0px solid';
            }
            if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULTBRAC) {
                mainParent.childNodes[4].removeChild(mainParent.childNodes[4].childNodes[0]);
                mainParent.childNodes[4].innerText = 'Default Brac';
                mainParent.childNodes[4].style.border = '0px solid';
            }
            if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLORED) {
                mainParent.childNodes[4].removeChild(mainParent.childNodes[4].childNodes[0]);
                mainParent.childNodes[4].innerText = 'Colored';
                mainParent.childNodes[4].style.border = '0px solid';
            }
            if (formatDetails.NegativeValue === com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLOREDBRAC) {
                mainParent.childNodes[4].removeChild(mainParent.childNodes[4].childNodes[0]);
                mainParent.childNodes[4].innerText = 'Colored Brac';
                mainParent.childNodes[4].style.border = '0px solid';
            }
        }
        else {
            mainParent.childNodes[4].removeChild(mainParent.childNodes[4].childNodes[0]);
            mainParent.childNodes[4].innerText = 'Default';
            mainParent.childNodes[4].style.border = '0px solid';
        }
        if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
            formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[mainParent.childNodes[1].childNodes[0].getAttribute('value').toString()];
            if (formatDetails.Prefix !== '') {
                mainParent.childNodes[5].removeChild(mainParent.childNodes[5].childNodes[0]);
                mainParent.childNodes[5].innerText = formatDetails.Prefix;
            }
            else {
                mainParent.childNodes[5].removeChild(mainParent.childNodes[5].childNodes[0]);
                mainParent.childNodes[5].innerText = 'None';
            }
        }
        else {
            mainParent.childNodes[5].removeChild(mainParent.childNodes[5].childNodes[0]);
            mainParent.childNodes[5].innerText = 'None';
        }
        if (Array.contains(FormattingColumnNames, mainParent.childNodes[1].childNodes[0].getAttribute('value'))) {
            formatDetails = this._grid.get_GridInfo().GridCustomFormatMapping[mainParent.childNodes[1].childNodes[0].getAttribute('value').toString()];
            if (formatDetails.DecimalPlaces !== 0) {
                mainParent.childNodes[6].removeChild(mainParent.childNodes[6].childNodes[0]);
                mainParent.childNodes[6].innerText = formatDetails.DecimalPlaces.toString();
            }
            else {
                mainParent.childNodes[6].removeChild(mainParent.childNodes[6].childNodes[0]);
                mainParent.childNodes[6].innerText = 'None';
            }
        }
        mainParent.childNodes[7].style.color = '#726F6F';
        mainParent.childNodes[8].className = 'mergerColumnRefreshIcon';
    },

    createQtipOnHover: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$createQtipOnHover(columnName) {
        /// <param name="columnName" type="String">
        /// </param>
        /// <returns type="String"></returns>
        var viewInformation = [];
        for (var i = 0; i < this._grid.get_GridInfo().ViewColumns.length; i++) {
            if ((this._grid.get_GridInfo().ViewColumns[i]).DisplayName === columnName) {
                viewInformation = (this._grid.get_GridInfo().ViewColumns[i]).tooltip;
                break;
            }
        }
        var str = new Sys.StringBuilder();
        str.append('<div class=\'xlQtipMain\'>');
        var mainParentQtip = document.createElement('DIV');
        var leftQtipValue = document.createElement('DIV');
        var rightQtipValue = document.createElement('DIV');
        for (var i = 0; i < viewInformation.length; i++) {
            str.append('<div class=\'xlQtipEach\'>');
            str.append('<div class =\'xlQtipLabel\'>' + (viewInformation[i]).key + '</div>');
            str.append('<div class =\'xlQtipvalue\'>' + (((viewInformation[i]).value == null) ? '-' : (viewInformation[i]).value) + '</div>');
            str.append('</div>');
        }
        return str.toString();
    },

    _mergerMainDivHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_mergerMainDivHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'removeChoosePopUp fa fa-times') {
            if (document.getElementById(this._grid.get_id() + '_mainChooseLayout') != null) {
                eval('($(\"#\" + this._grid.ID + \"_mainChooseLayout\").remove()');
            }
        }
        else if (e.target.className === 'cancelRulePopUp' || e.target.className === 'addNewRuleParent') {
            this._closeRuleWindow(e);
            if (this._grid.ruleBasedColoring.get_ruleList().length === 0) {
                if (document.getElementById('faiconMerger') != null) {
                    document.getElementById('faiconMerger').style.display = 'inline-block';
                    document.getElementById('faiconMerger').nextSibling.style.display = 'inline-block';
                }
            }
        }
        else if (e.target.className === 'mainCustomizeColumnsParent' || e.target.className === 'customizeColumnsIndividual') {
            if (this._saveViewInformation.length > 0) {
                this.columnMapInfo = this._saveViewInformation;
                this._grid.get_GridInfo().GridCustomFormatMapping = this.gridCustomFormatMappingToPersistInfo;
                this.createMergedViewPopUp(this._saveViewInformation, this.gridCustomFormatMappingToPersistInfo);
            }
            else {
                this.columnMapInfo = this._grid.get_GridInfo().ViewColumnsClone;
                this.createMergedViewPopUp(this._grid.get_GridInfo().ViewColumns, this._grid.get_GridInfo().GridCustomFormatMapping);
            }
            eval('$(\"#' + this._grid.get_id() + '_mainParentMergedViewNew\").remove()');
        }
        else if (e.target.className === 'applyButton' || e.target.className === 'saveAsLayout') {
            this._saveInformationFromMainView(e, this.newColumnsAdded);
        }
        else if (e.target.className === '') {
            var obj = new com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring(this._grid);
            document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = 'xlOpacityForGrid';
            document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = 'xlOpacityForGrid';
            document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv_Table').className = 'xlOpacityForGrid';
            obj.openRuleWindow();
        }
        else if (e.target.className === 'textToDisplay' || e.target.className === 'addruleIconMerger fa fa-plus-circle' || e.target.className === 'showtextToDisplay' || e.target.className === 'showaddruleIconMerger fa fa-plus-circle') {
            com.ivp.rad.controls.neogrid.scripts.UpperHeader.isRuleBasedColorFromView = true;
            var obj = new com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring(this._grid);
            if (document.getElementById('addNewRuleParent') != null) {
                eval('$(\".customizeColumnsIndividual\").css({\"padding-left\":\"50px\"})');
            }
            eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerCustomizeColumn\").animate({\"width\":\"23.5%\"})');
            eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainCustomizeColumnsParent\").animate({\"width\":\"23.5%\"})');
            eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerColorRule\").animate({\"width\":\"53%\"})');
            eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainColorRuleParent\").animate({\"width\":\"53%\"})');
            eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerGrouping\").animate({\"width\":\"23.5%\"})');
            eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainGroupingParent\").animate({\"width\":\"23.5%\"})');
            e.target.parentNode.childNodes[0].style.display = 'none';
            e.target.parentNode.childNodes[1].style.display = 'none';
            document.getElementById('mainRuleColorParent').firstChild.style.display = 'none';
            document.getElementById('mainRuleColorParent').children[1].style.display = 'none';
            if (document.getElementById('cancelRulePopUp') != null) {
                document.getElementById('cancelRulePopUp').style.display = 'block';
            }
            obj._createRuleWindow(e, com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.listColumnNames);
            if (eval('$(\".editDeleteRuleParent' + '\").length') > 0) {
                eval('$(\".editDeleteRuleParent' + '\").css({\'display\':\'inline-block\'})');
            }
            if (com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length === 0) {
                document.getElementById('rulePopUptoBeHidden').style.display = 'block';
                document.getElementById('rulePopUptoBeHidden').style.border = '0px';
            }
        }
        else if (e.target.className === 'cancelButtonMainView') {
            document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').style.opacity = '1';
            document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').style.opacity = '1';
            document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').style.opacity = '1';
            eval('$(\"#' + this._grid.get_GridInfo().GridId + '_mainParentMergedViewNew\").remove()');
            if (eval('$(\"#' + this._grid.get_GridInfo().GridId + '_mergerParentDiv\")') != null) {
                eval('$(\"#' + this._grid.get_GridInfo().GridId + '_mergerParentDiv\").remove()');
            }
            com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList = [];
            com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.cntrToMaintainindexruleList = 0;
            this._saveViewInformation = [];
            this.gridCustomFormatMappingToPersistInfo = {};
            this.columnSequence = [];
            this._saveViewInformation = [];
        }
        else if( e.target.className ==='mainColorRuleParent')
        {
            $(".existingColumnNames").css("height", "20px");
            $(".existingOperators").css("height", "20px");
        }
    },

    _fillInformationOfViews: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_fillInformationOfViews(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var columnsinViewColumnDictionary = window.Object.keys(this.viewColumnsToDictionary);
        this.newColumnsAdded = false;
        this.newColumnFlag = false;
        this.columnSequence = [];
        this._saveViewInformation = [];
        this.gridCustomFormatMapping = {};
        this.gridCustomFormatMappingToPersistInfo = {};
        var columnChildren = document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes.length;
        for (var i = 0; i < columnChildren; i++) {
            this.newColumnFlag = false;
            if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].getAttribute('realname') == null) {
                if (!Array.contains(this._grid.get_GridInfo().ColumnList, document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText) && !Array.contains(this._hiddenColumnListNew, document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText)) {
                    this.newColumnsAdded = true;
                }
            }
            else {
               if (!Array.contains(this._grid.get_GridInfo().ColumnList,document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText) && !Array.contains(this._hiddenColumnListNew, document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].getAttribute('realname').toString())) {
                    this.newColumnsAdded = true;
                }
            }
            if (Array.contains(this.columnRealNameList, document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText)) {
                Array.add(this.columnSequence, document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText);
                this.newColumnFlag = true;
                var columnName = document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText;
                var obj = new com.ivp.rad.controls.neogrid.scripts.info.ColumnInfo();
                obj.ColumnName = columnName;
                Array.add(this._saveViewInformation, obj);
            }
            else {
                var $dict1 = this._grid.get_GridInfo().ColumnNameMapping;
                for (var $key2 in $dict1) {
                    var item = { key: $key2, value: $dict1[$key2] };
                    if (item.value.toString() === document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText) {
                        Array.add(this.columnSequence, item.key.toString());
                        this.newColumnFlag = true;
                        var columnName = item.key.toString();
                        var obj = new com.ivp.rad.controls.neogrid.scripts.info.ColumnInfo();
                        obj.ColumnName = columnName;
                        Array.add(this._saveViewInformation, obj);
                        break;
                    }
                }
            }
            if (!this.newColumnFlag) {
                var columnName = '';
                if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].getAttribute('realname') != null) {
                    Array.add(this.columnSequence, document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].getAttribute('realname').toString());
                    columnName = document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].getAttribute('realname').toString();
                }
                else {
                    columnName = document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText.toString();
                }
                var obj = new com.ivp.rad.controls.neogrid.scripts.info.ColumnInfo();
                obj.ColumnName = columnName;
                Array.add(this._saveViewInformation, obj);
            }
            if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[2].children.length > 0) {
                var formatDetails = new com.ivp.rad.controls.neogrid.scripts.CustomFormatter();
                if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[2].innerText.trim() === 'None') {
                    formatDetails.DataType = com.ivp.rad.controls.neogrid.scripts.FormatterDataType.none;
                }
                if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[2].innerText.trim() === 'Currency') {
                    formatDetails.DataType = com.ivp.rad.controls.neogrid.scripts.FormatterDataType.currency;
                }
                if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[2].innerText.trim() === 'Percentage') {
                    formatDetails.DataType = com.ivp.rad.controls.neogrid.scripts.FormatterDataType.percentage;
                }
                if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[2].innerText.trim() === 'Number') {
                    formatDetails.DataType = com.ivp.rad.controls.neogrid.scripts.FormatterDataType.number;
                }
                if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[3].innerText.trim() === 'None') {
                    formatDetails.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.none;
                }
                if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[3].innerText.trim() === 'None') {
                    formatDetails.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.none;
                }
                else if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[3].innerText.trim() === 'Thousands') {
                    formatDetails.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.thousands;
                }
                else if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[3].innerText.trim() === 'Millions') {
                    formatDetails.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.millions;
                }
                else if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[3].innerText.trim() === 'Billions') {
                    formatDetails.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.billions;
                }
                if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[4].innerText.trim() === '123456' && document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[4].childNodes[0].getAttribute('value').toString() === 'Default') {
                    formatDetails.NegativeValue = com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULT;
                }
                else if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[4].innerText.trim() === '(123456)' && document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[4].childNodes[0].getAttribute('value').toString() === 'Default Brac') {
                    formatDetails.NegativeValue = com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULTBRAC;
                }
                else if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[4].innerText.trim() === '-123456' && document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[4].childNodes[0].getAttribute('value').toString() === 'Colored') {
                    formatDetails.NegativeValue = com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLORED;
                }
                else if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[4].innerText.trim() === '(123456)' && document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[4].childNodes[0].getAttribute('value').toString() === 'Colored Brac') {
                    formatDetails.NegativeValue = com.ivp.rad.controls.neogrid.scripts.NegativeValue.COLOREDBRAC;
                }
                formatDetails.Prefix = document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[5].childNodes[0].innerText;
                if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[6].childNodes[0].innerText !== '') {
                    formatDetails.DecimalPlaces = Number.parseInvariant(document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[6].childNodes[0].innerText);
                }
                else {
                    formatDetails.DecimalPlaces = Number.parseInvariant('0');
                }
                if (Array.contains(this.columnRealNameList, document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText)) {
                    this.gridCustomFormatMapping[document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText] = formatDetails;
                    this.gridCustomFormatMappingToPersistInfo[document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText] = formatDetails;
                    this.newColumnFlag = true;
                }
                else {
                    var $dict3 = this._grid.get_GridInfo().ColumnNameMapping;
                    for (var $key4 in $dict3) {
                        var item = { key: $key4, value: $dict3[$key4] };
                        if (item.value.toString() === document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText) {
                            this.gridCustomFormatMapping[item.key.toString()] = formatDetails;
                            this.gridCustomFormatMappingToPersistInfo[item.key.toString()] = formatDetails;
                            this.newColumnFlag = true;
                            break;
                        }
                    }
                }
                if (!this.newColumnFlag) {
                    if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].getAttribute('realname') != null) {
                        this.gridCustomFormatMapping[document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].getAttribute('realname').toString()] = formatDetails;
                        this.gridCustomFormatMappingToPersistInfo[document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].getAttribute('realname').toString()] = formatDetails;
                    }
                }
            }
            if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[2].innerText === 'String' && document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[5].innerText !== 'None') {
                var formatDetails = new com.ivp.rad.controls.neogrid.scripts.CustomFormatter();
                formatDetails.DataType = com.ivp.rad.controls.neogrid.scripts.FormatterDataType.string;
                formatDetails.NegativeValue = com.ivp.rad.controls.neogrid.scripts.NegativeValue.DEFAULT;
                formatDetails.Prefix = document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[5].innerText;
                formatDetails.Unit = com.ivp.rad.controls.neogrid.scripts.Unit.none;
                formatDetails.DecimalPlaces = Number.parseInvariant('0');
                this.gridCustomFormatMapping[document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText] = formatDetails;
                this.gridCustomFormatMappingToPersistInfo[document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes[i].childNodes[1].childNodes[0].innerText] = formatDetails;
            }
        }
        if (e.target.className !== 'saveAsLayoutManageView' && e.target.className !== 'applyButtonManageView') {
            eval('$(\"#' + this._grid.get_id() + '_mergerParentDiv\").css({\"display\":\"none\"})');
        }
    },

    _createLayoutChoicePopUp: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createLayoutChoicePopUp(e, newColumnsAdded) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <param name="newColumnsAdded" type="Boolean">
        /// </param>
        var dropDownChoiceOfLayouts = document.createElement('DIV');
        dropDownChoiceOfLayouts.className = 'dropDownChoiceOfLayouts';
        dropDownChoiceOfLayouts.id = 'dropDownChoiceOfLayouts';
        var dropdownExistingLayout = document.createElement('DIV');
        dropdownExistingLayout.id = 'dropdownExistingLayout';
        dropdownExistingLayout.className = 'dropdownChildrenLayout';
        dropdownExistingLayout.innerText = 'Existing Layout';
        var dropdownNewLayout = document.createElement('DIV');
        dropdownNewLayout.id = 'dropdownNewLayout';
        dropdownNewLayout.className = 'dropdownChildrenLayout';
        dropdownNewLayout.innerText = 'New Layout';
        dropDownChoiceOfLayouts.appendChild(dropdownExistingLayout);
        dropDownChoiceOfLayouts.appendChild(dropdownNewLayout);
        if (document.getElementById('dropDownChoiceOfLayouts') == null) {
            this._grid.elementInfo.get_childGridDiv().appendChild(dropDownChoiceOfLayouts);
        }
        if (e.target.className === 'saveAsLayout') {
            var leftPosition = eval('parseInt($(\"#' + this._grid.get_id() + '_mainParentMergedViewNew' + '\").css(\"left\"))');
            var width = eval('parseInt($(\"#' + this._grid.get_id() + '_mainParentMergedViewNew' + '\").width())');
            var posFromLeft = leftPosition + width - 230;
            document.getElementById('dropDownChoiceOfLayouts').style.top = '100px';
            document.getElementById('dropDownChoiceOfLayouts').style.left = posFromLeft + 'px';
        }
        if (e.target.className === 'saveAsLayoutManageView') {
            var leftPosition = eval('parseInt($(\"#' + this._grid.get_id() + '_mergerParentDiv' + '\").css(\"left\"))');
            var width = eval('parseInt($(\"#' + this._grid.get_id() + '_mergerParentDiv' + '\").width())');
            var posFromLeft = leftPosition + width - 230;
            document.getElementById('dropDownChoiceOfLayouts').style.top = '100px';
            document.getElementById('dropDownChoiceOfLayouts').style.left = (posFromLeft - 50) + 'px';
        }
        com.ivp.rad.controls.neogrid.scripts.EvalManager.addHandler(dropDownChoiceOfLayouts, 'click', Function.createDelegate(this, this._layoutDropDownHandler));
    },

    _layoutDropDownHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_layoutDropDownHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.innerText === 'Existing Layout') {
            eval('$(e.target.parentNode).remove()');
            if (!this.newColumnsAdded) {
                if (this.columnSequence.length > 0 || com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length > 0)
                    this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION, Sys.Serialization.JavaScriptSerializer.serialize(this.columnSequence) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnsToBeHidden) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnsToBevisible) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.gridCustomFormatMapping) + '|' + true + '|' + Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION);
                if (document.getElementById(this._grid.get_id() + '_mainParentMergedViewNew') != null) {
                    if (this.columnSequence.length > 0 || com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length > 0)
                        eval('$(\"#' + this._grid.get_id() + '_mainParentMergedViewNew\").remove()');
                }
                if (document.getElementById(this._grid.get_id() + '_mergerParentDiv') != null) {
                    eval('$(\"#' + this._grid.get_id() + '_mergerParentDiv\").remove()');
                }
            }
            else {
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION, Sys.Serialization.JavaScriptSerializer.serialize(this.columnSequence) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnsToBeHidden) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnsToBevisible) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.gridCustomFormatMapping) + '|' + false + '|' + Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION);
            }
            if (this.columnSequence.length > 0) //|| com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length > 0)
                eval(this._grid.get_GridInfo().RaiseGridCallBackForViews + '(\'' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnSequence) + '\',\'' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnsToBeHidden) + '\',\'' + Sys.Serialization.JavaScriptSerializer.serialize(this.gridCustomFormatMapping) + '\',\'' + Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList) + '\')');
        }
        if (e.target.innerText === 'New Layout') {
            eval('$(e.target.parentNode).remove()');
            com.ivp.rad.controls.neogrid.scripts.UpperHeader.isLayoutFromView = true;
            com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsHiddenForLayouts = this.columnsToBeHidden;
            com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsSequenceForLayouts = this.columnSequence;
            com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsVisibleForLayouts = this.columnsToBevisible;
            com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsCustomFormatMappingForLayouts = this.gridCustomFormatMapping;
            if (this._grid.elementInfo.get_manageLayoutDiv() != null) {
                this._grid.elementInfo.get_manageLayoutDiv().style.display = 'block';
                if (document.getElementById('existingDefaultLayout').children.length > 1) {
                    document.getElementById('existingDefaultLayout').style.display = '';
                    document.getElementById('xlDefaultLayout').style.display = '';
                }
                else {
                    document.getElementById('addNewLayoutParent').style.display = '';
                    document.getElementById('addNewLayout').style.backgroundColor = '#E7E7E8';
                }
                document.getElementById('existingSharedLayout').style.display = '';
            }
            document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.top = '105px';
            if (document.getElementById(this._grid.get_id() + '_mainParentMergedViewNew') != null) {
                var leftPosition = eval('parseInt($(\"#' + this._grid.get_id() + '_mainParentMergedViewNew' + '\").css(\"left\"))');
                var width = eval('parseInt($(\"#' + this._grid.get_id() + '_mainParentMergedViewNew' + '\").width())');
                var posFromLeft = leftPosition + width - 230;
                document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.left = posFromLeft + 'px';
                document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.top = '100px';
            }
            else {
                var leftPosition = eval('parseInt($(\"#' + this._grid.get_id() + '_mergerParentDiv' + '\").css(\"left\"))');
                var width = eval('parseInt($(\"#' + this._grid.get_id() + '_mergerParentDiv' + '\").width())');
                var posFromLeft = leftPosition + width - 230;
                document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.left = posFromLeft + 'px';
                document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.top = '100px';
            }
        }
    },

    _saveInformationFromMainView: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_saveInformationFromMainView(e, newColumnsAdded) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <param name="newColumnsAdded" type="Boolean">
        /// </param>
        if (!newColumnsAdded) {
            if (e.target.className === 'saveAsLayout' || e.target.className === 'saveAsLayoutManageView') {
                com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsHiddenForLayouts = [];
                com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsSequenceForLayouts = [];
                com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsVisibleForLayouts = [];
                com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsCustomFormatMappingForLayouts = {};
                if (this._currentLayout.ViewName !== '') {
                    if (document.getElementById(this._grid.get_GridInfo().GridId + '_mainParentMergedViewNew') != null) {
                    }
                    this._createLayoutChoicePopUp(e, newColumnsAdded);
                }
                else {
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.isLayoutFromView = true;
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsHiddenForLayouts = this.columnsToBeHidden;
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsSequenceForLayouts = this.columnSequence;
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsVisibleForLayouts = this.columnsToBevisible;
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsCustomFormatMappingForLayouts = this.gridCustomFormatMapping;
                    if (this._grid.elementInfo.get_manageLayoutDiv() != null) {
                        this._grid.elementInfo.get_manageLayoutDiv().style.display = 'block';
                        if (document.getElementById('existingDefaultLayout').children.length > 1) {
                            document.getElementById('existingDefaultLayout').style.display = '';
                            document.getElementById('xlDefaultLayout').style.display = '';
                        }
                        else {
                            document.getElementById('addNewLayoutParent').style.display = '';
                            document.getElementById('addNewLayout').style.backgroundColor = '#E7E7E8';
                        }
                        document.getElementById('existingSharedLayout').style.display = '';
                    }
                    document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.top = '105px';
                    if (e.target.className === 'saveAsLayout') {
                        var leftPosition = eval('parseInt($(\"#' + this._grid.get_id() + '_mainParentMergedViewNew' + '\").css(\"left\"))');
                        var width = eval('parseInt($(\"#' + this._grid.get_id() + '_mainParentMergedViewNew' + '\").width())');
                        var posFromLeft = leftPosition + width - 230;
                        document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.left = posFromLeft + 'px';
                        if (eval('($(\"#\" + this._grid.ID + \"_mainParentMergedViewNew\"))') != null) {
                            eval('($(\"#\" + this._grid.ID + \"_mainParentMergedViewNew\").remove())');
                        }
                    }
                    else {
                        var leftPosition = eval('parseInt($(\"#' + this._grid.get_id() + '_mergerParentDiv' + '\").css(\"left\"))');
                        var width = eval('parseInt($(\"#' + this._grid.get_id() + '_mergerParentDiv' + '\").width())');
                        var posFromLeft = leftPosition + width - 230;
                        document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.left = posFromLeft + 'px';
                        if (eval('($(\"#\" + this._grid.ID + \"_mergerParentDiv\"))') != null) {
                            eval('($(\"#\" + this._grid.ID + \"_mergerParentDiv\").remove())');
                        }
                    }
                }
            }
            else {
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_mainParentMergedViewNew') != null) {
                    document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').style.opacity = '1';
                    document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').style.opacity = '1';
                    document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').style.opacity = '1';
                }
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION_WITHOUT_LAYOUT, Sys.Serialization.JavaScriptSerializer.serialize(this.columnSequence) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnsToBeHidden) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnsToBevisible) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.gridCustomFormatMapping) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION_WITHOUT_LAYOUT);
                if (document.getElementById(this._grid.get_id() + '_mainParentMergedViewNew') != null) {
                    eval('$(\"#' + this._grid.get_id() + '_mainParentMergedViewNew\").remove()');
                }
                if (document.getElementById(this._grid.get_id() + '_mergerParentDiv') != null) {
                    eval('$(\"#' + this._grid.get_id() + '_mergerParentDiv\").remove()');
                }
            }
        }
        else {
            if (e.target.className === 'saveAsLayout' || e.target.className === 'saveAsLayoutManageView') {
                if (this._currentLayout.ViewName !== '') {
                    if (document.getElementById(this._grid.get_GridInfo().GridId + '_mainParentMergedViewNew') != null) {
                    }
                    this._createLayoutChoicePopUp(e, newColumnsAdded);
                }
                else {
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.isLayoutFromView = true;
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsHiddenForLayouts = this.columnsToBeHidden;
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsSequenceForLayouts = this.columnSequence;
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsVisibleForLayouts = this.columnsToBevisible;
                    com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsCustomFormatMappingForLayouts = this.gridCustomFormatMapping;
                    if (this._grid.elementInfo.get_manageLayoutDiv() != null) {
                        this._grid.elementInfo.get_manageLayoutDiv().style.display = 'block';
                        if (document.getElementById('existingDefaultLayout').children.length > 1) {
                            document.getElementById('existingDefaultLayout').style.display = '';
                            document.getElementById('xlDefaultLayout').style.display = '';
                        }
                        else {
                            document.getElementById('addNewLayoutParent').style.display = '';
                            document.getElementById('addNewLayout').style.backgroundColor = '#E7E7E8';
                        }
                        document.getElementById('existingSharedLayout').style.display = '';
                    }
                    if (document.getElementById(this._grid.get_GridInfo().GridId + '_mainParentMergedViewNew') != null) {
                        document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').style.opacity = '1';
                        document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').style.opacity = '1';
                        document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').style.opacity = '1';
                    }
                    document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.top = '105px';
                    if (e.target.className === 'saveAsLayout') {
                        var leftPosition = eval('parseInt($(\"#' + this._grid.get_id() + '_mainParentMergedViewNew' + '\").css(\"left\"))');
                        var width = eval('parseInt($(\"#' + this._grid.get_id() + '_mainParentMergedViewNew' + '\").width())');
                        var posFromLeft = leftPosition + width - 230;
                        document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.left = posFromLeft + 'px';
                        if (eval('($(\"#\" + this._grid.ID + \"_mainParentMergedViewNew\"') != null) {
                            eval('($(\"#\" + this._grid.ID + \"_mainParentMergedViewNew\").remove()');
                        }
                    }
                    else {
                        var leftPosition = eval('parseInt($(\"#' + this._grid.get_id() + '_mergerParentDiv' + '\").css(\"left\"))');
                        var width = eval('parseInt($(\"#' + this._grid.get_id() + '_mergerParentDiv' + '\").width())');
                        var posFromLeft = leftPosition + width - 230;
                        document.getElementById(this._grid.get_GridInfo().GridId + '_manageLayoutDivId_maindivLayout').style.left = posFromLeft + 'px';
                        if (eval('($(\"#\" + this._grid.ID + \"_mergerParentDiv\"))') != null) {
                            eval('($(\"#\" + this._grid.ID + \"_mergerParentDiv\").remove())');
                        }
                    }
                }
            }
            else {
                if (document.getElementById(this._grid.get_GridInfo().GridId + '_mainParentMergedViewNew') != null) {
                    document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').style.opacity = '1'; /// <reference path="neogrid.client.js" />

                    document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').style.opacity = '1';
                    document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').style.opacity = '1';
                    eval('$(\"#' + this._grid.get_GridInfo().GridId + '_mainParentMergedViewNew\").remove()');
                }
                this._grid.gridEngine.executeWCFProcess(com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION_WITHOUT_LAYOUT, Sys.Serialization.JavaScriptSerializer.serialize(this.columnSequence) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnsToBeHidden) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnsToBevisible) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(this.gridCustomFormatMapping) + '|' + Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList), com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION_WITHOUT_LAYOUT);
                eval(this._grid.get_GridInfo().RaiseGridCallBackForViews + '(\'' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnSequence) + '\',\'' + Sys.Serialization.JavaScriptSerializer.serialize(this.columnsToBeHidden) + '\',\'' + Sys.Serialization.JavaScriptSerializer.serialize(this.gridCustomFormatMapping) + '\',\'' + Sys.Serialization.JavaScriptSerializer.serialize(com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList) + '\')');
                if (eval('$(\"#\" + this._grid.ID + \"_mergerParentDiv\").length') > 0) {
                    eval('$(\"#\" + this._grid.ID + \"_mergerParentDiv\").remove()');
                }
                if (eval('$(\"#\" + this._grid.ID + \"_mainParentMergedViewNew\").length') > 0) {
                    eval('$(\"#\" + this._grid.ID + \"_mainParentMergedViewNew\").remove()');
                }
            }
        }
    },


    _closeRuleWindow: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_closeRuleWindow(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        eval('$(\"#' + this._grid.get_id() + '_txtUserInput' + '\").val(\"\")');
        com.ivp.rad.controls.neogrid.scripts.UpperHeader.isRuleBasedColorFromView = false;
        if (com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length > 0) {
            if (eval('$(\".mainColorRuleParent\").children()[0].id').toString() === 'faiconMerger' && eval('$(\".mainColorRuleParent\").children()[1].id').toString() === 'textToDisplay') {
                eval('$(\".mainColorRuleParent\").children()[0].remove()');
                eval('$(\".mainColorRuleParent\").children()[0].remove()');
            }
            document.getElementById('addNewRuleParent').style.display = 'block';
            document.getElementById('addNewRuleParent').setAttribute('frommainview', 'true');
        }
        document.getElementById('mainRuleColorParent').className = 'mainColorRuleParent';
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerCustomizeColumn\").animate({\"width\":\"33.3%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainCustomizeColumnsParent\").animate({\"width\":\"33.3%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerColorRule\").animate({\"width\":\"33.3%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainColorRuleParent\").animate({\"width\":\"33.3%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mergerGrouping\").animate({\"width\":\"33.3%\"})');
        eval('$(e.target).closest(\".mainParentMergedViewNew\").find(\".mainGroupingParent\").animate({\"width\":\"33.3%\"})');
        if (document.getElementById('rulePopUptoBeHidden').getAttribute('ineditmode')) {
            document.getElementById('rulePopUptoBeHidden').parentNode.childNodes[0].style.display = 'block';
        }
        document.getElementById('rulePopUptoBeHidden').style.display = 'none';
        if (com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList.length === 0) {
            document.getElementById('addNewRuleParent').style.display = 'none';
        }
        document.getElementById('cancelRulePopUp').style.display = 'none';
        if (document.getElementById(this._grid.elementIDManager._gridID + '_RuleDivID') != null) {
            document.getElementById('firstColumnDiv').innerText = 'Column Name';
            document.getElementById('firstOperationDiv').innerText = 'Operator';
            document.getElementById(this._grid.get_id() + '_ddlColumns').style.height = '20px';
            document.getElementById(this._grid.get_id() + '_ddlRuleOperations').style.height = '20px';
            document.getElementById(this._grid.get_id() + '_txtUserInput').setAttribute('placeholder', 'Enter Value');
            document.getElementById(this._grid.elementIDManager._gridID + '_ColorPaletteDivID').style.display = 'none';
            document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').className = '';
            document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').className = '';
            document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').className = '';
            document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv_Table').className = '';
        }
        eval('$(\".eachAddRule' + '\").parent().css({\'width\':\'92%\'})');
        eval('$(\".eachAddRule' + '\").parent().css({\'display\':\'block\'})');
        eval('$(\".eachAddRule' + '\").parent().css({\'margin-left\':\'10px\'})');
    },

    _mouseHoverOnContentDiv: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_mouseHoverOnContentDiv(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var borderToBeShown = document.createElement('DIV');
        borderToBeShown.className = 'borderToBeShown';
        borderToBeShown.id = 'borderToBeShown';
        if (eval('$(e.target).closest(\".mergerEachColumnMainParent\").length') !== 0 && !eval('$(e.target).closest(\".mergerEachColumnMainParent\").hasClass(\"ApplyBoxShadow\")')) {
            if (!eval('$(e.target).closest(\".mergerEachColumnMainParent\").prev().attr(\'id\')==\"borderToBeShown\"')) {
                eval('$(e.target).closest(\".mergerEachColumnMainParent\").before(borderToBeShown)');
            }
        }
    },

    _mouseOutOnContentDiv: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_mouseOutOnContentDiv(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (eval('$(e.target).closest(\".mergerEachColumnMainParent\").length') !== 0 && !eval('$(e.target).closest(\".mergerEachColumnMainParent\").hasClass(\"ApplyBoxShadow\")')) {
            eval('$(\"#borderToBeShown\").remove()');
        }
    },

    _mergerDivHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_mergerDivHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        if (e.target.className === 'ViewBackButton') {
            if (document.getElementById(this._grid.elementIDManager._gridID + '_mergerParentDiv') != null) {
                this._fillInformationOfViews(e);
                this.createMergedViewPopUpNew();
            }
        }
        if (e.target.className === 'cancelButton') {
            if (eval('$(\"#' + this._grid.get_id() + '_mergerParentDiv\")') != null) {
                eval('$(\"#' + this._grid.get_id() + '_mergerParentDiv\").remove()');
            }
            if (eval('$(\"#' + this._grid.get_id() + '_mainParentMergedViewNew\")') != null) {
                eval('$(\"#' + this._grid.get_id() + '_mainParentMergedViewNew\").remove()');
            }
            document.getElementById(this._grid.elementIDManager._gridID + '_bodyDiv').style.opacity = '1';
            document.getElementById(this._grid.elementIDManager._gridID + '_headerDiv').style.opacity = '1';
            document.getElementById(this._grid.elementIDManager._gridID + '_upperHeader_Div').style.opacity = '1';
            this.columnSequence = [];
            this._saveViewInformation = [];
            this.clickedFirstTime = false;
        }
        if (e.target.className === 'applyButtonManageView' || e.target.className === 'saveAsLayoutManageView') {
            this.clickedFirstTime = false;
            if (document.getElementById(this._grid.elementIDManager._gridID + '_mergerParentDiv') != null) {
                if (this.columnSequence == null || this.columnSequence.length === 0) {
                    this._fillInformationOfViews(e);
                    this._saveInformationFromMainView(e, this.newColumnsAdded);
                }
                else {
                    this._saveInformationFromMainView(e, this.newColumnsAdded);
                }
            }
        }
        var children = 0;
        if (document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv') != null) {
            children = document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').childNodes.length;
        }
        if (e.target.className === 'mergerColumnRefreshIcon fa fa-repeat') {
            this.resetData(e);
        }
        if (e.target.className === 'mergerDeleteFooter fa fa-caret-down') {
            this.hideColumnsFromView(e);
        }
        if (e.target.className === 'mergerColumnDeleteIcon fa fa-trash-o') {
            this.hideSelectedColumns(e, children);
        }
        if (e.target.id === 'LastDivHandlerToMove') {
        }
        if ((eval('$(e.target).closest(\".mergerEachColumnMainParent\").length') > 0 && e.target.className !== 'mergerColumnRefreshIcon' && e.target.className !== 'mergerColumnDeleteIcon fa fa-trash-o' && e.target.className !== 'mergerColumnRefreshIcon fa fa-repeat') || e.target.id === 'LastDivHandlerToMove') {
            if (e.target.className === 'hamBurger ui-sortable-handle' || e.target.className === 'hamBurger' || e.target.id === 'LastDivHandlerToMove') {
                if (!this.clickedFirstTime) {
                    this.divToBeAttached = e.target.parentNode;
                    eval('$(\".mergerEachColumnMainParent\").addClass(\"applyHover\");');
                    this.divToBeAttached = document.createElement('DIV');
                    this.clickedFirstTime = true;
                    this.divToBeAttached = e.target.parentNode;
                    this.divToBeMoved = document.createElement('DIV');
                    this.divToBeMoved = e.target.parentNode.cloneNode(true);
                    this.divToBeMoved.style.position = 'absolute';
                    this.divToBeMoved.style.left = '25px';
                    this.divToBeMoved.style.top = (e.clientY - 125) + 'px';
                    this.divToBeMoved.style.backgroundColor = 'white';
                    this.divToBeMoved.className = 'mergerEachColumnMainParent ApplyBoxShadow';
                    this.divToBeMoved.removeChild(this.divToBeMoved.childNodes[9]);
                    this.divToBeMoved.removeChild(this.divToBeMoved.childNodes[8]);
                    document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').appendChild(this.divToBeMoved);
                    eval('$(e.target.parentNode).remove()');
                    var LastDivHandlerToMove = document.createElement('DIV');
                    LastDivHandlerToMove.id = 'LastDivHandlerToMove';
                    LastDivHandlerToMove.className = 'LastDivHandlerToMove';
                    document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').appendChild(LastDivHandlerToMove);
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv'));
                    eval('$(\".mergerEachColumnMainParent\").bind(\"mouseover\",this._mouseHoverOnContentDiv)');
                    eval('$($(\".mergerEachColumnMainParent\")).children().bind(\"mouseover\",this._mouseHoverOnContentDiv)');
                    eval('$(\".mergerEachColumnMainParent\").bind(\"mouseout\",this._mouseOutOnContentDiv)');
                    eval('$(\"#' + this._grid.get_id() + '_mergerMainContentDiv' + '\").find(\'.columnsExistingInGridIndividualParent\').qtip(\"destroy\")');
                }
                else {
                    if (this.divToBeMoved != null && this.clickedFirstTime) {
                        eval('$(\".mergerEachColumnMainParent\").removeClass(\"applyHover\");');
                        if (e.target.id === 'LastDivHandlerToMove') {
                            document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').appendChild(this.divToBeAttached);
                        }
                        else {
                            document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').insertBefore(this.divToBeAttached, e.target.parentNode);
                        }
                        this.divToBeAttached.className = 'mergerEachColumnMainParent';
                        eval('$(this.divToBeMoved).remove();');
                        this.divToBeMoved = null;
                        this.divToBeAttached = null;
                        this.clickedFirstTime = false;
                        document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').removeChild(document.getElementById('LastDivHandlerToMove'));
                        com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv'));
                        eval('$(\".mergerEachColumnMainParent\").unbind(\"mouseover\")');
                        eval('$($(\".mergerEachColumnMainParent\")).children().unbind(\"mouseover\")');
                        eval('$(\".mergerEachColumnMainParent\").unbind(\"mouseout\")');
                        eval('$(\"#borderToBeShown\").remove()');
                        eval('$(\"#' + this._grid.get_id() + '_mergerMainContentDiv' + '\").find(\'.columnsExistingInGridIndividualParent\').each(function(k,v){$(v).qtip({content:$find($(this).attr(\'gridid\')).upperHeader.createQtipOnHover($(v).children()[0].innerText),style: {width : 400,classes: \'qtip-light qtipCustom\'},position: {my: \'center left\',at: \'center right\',target:$(this)},show: \'mouseover\',hide: \'mouseout\'})});');
                    }
                }
            }
            else if (e.target.className !== 'hamBurger ui-sortable-handle' && e.target.className !== 'hamBurger' && e.target.id !== 'LastDivHandlerToMove' && (eval('$(e.target).closest(\".mergerEachColumnMainParent\").prev().attr(\'id\')==\"borderToBeShown\"'))) {
                if (this.divToBeMoved != null && this.clickedFirstTime) {
                    eval('$(\".mergerEachColumnMainParent\").removeClass(\"applyHover\");');
                    if (e.target.id === 'LastDivHandlerToMove') {
                        document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').appendChild(this.divToBeAttached);
                    }
                    else {
                        eval('$(e.target).closest(\".mergerEachColumnMainParent\").before(this.divToBeAttached)');
                    }
                    this.divToBeAttached.className = 'mergerEachColumnMainParent';
                    eval('$(this.divToBeMoved).remove();');
                    this.divToBeMoved = null;
                    this.divToBeAttached = null;
                    this.clickedFirstTime = false;
                    document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').removeChild(document.getElementById('LastDivHandlerToMove'));
                    com.ivp.rad.controls.neogrid.scripts.EvalManager.clearHandlers(document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv'));
                    eval('$(\".mergerEachColumnMainParent\").unbind(\"mouseover\")');
                    eval('$($(\".mergerEachColumnMainParent\")).children().unbind(\"mouseover\")');
                    eval('$(\".mergerEachColumnMainParent\").unbind(\"mouseout\")');
                    eval('$(\"#borderToBeShown\").remove()');
                    eval('$(\"#' + this._grid.get_id() + '_mergerMainContentDiv' + '\").find(\'.columnsExistingInGridIndividualParent\').each(function(k,v){$(v).qtip({content:$find($(this).attr(\'gridid\')).upperHeader.createQtipOnHover($(v).children()[0].innerText),style: {width : 400,classes: \'qtip-light qtipCustom\'},position: {my: \'center left\',at: \'center right\',target:$(this)},show: \'mouseover\',hide: \'mouseout\'})});');
                }
            }
            else {
                if (!this.clickedFirstTime) {
                    this.clickHandlerOnMergerMainBody(e, children);
                }
            }
        }
        if (e.target.className.indexOf('optionselected') !== -1) {
            e.target.parentNode.parentNode.childNodes[0].innerText = e.target.innerText;
            if (e.target.innerText === 'Number' || e.target.innerText === 'Currency' || e.target.innerText === 'Percentage' || e.target.innerText === 'Thousands' || e.target.innerText === 'Millions' || e.target.innerText === 'Billions') {
                this.createSampleValue(e);
            }
            if (e.target.innerText === 'None') {
            }
            if (e.target.getAttribute('value') != null) {
                if (e.target.getAttribute('value').toString() === 'Default Brac' || e.target.getAttribute('value').toString() === 'Default') {
                    if (e.target.getAttribute('value').toString() === 'Default Brac') {
                        e.target.parentNode.parentNode.childNodes[0].setAttribute('value', 'Default Brac');
                        e.target.parentNode.parentNode.childNodes[0].style.color = '#726F6F';
                    }
                    if (e.target.getAttribute('value').toString() === 'Default') {
                        e.target.parentNode.parentNode.childNodes[0].setAttribute('value', 'Default');
                        e.target.parentNode.parentNode.childNodes[0].style.color = '#726F6F';
                    }
                    this.createSampleValue(e);
                }
                if (e.target.getAttribute('value').toString() === 'Colored') {
                    e.target.parentNode.parentNode.childNodes[0].setAttribute('value', 'Colored');
                    e.target.parentNode.parentNode.childNodes[0].style.color = 'red';
                    this.createSampleValue(e);
                }
                if (e.target.getAttribute('value').toString() === 'Colored Brac') {
                    e.target.parentNode.parentNode.childNodes[0].setAttribute('value', 'Colored Brac');
                    e.target.parentNode.parentNode.childNodes[0].style.color = 'red';
                    this.createSampleValue(e);
                }
            }
            e.target.parentNode.style.display = 'none';
        }
        if (e.target.className === 'selectedUnit' || e.target.className === 'selectedNegativeValue') {
            if (e.target.parentNode.childNodes[1].style.display === 'none') {
                e.target.parentNode.childNodes[1].style.display = 'block';
            }
        }
        if (e.target.className === 'mergerEachColumnNameChild' || e.target.className === 'mergerEachColumnNameChild mergerEachColumnNameChildSelected') {
            if (e.target.className === 'mergerEachColumnNameChild') {
                e.target.className = 'mergerEachColumnNameChild mergerEachColumnNameChildSelected';
                e.target.parentNode.className = 'mergerEachColumnNameParent mergerEachColumnNameParentSelected';
            }
            else if (e.target.className === 'mergerEachColumnNameChild mergerEachColumnNameChildSelected') {
                e.target.className = 'mergerEachColumnNameChild';
                e.target.parentNode.className = 'mergerEachColumnNameParent';
            }
        }
        if (e.target.className === 'mergerAddColumnFooter') {
            if (document.getElementById(this._grid.get_id() + '_mergerMainContentDiv').lastChild.style.display === 'inline-block') {
                e.target.parentNode.children[1].className = 'mergerDeleteFooter fa fa-caret-right';
                e.target.parentNode.children[2].style.display = 'none';
                if (e.target.parentNode.children[2].lastChild != null) {
                    eval('$(e.target.parentNode.childNodes[2].lastChild).remove()');
                }
                document.getElementById(this._grid.get_id() + '_mergerMainContentDiv').lastChild.style.display = 'none';
                document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').style.height = '65%';
                eval('$(\'#' + this._grid.get_id() + '_mergerColumnsMainDiv' + '\'' + ').scrollTop(' + 0 + ')');
            }
            else {
                var searchIconDiv = document.createElement('DIV');
                searchIconDiv.id = this._grid.get_GridInfo().GridId + '_searchIconDiv';
                searchIconDiv.className = 'searchIconDiv';
                var searchIcon = document.createElement('DIV');
                searchIcon.id = this._grid.get_GridInfo().GridId + '_serachIcon';
                searchIcon.className = 'searchIcon fa fa-search';
                searchIconDiv.appendChild(searchIcon);
                if (e.target.parentNode.childNodes[2].children.length === 0) {
                    e.target.parentNode.childNodes[2].appendChild(searchIconDiv);
                }
                e.target.parentNode.childNodes[2].style.display = 'inline-block';
                e.target.parentNode.childNodes[1].className = 'mergerDeleteFooter fa fa-caret-down';
                var viewColumnsMainDiv = null;
                if (document.getElementById(this._grid.get_id() + '_viewColumnsMainDiv') == null) {
                    viewColumnsMainDiv = document.createElement('DIV');
                    viewColumnsMainDiv.id = this._grid.get_id() + '_viewColumnsMainDiv';
                    viewColumnsMainDiv.className = 'viewColumnsMainDiv';
                    document.getElementById(this._grid.get_id() + '_mergerMainContentDiv').appendChild(viewColumnsMainDiv);
                }
                else {
                    eval('$(\"#' + this._grid.get_id() + '_viewColumnsMainDiv\").remove()');
                    viewColumnsMainDiv = document.createElement('DIV');
                    viewColumnsMainDiv.id = this._grid.get_id() + '_viewColumnsMainDiv';
                    viewColumnsMainDiv.className = 'viewColumnsMainDiv';
                    document.getElementById(this._grid.get_id() + '_mergerMainContentDiv').appendChild(viewColumnsMainDiv);
                }
                for (var i = 0; i < this._grid.get_GridInfo().ViewColumns.length; i++) {
                    if (!this._grid.get_GridInfo().ViewColumns[i].hasOwnProperty("CategoryName")) {
                        this._grid.get_GridInfo().ViewColumns[i].CategoryName = "DEFAULT";
                    }
                    else if (this._grid.get_GridInfo().ViewColumns[i].CategoryName == "" || this._grid.get_GridInfo().ViewColumns[i].CategoryName == null) {
                        this._grid.get_GridInfo().ViewColumns[i].CategoryName = "DEFAULT";
                    }
                }
                var data = this._grid.get_GridInfo().ViewColumns;
                var CatagoriesName = _.keys(_.countBy(data, function (data) { return data.CategoryName; }));
                for (var j = 0; j < CatagoriesName.length; j++) {
                    var CateGorieSWrapDiv = document.createElement('DIV');
                    CateGorieSWrapDiv.id = 'CateGorieSWrapDiv' + j;
                    CateGorieSWrapDiv.className = 'CateGorieSWrapDiv';
                    var CateGorieSparentDiv = document.createElement('DIV');
                    CateGorieSparentDiv.id = 'CateGorieSparentDiv' + j;
                    CateGorieSparentDiv.className = 'CateGorieSparentDiv';
                    var CategoriesNameDiv = document.createElement('DIV');
                    CategoriesNameDiv.id = 'CategoriesNameDiv' + j;
                    CategoriesNameDiv.className = 'CategoriesNameDiv';
                    CategoriesNameDiv.title = CatagoriesName[j];
                    CategoriesNameDiv.innerText = CatagoriesName[j];
                    var CategoriesCaretDiv = document.createElement('DIV');
                    CategoriesCaretDiv.id = 'CategoriesCaretDiv' + j;
                    CategoriesCaretDiv.className = 'CategoriesCaretDiv fa fa-caret-down';
                    CateGorieSWrapDiv.appendChild(CateGorieSparentDiv);
                    CateGorieSparentDiv.appendChild(CategoriesNameDiv);
                    CateGorieSparentDiv.appendChild(CategoriesCaretDiv);
                    viewColumnsMainDiv.appendChild(CateGorieSWrapDiv);
                    var ParentOfviewColumnsIndividualParent = document.createElement('DIV');
                    ParentOfviewColumnsIndividualParent.className = "ParentOfviewColumnsIndividualParent";
                    for (var i = 0; i < this._grid.get_GridInfo().ViewColumns.length; i++) {
                        if (this._grid.get_GridInfo().ViewColumns[i].CategoryName == CatagoriesName[j]) {
                            if (!Array.contains(this.existingColumnNames, (this._grid.get_GridInfo().ViewColumns[i]).ColumnName.toLowerCase()) && (this._grid.get_GridInfo().IdColumnName !== (this._grid.get_GridInfo().ViewColumns[i]).DisplayName)) {
                                
                                
                                var viewColumnsIndividualParent = document.createElement('DIV');
                                viewColumnsIndividualParent.id = this._grid.get_GridInfo().GridId + (this._grid.get_GridInfo().ViewColumns[i]).DisplayName + '_viewColumnsIndividualParent';
                                viewColumnsIndividualParent.className = 'viewColumnsIndividualParent';
                                viewColumnsIndividualParent.setAttribute('gridid', this._grid.get_GridInfo().GridId);
                                if ((this._grid.get_GridInfo().ViewColumns[i]).color !== '' && (this._grid.get_GridInfo().ViewColumns[i]).color !== '#ffffff') {
                                    viewColumnsIndividualParent.style.borderLeft = '3px' + ' ' + 'solid' + ' ' + (this._grid.get_GridInfo().ViewColumns[i]).color;
                                }
                                var viewColumnsIndividualChild = document.createElement('DIV');
                                viewColumnsIndividualChild.id = this._grid.get_GridInfo().GridId + (this._grid.get_GridInfo().ViewColumns[i]).DisplayName + '_viewColumnsIndividualChild';
                                viewColumnsIndividualChild.className = 'viewColumnsIndividualChild';
                                viewColumnsIndividualChild.setAttribute('realname', (this._grid.get_GridInfo().ViewColumns[i]).ColumnName);
                                if (!Array.contains(this.displayColumnNames, (this._grid.get_GridInfo().ViewColumns[i]).ColumnName)) {
                                    viewColumnsIndividualChild.innerText = (this._grid.get_GridInfo().ViewColumns[i]).DisplayName;
                                }
                                else {
                                    viewColumnsIndividualChild.innerText = this._grid.get_GridInfo().ColumnNameMapping[(this._grid.get_GridInfo().ViewColumns[i]).ColumnName].toString();
                                }
                                viewColumnsIndividualParent.className = 'viewColumnsIndividualParent';
                                viewColumnsIndividualChild.className = 'viewColumnsIndividualChild';
                                viewColumnsIndividualParent.appendChild(viewColumnsIndividualChild);
                                ParentOfviewColumnsIndividualParent.appendChild(viewColumnsIndividualParent);
                                CateGorieSWrapDiv.appendChild(ParentOfviewColumnsIndividualParent);
                            }
                        }
                    }
                }
                document.getElementById(this._grid.get_id() + '_viewColumnsMainDiv').style.display = 'inline-block';
                document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').style.height = '30%';
                $(".CateGorieSWrapDiv").each(function () {
                    if ($(this).find(".viewColumnsIndividualParent").length == 0) {
                        $(this)[0].style.display = 'none';
                    }
                })
               
                eval('$(\'#' + this._grid.get_id() + '_mergerColumnsMainDiv' + '\'' + ').scrollTop(' + children * 33 + ')');
                eval('$(\"#' + this._grid.get_id() + '_viewColumnsMainDiv' + '\").find(\'.viewColumnsIndividualParent\').each(function(k,v){$(v).qtip({content:$find($(this).attr(\'gridid\')).upperHeader.createQtipOnHover($(v).children()[0].innerText),style: {width : 400,classes: \'qtip-light qtipCustom\'},position: {my: \'center left\',at: \'center right\',target:$(this)},show: \'mouseover\',hide: \'mouseout\'})});');
            }
        }
        if (e.target.className === 'viewColumnsIndividualChild') {
            this._createNewColumnAdded(e, children);
        }
        if ($(e.target).hasClass("CategoriesNameDiv") || $(e.target).hasClass("CategoriesCaretDiv")) {
            //if ($("#_searchColumnFooter").length == 0) {
              
            //}
            //else if ($("#_searchColumnFooter").length > 0)
            //{

            //}
            if ($(e.target).closest(".CateGorieSparentDiv").find(".CategoriesCaretDiv").hasClass("fa-caret-down")) {
                $(e.target).closest(".CateGorieSparentDiv").find(".CategoriesCaretDiv")[0].className = "CategoriesCaretDiv fa fa-caret-right";
                $(e.target).closest(".CateGorieSWrapDiv").find(".ParentOfviewColumnsIndividualParent").hide();
            }
            else {
                $(e.target).closest(".CateGorieSparentDiv").find(".CategoriesCaretDiv")[0].className = "CategoriesCaretDiv fa fa-caret-down";
                $(e.target).closest(".CateGorieSWrapDiv").find(".ParentOfviewColumnsIndividualParent").show();
            }
        }
    },

    _moveAndPasteNewDiv: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_moveAndPasteNewDiv(e, clickedFirstTime) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <param name="clickedFirstTime" type="Boolean">
        /// </param>
        if (clickedFirstTime) {
            this.divToBeMoved = document.createElement('DIV');
            this.divToBeMoved = e.target.parentNode;
            eval('$(e.target.parentNode).remove()');
        }
    },

    _createNewColumnAdded: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_createNewColumnAdded(e, children) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        /// <param name="children" type="Number" integer="true">
        /// </param>
        var newColumnNameFlag = false;
        e.target.className = 'viewColumnsIndividualChild';
        Array.add(this.existingColumnNames, e.target.innerText.toLowerCase());
        e.target.parentNode.className = 'viewColumnsIndividualParent';
        var mergerEachColumnMainParent = null;
        for (var i = 0; i < this._grid.get_GridInfo().ViewColumns.length; i++) {
            if (e.target.innerText === (this._grid.get_GridInfo().ViewColumns[i]).DisplayName) {
                newColumnNameFlag = false;
                mergerEachColumnMainParent = document.createElement('DIV');
                mergerEachColumnMainParent.id = this._grid.get_id() + '_mergerEachColumnMainParent' + e.target.innerText;
                mergerEachColumnMainParent.className = 'mergerEachColumnMainParent';
                var hamBurger = document.createElement('DIV');
                hamBurger.id = this._grid.get_id() + '_hamBurger' + e.target.innerText;
                hamBurger.className = 'hamBurger';
                hamBurger.style.borderLeft = e.target.parentNode.style.borderLeft;
                var columnsExistingInGridIndividualParent = document.createElement('DIV');
                columnsExistingInGridIndividualParent.id = this._grid.get_GridInfo().GridId + e.target.innerText + '_selectedGridColumnParent';
                columnsExistingInGridIndividualParent.className = 'columnsExistingInGridIndividualParent';
                columnsExistingInGridIndividualParent.setAttribute('gridid', this._grid.get_GridInfo().GridId);
                var columnsExistingInGridIndividualChild = document.createElement('DIV');
                columnsExistingInGridIndividualChild.id = this._grid.get_GridInfo().GridId + e.target.innerText + '_selectedGridColumnChild';
                columnsExistingInGridIndividualChild.className = 'columnsExistingInGridIndividualChild';
                columnsExistingInGridIndividualChild.setAttribute('realname', (this._grid.get_GridInfo().ViewColumns[i]).ColumnName);
                columnsExistingInGridIndividualChild.setAttribute('value', (this._grid.get_GridInfo().ViewColumns[i]).ColumnName);
                if (!Array.contains(this.displayColumnNames, (this._grid.get_GridInfo().ViewColumns[i]).ColumnName)) {
                    columnsExistingInGridIndividualChild.innerText = e.target.innerText;
                }
                else {
                    columnsExistingInGridIndividualChild.innerText = this._grid.get_GridInfo().ColumnNameMapping[(this._grid.get_GridInfo().ViewColumns[i]).ColumnName].toString();
                }
                columnsExistingInGridIndividualParent.appendChild(columnsExistingInGridIndividualChild);
                var mergerColumnRefreshIcon = document.createElement('DIV');
                mergerColumnRefreshIcon.id = e.target.innerText + '_mergerColumnRefreshIcon';
                mergerColumnRefreshIcon.className = 'mergerColumnRefreshIcon';
                var mergerColumnDeleteIcon = document.createElement('DIV');
                mergerColumnDeleteIcon.id = e.target.innerText + '_mergerColumnDeleteIcon';
                mergerColumnDeleteIcon.className = 'mergerColumnDeleteIcon fa fa-trash-o';
                mergerEachColumnMainParent.appendChild(hamBurger);
                mergerEachColumnMainParent.appendChild(columnsExistingInGridIndividualParent);
                var mergerEachColumnDataType = document.createElement('DIV');
                mergerEachColumnDataType.id = e.target.innerText + '_mergerEachColumnDataType';
                mergerEachColumnDataType.className = 'mergerEachColumnDataType';
                var mergerEachColumnSample = document.createElement('DIV');
                mergerEachColumnSample.id = e.target.innerText + '_mergerEachColumnSample';
                mergerEachColumnSample.className = 'mergerEachColumnSample';
                var value = (this._grid.get_GridInfo().ViewColumns[i]).DataType.toString();
                switch (value) {
                    case 'System.String':
                    case 'System.Boolean':
                        mergerEachColumnDataType.innerText = 'String';
                        mergerEachColumnSample.innerText = 'aaabbbccc';
                        mergerEachColumnSample.style.textAlign = 'left';
                        break;
                    case 'System.Double':
                    case 'System.Int32':
                    case 'System.Long':
                    case 'System.Decimal':
                        mergerEachColumnDataType.innerText = 'Number';
                        mergerEachColumnSample.innerText = '123456';
                        mergerEachColumnSample.style.textAlign = 'right';
                        break;
                    case 'System.DateTime':
                        mergerEachColumnDataType.innerText = 'DateTime';
                        mergerEachColumnSample.innerText = '12/31/2014';
                        mergerEachColumnSample.style.textAlign = 'right';
                        break;
                }
                var mergerEachColumnUnit = document.createElement('DIV');
                mergerEachColumnUnit.id = e.target.innerText + '_mergerEachColumnUnit';
                mergerEachColumnUnit.className = 'mergerEachColumnUnit';
                mergerEachColumnUnit.innerText = 'None';
                var mergerEachColumnNegativeValue = document.createElement('DIV');
                mergerEachColumnNegativeValue.id = e.target.innerText + '_mergerEachColumnNegativeValue';
                mergerEachColumnNegativeValue.className = 'mergerEachColumnNegativeValue';
                mergerEachColumnNegativeValue.innerText = 'None';
                var mergerEachColumnPrefix = document.createElement('DIV');
                mergerEachColumnPrefix.id = e.target.innerText + '_mergerEachColumnPrefix';
                mergerEachColumnPrefix.className = 'mergerEachColumnPrefix';
                mergerEachColumnPrefix.innerText = 'None';
                var mergerEachColumnDecimalPlaces = document.createElement('DIV');
                mergerEachColumnDecimalPlaces.id = e.target.innerText + '_mergerEachColumnDecimalPlaces';
                mergerEachColumnDecimalPlaces.className = 'mergerEachColumnDecimalPlaces';
                mergerEachColumnDecimalPlaces.innerText = 'None';
                mergerEachColumnMainParent.appendChild(mergerEachColumnDataType);
                mergerEachColumnMainParent.appendChild(mergerEachColumnUnit);
                mergerEachColumnMainParent.appendChild(mergerEachColumnNegativeValue);
                mergerEachColumnMainParent.appendChild(mergerEachColumnPrefix);
                mergerEachColumnMainParent.appendChild(mergerEachColumnDecimalPlaces);
                mergerEachColumnMainParent.appendChild(mergerEachColumnSample);
                mergerEachColumnMainParent.appendChild(mergerColumnRefreshIcon);
                mergerEachColumnMainParent.appendChild(mergerColumnDeleteIcon);
                document.getElementById(this._grid.get_id() + '_mergerColumnsMainDiv').appendChild(mergerEachColumnMainParent);
                children++;
                eval('$(\'#' + this._grid.get_id() + '_mergerColumnsMainDiv' + '\'' + ').scrollTop(' + children * 33 + ')');
                if (Array.contains(this.columnRealNameList, e.target.innerText)) {
                    Array.add(this.columnsToBevisible, e.target.innerText);
                    newColumnNameFlag = true;
                }
                else {
                    var $dict1 = this._grid.get_GridInfo().ColumnNameMapping;
                    for (var $key2 in $dict1) {
                        var item = { key: $key2, value: $dict1[$key2] };
                        if (item.value.toString() === e.target.innerText) {
                            Array.add(this.columnsToBevisible, item.key.toString());
                            newColumnNameFlag = true;
                            break;
                        }
                    }
                }
                if (!newColumnNameFlag) {
                    Array.add(this.columnsToBevisible, e.target.getAttribute('realname').toString());
                }
            }
        }
        eval('$(e.target.parentNode).remove()');
        eval('$(columnsExistingInGridIndividualParent).qtip(\"destroy\")');
        
        eval('$(\"#' + this._grid.get_id() + '_mergerMainContentDiv' + '\").find($(columnsExistingInGridIndividualParent)).each(function(k,v){$(v).qtip({content:$find($(this).attr(\'gridid\')).upperHeader.createQtipOnHover($(v).children()[0].innerText),style: {width : 400,classes: \'qtip-light qtipCustom\'},position: {my: \'center left\',at: \'center right\',target:$(this)},show: \'mouseover\',hide: \'mouseout\'})});');
        mergerEachColumnMainParent.className = 'mergerEachColumnMainParent ApplyBoxShadow';
        window.setTimeout(Function.createDelegate(this, function () {
            mergerEachColumnMainParent.className = 'mergerEachColumnMainParent';
        }), 1000);

        $(".CateGorieSWrapDiv").each(function(){
            if($(this).find(".ParentOfviewColumnsIndividualParent").children().length == 0)
            {
                $(this).addClass("RADCategoryHidden");
            }
        });
    },

    _searchToggleDivHandlerFooter: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_searchToggleDivHandlerFooter(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var searchColumn = this._grid.elementHelper.get_textElement();
        searchColumn.id = '_searchColumnFooter';
        searchColumn.setAttribute('placeholder', 'Search Column');
        searchColumn.setAttribute('autocomplete', 'off');
        searchColumn.className = 'searchColumnDivFooter';
        if (e.target.className === 'searchBarContainer' || e.target.className === 'searchIconDiv' || e.target.className === 'searchIcon fa fa-search') {
            if (e.target.className === 'searchIconDiv') {
                if (document.getElementById('_searchColumnFooter') == null) {
                    e.target.parentNode.appendChild(searchColumn);
                }
                else {
                    eval('$(\"#_searchColumnFooter\").remove()');
                }
            }
            else if (e.target.className === 'searchIcon fa fa-search') {
                if (document.getElementById('_searchColumnFooter') == null) {
                    e.target.parentNode.parentNode.appendChild(searchColumn);
                }
                else {
                    eval('$(\"#_searchColumnFooter\").remove()');
                }
            }
            else if (e.target.className === 'searchBarContainer') {
                if (document.getElementById('_searchColumnFooter') == null) {
                    e.target.appendChild(searchColumn);
                }
                else {
                    eval('$(\"#_searchColumnFooter\").remove()');
                }
            }
            if (eval('$(\"#_searchColumn\")') != null) {
                eval('$(\"#_searchColumn\").focus()');
            }
            if (eval('$(\"#_searchColumnFooter\")') != null) {
                eval('$(\"#_searchColumnFooter\").focus()');
            }
        }
    },

    _searchToggleDivHandler: function com_ivp_rad_controls_neogrid_scripts_UpperHeader$_searchToggleDivHandler(e) {
        /// <param name="e" type="Sys.UI.DomEvent">
        /// </param>
        var searchColumn = this._grid.elementHelper.get_textElement();
        searchColumn.id = '_searchColumn';
        searchColumn.setAttribute('placeholder', 'Search Column');
        searchColumn.setAttribute('autocomplete', 'off');
        searchColumn.className = 'searchColumnDiv';
        if (e.target.className === 'searchBarContainer' || e.target.className === 'searchIconDiv' || e.target.className === 'searchIcon fa fa-search') {
            if (e.target.className === 'searchBarContainer') {
                if (document.getElementById('_searchColumn') == null) {
                    e.target.parentNode.appendChild(searchColumn);
                }
                else {
                    eval('$(\"#_searchColumn\").remove()');
                }
            }
            if (e.target.className === 'searchIconDiv') {
                if (document.getElementById('_searchColumn') == null) {
                    e.target.parentNode.parentNode.appendChild(searchColumn);
                }
                else {
                    eval('$(\"#_searchColumn\").remove()');
                }
            }
            if (e.target.className === 'searchIcon fa fa-search') {
                if (document.getElementById('_searchColumn') == null) {
                    e.target.parentNode.parentNode.parentNode.appendChild(searchColumn);
                }
                else {
                    eval('$(\"#_searchColumn\").remove()');
                }
            }
            if (eval('$(\"#_searchColumn\")') != null) {
                eval('$(\"#_searchColumn\").focus()');
            }
            if (eval('$(\"#_searchColumnFooter\")') != null) {
                eval('$(\"#_searchColumnFooter\").focus()');
            }
        }
    }
}


Type.registerNamespace('com.ivp.rad.controls.neogrid.scripts.info');

////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.CheckBoxSelectionMode

com.ivp.rad.controls.neogrid.scripts.info.CheckBoxSelectionMode = function () {
    /// <field name="multiple" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="single" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.CheckBoxSelectionMode.prototype = {
    multiple: 0,
    single: 1
}
com.ivp.rad.controls.neogrid.scripts.info.CheckBoxSelectionMode.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.CheckBoxSelectionMode', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.FooterAnimation

com.ivp.rad.controls.neogrid.scripts.info.FooterAnimation = function () {
    /// <field name="zeroWidth" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="animate" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="noAnimation" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="zeroWidthAnimation" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.FooterAnimation.prototype = {
    zeroWidth: 0,
    animate: 1,
    noAnimation: 2,
    zeroWidthAnimation: 3
}
com.ivp.rad.controls.neogrid.scripts.info.FooterAnimation.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.FooterAnimation', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.OperationType

com.ivp.rad.controls.neogrid.scripts.info.OperationType = function () {
    /// <field name="updateOperation" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="deleteOperation" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.OperationType.prototype = {
    updateOperation: 0,
    deleteOperation: 1
}
com.ivp.rad.controls.neogrid.scripts.info.OperationType.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.OperationType', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode

com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode = function () {
    /// <field name="textBox" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="dropDown" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.prototype = {
    textBox: 0,
    dropDown: 1,
    textArea: 2,
}
com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.AutoAdjust

com.ivp.rad.controls.neogrid.scripts.info.AutoAdjust = function () {
    /// <field name="headerAndBody" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="bodyOnly" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="headerOnly" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.AutoAdjust.prototype = {
    headerAndBody: 0,
    bodyOnly: 1,
    headerOnly: 2
}
com.ivp.rad.controls.neogrid.scripts.info.AutoAdjust.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.AutoAdjust', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.Justification

com.ivp.rad.controls.neogrid.scripts.info.Justification = function () {
    /// <field name="DEFAULT" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="LEFT" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="RIGHT" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="CENTER" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.Justification.prototype = {
    DEFAULT: 0,
    LEFT: 1,
    RIGHT: 2,
    CENTER: 3
}
com.ivp.rad.controls.neogrid.scripts.info.Justification.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.Justification', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.Theme

com.ivp.rad.controls.neogrid.scripts.info.Theme = function () {
    /// <field name="normal" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="flatTheme" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="masterChildGridTheme" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="pnLTheme" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="pnLWhiteTheme" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.Theme.prototype = {
    normal: 0,
    flatTheme: 1,
    masterChildGridTheme: 2,
    pnLTheme: 3,
    pnLWhiteTheme: 4
}
com.ivp.rad.controls.neogrid.scripts.info.Theme.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.Theme', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows

com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows = function () {
    /// <field name="none" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="top" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="bottom" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows.prototype = {
    none: 0,
    top: 1,
    bottom: 2
}
com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.RankType

com.ivp.rad.controls.neogrid.scripts.info.RankType = function () {
    /// <field name="dense_rank" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="non_dense_rank" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.RankType.prototype = {
    dense_rank: 0,
    non_dense_rank: 1
}
com.ivp.rad.controls.neogrid.scripts.info.RankType.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.RankType', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.SortType

com.ivp.rad.controls.neogrid.scripts.info.SortType = function () {
    /// <field name="ASC" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="DESC" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.SortType.prototype = {
    ASC: 0,
    DESC: 1
}
com.ivp.rad.controls.neogrid.scripts.info.SortType.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.SortType', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.Orietation

com.ivp.rad.controls.neogrid.scripts.info.Orietation = function () {
    /// <field name="portrait" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="landScape" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.Orietation.prototype = {
    portrait: 0,
    landScape: 1
}
com.ivp.rad.controls.neogrid.scripts.info.Orietation.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.Orietation', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.PageOrder

com.ivp.rad.controls.neogrid.scripts.info.PageOrder = function () {
    /// <field name="DTO" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="OTD" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.PageOrder.prototype = {
    DTO: 0,
    OTD: 1
}
com.ivp.rad.controls.neogrid.scripts.info.PageOrder.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.PageOrder', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize

com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize = function () {
    /// <field name="a0" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="a1" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="a2" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="a3" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="a4" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize.prototype = {
    a0: 0,
    a1: 1,
    a2: 2,
    a3: 3,
    a4: 4
}
com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.KeyCodes

com.ivp.rad.controls.neogrid.scripts.info.KeyCodes = function () {
    /// <field name="CLICK" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="BACKSPACE" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="TAB" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ENTER" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="SHIFT" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="CTRL" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ALT" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ESC" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="SPACE" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="PAGEUP" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="PAGEDOWN" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="END" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="HOME" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="LEFTARROW" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="UPARROW" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="RIGHTARRAOW" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="DOWNARRAOW" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="INSERT" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="DELETE" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="EQUALS" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="f" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="z" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.prototype = {
    CLICK: 0,
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    PAGEUP: 33,
    PAGEDOWN: 34,
    END: 35,
    HOME: 36,
    LEFTARROW: 37,
    UPARROW: 38,
    RIGHTARRAOW: 39,
    DOWNARRAOW: 40,
    INSERT: 45,
    DELETE: 127,
    EQUALS: 187,
    f: 70,
    z: 90
}
com.ivp.rad.controls.neogrid.scripts.info.KeyCodes.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.KeyCodes', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.Action

com.ivp.rad.controls.neogrid.scripts.info.Action = function () {
    /// <field name="Add" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="Update" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="Delete" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="Import" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.Action.prototype = {
    Add: 0,
    Update: 1,
    Delete: 2,
    Import: 3
}
com.ivp.rad.controls.neogrid.scripts.info.Action.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.Action', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType

com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType = function () {
    /// <field name="insertRule" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="updateRule" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="deleteRule" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="doNothing" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType.prototype = {
    insertRule: 1,
    updateRule: 2,
    deleteRule: 3,
    doNothing: 4
}
com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.Order

com.ivp.rad.controls.neogrid.scripts.info.Order = function () {
    /// <field name="NONE" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="ASC" type="Number" integer="true" static="true">
    /// </field>
    /// <field name="DESC" type="Number" integer="true" static="true">
    /// </field>
};
com.ivp.rad.controls.neogrid.scripts.info.Order.prototype = {
    NONE: 0,
    ASC: 1,
    DESC: 2
}
com.ivp.rad.controls.neogrid.scripts.info.Order.registerEnum('com.ivp.rad.controls.neogrid.scripts.info.Order', false);


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.ColumnInfo

com.ivp.rad.controls.neogrid.scripts.info.ColumnInfo = function com_ivp_rad_controls_neogrid_scripts_info_ColumnInfo() {
    /// <field name="ColumnName" type="String">
    /// </field>
    /// <field name="DataType" type="String">
    /// </field>
    /// <field name="index" type="Number" integer="true">
    /// </field>
    /// <field name="isComputed" type="Boolean">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.ColumnInfo.prototype = {
    ColumnName: null,
    DataType: null,
    index: 0,
    isComputed: false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.DataType

com.ivp.rad.controls.neogrid.scripts.info.DataType = function com_ivp_rad_controls_neogrid_scripts_info_DataType() {
    /// <field name="xs_int" type="String" static="true">
    /// </field>
    /// <field name="xs_string" type="String" static="true">
    /// </field>
    /// <field name="xs_decimal" type="String" static="true">
    /// </field>
    /// <field name="xs_double" type="String" static="true">
    /// </field>
    /// <field name="xs_boolean" type="String" static="true">
    /// </field>
    /// <field name="xs_dateTime" type="String" static="true">
    /// </field>
    /// <field name="xs_anyType" type="String" static="true">
    /// </field>
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.AddRemoveColumnInfo

com.ivp.rad.controls.neogrid.scripts.info.AddRemoveColumnInfo = function com_ivp_rad_controls_neogrid_scripts_info_AddRemoveColumnInfo() {
    /// <field name="Column" type="com.ivp.rad.controls.neogrid.scripts.info.ColumnInfo">
    /// </field>
    /// <field name="IsDeletable" type="Boolean">
    /// </field>
    /// <field name="HasClientSideFunctionality" type="Boolean">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.AddRemoveColumnInfo.prototype = {
    Column: null,
    IsDeletable: false,
    HasClientSideFunctionality: false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.HiddenColumnInfo

com.ivp.rad.controls.neogrid.scripts.info.HiddenColumnInfo = function com_ivp_rad_controls_neogrid_scripts_info_HiddenColumnInfo() {
    /// <field name="ColumnName" type="String">
    /// </field>
    /// <field name="isDefault" type="Boolean">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.HiddenColumnInfo.prototype = {
    ColumnName: null,
    isDefault: false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.FrozenColumnInfo

com.ivp.rad.controls.neogrid.scripts.info.FrozenColumnInfo = function com_ivp_rad_controls_neogrid_scripts_info_FrozenColumnInfo() {
    /// <field name="ColumnName" type="String">
    /// </field>
    /// <field name="isDefault" type="Boolean">
    /// </field>
    /// <field name="isTicking" type="Boolean">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.FrozenColumnInfo.prototype = {
    ColumnName: null,
    isDefault: false,
    isTicking: false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.ContextMenuCellInfo

com.ivp.rad.controls.neogrid.scripts.info.ContextMenuCellInfo = function com_ivp_rad_controls_neogrid_scripts_info_ContextMenuCellInfo() {
    /// <field name="HtmlToBeVisible" type="String">
    /// </field>
    /// <field name="KeySelected" type="String">
    /// </field>
    /// <field name="EventTriggered" type="String">
    /// </field>
    /// <field name="ChildContextMenu" type="Array">
    /// </field>
    this.ChildContextMenu = [];
}
com.ivp.rad.controls.neogrid.scripts.info.ContextMenuCellInfo.prototype = {
    HtmlToBeVisible: null,
    KeySelected: null,
    EventTriggered: null,
    ChildContextMenu: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.CustomRowDataInfo

com.ivp.rad.controls.neogrid.scripts.info.CustomRowDataInfo = function com_ivp_rad_controls_neogrid_scripts_info_CustomRowDataInfo() {
    /// <field name="rowID" type="String">
    /// </field>
    /// <field name="styleAttribute" type="Object">
    /// </field>
    /// <field name="attribute" type="Object">
    /// </field>
    /// <field name="cells" type="Array">
    /// </field>
    this.cells = [];
    this.styleAttribute = {};
    this.attribute = {};
}
com.ivp.rad.controls.neogrid.scripts.info.CustomRowDataInfo.prototype = {
    rowID: null,
    styleAttribute: null,
    attribute: null,
    cells: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.CustomCellDatainfo

com.ivp.rad.controls.neogrid.scripts.info.CustomCellDatainfo = function com_ivp_rad_controls_neogrid_scripts_info_CustomCellDatainfo() {
    /// <field name="columnName" type="String">
    /// </field>
    /// <field name="styleAttribute" type="Object">
    /// </field>
    /// <field name="attribute" type="Object">
    /// </field>
    /// <field name="newChild" type="String">
    /// </field>
    /// <field name="append" type="Boolean">
    /// </field>
    this.styleAttribute = {};
    this.attribute = {};
}
com.ivp.rad.controls.neogrid.scripts.info.CustomCellDatainfo.prototype = {
    columnName: null,
    styleAttribute: null,
    attribute: null,
    newChild: null,
    append: false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.CellExtraChildExchangeInfo

com.ivp.rad.controls.neogrid.scripts.info.CellExtraChildExchangeInfo = function com_ivp_rad_controls_neogrid_scripts_info_CellExtraChildExchangeInfo() {
    /// <field name="ColumnSource" type="String">
    /// Column name which is dragged while column rearrangement OR Column Name which is removed
    /// </field>
    /// <field name="ColumnDestination" type="String">
    /// Column name on which dragged column is dropped while column rearrangement OR Column Name which should get removed columns ExtraChild
    /// </field>
    /// <field name="ColumnOperationType" type="com.ivp.rad.controls.neogrid.scripts.info.OperationType">
    /// Update: In case of column rearrangement, Delete: In case of column remove
    /// </field>
    /// <field name="IsValid" type="Boolean">
    /// </field>
    this.IsValid = true;
}
com.ivp.rad.controls.neogrid.scripts.info.CellExtraChildExchangeInfo.prototype = {
    ColumnSource: null,
    ColumnDestination: null,
    ColumnOperationType: 0,
    IsValid: false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.CustomHeaderDataInfo

com.ivp.rad.controls.neogrid.scripts.info.CustomHeaderDataInfo = function com_ivp_rad_controls_neogrid_scripts_info_CustomHeaderDataInfo() {
    /// <summary>
    /// Custom Header Data Info
    /// </summary>
    /// <field name="AppendChild" type="String">
    /// Child To Append
    /// </field>
    /// <field name="ColumnWidth" type="Number" integer="true">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.CustomHeaderDataInfo.prototype = {
    AppendChild: null,
    ColumnWidth: 0
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.ChangedRowInfo

com.ivp.rad.controls.neogrid.scripts.info.ChangedRowInfo = function com_ivp_rad_controls_neogrid_scripts_info_ChangedRowInfo() {
    /// <field name="RowID" type="String">
    /// </field>
    /// <field name="CellInfo" type="Array">
    /// </field>
    /// <field name="RowHTML" type="String">
    /// </field>
    /// <field name="_row" type="Object" domElement="true">
    /// </field>
    /// <field name="IsChanged"  type="Boolean">
    /// </field>
    this.CellInfo = [];
}
com.ivp.rad.controls.neogrid.scripts.info.ChangedRowInfo.prototype = {
    RowID: null,
    CellInfo: null,
    RowHTML: null,
    _row: null,
    IsChanged:false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.ChangedCellInfo

com.ivp.rad.controls.neogrid.scripts.info.ChangedCellInfo = function com_ivp_rad_controls_neogrid_scripts_info_ChangedCellInfo() {
    /// <field name="ColumnName" type="String">
    /// </field>
    /// <field name="OldValue" type="String">
    /// </field>
    /// <field name="NewValue" type="String">
    /// </field>
    /// <field name="OldColor" type="String">
    /// </field>
    /// <field name="NewColor" type="String">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.ChangedCellInfo.prototype = {
    ColumnName: null,
    OldValue: null,
    NewValue: null,
    OldColor: null,
    NewColor: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.EditableColumnInfo

com.ivp.rad.controls.neogrid.scripts.info.EditableColumnInfo = function com_ivp_rad_controls_neogrid_scripts_info_EditableColumnInfo() {
    /// <field name="ColumnName" type="String">
    /// </field>
    /// <field name="EditColumnMode" type="com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode">
    /// </field>
    /// <field name="DropDownValues" type="Array">
    /// </field>
    this.DropDownValues = [];
    this.EditColumnMode = com.ivp.rad.controls.neogrid.scripts.info.EditColumnMode.textBox;
}
com.ivp.rad.controls.neogrid.scripts.info.EditableColumnInfo.prototype = {
    ColumnName: null,
    EditColumnMode: 0,
    DropDownValues: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.FilterInfo

com.ivp.rad.controls.neogrid.scripts.info.FilterInfo = function com_ivp_rad_controls_neogrid_scripts_info_FilterInfo() {
    /// <field name="ColumnName" type="String">
    /// </field>
    /// <field name="Values" type="Array">
    /// </field>
    /// <field name="MinValue" type="Object">
    /// </field>
    /// <field name="MaxValue" type="Object">
    /// </field>
    /// <field name="SelectedMinValue" type="Object">
    /// </field>
    /// <field name="SelectedMaxValue" type="Object">
    /// </field>
    /// <field name="IsSliderFilter" type="Boolean">
    /// </field>
    /// <field name="DataType" type="String">
    /// </field>
    /// <field name="IsDestructive" type="String">
    /// </field>
    /// <field name="NumericOperators" type="Enum">
    /// </field>
    /// <field name="StringOperators" type="Enum">
    /// </field>
    /// <field name="OperatorUsed" type="String">
    /// </field>
    /// <field name="toBeOperatedValue" type="String">
    /// </field>
    /// <field name="latestOperation" type="String">
    /// </field>
    /// <field name="DateTimeOperators" type="Enum">
    /// </field>
    /// <field name="latestOperationOnFilter" type="Enum">
    /// </field>
    /// <field name="endDateInBetween" type="String">
    /// </field>
    /// <field name="startDateInBetween" type="String">
    /// </field>
    /// <field name="filterFromSearch" type="Boolean">
    /// </field>
    this.Values = [];
}
com.ivp.rad.controls.neogrid.scripts.info.FilterInfo.prototype = {
    ColumnName: null,
    Values: null,
    MinValue: null,
    MaxValue: null,
    SelectedMinValue: null,
    SelectedMaxValue: null,
    IsSliderFilter: false,
    DataType: null,
    IsDestructive: null,
    NumericOperators: null,
    StringOperators: null,
    OperatorUsed: null,
    toBeOperatedValue: null,
    latestOperation: null,
    DateTimeOperators: null,
    latestOperationOnFilter: null,
    endDateInBetween: null,
    startDateInBetween: null,
    filterFromSearch: false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.GridExtraInfo

com.ivp.rad.controls.neogrid.scripts.info.GridExtraInfo = function com_ivp_rad_controls_neogrid_scripts_info_GridExtraInfo() {
    /// <field name="SearchEnterPriseSearch" type="String">
    /// </field>
    /// <field name="RecordCount" type="Number" integer="true">
    /// </field>
    /// <field name="PageIndex" type="Number" integer="true">
    /// </field>
    /// <field name="SelectedRows" type="Number" integer="true">
    /// </field>
    /// <field name="PageSize" type="Number" integer="true">
    /// </field>
    /// <field name="CheckedRowCountOnPage" type="Number" integer="true">
    /// </field>
    /// <field name="ApparentRecordCount" type="Number" integer="true">
    /// </field>
    /// <field name="ExcelFileName" type="String">
    /// </field>
    /// <field name="PdfFileName" type="String">
    /// </field>
    /// <field name="FirstColumnCheckbox" type="Boolean">
    /// </field>
    /// <field name="RecordStartIndex" type="Number" integer="true">
    /// </field>
    /// <field name="RecordEndIndex" type="Number" integer="true">
    /// </field>
    /// <field name="LayoutInfo" type="com.ivp.rad.controls.neogrid.scripts.info.LayoutInfo">
    /// </field>
    /// <field name="GroupedSortedColumns" type="Array">
    /// </field>
    /// <field name="FilteredColumns" type="Array">
    /// </field>
    /// <field name="MinValue" type="String">
    /// </field>
    /// <field name="MaxValue" type="String">
    /// </field>
    /// <field name="SearchText" type="String">
    /// </field>
    /// <field name="AvgValue" type="String">
    /// </field>
    /// <field name="SumValue" type="String">
    /// </field>
    /// <field name="WeightedAvgValue" type="String">
    /// </field>
    /// <field name="CurrentPageSize" type="Number" integer="true">
    /// </field>
    /// <field name="MathematicalOperationsInfo" type="com.ivp.rad.controls.neogrid.scripts.info.ColumnLevelMathematicalOperationsInfo">
    /// </field>
    /// <field name="ColumnsToHide" type="Array">
    /// </field>
    /// <field name="FrozenColumns" type="Array">
    /// </field>
    /// <field name="RuleBasedColoringRules" type="Array">
    /// </field>
    /// <field name="SelectedRowCellCount" type="Number" integer="true">
    /// </field>
    /// <field name="ColumnWidths" type="Object">
    /// </field>
    /// <field name="GroupHeaderInfo" type="Object">
    /// </field>
    /// <field name="CheckedRowIndices" type="Array">
    /// </field>
    /// <field name="CheckGroupHeaderRows" type="Array">
    /// </field>
    /// <field name="UnCheckGroupHeaderRows" type="Array">
    /// </field>
    /// <field name="RowsToCheck" type="Array">
    /// </field>
    /// <field name="RowsToUnCheck" type="Array">
    /// </field>
    /// <field name="LargeSizeColumns" type="Array">
    /// </field>
    /// <field name="VerticalScrollPosition" type="Number" integer="true">
    /// </field>
    /// <field name="CurrentFilteredColumn" type="String">
    /// </field>
    /// <field name="ChangedDataRows" type="Object">
    /// </field>
    /// <field name="Cachekey" type="String">
    /// </field>
    /// <field name="RuleDataInfo" type="Object">
    /// </field>
    /// <field name="RuleEditorIntellisense" type="Array">
    /// </field>
    /// <field name="ComputedColumns" type="Object">
    /// </field>
    /// <field name="EditableColumns" type="Array">
    /// </field>
    /// <field name="knockOutJsonData" type="String">
    /// </field>
    /// <field name="SizeJsonData" type="Object">
    /// </field>
    /// <field name="filterOperatorsEnum" type="Array">
    /// </field>
    /// <field name="filterONColumn" type="String">
    /// </field>
    /// <field name="FilterData" type="Object">
    /// </field>
    /// <field name="ChildGridData" type="String">
    /// </field>
    /// <field name="MasterChildMapping" type="Object">
    /// </field>
    /// <field name="IsMasterGridSearch" type="Boolean">
    /// </field>
    /// <field name="ChildGridsToOpen" type="Array">
    /// </field>
    /// <field name="RowID" type="String">
    /// </field>
    /// <field name="IdColumnValue" type="String">
    /// </field>
    /// <field name="ChildGridMappedWidth" type="Object">
    /// </field>
    /// <field name="CheckSelectAllForFilter" type="Boolean">
    /// </field>
    /// <field name="LastChildMappingList" type="Array">
    /// </field>
    /// <field name="MasterGridSearchText" type="String">
    /// </field>
    /// <field name="FooterAnimation" type="com.ivp.rad.controls.neogrid.scripts.info.FooterAnimation">
    /// </field>
    /// <field name="ColumnList" type="Array">
    /// </field>
    /// <field name="ColumnRealNamesList" type="Array">
    /// </field>
    /// <field name="KnockOutJsonDataForScroll" type="String">
    /// </field>
    /// <field name="KnockOutJsonDataPreviousRecords" type="String">
    /// </field>
    /// <field name="GridCustomFormatMapping" type="Object">
    /// </field>
    /// <field name="RankingColumnInfo" type="com.ivp.rad.controls.neogrid.scripts.info.RankingInfo">
    /// </field>
    /// <field name="NumericColumnName" type="Array">
    /// </field>
    /// <field name="CheckHeaderCheckBox" type="Boolean">
    /// </field>
    /// <field name="ColumnMappingInfo" type="Array">
    /// </field>
    /// <field name="ViewColumnDictionary" type="Object">
    /// </field>
    /// <field name="searchInfo" type="com.ivp.rad.controls.neogrid.scripts.info.SearchInfoObj">
    /// </field>
    /// <field name="UniqueValuesForColumn" type="Array">
    /// </field>
    /// <field name="IsInterOpInstalled" type="Boolean">
    /// </field>
    /// <field name="ShowAdvanceFilter" type="Boolean">
    /// </field>
    /// <field name="CommentProperty" type="Boolean">
    /// </field>
    /// <field name="CommentDetails" type="Array">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.GridExtraInfo.prototype = {
    SearchEnterPriseSearch: null,
    RecordCount: 0,
    PageIndex: 0,
    SelectedRows: 0,
    PageSize: 0,
    CheckedRowCountOnPage: 0,
    ApparentRecordCount: 0,
    ExcelFileName: null,
    PdfFileName: null,
    FirstColumnCheckbox: false,
    RecordStartIndex: 0,
    RecordEndIndex: 0,
    LayoutInfo: null,
    GroupedSortedColumns: null,
    FilteredColumns: null,
    MinValue: null,
    MaxValue: null,
    SearchText: null,
    AvgValue: null,
    SumValue: null,
    WeightedAvgValue: null,
    CurrentPageSize: 0,
    MathematicalOperationsInfo: null,
    ColumnsToHide: null,
    FrozenColumns: null,
    RuleBasedColoringRules: null,
    SelectedRowCellCount: 0,
    ColumnWidths: null,
    GroupHeaderInfo: null,
    CheckedRowIndices: null,
    CheckGroupHeaderRows: null,
    UnCheckGroupHeaderRows: null,
    RowsToCheck: null,
    RowsToUnCheck: null,
    LargeSizeColumns:null,
    VerticalScrollPosition: 0,
    CurrentFilteredColumn: null,
    ChangedDataRows: null,
    Cachekey: null,
    RuleDataInfo: null,
    RuleEditorIntellisense: null,
    ComputedColumns: null,
    EditableColumns: null,
    knockOutJsonData: null,
    SizeJsonData: null,
    filterOperatorsEnum: null,
    filterONColumn: null,
    FilterData: null,
    ChildGridData: null,
    MasterChildMapping: null,
    IsMasterGridSearch: false,
    ChildGridsToOpen: null,
    RowID: null,
    IdColumnValue: null,
    ChildGridMappedWidth: null,
    CheckSelectAllForFilter: false,
    LastChildMappingList: null,
    MasterGridSearchText: null,
    FooterAnimation: 0,
    ColumnList: null,
    ColumnRealNamesList: null,
    KnockOutJsonDataForScroll: null,
    KnockOutJsonDataPreviousRecords: null,
    GridCustomFormatMapping: null,
    RankingColumnInfo: null,
    NumericColumnName: null,
    CheckHeaderCheckBox: false,
    ColumnMappingInfo: null,
    ViewColumnDictionary: null,
    searchInfo: null,
    UniqueValuesForColumn: null,
    IsInterOpInstalled: false,
    ShowAdvanceFilter: false,
    CommentProperty: false,
    CommentDetails:null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.RADGridWghtAvgInfo

com.ivp.rad.controls.neogrid.scripts.info.RADGridWghtAvgInfo = function com_ivp_rad_controls_neogrid_scripts_info_RADGridWghtAvgInfo() {
    /// <field name="WghtColumnName" type="String">
    /// </field>
    /// <field name="FieldColumnName" type="String">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.RADGridWghtAvgInfo.prototype = {
    WghtColumnName: null,
    FieldColumnName: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.ColumnLevelMathematicalOperationsInfo

com.ivp.rad.controls.neogrid.scripts.info.ColumnLevelMathematicalOperationsInfo = function com_ivp_rad_controls_neogrid_scripts_info_ColumnLevelMathematicalOperationsInfo() {
    /// <field name="ColumnLevelMathematicalOperations" type="Object">
    /// </field>
    /// <field name="ColumnMathOps" type="Object">
    /// </field>
    /// <field name="FooterHTML" type="Array">
    /// </field>
    /// <field name="FFooterHTML" type="Array">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.ColumnLevelMathematicalOperationsInfo.prototype = {
    ColumnLevelMathematicalOperations: null,
    ColumnMathOps: null,
    FooterHTML: null,
    FFooterHTML: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.PushDataInfo

com.ivp.rad.controls.neogrid.scripts.info.PushDataInfo = function com_ivp_rad_controls_neogrid_scripts_info_PushDataInfo() {
    /// <field name="RowID" type="String">
    /// </field>
    /// <field name="ColumnNameValue" type="Array">
    /// </field>
    /// <field name="isGrouped" type="Boolean">
    /// </field>
    /// <field name="GridId" type="String">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.PushDataInfo.prototype = {
    RowID: null,
    ColumnNameValue: null,
    isGrouped: false,
    GridId: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.PushDataCellInfo

com.ivp.rad.controls.neogrid.scripts.info.PushDataCellInfo = function com_ivp_rad_controls_neogrid_scripts_info_PushDataCellInfo() {
    /// <field name="ColumnValue" type="String">
    /// </field>
    /// <field name="ColumnName" type="String">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.PushDataCellInfo.prototype = {
    ColumnValue: null,
    ColumnName: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.PushResult

com.ivp.rad.controls.neogrid.scripts.info.PushResult = function com_ivp_rad_controls_neogrid_scripts_info_PushResult() {
    /// <field name="Content" type="String">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.PushResult.prototype = {
    Content: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.GridInfo

com.ivp.rad.controls.neogrid.scripts.info.GridInfo = function com_ivp_rad_controls_neogrid_scripts_info_GridInfo() {
    /// <field name="RankingColumnInfo" type="com.ivp.rad.controls.neogrid.scripts.info.RankingInfo">
    /// </field>
    /// <field name="ViewKey" type="String">
    /// </field>
    /// <field name="GridId" type="String">
    /// </field>
    /// <field name="CurrentPageId" type="String">
    /// </field>
    /// <field name="SessionIdentifier" type="String">
    /// </field>
    /// <field name="lastScrollLeft" type="Number" integer="true">
    /// </field>
    /// <field name="lastScrollLeftForFrozenNewDiv" type="Number" integer="true">
    /// </field>
    /// <field name="lastScrollTop" type="Number" integer="true">
    /// </field>
    /// <field name="NewScrollLeft" type="Number" integer="true">
    /// </field>
    /// <field name="NewScrollTop" type="Number" integer="true">
    /// </field>
    /// <field name="UserId" type="String">
    /// </field>
    /// <field name="ColumnsWithoutClientSideFunctionality" type="Array">
    /// </field>
    /// <field name="ColumnsNotToSum" type="Array">
    /// </field>
    /// <field name="IdColumnName" type="String">
    /// </field>
    /// <field name="ColumnsToHide" type="Array">
    /// </field>
    /// <field name="PageSize" type="Number" integer="true">
    /// </field>
    /// <field name="ItemText" type="String">
    /// </field>
    /// <field name="EditableRows" type="Array">
    /// </field>
    /// <field name="Dimensions" type="Array">
    /// </field>
    /// <field name="Measures" type="Array">
    /// </field>
    /// <field name="NonEditableRows" type="Array">
    /// </field>
    /// <field name="EditableColumns" type="Array">
    /// </field>
    /// <field name="DateFormat" type="String">
    /// </field>
    /// <field name="ColumnsCanBeDeleted" type="Array">
    /// </field>
    /// <field name="UpperHeaderText" type="String">
    /// </field>
    /// <field name="DoNotExpand" type="Boolean">
    /// </field>
    /// <field name="RequireScrollOnFrozenBody" type="Boolean">
    /// </field>
    /// <field name="IsOnTop" type="Boolean">
    /// </field>
    /// <field name="GridEditedDone" type="Boolean">
    /// </field>
    /// <field name="IsOnCheckBoxTop" type="Boolean">
    /// </field>
    /// <field name="IsOnFrozenTop" type="Boolean">
    /// </field>
    /// <field name="DoNotRearrangeColumn" type="Boolean">
    /// </field>
    /// <field name="ColumnNameMapping" type="Object">
    /// </field>
    /// <field name="FrozenColumns" type="Array">
    /// </field>
    /// <field name="CheckBoxInfo" type="Object">
    /// </field>
    /// <field name="Menu" type="Object">
    /// </field>
    /// <field name="Menu1" type="Object">
    /// </field>
    /// <field name="Menu2" type="Object">
    /// </field>
    /// <field name="KnockoutScrollFunction" type="Object">
    /// </field>
    /// <field name="KnockoutScrollForFrozenFunction" type="Object">
    /// </field>
    /// <field name="KnockoutScrollForCheckBoxFunction" type="Object">
    /// </field>
    /// <field name="RequireRADBalancePopup" type="Boolean">
    /// </field>
    /// <field name="RequireRADExtraPopup" type="Boolean">
    /// </field>
    /// <field name="RequireLayouts" type="Boolean">
    /// </field>
    /// <field name="RequireConfiguration" type="Boolean">
    /// </field>
    /// <field name="RequireViews" type="Boolean">
    /// </field>
    /// <field name="RequireExportToExcel" type="Boolean">
    /// </field>
    /// <field name="RequireExportToPdf" type="Boolean">
    /// </field>
    /// <field name="ColumnNotToExport" type="Array">
    /// </field>
    /// <field name="PdfHeaderText" type="String">
    /// </field>
    /// <field name="Height" type="String">
    /// </field>
    /// <field name="RequireGrouping" type="Boolean">
    /// </field>
    /// <field name="RequireFilter" type="Boolean">
    /// </field>
    /// <field name="RequireSort" type="Boolean">
    /// </field>
    /// <field name="RequireMathematicalOperations" type="Boolean">
    /// </field>
    /// <field name="RequireSelectedRows" type="Boolean">
    /// </field>
    /// <field name="RequireEditGrid" type="Boolean">
    /// </field>
    /// <field name="RequireFullScreen" type="Boolean">
    /// </field>
    /// <field name="RequireRuleBasedColoring" type="Boolean">
    /// </field>
    /// <field name="RequireSliderFilter" type="Boolean">
    /// </field>
    /// <field name="RequireSearch" type="Boolean">
    /// </field>
    /// <field name="RequirePaging" type="Boolean">
    /// </field>
    /// <field name="RequireHideColumns" type="Boolean">
    /// </field>
    /// <field name="RequireFreezeColumns" type="Boolean">
    /// </field>
    /// <field name="RequireAbsoluteSort" type="Boolean">
    /// </field>
    /// <field name="RequireGroupExpandCollapse" type="Boolean">
    /// </field>
    /// <field name="AutoAdjust" type="com.ivp.rad.controls.neogrid.scripts.info.AutoAdjust">
    /// </field>
    /// <field name="RequireColumnSwap" type="Boolean">
    /// </field>
    /// <field name="RequireBodyClickClearSelection" type="Boolean">
    /// </field>
    /// <field name="UnfrozenFlag" type="Boolean">
    /// </field>
    /// <field name="FrozenFlag" type="Boolean">
    /// </field>
    /// <field name="CheckBoxFrozenFlag" type="Boolean">
    /// </field>
    /// <field name="RequirePastingDataOnDataFromExcel" type="Boolean">
    /// </field>
    /// <field name="ColumnAutoAdjustMapping" type="Object">
    /// </field>
    /// <field name="ColumnWidths" type="Object">
    /// </field>
    /// <field name="ExtraInfoPopupTitle" type="String">
    /// </field>
    /// <field name="EmptyGridText" type="String">
    /// </field>
    /// <field name="MessageBoxHandler" type="String">
    /// </field>
    /// <field name="RequireResizing" type="Boolean">
    /// </field>
    /// <field name="CssSearchTextBox" type="String">
    /// </field>
    /// <field name="CssClearFilter" type="String">
    /// </field>
    /// <field name="CssClearSelection" type="String">
    /// </field>
    /// <field name="CssClearSort" type="String">
    /// </field>
    /// <field name="CssClearGroup" type="String">
    /// </field>
    /// <field name="CssExportVisibleRows" type="String">
    /// </field>
    /// <field name="CssExportRows" type="String">
    /// </field>
    /// <field name="CssFilter" type="String">
    /// </field>
    /// <field name="CssFiltered" type="String">
    /// </field>
    /// <field name="CssRecordSummary" type="String">
    /// </field>
    /// <field name="CssGroupDropPanel" type="String">
    /// </field>
    /// <field name="CssUpperHeader" type="String">
    /// </field>
    /// <field name="CssGroupDiv" type="String">
    /// </field>
    /// <field name="CssPrevPage" type="String">
    /// </field>
    /// <field name="CssNextPage" type="String">
    /// </field>
    /// <field name="CssFirstPage" type="String">
    /// </field>
    /// <field name="CssLastPage" type="String">
    /// </field>
    /// <field name="CssPageTextBox" type="String">
    /// </field>
    /// <field name="CssStatusBar" type="String">
    /// </field>
    /// <field name="CssPageChange" type="String">
    /// </field>
    /// <field name="CssRemoveColumn" type="String">
    /// </field>
    /// <field name="ScrollCount" type="Number" integer="true">
    /// </field>
    /// <field name="GroupHeaderInfo" type="Object">
    /// </field>
    /// <field name="groupRowId" type="String">
    /// </field>
    /// <field name="groupRowIdFlag" type="Boolean">
    /// </field>
    /// <field name="groupHeaderToCheck" type="Array">
    /// </field>
    /// <field name="groupHeaderToUnCheck" type="Array">
    /// </field>
    /// <field name="checkedRowIndices" type="Array">
    /// </field>
    /// <field name="rowsToCheck" type="Array">
    /// </field>
    /// <field name="rowsToUnCheck" type="Array">
    /// </field>
    /// <field name="HeightInNormalView" type="Number" integer="true">
    /// </field>
    /// <field name="IsFullScreen" type="Boolean">
    /// </field>
    /// <field name="WidthInNormalView" type="Number" integer="true">
    /// </field>
    /// <field name="WheelStep" type="Number">
    /// </field>
    /// <field name="ShowTotalRecordCount" type="Boolean">
    /// </field>
    /// <field name="RequireInfiniteScroll" type="Boolean">
    /// </field>
    /// <field name="RightAlignHeaderForNumerics" type="Boolean">
    /// </field>
    /// <field name="CurrentFilteredColumn" type="String">
    /// </field>
    /// <field name="JsonData" type="String">
    /// </field>
    /// <field name="TableName" type="String">
    /// </field>
    /// <field name="RequireAddClientSideColumn" type="Boolean">
    /// </field>
    /// <field name="AutoGenerateIdColumn" type="Boolean">
    /// </field>
    /// <field name="RaiseGridUpdated" type="String">
    /// </field>
    /// <field name="RaiseGridBeginUpdate" type="String">
    /// </field>
    /// <field name="RaiseGridRender" type="String">
    /// </field>
    /// <field name="RaiseGridRenderComplete" type="String">
    /// </field>
    /// <field name="RaiseGridStartRender" type="String">
    /// </field>
    /// <field name="RaiseOnEditCommitChange" type="String">
    /// </field>
    /// <field name="KnockoutJsonData" type="String">
    /// </field>
    /// <field name="GridOffsetWidth" type="Number" integer="true">
    /// </field>
    /// <field name="StaticJsonData" type="String">
    /// </field>
    /// <field name="sizeJson" type="Object">
    /// </field>
    /// <field name="filterOperatorsEnum" type="Array">
    /// </field>
    /// <field name="DataSetDateTimeFormat" type="Object">
    /// </field>
    /// <field name="filterONColumn" type="String">
    /// </field>
    /// <field name="FilterData" type="Object">
    /// </field>
    /// <field name="IsMasterChildGrid" type="Boolean">
    /// </field>
    /// <field name="MasterGridId" type="String">
    /// </field>
    /// <field name="ParentGridId" type="String">
    /// </field>
    /// <field name="CurrentRowId" type="String">
    /// </field>
    /// <field name="MasterChildMapping" type="Object">
    /// </field>
    /// <field name="IsMasterGridSearch" type="Boolean">
    /// </field>
    /// <field name="ChildGridsToOpen" type="Array">
    /// </field>
    /// <field name="IdColumnNames" type="Array">
    /// </field>
    /// <field name="ParentIDColumnName" type="String">
    /// </field>
    /// <field name="ColumnsToDisplaySum" type="Array">
    /// </field>
    /// <field name="CustomInfoList" type="Array">
    /// </field>
    /// <field name="RaiseGridRenderList" type="Array">
    /// </field>
    /// <field name="ColumnsToHideList" type="Array">
    /// </field>
    /// <field name="ColumnNameMappingList" type="Array">
    /// </field>
    /// <field name="GridChildLevel" type="Number" integer="true">
    /// </field>
    /// <field name="RequireColumnAlign" type="Boolean">
    /// </field>
    /// <field name="ColumnAlignmentMapping" type="Array">
    /// </field>
    /// <field name="ChildGridMappedWidth" type="Object">
    /// </field>
    /// <field name="MasterChildMappedColumnValue" type="String">
    /// </field>
    /// <field name="ClientSideGrid" type="Boolean">
    /// </field>
    /// <field name="MasterGridSearchText" type="String">
    /// </field>
    /// <field name="RequirePagingMasterChildGrid" type="Array">
    /// </field>
    /// <field name="PageSizeMasterChildGrid" type="Array">
    /// </field>
    /// <field name="ColumnList" type="Array">
    /// </field>
    /// <field name="AllColumnList" type="Array">
    /// </field>
    /// <field name="ClearSerializationData" type="Boolean">
    /// </field>
    /// <field name="KnockOutJsonDataForScroll" type="String">
    /// </field>
    /// <field name="KnockOutJsonDataPreviousRecords" type="String">
    /// </field>
    /// <field name="GridCustomFormatMapping" type="Object">
    /// </field>
    /// <field name="CacheGriddata" type="Boolean">
    /// </field>
    /// <field name="ColumnCustomFormatMapping" type="Object">
    /// </field>
    /// <field name="CollapseAllGroupHeader" type="Boolean">
    /// </field>
    /// <field name="IsAdvanceSearch" type="Boolean">
    /// </field>
    /// <field name="RequireEditableRow" type="Boolean">
    /// </field>
    /// <field name="RaiseClickEvent" type="String">
    /// </field>
    /// <field name="EditableColumnsInfo" type="Array">
    /// </field>
    /// <field name="EditGridFocusOut" type="String">
    /// </field>
    /// <field name="taggingInfoID" type="String">
    /// </field>
    /// <field name="RequireTagging" type="Boolean">
    /// </field>
    /// <field name="RequireShadow" type="Boolean">
    /// </field>
    /// <field name="NumericColumnName" type="Array">
    /// </field>
    /// <field name="CssNormalRow" type="String">
    /// </field>
    /// <field name="CssAlternatingRow" type="String">
    /// </field>
    /// <field name="CssSelectedRow" type="String">
    /// </field>
    /// <field name="CssCheckedRow" type="String">
    /// </field>
    /// <field name="GridTheme" type="com.ivp.rad.controls.neogrid.scripts.info.Theme">
    /// </field>
    /// <field name="xlneochildgridParent" type="String">
    /// </field>
    /// <field name="xlneoMasterheaderbackground" type="String">
    /// </field>
    /// <field name="MasterChildEditableColumns" type="Array">
    /// </field>
    /// <field name="MasterChildEditableColumnInfo" type="Array">
    /// </field>
    /// <field name="AllChildGridIds" type="Array">
    /// </field>
    /// <field name="cellFocusOnEdit" type="String">
    /// </field>
    /// <field name="CustomHeaderInfo" type="Object">
    /// </field>
    /// <field name="ExistingLayoutInfo" type="Array">
    /// </field>
    /// <field name="HeaderIconList" type="Array">
    /// </field>
    /// <field name="RaiseGridCallBackBeforeExecute" type="String">
    /// </field>
    /// <field name="ViewColumns" type="Array">
    /// </field>
    /// <field name="ViewColumnsClone" type="Array">
    /// </field>
    /// <field name="RaiseGridCallBackForViews" type="String">
    /// </field>
    /// <field name="LayoutName" type="String">
    /// </field>
    /// <field name="CacheKey" type="String">
    /// </field>
    /// <field name="GroupContextMenu" type="Array">
    /// </field>
    /// <field name="RequireReOrderGroupColumns" type="Boolean">
    /// </field>
    /// <field name="uniqueValuesForColumn" type="String">
    /// </field>
    /// <field name="searchInfo" type="String">
    /// </field>
    /// <field name="RequireHideGroupColumnsWithoutSumHeader" type="Boolean">
    /// </field>
    /// <field name="IsInterOpInstalled" type="Boolean">
    /// </field>
    /// <field name="CreateDefaultGrouping" type="Array">
    /// </field>
    /// <field name="RequireMiniatureVersion" type="Boolean">
    /// </field>
    /// <field name="RequireExpandCollapseGrouping" type="Boolean">
    /// </field>
    /// <field name="ThrottlingTime" type="Number" integer="true">
    /// </field>
    /// <field name="FilterSplitter" type="String">
    /// </field>
    /// <field name="RequireRanking" type="Boolean">
    /// </field>
    /// <field name="DataInsight" type="Boolean">
    /// </field>
    /// <field name="CellInfoStyle" type="Object">
    /// </field>
    /// <field name="CustomFormatInfoClientSide" type="Object">
    /// </field>
    /// <field name="MaskingSuggestionInfo" type="Object">
    /// </field>
    /// <field name="ColumnsWithoutClientSideFunctionalityList" type="Array">
    /// </field>
    /// <field name="CustomFormatInfoClientSideList" type="Array">
    /// </field>
    /// <field name="ColumnWidthList" type="Array">
    /// </field>
    /// <field name="DistributionSuggestion" type="Boolean">
    /// </field>
    this.ColumnsNotToSum = [];
    this.ColumnsWithoutClientSideFunctionality = [];
    this.ColumnsToHide = [];
    this.ColumnNameMapping = {};
    this.WheelStep = 2;
    this.NumericColumnName = [];
    this.CustomHeaderInfo = {};
    this.ViewColumns = [];
    this.ExistingLayoutInfo = [];
    this.ViewColumnsClone = [];
    this.IsInterOpInstalled = false;
    this.CreateDefaultGrouping = [];
    this.RequireExpandCollapseGrouping = false;
    this.GridEditedDone = false;
    this.RequireRanking = true;
    this.DataInsight = false;
    this.CellInfoStyle = {};
    this.CustomFormatInfoClientSide = {};
    this.CustomFormatInfoClientSideList = [];
    this.SessionIdentifier = '';
    this.groupHeaderToUnCheck = [];
    this.groupHeaderToCheck = [];
    this.checkedRowIndices = [];
    this.MaskingSuggestionInfo = [];
}
com.ivp.rad.controls.neogrid.scripts.info.GridInfo.prototype = {
    RankingColumnInfo: null,
    ViewKey: null,
    GridId: null,
    CurrentPageId: null,
    SessionIdentifier: null,
    lastScrollLeft: 0,
    lastScrollLeftForFrozenNewDiv: 0,
    lastScrollTop: 0,
    NewScrollLeft: 0,
    NewScrollTop: 0,
    UserId: null,
    ColumnsWithoutClientSideFunctionality: null,
    ColumnsNotToSum: null,
    IdColumnName: null,
    ColumnsToHide: null,
    PageSize: 0,
    ItemText: null,
    EditableRows: null,
    Measures: null,
    Dimensions: null,
    NonEditableRows: null,
    EditableColumns: null,
    DateFormat: null,
    ColumnsCanBeDeleted: null,
    UpperHeaderText: null,
    DoNotExpand: false,
    MaskingSuggestionInfo:null,
    RequireScrollOnFrozenBody: false,
    IsOnTop: false,
    IsOnCheckBoxTop: false,
    IsOnFrozenTop: false,
    DoNotRearrangeColumn: false,
    ColumnNameMapping: null,
    FrozenColumns: null,
    CheckBoxInfo: null,
    Menu: null,
    Menu1: null,
    Menu2: null,
    DistributionSuggestion:false,
    KnockoutScrollFunction: null,
    KnockoutScrollForFrozenFunction: null,
    KnockoutScrollForCheckBoxFunction: null,
    RequireRADBalancePopup: false,
    RequireRADExtraPopup: false,
    RequireLayouts: false,
    RequireConfiguration: false,
    RequireViews: false,
    RequireExportToExcel: false,
    RequireExportToPdf: false,
    ColumnNotToExport: null,
    PdfHeaderText: null,
    Height: null,
    RequireGrouping: false,
    RequireFilter: false,
    DataInsight: false,
    RequireSort: false,
    RequireMathematicalOperations: false,
    RequireSelectedRows: false,
    RequireEditGrid: false,
    RequireFullScreen: false,
    RequireRuleBasedColoring: false,
    RequireSliderFilter: false,
    RequireSearch: false,
    RequirePaging: false,
    RequireHideColumns: false,
    RequireFreezeColumns: false,
    RequireAbsoluteSort: false,
    RequireGroupExpandCollapse: false,
    AutoAdjust: 0,
    RequireColumnSwap: false,
    RequireBodyClickClearSelection: false,
    UnfrozenFlag: false,
    FrozenFlag: false,
    CheckBoxFrozenFlag: false,
    RequirePastingDataOnDataFromExcel: false,
    ColumnAutoAdjustMapping: null,
    ColumnWidths: null,
    ExtraInfoPopupTitle: null,
    EmptyGridText: null,
    MessageBoxHandler: null,
    RequireResizing: false,
    CssSearchTextBox: null,
    CssClearFilter: null,
    CssClearSelection: null,
    CssClearSort: null,
    CssClearGroup: null,
    CssExportVisibleRows: null,
    CssExportRows: null,
    CssFilter: null,
    CssFiltered: null,
    CssRecordSummary: null,
    CssGroupDropPanel: null,
    CssUpperHeader: null,
    CssGroupDiv: null,
    CssPrevPage: null,
    CssNextPage: null,
    CssFirstPage: null,
    CssLastPage: null,
    CssPageTextBox: null,
    CssStatusBar: null,
    CssPageChange: null,
    CssRemoveColumn: null,
    ScrollCount: 0,
    GroupHeaderInfo: null,
    groupRowId: null,
    groupRowIdFlag: false,
    groupHeaderToCheck: null,
    groupHeaderToUnCheck: null,
    checkedRowIndices: null,
    rowsToCheck: null,
    rowsToUnCheck: null,
    HeightInNormalView: 0,
    IsFullScreen: false,
    WidthInNormalView: 0,
    WheelStep: 0,
    ShowTotalRecordCount: false,
    RequireInfiniteScroll: false,
    RightAlignHeaderForNumerics: false,
    CurrentFilteredColumn: null,
    JsonData: null,
    TableName: null,
    RequireAddClientSideColumn: false,
    AutoGenerateIdColumn: false,
    RaiseGridUpdated: null,
    RaiseGridBeginUpdate: null,
    RaiseGridRender: null,
    RaiseGridRenderComplete: null,
    RaiseGridStartRender: null,
    RaiseOnEditCommitChange: null,
    KnockoutJsonData: null,
    GridOffsetWidth: 0,
    StaticJsonData: null,
    sizeJson: null,
    filterOperatorsEnum: null,
    DataSetDateTimeFormat: null,
    filterONColumn: null,
    FilterData: null,
    IsMasterChildGrid: false,
    MasterGridId: null,
    ParentGridId: null,
    CurrentRowId: null,
    MasterChildMapping: null,
    IsMasterGridSearch: false,
    ChildGridsToOpen: null,
    IdColumnNames: null,
    ParentIDColumnName: null,
    ColumnsToDisplaySum: null,
    CustomInfoList: null,
    RaiseGridRenderList: null,
    ColumnsToHideList: null,
    ColumnNameMappingList: null,
    GridChildLevel: 0,
    RequireColumnAlign: false,
    ColumnAlignmentMapping: null,
    ChildGridMappedWidth: null,
    MasterChildMappedColumnValue: null,
    ClientSideGrid: false,
    MasterGridSearchText: null,
    RequirePagingMasterChildGrid: null,
    PageSizeMasterChildGrid: null,
    ColumnList: null,
    AllColumnList: null,
    ClearSerializationData: false,
    KnockOutJsonDataForScroll: null,
    KnockOutJsonDataPreviousRecords: null,
    GridCustomFormatMapping: null,
    CacheGriddata: false,
    ColumnCustomFormatMapping: null,
    CollapseAllGroupHeader: false,
    IsAdvanceSearch: false,
    RequireEditableRow: false,
    RaiseClickEvent: null,
    EditableColumnsInfo: null,
    EditGridFocusOut: null,
    taggingInfoID: null,
    RequireTagging: false,
    RequireShadow: false,
    NumericColumnName: null,
    CssNormalRow: null,
    CssAlternatingRow: null,
    CssSelectedRow: null,
    CssCheckedRow: null,
    GridTheme: 0,
    xlneochildgridParent: null,
    xlneoMasterheaderbackground: null,
    MasterChildEditableColumns: null,
    MasterChildEditableColumnInfo: null,
    AllChildGridIds: null,
    cellFocusOnEdit: null,
    CustomHeaderInfo: null,
    ExistingLayoutInfo: null,
    HeaderIconList: null,
    RaiseGridCallBackBeforeExecute: null,
    ViewColumns: null,
    ViewColumnsClone: null,
    RaiseGridCallBackForViews: null,
    LayoutName: null,
    CacheKey: null,
    GroupContextMenu: null,
    RequireReOrderGroupColumns: false,
    uniqueValuesForColumn: null,
    searchInfo: null,
    RequireHideGroupColumnsWithoutSumHeader: false,
    IsInterOpInstalled: false,
    CreateDefaultGrouping: null,
    RequireMiniatureVersion: false,
    RequireExpandCollapseGrouping: false,
    ThrottlingTime: 0,
    FilterSplitter: null,
    RequireRanking: false,
    CellInfoStyle: null,
    CustomFormatInfoClientSide: null,
    ColumnsWithoutClientSideFunctionalityList: null,
    CustomFormatInfoClientSideList: null,
    ColumnWidthList: null
}

////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.NoOfRowsToShow

com.ivp.rad.controls.neogrid.scripts.info.NoOfRowsToShow = function com_ivp_rad_controls_neogrid_scripts_info_NoOfRowsToShow() {
    /// <field name="RankingColumnInfo" type="String">
    /// Name of the column on which ranking is applied
    /// </field>
    /// <field name="isDense" type="com.ivp.rad.controls.neogrid.scripts.info.RankType">
    /// type of rank dense non dense
    /// </field>
    /// <field name="PartitionColumnInfo" type="Array">
    /// the list of columns on which partition is to be applied
    /// </field>
    /// <field name="groupingRequired" type="Boolean">
    /// to check if grouping is reqd or not
    /// </field>
    /// <field name="n" type="Number" integer="true">
    /// no of rows to be shown
    /// </field>
    /// <field name="rows" type="com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows">
    /// type of rows either top or bottom
    /// </field>
    /// <field name="rankingColumnDisplayName" type="String">
    /// </field>
    this.PartitionColumnInfo = [];
}
com.ivp.rad.controls.neogrid.scripts.info.NoOfRowsToShow.prototype = {
    RankingColumnInfo: null,
    isDense: 0,
    PartitionColumnInfo: null,
    groupingRequired: false,
    n: 0,
    rows: 0,
    rankingColumnDisplayName: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.RankingInfo

com.ivp.rad.controls.neogrid.scripts.info.RankingInfo = function com_ivp_rad_controls_neogrid_scripts_info_RankingInfo() {
    /// <field name="RankingColumnInfo" type="String">
    /// Name of the column on which ranking is applied
    /// </field>
    /// <field name="isDense" type="com.ivp.rad.controls.neogrid.scripts.info.RankType">
    /// type of rank dense non dense
    /// </field>
    /// <field name="PartitionColumnInfo" type="Array">
    /// the list of columns on which partition is to be applied
    /// </field>
    /// <field name="groupingRequired" type="Boolean">
    /// to check if grouping is reqd or not
    /// </field>
    /// <field name="RankingColumnDisplayName" type="String">
    /// </field>
    /// <field name="rows" type="com.ivp.rad.controls.neogrid.scripts.info.ViewTypeRows">
    /// </field>
    /// <field name="topBottomCount" type="Number" integer="true">
    /// </field>
    /// <field name="AscDesc" type="com.ivp.rad.controls.neogrid.scripts.info.SortType">
    /// </field>
    this.PartitionColumnInfo = [];
}
com.ivp.rad.controls.neogrid.scripts.info.RankingInfo.prototype = {
    RankingColumnInfo: null,
    isDense: 0,
    PartitionColumnInfo: null,
    groupingRequired: false,
    RankingColumnDisplayName: null,
    RankingColumnDisplayNameOld: null,
    rows: 0,
    topBottomCount: 0,
    AscDesc: 0,
    rankingOf:false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.Select2Data

com.ivp.rad.controls.neogrid.scripts.info.Select2Data = function com_ivp_rad_controls_neogrid_scripts_info_Select2Data() {
    /// <field name="id" type="String">
    /// </field>
    /// <field name="text" type="String">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.Select2Data.prototype = {
    id: null,
    text: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.ExportPDFInfo

com.ivp.rad.controls.neogrid.scripts.info.ExportPDFInfo = function com_ivp_rad_controls_neogrid_scripts_info_ExportPDFInfo() {
    /// <field name="FrozenColumn" type="Array">
    /// </field>
    /// <field name="OrietationPDF" type="com.ivp.rad.controls.neogrid.scripts.info.Orietation">
    /// </field>
    /// <field name="PageOrderPDF" type="com.ivp.rad.controls.neogrid.scripts.info.PageOrder">
    /// </field>
    /// <field name="FitToPage" type="Boolean">
    /// </field>
    /// <field name="PageSize" type="com.ivp.rad.controls.neogrid.scripts.info.PdfPageSize">
    /// </field>
    this.FrozenColumn = [];
}
com.ivp.rad.controls.neogrid.scripts.info.ExportPDFInfo.prototype = {
    FrozenColumn: null,
    OrietationPDF: 0,
    PageOrderPDF: 0,
    FitToPage: false,
    PageSize: 0
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.LayoutInfo

com.ivp.rad.controls.neogrid.scripts.info.LayoutInfo = function com_ivp_rad_controls_neogrid_scripts_info_LayoutInfo() {
    /// <field name="Action" type="com.ivp.rad.controls.neogrid.scripts.info.Action">
    /// </field>
    /// <field name="ViewName" type="String">
    /// </field>
    /// <field name="IsDefault" type="Boolean">
    /// </field>
    /// <field name="IsShared" type="Boolean">
    /// </field>
    /// <field name="NewViewName" type="String">
    /// </field>
    /// <field name="AllLayouts" type="Array">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.LayoutInfo.prototype = {
    Action: 0,
    ViewName: null,
    IsDefault: false,
    IsShared: false,
    NewViewName: null,
    AllLayouts: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.Layouts

com.ivp.rad.controls.neogrid.scripts.info.Layouts = function com_ivp_rad_controls_neogrid_scripts_info_Layouts() {
    /// <field name="Name" type="String">
    /// </field>
    /// <field name="UserName" type="String">
    /// </field>
    /// <field name="IsSelected" type="Boolean">
    /// </field>
    /// <field name="IsDefault" type="Boolean">
    /// </field>
    /// <field name="IsShared" type="Boolean">
    /// </field>
    /// <field name="FilePath" type="String">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.Layouts.prototype = {
    Name: null,
    UserName: null,
    IsSelected: false,
    IsDefault: false,
    IsShared: false,
    FilePath: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.MergedLayoutInfo

com.ivp.rad.controls.neogrid.scripts.info.MergedLayoutInfo = function com_ivp_rad_controls_neogrid_scripts_info_MergedLayoutInfo() {
    /// <field name="ExistingLayoutInfo" type="Object">
    /// </field>
    this.ExistingLayoutInfo = {};
}
com.ivp.rad.controls.neogrid.scripts.info.MergedLayoutInfo.prototype = {
    ExistingLayoutInfo: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.RuleBasedColoringInfo

com.ivp.rad.controls.neogrid.scripts.info.RuleBasedColoringInfo = function com_ivp_rad_controls_neogrid_scripts_info_RuleBasedColoringInfo() {
    /// <field name="RuleText" type="String">
    /// </field>
    /// <field name="ColorCode" type="String">
    /// </field>
    /// <field name="ColumnName" type="String">
    /// </field>
    /// <field name="Operator" type="String">
    /// </field>
    /// <field name="RightOperand" type="String">
    /// </field>
    /// <field name="DataType" type="String">
    /// </field>
    /// <field name="OpType" type="com.ivp.rad.controls.neogrid.scripts.info.RuleOperationType">
    /// </field>
    /// <field name="RuleId" type="Number" integer="true">
    /// </field>
    /// <field name="RowColor" type="Boolean">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.RuleBasedColoringInfo.prototype = {
    RuleText: null,
    ColorCode: null,
    ColumnName: null,
    Operator: null,
    RightOperand: null,
    DataType: null,
    OpType: 0,
    RuleId: 0,
    RowColor: false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.SortInfo

com.ivp.rad.controls.neogrid.scripts.info.SortInfo = function com_ivp_rad_controls_neogrid_scripts_info_SortInfo() {
    /// <field name="ColumnName" type="String">
    /// </field>
    /// <field name="SortOrder" type="com.ivp.rad.controls.neogrid.scripts.info.Order">
    /// </field>
    /// <field name="IsGrouped" type="Boolean">
    /// </field>
    /// <field name="IsAbsoluteSorted" type="Boolean">
    /// </field>
    /// <field name="IsOrderBy" type="Boolean">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.SortInfo.prototype = {
    ColumnName: null,
    SortOrder: 0,
    IsGrouped: false,
    IsAbsoluteSorted: false,
    IsOrderBy: false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.ViewInfo

com.ivp.rad.controls.neogrid.scripts.info.ViewInfo = function com_ivp_rad_controls_neogrid_scripts_info_ViewInfo() {
    /// <field name="ColumnName" type="String">
    /// </field>
    /// <field name="DataType" type="String">
    /// </field>
    /// <field name="GroupName" type="String">
    /// </field>
    /// <field name="DisplayName" type="String">
    /// </field>
    /// <field name="color" type="String">
    /// </field>
    /// <field name="tooltip" type="Array">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.ViewInfo.prototype = {
    ColumnName: null,
    DataType: null,
    GroupName: null,
    DisplayName: null,
    color: null,
    tooltip: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.DictionaryEntryObj

com.ivp.rad.controls.neogrid.scripts.info.DictionaryEntryObj = function com_ivp_rad_controls_neogrid_scripts_info_DictionaryEntryObj() {
    /// <field name="key" type="String">
    /// </field>
    /// <field name="value" type="String">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.DictionaryEntryObj.prototype = {
    key: null,
    value: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.SearchInfo

com.ivp.rad.controls.neogrid.scripts.info.SearchInfo = function com_ivp_rad_controls_neogrid_scripts_info_SearchInfo() {
    /// <field name="key" type="String">
    /// </field>
    /// <field name="title" type="String">
    /// </field>
    /// <field name="tags" type="String">
    /// </field>
    /// <field name="category" type="String">
    /// </field>
    /// <field name="dataType" type="String">
    /// </field>
    /// <field name="ddKeyType" type="String">
    /// </field>
    /// <field name="ddKey" type="String">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.info.SearchInfo.prototype = {
    key: null,
    title: null,
    tags: null,
    category: null,
    dataType: null,
    ddKeyType: null,
    ddKey: null
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.info.SearchInfoObj

com.ivp.rad.controls.neogrid.scripts.info.SearchInfoObj = function com_ivp_rad_controls_neogrid_scripts_info_SearchInfoObj() {
    /// <field name="measures" type="Array">
    /// </field>
    /// <field name="dimensions" type="Array">
    /// </field>
    this.measures = [];
    this.dimensions = [];
}
com.ivp.rad.controls.neogrid.scripts.info.SearchInfoObj.prototype = {
    measures: null,
    dimensions: null
}


Type.registerNamespace('com.ivp.rad.controls.neogrid.scripts.Info');

////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.Info.CollapseGroupInfo

com.ivp.rad.controls.neogrid.scripts.Info.CollapseGroupInfo = function com_ivp_rad_controls_neogrid_scripts_Info_CollapseGroupInfo() {
    /// <field name="collapsedInfo" type="Array">
    /// </field>
    /// <field name="collapseAll" type="Boolean">
    /// </field>
    this.collapsedInfo = [];
}
com.ivp.rad.controls.neogrid.scripts.Info.CollapseGroupInfo.prototype = {
    collapsedInfo: null,
    collapseAll: false
}


////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.scripts.Info.CollapseInfo

com.ivp.rad.controls.neogrid.scripts.Info.CollapseInfo = function com_ivp_rad_controls_neogrid_scripts_Info_CollapseInfo() {
    /// <field name="groupRowId" type="String">
    /// </field>
    /// <field name="isCollpased" type="Boolean">
    /// </field>
}
com.ivp.rad.controls.neogrid.scripts.Info.CollapseInfo.prototype = {
    groupRowId: null,
    isCollpased: false
}


Type.registerNamespace('com.ivp.rad.controls.neogrid.service');

////////////////////////////////////////////////////////////////////////////////
// com.ivp.rad.controls.neogrid.service.RADWebServiceException

com.ivp.rad.controls.neogrid.service.RADWebServiceException = function com_ivp_rad_controls_neogrid_service_RADWebServiceException() {
}
com.ivp.rad.controls.neogrid.service.RADWebServiceException.prototype = {

    get_message: function com_ivp_rad_controls_neogrid_service_RADWebServiceException$get_message() {
        /// <value type="String"></value>
        return '';
    },

    get_statusCode: function com_ivp_rad_controls_neogrid_service_RADWebServiceException$get_statusCode() {
        /// <value type="Number" integer="true"></value>
        return 0;
    },

    get_errorObject: function com_ivp_rad_controls_neogrid_service_RADWebServiceException$get_errorObject() {
        /// <value type="Object"></value>
        return null;
    }
}


com.ivp.rad.controls.neogrid.scripts.BindChildGrid.registerClass('com.ivp.rad.controls.neogrid.scripts.BindChildGrid');
com.ivp.rad.controls.neogrid.scripts.Body.registerClass('com.ivp.rad.controls.neogrid.scripts.Body');
com.ivp.rad.controls.neogrid.scripts.ClientDataController.registerClass('com.ivp.rad.controls.neogrid.scripts.ClientDataController');
com.ivp.rad.controls.neogrid.scripts.CustomFormatter.registerClass('com.ivp.rad.controls.neogrid.scripts.CustomFormatter');
com.ivp.rad.controls.neogrid.scripts.PushData.registerClass('com.ivp.rad.controls.neogrid.scripts.PushData');
com.ivp.rad.controls.neogrid.scripts.EditGrid.registerClass('com.ivp.rad.controls.neogrid.scripts.EditGrid');
com.ivp.rad.controls.neogrid.scripts.ElementInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.ElementInfo');
com.ivp.rad.controls.neogrid.scripts.ElementIDManager.registerClass('com.ivp.rad.controls.neogrid.scripts.ElementIDManager');
com.ivp.rad.controls.neogrid.scripts.GUIElementHelper.registerClass('com.ivp.rad.controls.neogrid.scripts.GUIElementHelper');
com.ivp.rad.controls.neogrid.scripts.GridUIHelper.registerClass('com.ivp.rad.controls.neogrid.scripts.GridUIHelper');
com.ivp.rad.controls.neogrid.scripts.EvalManager.registerClass('com.ivp.rad.controls.neogrid.scripts.EvalManager');
com.ivp.rad.controls.neogrid.scripts.EventsBody.registerClass('com.ivp.rad.controls.neogrid.scripts.EventsBody');
com.ivp.rad.controls.neogrid.scripts.DelegateEventType.registerClass('com.ivp.rad.controls.neogrid.scripts.DelegateEventType');
com.ivp.rad.controls.neogrid.scripts.EventType.registerClass('com.ivp.rad.controls.neogrid.scripts.EventType');
com.ivp.rad.controls.neogrid.scripts.ExportToExcel.registerClass('com.ivp.rad.controls.neogrid.scripts.ExportToExcel');
com.ivp.rad.controls.neogrid.scripts.ExportToPdf.registerClass('com.ivp.rad.controls.neogrid.scripts.ExportToPdf');
com.ivp.rad.controls.neogrid.scripts.Filter.registerClass('com.ivp.rad.controls.neogrid.scripts.Filter');
com.ivp.rad.controls.neogrid.scripts.Footer.registerClass('com.ivp.rad.controls.neogrid.scripts.Footer');
com.ivp.rad.controls.neogrid.scripts.GridEngine.registerClass('com.ivp.rad.controls.neogrid.scripts.GridEngine');
com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.EventHandlerInfo');
com.ivp.rad.controls.neogrid.scripts.ServiceInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.ServiceInfo');
com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs.registerClass('com.ivp.rad.controls.neogrid.scripts.GridColumnHeaderCellEventArgs');
com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.registerClass('com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager');
com.ivp.rad.controls.neogrid.scripts.Group.registerClass('com.ivp.rad.controls.neogrid.scripts.Group');
com.ivp.rad.controls.neogrid.scripts.Grid.registerClass('com.ivp.rad.controls.neogrid.scripts.Grid', Sys.UI.Control);
com.ivp.rad.controls.neogrid.scripts._manageViews.registerClass('com.ivp.rad.controls.neogrid.scripts._manageViews');
com.ivp.rad.controls.neogrid.scripts.ManageColumns.registerClass('com.ivp.rad.controls.neogrid.scripts.ManageColumns');
com.ivp.rad.controls.neogrid.scripts.ManageEvents.registerClass('com.ivp.rad.controls.neogrid.scripts.ManageEvents');
com.ivp.rad.controls.neogrid.scripts.ManageHeader.registerClass('com.ivp.rad.controls.neogrid.scripts.ManageHeader');
com.ivp.rad.controls.neogrid.scripts.ManageLayouts.registerClass('com.ivp.rad.controls.neogrid.scripts.ManageLayouts');
com.ivp.rad.controls.neogrid.scripts.ManagePopups.registerClass('com.ivp.rad.controls.neogrid.scripts.ManagePopups');
com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.registerClass('com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring');
com.ivp.rad.controls.neogrid.scripts.Search.registerClass('com.ivp.rad.controls.neogrid.scripts.Search');
com.ivp.rad.controls.neogrid.scripts.SliderFilter.registerClass('com.ivp.rad.controls.neogrid.scripts.SliderFilter');
com.ivp.rad.controls.neogrid.scripts.Sort.registerClass('com.ivp.rad.controls.neogrid.scripts.Sort');
com.ivp.rad.controls.neogrid.scripts.UpperHeader.registerClass('com.ivp.rad.controls.neogrid.scripts.UpperHeader');
com.ivp.rad.controls.neogrid.scripts.info.ColumnInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.ColumnInfo');
com.ivp.rad.controls.neogrid.scripts.info.DataType.registerClass('com.ivp.rad.controls.neogrid.scripts.info.DataType');
com.ivp.rad.controls.neogrid.scripts.info.AddRemoveColumnInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.AddRemoveColumnInfo');
com.ivp.rad.controls.neogrid.scripts.info.HiddenColumnInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.HiddenColumnInfo');
com.ivp.rad.controls.neogrid.scripts.info.FrozenColumnInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.FrozenColumnInfo');
com.ivp.rad.controls.neogrid.scripts.info.ContextMenuCellInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.ContextMenuCellInfo');
com.ivp.rad.controls.neogrid.scripts.info.CustomRowDataInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.CustomRowDataInfo');
com.ivp.rad.controls.neogrid.scripts.info.CustomCellDatainfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.CustomCellDatainfo');
com.ivp.rad.controls.neogrid.scripts.info.CellExtraChildExchangeInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.CellExtraChildExchangeInfo');
com.ivp.rad.controls.neogrid.scripts.info.CustomHeaderDataInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.CustomHeaderDataInfo');
com.ivp.rad.controls.neogrid.scripts.info.ChangedRowInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.ChangedRowInfo');
com.ivp.rad.controls.neogrid.scripts.info.ChangedCellInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.ChangedCellInfo');
com.ivp.rad.controls.neogrid.scripts.info.EditableColumnInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.EditableColumnInfo');
com.ivp.rad.controls.neogrid.scripts.info.FilterInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.FilterInfo');
com.ivp.rad.controls.neogrid.scripts.info.GridExtraInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.GridExtraInfo');
com.ivp.rad.controls.neogrid.scripts.info.RADGridWghtAvgInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.RADGridWghtAvgInfo');
com.ivp.rad.controls.neogrid.scripts.info.ColumnLevelMathematicalOperationsInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.ColumnLevelMathematicalOperationsInfo');
com.ivp.rad.controls.neogrid.scripts.info.PushDataInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.PushDataInfo');
com.ivp.rad.controls.neogrid.scripts.info.PushDataCellInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.PushDataCellInfo');
com.ivp.rad.controls.neogrid.scripts.info.PushResult.registerClass('com.ivp.rad.controls.neogrid.scripts.info.PushResult');
com.ivp.rad.controls.neogrid.scripts.info.GridInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.GridInfo');
com.ivp.rad.controls.neogrid.scripts.info.NoOfRowsToShow.registerClass('com.ivp.rad.controls.neogrid.scripts.info.NoOfRowsToShow');
com.ivp.rad.controls.neogrid.scripts.info.RankingInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.RankingInfo');
com.ivp.rad.controls.neogrid.scripts.info.Select2Data.registerClass('com.ivp.rad.controls.neogrid.scripts.info.Select2Data');
com.ivp.rad.controls.neogrid.scripts.info.ExportPDFInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.ExportPDFInfo');
com.ivp.rad.controls.neogrid.scripts.info.LayoutInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.LayoutInfo');
com.ivp.rad.controls.neogrid.scripts.info.Layouts.registerClass('com.ivp.rad.controls.neogrid.scripts.info.Layouts');
com.ivp.rad.controls.neogrid.scripts.info.MergedLayoutInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.MergedLayoutInfo');
com.ivp.rad.controls.neogrid.scripts.info.RuleBasedColoringInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.RuleBasedColoringInfo');
com.ivp.rad.controls.neogrid.scripts.info.SortInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.SortInfo');
com.ivp.rad.controls.neogrid.scripts.info.ViewInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.ViewInfo');
com.ivp.rad.controls.neogrid.scripts.info.DictionaryEntryObj.registerClass('com.ivp.rad.controls.neogrid.scripts.info.DictionaryEntryObj');
com.ivp.rad.controls.neogrid.scripts.info.SearchInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.info.SearchInfo');
com.ivp.rad.controls.neogrid.scripts.info.SearchInfoObj.registerClass('com.ivp.rad.controls.neogrid.scripts.info.SearchInfoObj');
com.ivp.rad.controls.neogrid.scripts.Info.CollapseGroupInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.Info.CollapseGroupInfo');
com.ivp.rad.controls.neogrid.scripts.Info.CollapseInfo.registerClass('com.ivp.rad.controls.neogrid.scripts.Info.CollapseInfo');
com.ivp.rad.controls.neogrid.service.RADWebServiceException.registerClass('com.ivp.rad.controls.neogrid.service.RADWebServiceException');
com.ivp.rad.controls.neogrid.scripts.ClientDataController._SEPARATOR = '#\u2021#';
com.ivp.rad.controls.neogrid.scripts.EvalManager.eventHandlerList = [];
com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventHeaderCellCellCreated = 'headerCellCreated';
com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnServiceCompleted = 'onServiceCompleted';
com.ivp.rad.controls.neogrid.scripts.DelegateEventType.eventOnEventFired = 'onEventFired';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DEFAULT = 'Default';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLIENT_SIDE_BINDING = 'ClientSideBinding';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CANCEL_WHOLE_EDIT_INFO = 'CancelWholeEditInfo';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CANCEL_SINGLE_CELL_EDIT_INFO = 'CancelSingleCellEditInfo';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MULTIPLE_GROUPS = 'MultipleGrouping';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_COLUMNHTML = 'GET_COLUMNHTML';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_COMMENT = 'EVENT_SAVE_COMMENT';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DELETE_COMMENT = 'EVENT_DELETE_COMMENT';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT = 'Sort';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SORT_REMOVE_ALL = 'SortRemoveAll';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_SORT = 'RemoveSort';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER = 'Filter';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_BULK = 'FilterBulk';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE = 'FilterRemove';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_REMOVE_ALL = 'FilterRemoveAll';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_LIST = 'FilterList';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_SLIDER = 'FilterSlider';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_SLIDER_REMOVE = 'FilterSliderRemove';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_MIN_MAX_COLUMN = 'FilterMinMaxColumn';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_SLIDER_REMOVE_ALL = 'FilterSliderRemoveAll';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_SINGLE_FILTER = 'RemoveSingleFilter';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RESIZE_COLUMN = 'ResizeColumn';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP = 'Group';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GROUP_REMOVE_ALL = 'GroupRemoveAll';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RESET_TO_DEFAULT = 'ResetToDefault';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION = 'ApplyConfiguration';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_CONFIGURATION_WITHOUT_LAYOUT = 'ApplyConfigurationWithoutLayout';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_MASKING = 'ApplyMasking';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_COFIGURATION_WITH_NEW_LAYOUT = 'ApplyConfigurationWithNewLayout';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_SELECTED = 'CellSelected';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_UNSELECTED = 'CellUnSelected';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_ROW_UNSELECTED_ALL = 'RowAndCellUnSelectedAll';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CELL_DRAG_SELECT_UNSELECT = 'CellDragSelectedUnSelected';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_SELECTED = 'RowSelected';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_SELECTED_ONE = 'RowSelectedOne';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED = 'RowSelectedWithCheckBox';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED = 'RowUnSelectedWithCheckBox';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_SELECTED_ALL = 'RowWithCheckboxSelectedAll';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_UNSELECTED = 'RowUnSelected';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_UNSELECTED_ALL = 'RowUnSelectedAll';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_CHECKBOX_UNSELECTED_ALL = 'RowWithCheckboxUnSelectedAll';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_GROUP_HEADER_CHECKBOX_SELECTED = 'RowWithGroupHeaderCheckboxSelected';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_WITH_GROUP_HEADER_CHECKBOX_UNSELECTED = 'RowWithGroupHeaderCheckboxUnSelected';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_MY_VIEW = 'SaveMyView';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DELETE_MY_VIEW = 'DeleteMyView';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_MY_VIEW = 'LoadMyView';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_LOAD_DEFAULT_VIEW = 'LoadDefaultView';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MANAGE_VIEW = 'ManageMyView';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_MANAGE_VIEW = 'SaveMyManageView';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_HIDE_COLUMN = 'HideColumn';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_HIDE_COLUMN_MULTIPLE = 'HideColumnMultiple';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_COLUMN = 'UnHideColumn';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_COLUMN_MULTIPLE = 'UnHideColumnMultiple';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UNHIDE_ALL_COLUMN = 'UnHideAllColumn';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SEARCH = 'Search';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_GRID_SEARCH = 'MasterGridSearch';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_SEARCH = 'RemoveSearch';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_COLUMN = 'Freeze';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_REMOVE_COLUMN = 'FreezeRemove';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FREEZE_REMOVE_COLUMN_ALL = 'FreezeRemoveAll';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_EXCEL = 'ExportToExcel';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_VISIBLE_TO_EXCEL = 'ExportVisibleToExcel';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_CHECKED_ROWS = 'ExportCheckedRows';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_PIVOT_ROWS = 'ExportPivotRows';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPORT_TO_PDF = 'ExportToPDF';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CUSTOM_FORMATTER = 'CustomFormatter';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_CUSTOM_FORMATTING = 'SaveCustomFormatting';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_EDITABLEROWS = 'UpdateEditableRows';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_TOTAL_PAGES_REQUEST = 'TotalPageRequest';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PAGE_CHANGE_EVENT = 'PageChangeEvent';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MAX_PAGE_SIZE_CHANGE_EVENT = 'MaxPageSizeEvent';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_SELECTED_INFO = 'GetSelectionMathematicalInfo';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MERGE_HEADERS = 'MergeHeaders';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_KEY = 'GetRowKeys';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CHECK_ROW_IF_NONE_CHECKED = 'CheckRowIfNoneChecked';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CHECK_ROW_LIST_IF_NONE_CHECKED = 'CheckRowListIfNoneChecked';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_KEY_VALUE = 'GetRowKeyValue';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_USER_DATA = 'GetRowUserData';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_COLUMN_WIDTHS = 'SaveColumnWidths';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_GRID = 'UpdateGrid';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_GRID_WITHOUT_REFERESH = 'UpdateGridWithoutReferesh';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_GRID_DELETE_ROW = 'EventUpdateGridDeleteRow';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DISABLED_CHECKED_ROWS = 'GetDisbaledCheckedRows';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_ROWSINFO = 'GetRowsInfo';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPAND = 'Expand';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_AUDIT_GRID_DATA = 'SaveAuditGridData';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSE = 'Collapse';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_EXPANDALL = 'ExpandAll';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ROW_COLLAPSEALL = 'CollapseAll';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DO_NOTHING = 'DO_NOTHING';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_WGHTAVG_COLUMN_SELECTED = 'WghtAvg_Column_Selected';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REARRANGE_COLUMN_DROP = 'Rearrange_Column_Drop';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REARRANGE_MULTIPLE_COLUMN = 'Rearrange_Multiple_Column';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DISPOSE = 'Dispose';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_CHECKED_ROWS = 'GetCheckedRows';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_ADD_COLUMNS = 'AddColumns';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_COLUMNS = 'RemoveColumns';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_ROW_DATA_INFO = 'UpdateRowDataInfo';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_RADBALANCEPOPUP_DATASOURCE = 'UpdateBalancePopupDataSource';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_GET_RULE_INTELLISENSE = 'GetRuleIntellisense';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXECUTE_RULE = 'ExecuteRule';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RULE_BASED_COLORING = 'RuleBasedColoring';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_APPLY_EDIT_AUDIT = 'ApplyEditAudit';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_PASTE_DATA_FROM_EXCEL = 'PasteDataFromExcel';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_SAVE_PASTED_DATA_FROM_EXCEL = 'SavePastedDataFromExcel';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_COLUMN_LEVEL_MATHEMATICAL_OPERATIONS = 'ColumnLevelMathematicalOperations';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_DATA_PUSH = 'DataPush';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_FILTER_DATA = 'FilterData';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_CLEAR_FILTER_DATA = 'ClearFilterData';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_MASTER_CHILD_GRID = 'FetchChildGridData';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_RANKING_COLUMN_INFO = 'RankingColumnInfo';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_REMOVE_RANKING = 'RemoveRanking';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_UPDATE_DATA_WITH_TICKS = 'UpdateDataWithTicks';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_COLLAPSE_LEVEL = 'CollapseLevel';
com.ivp.rad.controls.neogrid.scripts.EventType.evenT_EXPAND_LEVEL = 'ExpandLevel';
com.ivp.rad.controls.neogrid.scripts.GridEventHandlerManager.eventHandlerList = [];
com.ivp.rad.controls.neogrid.scripts.Group.childLevel = 1;
com.ivp.rad.controls.neogrid.scripts.Group.isFirstLevelGroup = false;
com.ivp.rad.controls.neogrid.scripts.Grid._splitteR_KEYWORD = '\u02d8';
com.ivp.rad.controls.neogrid.scripts.ManageLayouts._defaultdivcounter = 0;
com.ivp.rad.controls.neogrid.scripts.ManageLayouts._shareddivcounter = 0;
com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleList = [];
com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.ruleListToPersistInfo = [];
com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.listColumnNames = null;
com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.rulesExist = false;
com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.cntrToMaintainindexruleList = 0;
com.ivp.rad.controls.neogrid.scripts.RuleBasedColoring.cntToMaintainIndex = 0;
com.ivp.rad.controls.neogrid.scripts.SliderFilter._SEPARATOR = '#\u2021#';
com.ivp.rad.controls.neogrid.scripts.SliderFilter._isO_LONG_DATE_FORMAT = 'yyyyMMdd HH:mm:ss';
com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsSequenceForLayouts = null;
com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsHiddenForLayouts = null;
com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsColumnsVisibleForLayouts = null;
com.ivp.rad.controls.neogrid.scripts.UpperHeader.viewsCustomFormatMappingForLayouts = null;
com.ivp.rad.controls.neogrid.scripts.UpperHeader.isRuleBasedColoringFromView = false;
com.ivp.rad.controls.neogrid.scripts.UpperHeader.isLayoutFromView = false;
com.ivp.rad.controls.neogrid.scripts.UpperHeader.isRuleBasedColorFromView = false;
com.ivp.rad.controls.neogrid.scripts.UpperHeader.isEachRuleFromView = false;
com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_int = 'xs_int';
com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_string = 'xs_string';
com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_decimal = 'xs_decimal';
com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_double = 'xs_double';
com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_boolean = 'xs_boolean';
com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_dateTime = 'xs_dateTime';
com.ivp.rad.controls.neogrid.scripts.info.DataType.xs_anyType = 'xs_anyType';

// ---- Do not remove this footer ----
// This script was generated using Script# v0.5.5.0 (http://projects.nikhilk.net/ScriptSharp)
// -----------------------------------
